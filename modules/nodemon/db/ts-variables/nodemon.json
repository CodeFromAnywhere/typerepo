{
  "createdAt": 1666264754881,
  "updatedAt": 1666264754881,
  "deletedAt": 0,
  "createdFirstAt": 1666264754881,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "nodemon",
  "slug": "nodemon",
  "operationRelativeTypescriptFilePath": "src/nodemon.ts",
  "type": {
    "rawType": "(operationName: string, cliFunctionName: string, vars?: string[] | undefined, manualProjectRoot?: string | undefined) => Promise<void>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  operationName: string,\n  /**\n   * name of the function that you want to run the cli from\n   *\n   * by convention, we are going to execute the `build/cli/[fnName].cli.js` file\n   */\n  cliFunctionName: string,\n  /**\n   * vars that need to be passed to the cli\n   */\n  vars?: string[],\n  /**\n   * manual project root for the operation to run\n   */\n  manualProjectRoot?: string\n): Promise<void> => {\n  const operationPath = await getOperationPath(operationName, {\n    manualProjectRoot,\n  });\n\n  if (!operationPath) {\n    console.log(`${operationName} not found`);\n    return;\n  }\n\n  const cliPath = `build/cli/${cliFunctionName}.cli.js`;\n  const absoluteCliPath = path.join(operationPath, cliPath);\n\n  if (!fs.existsSync(absoluteCliPath)) {\n    log(`${absoluteCliPath} not found (nodemon)`, { type: \"error\" });\n    return;\n  }\n  const command = `node ${cliPath} ${vars ? ` ${vars.join(\" \")}` : \"\"}`;\n\n  const process = spawn(command, {\n    cwd: operationPath,\n    shell: true,\n    stdio: \"inherit\",\n  });\n  //\n  process\n    .on(\"exit\", (code) => {\n      log(\n        `Process ${cliFunctionName} has ended with code ${code}, restarting...`,\n        { type: \"important\" }\n      );\n\n      nodemon(operationName, cliFunctionName, vars, manualProjectRoot);\n    })\n    .on(\"data\", (message) => {\n      log(message);\n    })\n    .on(\"error\", (err) => {\n      log(`${err.name} Error: ${err.message}`, { type: \"error\" });\n    });\n}",
  "description": "",
  "id": "hisgmysdrrfxngmtefuggyne"
}