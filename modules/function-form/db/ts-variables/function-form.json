{
  "createdAt": 1667379085756,
  "updatedAt": 1667379085756,
  "deletedAt": 0,
  "createdFirstAt": 1667379085756,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "FunctionForm",
  "slug": "function-form",
  "operationRelativeTypescriptFilePath": "src/FunctionForm.tsx",
  "type": {
    "rawType": "<T extends (...params: any[]) => any>(props: { tsFunction: any; submitFunction?: T | undefined; withResult?: ((result: unknown) => void) | undefined; withApiResult?: ((result: any) => void) | undefined; initialValues?: any[] | undefined; hideResult?: boolean | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T extends (...params: any[]) => any>(props: {\n  /**\n   * Add the tsfunction here imported from `your-operation/db/ts-functions/[function-name].json` directly\n   *\n   * Typed as `any` because you can import it from JSON, but this should be a `TsFunction`.\n   *\n   * @see TsFunction\n   */\n  tsFunction: any;\n  /**\n   * For js functions, provide the function to be executed here. If not given, it will try to use the api.\n   *\n   * NB: this should be the same function as the function you provide the index of at `tsFunction`\n   */\n  submitFunction?: T;\n  /**\n   * If you provide a `submitFunction`, you can also provide a callback that does something with the result of the function\n   */\n  withResult?: (result: WithoutPromise<ReturnType<T>>) => void;\n  /**\n   * callback to call after the api has resulted with a result\n   */\n  withApiResult?: (result: any) => void;\n  initialValues?: any[];\n  hideResult?: boolean;\n}) => {\n  const {\n    initialValues,\n    tsFunction: { parameters, name },\n    submitFunction,\n    withResult,\n    withApiResult,\n    hideResult,\n  } = props;\n\n  console.log(\"tsfunct\", { parameters });\n\n  const [values, setValues] = useState<any[]>(\n    parameters?.map((_: any, index: number) => initialValues?.[index])\n  );\n  const [result, setResult] = useState<RealApiReturnType<any> | undefined>(\n    undefined\n  );\n\n  if (!parameters) return <Div>No parameters found</Div>;\n\n  const renderResult = () => {\n    return (\n      <Div>\n        {result?.isUnauthorized ? (\n          <P className=\"text-red-500 font-bold\">Unauthorized!</P>\n        ) : null}\n        {result?.errors?.map((error) => (\n          <P className=\"text-red-500\">{error.error}</P>\n        ))}\n        {result?.message ? (\n          <P\n            className={result.isSuccessful ? \"text-green-500\" : \"text-red-500\"}\n          >\n            {result.message}\n          </P>\n        ) : null}\n\n        {result?.result ? (\n          <textarea\n            className=\"w-full h-[300px]\"\n            value={JSON.stringify(result.result, undefined, 2)}\n          />\n        ) : null}\n      </Div>\n    );\n  };\n  return (\n    <Div>\n      {parameters ? (\n        <FormContainer\n          onSubmit={async () => {\n            if (submitFunction) {\n              //@ts-ignore\n              const result = await submitFunction(...values);\n              withResult?.(result);\n              return;\n            }\n\n            // @ts-ignore\n            const apiResult = await api[name](...values);\n            setResult(apiResult);\n\n            withApiResult?.(apiResult);\n          }}\n        >\n          {hideResult ? null : renderResult()}\n\n          <SimplifiedSchemaForm\n            parameters={parameters}\n            id={name}\n            onChange={(values) => {\n              setValues(values);\n            }}\n            values={values}\n            referencableModelData={{}}\n          />\n        </FormContainer>\n      ) : (\n        \"No parameters found\"\n      )}\n    </Div>\n  );\n}",
  "description": "FunctionForm is a very easy way to create a frontend component that is connected with an api that is connected with a function on your backend (that can do anything)\n\nAll you need to provide is a `TsFunction`\n\nThis component only works if your `api` is up-to-date and your function is succesfully indexed using `typerepo`. For authentication, the `api` convention is used. See the `api` docs.\n\n@see TsFunction",
  "id": "tkywixuospanrselgfkndyua"
}