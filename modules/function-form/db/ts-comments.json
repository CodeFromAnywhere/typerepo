[
  {
    "createdAt": 1668775667974,
    "updatedAt": 1668775667974,
    "deletedAt": 0,
    "createdFirstAt": 1668775667974,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/FunctionForm.tsx",
    "comment": "FunctionForm is a very easy way to create a frontend component that is connected with an api that is connected with a function on your backend (that can do anything)\n\nAll you need to provide is a `TsFunction`\n\nThis component only works if your `api` is up-to-date and your function is succesfully indexed using `typerepo`. For authentication, the `api` convention is used. See the `api` docs.\n\n@see TsFunction",
    "rawStatement": "export const FunctionForm = <T extends (...params: any[]) => any>(props: {\n  /**\n   * Add the tsfunction here imported from `your-operation/db/ts-functions/[function-name].json` directly\n   *\n   * Typed as `any` because you can import it from JSON, but this should be a `TsFunction`.\n   *\n   * @see TsFunction\n   */\n  tsFunction: any;\n  /**\n   * For js functions, provide the function to be executed here. If not given, it will try to use the api.\n   *\n   * NB: this should be the same function as the function you provide the index of at `tsFunction`\n   */\n  submitFunction?: T;\n  /**\n   * If you provide a `submitFunction`, you can also provide a callback that does something with the result of the function\n   */\n  withResult?: (result: WithoutPromise<ReturnType<T>>) => void;\n  /**\n   * callback to call after the api has resulted with a result\n   *\n   * Please type this yourself as `RealApiReturnType<\"functionName\">`\n   */\n  withApiResult?: (result: any) => void;\n  initialValues?: any[];\n  hideResult?: boolean;\n}) => {\n  const {\n    initialValues,\n    tsFunction,\n    submitFunction,\n    withResult,\n    withApiResult,\n    hideResult,\n  } = props;\n  const { parameters, name } = tsFunction;\n  const isFirstParameterFunctionContext =\n    parameters?.[0]?.name === \"functionContext\";\n\n  const slicedParameters = isFirstParameterFunctionContext\n    ? parameters?.slice(1)\n    : parameters;\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [values, setValues] = useState<any[]>(\n    slicedParameters?.map((_: any, index: number) => initialValues?.[index])\n  );\n\n  const [result, setResult] = useState<RealApiReturnType<any> | undefined>(\n    undefined\n  );\n\n  if (!slicedParameters) {\n    console.log({\n      tsFunction,\n      parameters,\n      slicedParameters,\n      isFirstParameterFunctionContext,\n    });\n    return (\n      <Div>No parameters found, please find the tsFunction in console</Div>\n    );\n  }\n\n  const renderResult = () => {\n    return (\n      <Div>\n        {result?.isUnauthorized ? (\n          <P className=\"text-red-500 font-bold\">Unauthorized!</P>\n        ) : null}\n        {result?.errors?.map((error) => (\n          <P className=\"text-red-500\">{error.error}</P>\n        ))}\n        {result?.message ? (\n          <P\n            className={result.isSuccessful ? \"text-green-500\" : \"text-red-500\"}\n          >\n            {result.message}\n          </P>\n        ) : null}\n\n        {result?.result ? (\n          <textarea\n            className=\"w-full h-[300px]\"\n            value={JSON.stringify(result.result, undefined, 2)}\n          />\n        ) : null}\n      </Div>\n    );\n  };\n  return (\n    <Div>\n      <FormContainer\n        isLoading={isLoading}\n        onSubmit={async () => {\n          setIsLoading(true);\n\n          if (submitFunction) {\n            //@ts-ignore\n            const result = await submitFunction(...values);\n            withResult?.(result);\n\n            setIsLoading(false);\n\n            return;\n          }\n\n          // @ts-ignore\n          const apiResult = await api[name](...values);\n          setResult(apiResult);\n\n          withApiResult?.(apiResult);\n\n          setIsLoading(false);\n        }}\n      >\n        {hideResult ? null : renderResult()}\n\n        <SimplifiedSchemaForm\n          parameters={slicedParameters}\n          id={name}\n          onChange={(values) => {\n            setValues(values);\n          }}\n          values={values}\n          referencableModelData={{}}\n        />\n      </FormContainer>\n    </Div>\n  );\n};",
    "parameters": {},
    "types": [],
    "firstLine": 7,
    "lastLine": 15,
    "id": "dmzjxhhlbngcyjiptnrzonxv"
  }
]