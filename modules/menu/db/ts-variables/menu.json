{
  "createdAt": 1668752659406,
  "updatedAt": 1668752659406,
  "deletedAt": 0,
  "createdFirstAt": 1668752659406,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Menu",
  "slug": "menu",
  "operationRelativeTypescriptFilePath": "src/Menu.tsx",
  "type": {
    "rawType": "(props: import(\"/Users/king/King/operations/tools/user-interfaces/gui/wise/menu/src/MenuProps\").MenuProps & { message?: string | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  props: MenuProps & {\n    message?: string;\n  }\n) => {\n  const {\n    queryPaths,\n    isLoading,\n    message,\n    augmentedWords,\n    menuType,\n    menuTypes,\n    setMenuType,\n  } = props;\n\n  const [showMenu, setShowMenu] = useStore(\"menu.showMenu\");\n\n  useHotkey(isCtrlP, () => setShowMenu(true), []);\n  useHotkey(isAltB, () => setShowMenu(!showMenu), [showMenu]);\n\n  const [isMobileMenuEnabled, setIsMobileMenuEnabled] = useStore(\n    \"menu.isMobileMenuEnabled\"\n  );\n  /**\n   * This is a slow function to calculate for a lot of paths, needs to be optimised\n   */\n  const projectNestedPathObject = queryPaths\n    ? queryPathsArrayToNestedPathObject(queryPaths)\n    : undefined;\n\n  /**\n   * This one too\n   */\n  const nestedMenu = projectNestedPathObject\n    ? nestedPathObjectToNestedMenuRecursive(projectNestedPathObject, [], {\n        getHref: (fullPath) => {\n          return fullPath;\n        },\n      })\n    : undefined;\n\n  const [search, setSearch] = useState(\"\");\n  const isSearching = search.length > 0;\n\n  const closeMenu = (\n    <Div className=\"lg:hidden\">\n      <Div>\n        <ClickableIcon\n          emoji=\"â•³\"\n          onClick={() => {\n            setIsMobileMenuEnabled(false);\n          }}\n        />\n      </Div>\n    </Div>\n  );\n\n  return (\n    <Div>\n      <Div className=\"flex flex-row justify-between w-full\">\n        {setMenuType && menuType && menuTypes ? (\n          <Div className=\"flex flex-row gap gap-2\">\n            {menuTypes?.map((item, index) => {\n              return (\n                <Div\n                  key={item.type}\n                  className={`${\n                    item.type === menuType\n                      ? \"bg-gray-200 dark:bg-gray-800 rounded-full\"\n                      : undefined\n                  } w-7 h-7 flex justify-center items-center`}\n                >\n                  <ClickableIcon\n                    onClick={() => setMenuType(item.type)}\n                    emoji={item.emoji}\n                  />\n                </Div>\n              );\n            })}\n          </Div>\n        ) : (\n          <Div />\n        )}\n\n        {closeMenu}\n      </Div>\n\n      <Input\n        value={search}\n        placeholder=\"Search\"\n        onChange={(e) => setSearch(e.target.value)}\n        className=\"border-b px-2 border-black dark:border-white bg-transparent w-full rounded-2xl\"\n      />\n\n      {isLoading ? (\n        <FancyLoader />\n      ) : isSearching && queryPaths ? (\n        <PathSearchResults\n          search={search}\n          paths={queryPaths}\n          augmentedWords={augmentedWords}\n        />\n      ) : !isSearching && nestedMenu ? (\n        <NestedMenu items={nestedMenu} headersClickable />\n      ) : (\n        <P>{message || \"Menu.tsx: Something's wrong, no message given\"}) </P>\n      )}\n    </Div>\n  );\n}",
  "description": "`\"wise\"` component that lets you render a menu easily, including search",
  "id": "awofddhitcdgdtttcirisvzw"
}