{
  "createdAt": 1671115613988,
  "updatedAt": 1671115613988,
  "deletedAt": 0,
  "createdFirstAt": 1671115613988,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "fileExplorerOpen",
  "slug": "file-explorer-open",
  "operationRelativeTypescriptFilePath": "src/fileExplorerOpen.ts",
  "type": {
    "rawType": "(projectRelativePath: string) => Promise<{ isSuccessful: boolean; message: string; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  projectRelativePath: string\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return {\n      isSuccessful: false,\n      message: \"No projectroot\",\n    };\n  }\n\n  const absolutePath = path.join(projectRoot, projectRelativePath);\n\n  if (!absolutePath || !fs.existsSync(absolutePath)) {\n    return { isSuccessful: false, message: \"This path doesn't exist\" };\n  }\n\n  const pathStats = await fs.stat(absolutePath);\n\n  const folderPath = pathStats.isDirectory()\n    ? absolutePath\n    : path.parse(absolutePath).dir;\n\n  var isWindows = process.platform === \"win32\";\n\n  const command = isWindows ? `start ${folderPath}` : `open ${folderPath}`;\n\n  execSync(command);\n\n  return { isSuccessful: true, message: \"Opened\" };\n}",
  "description": "",
  "id": "ifkvsclpcdyyjsbbbthoceak"
}