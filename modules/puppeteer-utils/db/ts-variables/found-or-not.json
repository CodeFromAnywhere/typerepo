{
  "createdAt": 1671098528868,
  "updatedAt": 1671098528868,
  "deletedAt": 0,
  "createdFirstAt": 1671098528868,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "foundOrNot",
  "slug": "found-or-not",
  "operationRelativeTypescriptFilePath": "src/foundOrNot.ts",
  "type": {
    "rawType": "(props: { page: import(\"/Users/lucky/workspace/typerepo/node_modules/puppeteer-core/lib/types\").Page; selector: string; timeoutMilliseconds?: number | undefined; }) => Promise<boolean>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (props: {\n  /** the page element from puppeteer got with browser.pages */\n  page: Page;\n  /** the css selector to search for */\n  selector: string;\n  /** (optional) change default timeout to wait for selector */\n  timeoutMilliseconds?: number;\n}): Promise<boolean> => {\n  const { page, selector, timeoutMilliseconds } = props;\n  return new Promise(async (resolve, reject) => {\n    // Correct Method\n    await page\n      .waitForSelector(selector, { timeout: timeoutMilliseconds || 30 * 1000 })\n      .then(() => {\n        resolve(true);\n      })\n      .catch((e: any) => {\n        resolve(false);\n      });\n  });\n}",
  "description": "Utility function that always returns a boolean instead of throwing an error.",
  "id": "hwbmtcazxfusdblfoznxxdjb"
}