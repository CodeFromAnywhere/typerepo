[
  {
    "createdAt": 1669377351113,
    "updatedAt": 1669377351113,
    "deletedAt": 0,
    "createdFirstAt": 1669377351113,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/getMarkdownPageInfo.ts",
    "comment": "If a markdown page is found, this function fetches all metadata needed to render that markdown page",
    "rawStatement": "export const getMarkdownPageInfo = async (\n  projectRoot: string,\n  webPages: WebPage<any>[],\n  queryPath: string,\n  contentPage: ReaderWebPage\n): Promise<{\n  markdownFile: WebMarkdownFile | null;\n  nextQueryPath: string | null;\n  previousQueryPath: string | null;\n  projectRelativeMarkdownPath: string | null;\n}> => {\n  const parentQuery = getOneFolderUpPath(queryPath);\n  const siblings = getChildren(webPages, parentQuery);\n  const thisPageKey = queryPath.split(\"/\").pop();\n  const meIndex = siblings.findIndex((sibling) => thisPageKey === sibling);\n\n  const previousFolder = siblings[meIndex - 1];\n  const previousQueryPath = previousFolder\n    ? `${parentQuery}/${previousFolder}`\n    : null;\n  const nextFolder = siblings[meIndex + 1];\n  const nextQueryPath = nextFolder ? `${parentQuery}/${nextFolder}` : null;\n\n  const absoluteMarkdownPath = contentPage.pageData?.projectRelativeFilePath\n    ? path.join(projectRoot, contentPage.pageData.projectRelativeFilePath)\n    : undefined;\n\n  const markdownFile = absoluteMarkdownPath\n    ? await readMarkdownFileToModel(absoluteMarkdownPath)\n    : null;\n\n  const projectRelativeMarkdownPath = absoluteMarkdownPath\n    ? makeRelative(absoluteMarkdownPath, projectRoot)\n    : null;\n\n  return {\n    markdownFile,\n    nextQueryPath,\n    previousQueryPath,\n    projectRelativeMarkdownPath,\n  };\n};",
    "parameters": {},
    "types": [],
    "firstLine": 8,
    "lastLine": 10,
    "id": "wumlowzfmpnpimwutdlmxiwn"
  }
]