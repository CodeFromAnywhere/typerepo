{
  "createdAt": 1669384720441,
  "updatedAt": 1669384720441,
  "deletedAt": 0,
  "createdFirstAt": 1669384720441,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/markdownReaderGetStaticPropsFromPages.ts",
  "commentsInside": [],
  "rawText": " async (\n  fileWebPages: WebPage<any>[],\n  context: GetStaticPropsContext\n): Promise<{\n  props: MarkdownReaderPageProps;\n}> => {\n  const menu = getMenuPagesObject(fileWebPages);\n  const projectRoot = getProjectRoot();\n\n  if (!projectRoot) {\n    return { props: { menu } };\n  }\n\n  const publicBundleConfig = await readJsonFile<PublicBundleConfig>(\n    path.join(projectRoot, \"public-bundle-config.json\")\n  );\n\n  const queryPath = getQueryPath(context.params);\n\n  // console.log(\"get static props\", queryPath);\n\n  // definitions/statements/functions/interfaces/operations\n\n  // NB: finds a page with actual content\n  const contentPage = fileWebPages.find((x) => x.queryPath === queryPath);\n\n  if (!contentPage) {\n    // NB: we need to render an exploration page\n    const {\n      children,\n      title,\n      description,\n      descriptionProjectRelativeMarkdownPath,\n    } = await getFolderExplorationInfo(fileWebPages, queryPath, projectRoot);\n    return {\n      props: {\n        publicBundleConfig,\n        menu,\n\n        content: {\n          children,\n          title,\n          description,\n          projectRelativeMarkdownPath: descriptionProjectRelativeMarkdownPath,\n        },\n      },\n    };\n  }\n\n  // NB: There's a content page. We need to return it (`MarkdownFile`), including its previous, next pages, and a title\n\n  const {\n    markdownFile,\n    nextQueryPath,\n    previousQueryPath,\n    projectRelativeMarkdownPath,\n  } = await getMarkdownPageInfo(\n    projectRoot,\n    fileWebPages,\n    queryPath,\n    contentPage\n  );\n\n  const augmentedWordObject = await getAugmentedWordObject(projectRoot);\n\n  return {\n    // Passed to the page component as props\n    props: {\n      content: {\n        markdownFile,\n        nextQueryPath,\n        previousQueryPath,\n        augmentedWordObject,\n        projectRelativeMarkdownPath,\n      },\n\n      publicBundleConfig,\n      menu,\n    },\n  };\n}",
  "name": "markdownReaderGetStaticPropsFromPages",
  "slug": "markdown-reader-get-static-props-from-pages",
  "parameters": [
    {
      "name": "fileWebPages",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WebPage%3Cany%3E"
        }
      },
      "simplifiedSchema": {
        "items": [],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "context",
      "schema": {
        "$ref": "#/definitions/GetStaticPropsContext"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "params",
            "required": false,
            "schema": {
              "fullComment": "",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "preview",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "previewData",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "locale",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "defaultLocale",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Takes the routes and pages you want to show, and returns the MarkdownReaderPageProps you need to render the reader page.",
  "returnType": {
    "rawType": "Promise<{ props: import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/reader/markdown-reader-types/build/MarkdownReaderPageProps\").MarkdownReaderPageProps; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 2013,
    "lines": 81,
    "bytes": 2013,
    "bytesPerCharacter": 1,
    "charactersPerLine": 25,
    "linesPerFile": 81,
    "numberOfFiles": 1
  },
  "id": "zdmekmezyjiibowbpfuwsldt"
}