{
  "createdAt": 1667378658301,
  "updatedAt": 1667378658301,
  "deletedAt": 0,
  "createdFirstAt": 1667378658301,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "uploadAssetPostApi",
  "slug": "upload-asset-post-api",
  "operationRelativeTypescriptFilePath": "src/uploadAssetPostApi.ts",
  "type": {
    "rawType": "(ctx: import(\"/Users/king/King/operations/node_modules/@types/server/typings/common\").Context) => Promise<import(\"/Users/king/King/operations/tools/asset/asset-type/build/frontend-types\").UploadAssetResult>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  ctx: Context\n): Promise<UploadAssetResult> => {\n  const authToken = ctx.data.authToken;\n\n  const isAuthed = functionAuthPlugin(\"uploadAsset\", authToken);\n  if (!isAuthed) {\n    return {\n      isSuccessful: false,\n      isUnauthorized: true,\n      message: \"You can only do this when authenticated\",\n    };\n  }\n\n  const file = ctx.files.file;\n  if (!file) {\n    return { isSuccessful: false, message: \"No file found\" };\n  }\n\n  const realFile = (Array.isArray(file)\n    ? file[0]\n    : file) as unknown as ReceivedFile;\n\n  const functionFile = {\n    size: realFile.size,\n    path: realFile.path,\n    name: realFile.name,\n    type: realFile.type,\n  };\n\n  const randomName = generateRandomString(32);\n\n  const temporaryAssetsFolderPath = getTemporaryAssetsFolderPath();\n\n  const extension = getPreferredExtensionFromType(realFile.type);\n\n  if (!extension) {\n    return {\n      isSuccessful: false,\n      message: \"couldn't figure out what you're trying to upload\",\n    };\n  }\n\n  const temporaryFileName = `${randomName}.${extension}`;\n  const absoluteTemporaryDestinationPath = path.join(\n    temporaryAssetsFolderPath,\n    temporaryFileName\n  );\n\n  if (!fs.existsSync(temporaryAssetsFolderPath)) {\n    await fs.mkdir(temporaryAssetsFolderPath, { recursive: true });\n  }\n\n  if (extension === \"mp3\") {\n    // Conversion needed!\n    const resultingPath = await convertToMp3(\n      functionFile.path,\n      absoluteTemporaryDestinationPath\n    );\n  } else {\n    await fs.rename(functionFile.path, absoluteTemporaryDestinationPath);\n  }\n\n  return {\n    isSuccessful: true,\n    message: \"File received\",\n    temporaryDestination: temporaryFileName,\n  };\n}",
  "description": "Uploads an asset to the server, and puts it in a temporary location in the assets folder of `function-server`. It returns the filename of the file in the temporary location.\n\nIt can only be accessed through that random name. This random name has 32 characters so cannot be easily guessed. This should be secure enough. The file should be moved to the final destination in the actual function that needs the file.",
  "id": "pdumestnamfnyhfreynrnjxe"
}