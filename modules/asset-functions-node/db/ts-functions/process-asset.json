{
  "createdAt": 1667378654840,
  "updatedAt": 1667378654840,
  "deletedAt": 0,
  "createdFirstAt": 1667378654840,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/processAsset.ts",
  "commentsInside": [],
  "rawText": " async (\n  /**\n   * The backendAsset that may need processing\n   */\n  backendAsset: BackendAsset,\n  /**\n   * Location of the\n   * - markdown file (or folder where it is located)\n   * - typescript file (or folder where it is located)\n   * - database file (or folder where it is located)\n   */\n  absoluteReferencingFilePath: string,\n  /**\n   * Extra configuration may somethimes be needed\n   */\n  config: ProcessAssetConfig\n): Promise<undefined | BackendAsset> => {\n  const { alt, name, relativePath, temporaryDestination } = backendAsset;\n\n  // console.log(\"processing asset\", { backendAsset });\n  const slugifiedName = slugify(name && name.length > 0 ? name : \"untitled\");\n\n  if (!relativePath && !temporaryDestination) {\n    log(\"no relativePath, no temporaryDestination\", { type: \"warning\" });\n    // NB: we must have either a relativePath or a temporaryDestination, otherwise this is an invalid input\n    return undefined;\n  }\n\n  const absoluteTemporaryDestination = temporaryDestination\n    ? path.join(getTemporaryAssetsFolderPath(), temporaryDestination)\n    : undefined;\n\n  // NB: If a `temporaryDestination` is given, if it doesn't exist, we return nothing, this is an invalid input.\n  if (absoluteTemporaryDestination) {\n    if (!fs.existsSync(absoluteTemporaryDestination)) {\n      log(\"absoluteTemporaryDestination does not exist\", { type: \"warning\" });\n\n      return undefined;\n    }\n  }\n\n  const oldAssetStoragePath = relativePath\n    ? path.join(path.parse(absoluteReferencingFilePath).dir, relativePath)\n    : undefined;\n\n  // NB: if a relativePath is provided without a temporaryDestination, it means the file should already be there. If it's not there, we return nothing, invalid input.\n  if (oldAssetStoragePath && !temporaryDestination) {\n    if (!fs.existsSync(oldAssetStoragePath)) {\n      log(`oldAssetStoragePath does not exist (${oldAssetStoragePath})`, {\n        type: \"warning\",\n      });\n\n      return undefined;\n    }\n  }\n\n  // Now we can assume the extension of the temporarydestination is correct, because it gets put there from upload\n  const extension = temporaryDestination\n    ? temporaryDestination.split(\".\").pop()\n    : relativePath?.split(\".\").pop();\n\n  if (!extension) {\n    log(\"could not create extension\", { type: \"warning\" });\n\n    // NB: extension must exist now.\n    return undefined;\n  }\n\n  /*\n   */\n\n  const storageLocationInfo = getStorageLocationInfo(\n    absoluteReferencingFilePath,\n    config\n  );\n\n  const finalAssetStoragePath = path.join(\n    storageLocationInfo.absoluteAssetBaseFolderPath,\n    `${slugifiedName}.${extension}`\n  );\n\n  let finalAvailableStoragePath: string = finalAssetStoragePath;\n\n  if (absoluteTemporaryDestination) {\n    finalAvailableStoragePath = getFirstAvailableFilename(\n      finalAssetStoragePath\n    );\n\n    await renameAndCreate(\n      absoluteTemporaryDestination,\n      finalAvailableStoragePath\n    );\n  } else if (oldAssetStoragePath) {\n    if (oldAssetStoragePath !== finalAssetStoragePath) {\n      finalAvailableStoragePath = getFirstAvailableFilename(\n        finalAssetStoragePath\n      );\n\n      // the name has changed\n      await renameAndCreate(oldAssetStoragePath, finalAvailableStoragePath);\n    }\n  }\n\n  const newRelativePath = getRelativeLinkPath(\n    absoluteReferencingFilePath,\n    finalAvailableStoragePath\n  );\n\n  //({ newRelativePath });\n\n  return { alt, relativePath: newRelativePath };\n}",
  "name": "processAsset",
  "slug": "process-asset",
  "parameters": [
    {
      "name": "backendAsset",
      "schema": {
        "$ref": "#/definitions/BackendAsset",
        "description": "The backendAsset that may need processing"
      },
      "simplifiedSchema": {
        "fullComment": "The backendAsset that may need processing\n\nPart of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
        "properties": [
          {
            "name": "alt",
            "required": false,
            "schema": {
              "fullComment": "Stored value\n\nAlt text for the asset",
              "type": "string"
            }
          },
          {
            "name": "relativePath",
            "required": false,
            "schema": {
              "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
              "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
              "type": "string"
            }
          },
          {
            "name": "temporaryDestination",
            "required": false,
            "schema": {
              "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "absoluteReferencingFilePath",
      "schema": {
        "type": "string",
        "description": "Location of the\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)"
      },
      "simplifiedSchema": {
        "fullComment": "Location of the\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "$ref": "#/definitions/ProcessAssetConfig",
        "description": "Extra configuration may somethimes be needed"
      },
      "simplifiedSchema": {
        "fullComment": "Extra configuration may somethimes be needed\n\n",
        "properties": [
          {
            "name": "modelName",
            "required": false,
            "schema": {
              "fullComment": "PascalCase model name for database model\n\nOnly needed for database files",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Processes an asset by moving the file in the right location, if needed...\n\n- Alt is kept, nothing to do with it\n- Giving a different name will change the new path\n- relativePath is checked if it exists (if temporaryDestination is undefined). It is used to obtain the extension.\n- temporaryDestination must be checked. if it exists, must replace the file on relativePath calculated from name\n\nAfter processing, this function should return a `BackendAsset` without the non-storable parameters",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/asset/asset-type/build/Asset\").BackendAsset | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 3886,
    "lines": 119,
    "bytes": 3886,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 119,
    "numberOfFiles": 1
  },
  "id": "hagqixsersraegglkvplgxuj"
}