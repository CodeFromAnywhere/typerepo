{
  "createdAt": 1666263167064,
  "updatedAt": 1666263167064,
  "deletedAt": 0,
  "createdFirstAt": 1666263167064,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "findSentenceMatches",
  "slug": "find-sentence-matches",
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "type": {
    "rawType": "<T>(searchMessage: string, array: T[], getSentence?: ((x: T) => string) | undefined) => T[]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T>(\n  /**\n   * a message the user is searching for\n   */\n  searchMessage: string,\n  /**\n   * an array that should be filtered.\n   */\n  array: T[],\n  /**\n   * optionally, if the array doesn't contain strings of sentences already, you can provide a map function here that returns a sentence from an item in that array\n   */\n  getSentence?: (x: T) => string\n): T[] => {\n  const messageWords = lowerCaseArray(searchMessage);\n\n  const matches = array.filter((item) => {\n    const sentence = getSentence\n      ? getSentence(item)\n      : typeof item === \"string\"\n      ? item\n      : null;\n    if (!sentence) return false;\n\n    const sentenceWords = lowerCaseArray(sentence);\n    const sentenceIncludesMessage = messageWords.reduce(\n      (includesAll, messageWord) => {\n        // TODO: later we can use synonyms here\n        return includesAll && sentenceWords.includes(messageWord);\n      },\n      true\n    );\n\n    return sentenceIncludesMessage;\n  });\n\n  return matches;\n}",
  "description": "finds matches of a searchMessage in an array, looking at the individual words.\n\nif your search matches some words in a sentence, it's a match, as long as all your words you entered are also a word in the sentence\n\nNB: this could be augmented with things like synonyms and translation",
  "id": "deotagbwudswozbjkyvghpve"
}