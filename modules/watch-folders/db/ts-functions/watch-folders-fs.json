{
  "createdAt": 1666258841876,
  "updatedAt": 1666258841876,
  "deletedAt": 0,
  "createdFirstAt": 1666258841876,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/fswatch.ts",
  "commentsInside": [],
  "rawText": " async ({\n  debug = false,\n  folders,\n  onChange,\n  takeLatest,\n}: {\n  debug?: boolean;\n  folders: string[];\n  takeLatest?: boolean;\n  onChange: (event: {\n    eventType: \"rename\" | \"change\";\n    filePaths: string[];\n    operationBasePath: string;\n  }) => Promise<void>;\n}) => {\n  folders.map((folder) => {\n    watch(\n      folder,\n      { recursive: true, encoding: \"utf8\" },\n      async (eventType, filename) => {\n        const alreadyPending = pending.filter((x) => x.filename === filename);\n        const lastPending = alreadyPending.pop();\n\n        // if a file was just triggered and within a second triggered again, ignore it\n        // same file within a second\n        if (lastPending && Date.now() - lastPending.time < 5000) {\n          log(`double trigger of ${filename}, ignoring`, { type: \"warning\" });\n          return;\n        }\n\n        if (alreadyPending.length > 0) {\n          log(`multiple pending of this file, ignoring`, { type: \"warning\" });\n          return;\n        }\n\n        //  await isStillPending();\n\n        // NB: time is also the unique id together with filename\n        const time = Date.now();\n        pending.push({ filename, time });\n\n        const basePath = folder;\n        const operationBasePath = path.join(basePath, \"..\");\n\n        const fullPath = path.join(folder, filename);\n        // TODO: Somehow, it would be great if we could batch changes from multiple files together, so it will execute after there are no changes for more than 30 seconds (or if you press the 'e' button). This will make it more efficient.\n\n        await onChange({\n          operationBasePath,\n          eventType,\n          filePaths: [fullPath],\n        });\n\n        // after it's done, remove from the array\n        pending = pending.filter(\n          (p) => p.filename === filename && p.time === time\n        );\n      }\n    );\n  });\n}",
  "name": "watchFoldersFs",
  "slug": "watch-folders-fs",
  "parameters": [],
  "description": "watches folder paths and executes a callback when something changes in one of them\n\nuses fs.watch",
  "returnType": {
    "rawType": "any",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1955,
    "lines": 63,
    "bytes": 1955,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 63,
    "numberOfFiles": 1
  },
  "id": "lkwxjvwzhmzguhubpacmlstx"
}