{
  "createdAt": 1666258845586,
  "updatedAt": 1666258845586,
  "deletedAt": 0,
  "createdFirstAt": 1666258845586,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/watchman.ts",
  "commentsInside": [],
  "rawText": " ({\n  client,\n  debug,\n  folderPath,\n}: {\n  client: watchman.Client;\n  debug: boolean;\n  folderPath: string;\n}) => {\n  client.command([\"watch-project\", folderPath], function (error, resp) {\n    if (error) {\n      console.error(\"Error initiating watch:\", error);\n      return;\n    }\n\n    // It is considered to be best practice to show any 'warning' or\n    // 'error' information to the user, as it may suggest steps\n    // for remediation\n    if (\"warning\" in resp) {\n      console.log(\"Warning initiating watch: \", resp.warning);\n    }\n\n    // `watch-project` can consolidate the watch for your\n    // dir_of_interest with another watch at a higher level in the\n    // tree, so it is very important to record the `relative_path`\n    // returned in resp\n\n    if (debug) {\n      console.log(\n        \"New watch:\",\n        \"watch established on \",\n        resp.relative_path\n          ? path.join(resp.watch, resp.relative_path)\n          : resp.watch\n      );\n    }\n\n    makeSubscription(client, resp.watch, resp.relative_path, debug);\n  });\n}",
  "name": "initiateWatch",
  "slug": "initiate-watch",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "void",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1042,
    "lines": 40,
    "bytes": 1042,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 40,
    "numberOfFiles": 1
  },
  "id": "elgwqhpxilhhnmisdpqzhfej"
}