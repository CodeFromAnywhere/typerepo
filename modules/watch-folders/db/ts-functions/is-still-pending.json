{
  "createdAt": 1666258841876,
  "updatedAt": 1666258841876,
  "deletedAt": 0,
  "createdFirstAt": 1666258841876,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": false,
  "operationRelativeTypescriptFilePath": "src/fswatch.ts",
  "commentsInside": [],
  "rawText": " async () => {\n  if (noPending()) return false;\n  //\n  console.log(\"awaiting pending\", pending);\n  //\n  await new Promise<void>((resolve, reject) => {\n    // do this every 5 seconds\n    setInterval(async () => {\n      if (noPending()) {\n        resolve();\n      } else {\n        //console.log(`still pending`, pending);\n      }\n    }, 5000); //\n  }); //\n\n  return;\n}",
  "name": "isStillPending",
  "slug": "is-still-pending",
  "parameters": [],
  "description": "checks if pending has items every 5 seconds, resolves after it hasnt\n\nthis is a handy thing to have in util, but it can also probably be much more simple",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 519,
    "lines": 20,
    "bytes": 519,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 20,
    "numberOfFiles": 1
  },
  "id": "tblebqqyctecpmrhvkodmqty"
}