[
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "not using this anymore!",
    "rawStatement": "import watchman from \"fb-watchman\";",
    "parameters": {},
    "types": [],
    "firstLine": 1,
    "lastLine": 4,
    "id": "uflrhuavbnrcfoxqkmiymboz"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "type from watchman",
    "rawStatement": "export type SubscriptionResponse = {\n  subscription: string;\n  root: string;\n  files: FileType[];\n};",
    "parameters": {},
    "types": [],
    "firstLine": 11,
    "lastLine": 13,
    "id": "lqzencgwgiygpmbhmuaacsjh"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`watch` is obtained from `resp.watch` in the `watch-project` response.",
    "rawStatement": "// `relative_path` is obtained from `resp.relative_path` in the",
    "parameters": {},
    "types": [],
    "firstLine": 53,
    "lastLine": 53,
    "id": "dbrfrmumkldhoemqspmnasvo"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`watch` is obtained from `resp.watch` in the `watch-project` response.",
    "rawStatement": "// `watch-project` response.",
    "parameters": {},
    "types": [],
    "firstLine": 53,
    "lastLine": 53,
    "id": "fbprhrcfkviuvcypopuozsln"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`relative_path` is obtained from `resp.relative_path` in the",
    "rawStatement": "// `watch-project` response.",
    "parameters": {},
    "types": [],
    "firstLine": 54,
    "lastLine": 54,
    "id": "akcflnccxgohxvadbubdslqy"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`watch` is obtained from `resp.watch` in the `watch-project` response.",
    "rawStatement": "export function makeSubscription(\n  client: watchman.Client,\n  watchBaseFolder: string,\n  watchRelativePath: string,\n  debug: boolean\n) {\n  /**\n   * this can probably be optimised\n   */\n  const sub = {\n    // Match any `.js` file in the dir_of_interest\n    expression: [\"allof\", [\"match\", \"*.*\"]],\n    // Which fields we're interested in\n    fields: [\"name\", \"size\", \"mtime_ms\", \"exists\", \"type\"],\n    relative_root: undefined as undefined | string,\n    // add our time constraint\n  };\n\n  if (watchRelativePath) {\n    sub.relative_root = watchRelativePath;\n  }\n\n  const subName = getSubName(watchBaseFolder, watchRelativePath);\n\n  client.command(\n    [\"subscribe\", watchBaseFolder, subName, sub],\n    function (error, resp) {\n      if (error) {\n        // Probably an error in the subscription criteria\n        console.error(\"Failed to subscribe: \", error);\n        return;\n      }\n      if (debug) {\n        console.log(\n          \"New subscription:\",\n          \"subscription \" + resp.subscribe + \" established\"\n        );\n      }\n    }\n  );\n\n  return subName;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 53,
    "lastLine": 53,
    "id": "phqyrueomjmmygabhityonkv"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`relative_path` is obtained from `resp.relative_path` in the",
    "rawStatement": "export function makeSubscription(\n  client: watchman.Client,\n  watchBaseFolder: string,\n  watchRelativePath: string,\n  debug: boolean\n) {\n  /**\n   * this can probably be optimised\n   */\n  const sub = {\n    // Match any `.js` file in the dir_of_interest\n    expression: [\"allof\", [\"match\", \"*.*\"]],\n    // Which fields we're interested in\n    fields: [\"name\", \"size\", \"mtime_ms\", \"exists\", \"type\"],\n    relative_root: undefined as undefined | string,\n    // add our time constraint\n  };\n\n  if (watchRelativePath) {\n    sub.relative_root = watchRelativePath;\n  }\n\n  const subName = getSubName(watchBaseFolder, watchRelativePath);\n\n  client.command(\n    [\"subscribe\", watchBaseFolder, subName, sub],\n    function (error, resp) {\n      if (error) {\n        // Probably an error in the subscription criteria\n        console.error(\"Failed to subscribe: \", error);\n        return;\n      }\n      if (debug) {\n        console.log(\n          \"New subscription:\",\n          \"subscription \" + resp.subscribe + \" established\"\n        );\n      }\n    }\n  );\n\n  return subName;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 54,
    "lastLine": 54,
    "id": "fealibplbjvrypjftgiculim"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "`watch-project` response.",
    "rawStatement": "export function makeSubscription(\n  client: watchman.Client,\n  watchBaseFolder: string,\n  watchRelativePath: string,\n  debug: boolean\n) {\n  /**\n   * this can probably be optimised\n   */\n  const sub = {\n    // Match any `.js` file in the dir_of_interest\n    expression: [\"allof\", [\"match\", \"*.*\"]],\n    // Which fields we're interested in\n    fields: [\"name\", \"size\", \"mtime_ms\", \"exists\", \"type\"],\n    relative_root: undefined as undefined | string,\n    // add our time constraint\n  };\n\n  if (watchRelativePath) {\n    sub.relative_root = watchRelativePath;\n  }\n\n  const subName = getSubName(watchBaseFolder, watchRelativePath);\n\n  client.command(\n    [\"subscribe\", watchBaseFolder, subName, sub],\n    function (error, resp) {\n      if (error) {\n        // Probably an error in the subscription criteria\n        console.error(\"Failed to subscribe: \", error);\n        return;\n      }\n      if (debug) {\n        console.log(\n          \"New subscription:\",\n          \"subscription \" + resp.subscribe + \" established\"\n        );\n      }\n    }\n  );\n\n  return subName;\n}",
    "parameters": {},
    "types": [],
    "firstLine": 55,
    "lastLine": 55,
    "id": "ksbqjpboehgfojsukoaffmfy"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "checks if watchman client is ok. ends client if it's not ok",
    "rawStatement": "const isClientOk = (client: watchman.Client, debug: boolean) => {\n  return new Promise<void>((resolve, reject) => {\n    client.capabilityCheck(\n      { optional: [], required: [\"relative_root\"] },\n      function (error: any, resp: any) {\n        if (error) {\n          // error will be an Error object if the watchman service is not\n          // installed, or if any of the names listed in the `required`\n          // array are not supported by the server\n          console.error(error);\n          client.end();\n          return reject();\n        }\n        if (debug) {\n          console.log(\"Watchman is ok\", resp);\n        }\n\n        resolve();\n      }\n    );\n  });\n};",
    "parameters": {},
    "types": [],
    "firstLine": 141,
    "lastLine": 143,
    "id": "cixsljtjlmucwvhikbgbyvsw"
  },
  {
    "createdAt": 1666258846478,
    "updatedAt": 1666258846478,
    "deletedAt": 0,
    "createdFirstAt": 1666258846478,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/watchman.ts",
    "comment": "watches folder paths and executes a callback when something changes in one of them\n\nTODO: check fs/promises.watch, that seems like a simple alternative of this! Could it be? Could it remove the need for watchman?",
    "rawStatement": "export const watchFolders = async ({\n  debug = false,\n  folders,\n  onChange,\n}: {\n  debug?: boolean;\n  folders: string[];\n  onChange: OnChangeDetected;\n}) => {\n  const client = new watchman.Client();\n  await isClientOk(client, debug);\n  // Initiate watching each folder\n  folders.forEach((folderPath) => initiateWatch({ client, debug, folderPath }));\n\n  // whenever there has been a change detected, this function will be called. Beware, can also be from other watch sources!\n  client.on(\n    \"subscription\",\n    function ({ subscription, files, root }: SubscriptionResponse) {\n      const subInfo = getSubInfo(subscription);\n      if (!subInfo) return;\n      const { fullPath, relativePath, rootPath } = subInfo;\n      const ourWatch = folders.includes(fullPath);\n      if (!ourWatch) return;\n\n      onChange({ fullPath, relativePath, rootPath, files });\n    }\n  );\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 167,
    "lastLine": 171,
    "id": "nxeppronzbkpnsffpqrhvvyy"
  }
]