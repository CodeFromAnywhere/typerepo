{
  "createdAt": 1668752288943,
  "updatedAt": 1668752288943,
  "deletedAt": 0,
  "createdFirstAt": 1668752288943,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/loginWithContext.ts",
  "commentsInside": [],
  "rawText": " async (\n  functionContext: FunctionContext\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const { device } = functionContext;\n  const { persons, message } = await findLoggedinPersonsWithContext(\n    functionContext\n  );\n\n  const personIds = persons?.map((x) => x.id);\n\n  const updateResult = await db.update(\n    \"Device\",\n    (item) => item.id === device.id,\n    (old) => ({ ...old, personIds })\n  );\n\n  const isSuccessful =\n    !!updateResult.isSuccesful && updateResult.amountUpdated === 1;\n\n  return {\n    isSuccessful,\n    message: isSuccessful\n      ? \"Logged in\"\n      : updateResult.message || \"Something went wrong\",\n  };\n}",
  "name": "loginWithContext",
  "slug": "login-with-context",
  "parameters": [
    {
      "name": "functionContext",
      "schema": {
        "$ref": "#/definitions/FunctionContext"
      },
      "simplifiedSchema": {
        "fullComment": "Should be attached as first argument of the function, if the name of the function is in the format of:\n\n- `xyzWithContext`: attaches all context\n- `xyzWithContextRaw`: attaches all context, api returns just the result of the function without wrapping it in the `RealApiReturnType`. Needed in case you have a different server.js `server.reply`\n\nFor more info see `apiConvention`",
        "properties": [
          {
            "name": "authorizations",
            "required": false,
            "schema": {
              "fullComment": "Authorizations accumulated of the person(s), the group(s), and public authorizations.\n\nNB: This contains all authorisations because there may also be model authorisations and file authorisations that are needed IN the function.",
              "nb": "This contains all authorisations because there may also be model authorisations and file authorisations that are needed IN the function.",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "groups",
            "required": false,
            "schema": {
              "fullComment": "Groups the person(s) of the device belong to",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "hasAuthorization",
            "required": true,
            "schema": {
              "fullComment": "Device has authorization to the function",
              "type": "boolean"
            }
          },
          {
            "name": "authToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverContext",
            "required": false,
            "schema": {
              "fullComment": "Original context coming from server.js\n\nNB: due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:\n\n`import { Context } from \"server/typings/common\";`",
              "nb": "due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:",
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "attaches the `Device` with `authToken` to a `Person` once all required authenticationMethods are provided. If not, it needs to return the required authenticationMethods so the user can attach those to the device until loggin is successful.",
  "returnType": {
    "rawType": "Promise<{ isSuccessful: boolean; message: string; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 887,
    "lines": 26,
    "bytes": 887,
    "bytesPerCharacter": 1,
    "charactersPerLine": 34,
    "linesPerFile": 26,
    "numberOfFiles": 1
  },
  "id": "ghkpiunuewplfooijndejecb"
}