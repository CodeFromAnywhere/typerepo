{
  "createdAt": 1668752297583,
  "updatedAt": 1668752297583,
  "deletedAt": 0,
  "createdFirstAt": 1668752297583,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/signupWithContext.ts",
  "commentsInside": [],
  "rawText": " async (\n  functionContext: FunctionContext,\n  /**\n   * Data required for creating a `Person`. Can be filled in by the user partly, but also partly automatically\n   */\n  personData: Pick<\n    Person,\n    | \"authorizations\"\n    | \"credit\"\n    | \"dataEntries\"\n    | \"interestSlugs\"\n    | \"media\"\n    | \"name\"\n    | \"slug\"\n    | \"pictureImage\"\n    | \"groupSlugs\"\n    | \"requiredAuthenticationMethods\"\n    | \"amountAuthenticationMethodsRequired\"\n  >\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const { device } = functionContext;\n\n  console.log(`Signup with context`);\n  if (\n    device.authenticationMethods.filter((x) => x.isAuthenticated).length === 0\n  ) {\n    return { isSuccessful: false, message: \"Please authenticate first\" };\n  }\n\n  const methodsAugmented = await Promise.all(\n    device.authenticationMethods.map(async (method) => {\n      const alreadyPerson = await findAuthenticatedPersonWithHandle(\n        method.method,\n        method.handle\n      );\n\n      return { ...method, alreadyPerson };\n    })\n  );\n\n  const unavailableMethod = methodsAugmented.find(\n    (method) => method.alreadyPerson\n  );\n\n  if (unavailableMethod) {\n    const methodString = englishMethod[unavailableMethod.method].toLowerCase();\n    return {\n      isSuccessful: false,\n      message: `There is already someone else with the ${methodString} ${unavailableMethod.handle}`,\n    };\n  }\n\n  // it seesms fine , lets' create a new person\n\n  const newPersonId = generateId();\n  const newPerson: Creation<Person> = {\n    id: newPersonId,\n    authenticationMethods: device.authenticationMethods,\n    ...personData,\n  };\n\n  //@ts-ignore\n  const upsertResult = await db.upsert(\"Person\", newPerson, {\n    onlyInsert: true,\n  });\n\n  const updateResult = await db.update(\n    \"Device\",\n    (item) => item.id === device.id,\n    (old) => {\n      console.log(`set new person id to ${newPersonId}`);\n      return {\n        ...old,\n        personIds: old.personIds\n          ? old.personIds.concat(newPersonId)\n          : [newPersonId],\n        currentPersonId: newPersonId,\n      };\n    }\n  );\n\n  const isSuccessful =\n    updateResult.amountUpdated === 1 &&\n    !!updateResult.isSuccesful &&\n    !!upsertResult.isSuccesful;\n\n  return {\n    isSuccessful,\n    message: isSuccessful\n      ? \"Signed up\"\n      : (!updateResult.isSuccesful\n          ? updateResult.message\n          : !upsertResult.isSuccesful\n          ? upsertResult.message\n          : undefined) ||\n        \"signupWithContext: Something went wrong with the queries\",\n  };\n}",
  "name": "signupWithContext",
  "slug": "signup-with-context",
  "parameters": [
    {
      "name": "functionContext",
      "schema": {
        "$ref": "#/definitions/FunctionContext"
      },
      "simplifiedSchema": {
        "fullComment": "Should be attached as first argument of the function, if the name of the function is in the format of:\n\n- `xyzWithContext`: attaches all context\n- `xyzWithContextRaw`: attaches all context, api returns just the result of the function without wrapping it in the `RealApiReturnType`. Needed in case you have a different server.js `server.reply`\n\nFor more info see `apiConvention`",
        "properties": [
          {
            "name": "authorizations",
            "required": false,
            "schema": {
              "fullComment": "Authorizations accumulated of the person(s), the group(s), and public authorizations.\n\nNB: This contains all authorisations because there may also be model authorisations and file authorisations that are needed IN the function.",
              "nb": "This contains all authorisations because there may also be model authorisations and file authorisations that are needed IN the function.",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "groups",
            "required": false,
            "schema": {
              "fullComment": "Groups the person(s) of the device belong to",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "hasAuthorization",
            "required": true,
            "schema": {
              "fullComment": "Device has authorization to the function",
              "type": "boolean"
            }
          },
          {
            "name": "authToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverContext",
            "required": false,
            "schema": {
              "fullComment": "Original context coming from server.js\n\nNB: due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:\n\n`import { Context } from \"server/typings/common\";`",
              "nb": "due to indexation problems the type has been removed. It can be casted to the `Context` type, which you can import from:",
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "personData",
      "schema": {
        "type": "object",
        "properties": {
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Authorization"
            },
            "description": "Which custom authorizations does this `Person` have?"
          },
          "credit": {
            "$ref": "#/definitions/Credit",
            "description": "Actions by the `Person` can create changes in the amount of credits\n\nThe exact meaning of the number of credits is determined by the OS settings. Can for example be 1:1 to euro, 1:1 to bitcoin, or a custom credit system. Transferability is also customisable.\n\nInsufficient credit can limit the persons possibilities within the OS"
          },
          "dataEntries": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PersonInformationValue"
            }
          },
          "interestSlugs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Slug"
            },
            "description": "slugs of interest categories that this person should be notified about.\n\nSince this is a hierarchical model, parent interests will ensure all children are also applied."
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PersonSocialMedia"
            },
            "description": "Media that is attached to this person.\n\nNB: not used to authenticate! Can be filled in by King OS, might be erroneous"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "pictureImage": {
            "$ref": "#/definitions/BackendAsset"
          },
          "groupSlugs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Slug"
            },
            "description": "To which groups does this person belong?\n\nThis determines additional authorizations\n\nCan be set on signup, but can always be edited by admin"
          },
          "requiredAuthenticationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthenticationMethodMethod"
            },
            "description": "Optionally, the user can setup for themselves which authentication methods they require for themselves to authenticate on another device"
          },
          "amountAuthenticationMethodsRequired": {
            "type": "number",
            "description": "By default, one is enough, but if this is defined, the user needs to use this amount of authentication methods before he/she is authenticated. Must be at least one"
          }
        },
        "required": [
          "name",
          "slug"
        ],
        "additionalProperties": false,
        "description": "Data required for creating a `Person`. Can be filled in by the user partly, but also partly automatically"
      },
      "simplifiedSchema": {
        "fullComment": "Data required for creating a `Person`. Can be filled in by the user partly, but also partly automatically",
        "properties": [
          {
            "name": "authorizations",
            "required": false,
            "schema": {
              "fullComment": "Which custom authorizations does this `Person` have?",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "dataEntries",
            "required": false,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "interestSlugs",
            "required": false,
            "schema": {
              "fullComment": "slugs of interest categories that this person should be notified about.\n\nSince this is a hierarchical model, parent interests will ensure all children are also applied.",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "media",
            "required": false,
            "schema": {
              "fullComment": "Media that is attached to this person.\n\nNB: not used to authenticate! Can be filled in by King OS, might be erroneous",
              "nb": "not used to authenticate! Can be filled in by King OS, might be erroneous",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupSlugs",
            "required": false,
            "schema": {
              "fullComment": "To which groups does this person belong?\n\nThis determines additional authorizations\n\nCan be set on signup, but can always be edited by admin",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "requiredAuthenticationMethods",
            "required": false,
            "schema": {
              "fullComment": "Optionally, the user can setup for themselves which authentication methods they require for themselves to authenticate on another device",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "amountAuthenticationMethodsRequired",
            "required": false,
            "schema": {
              "fullComment": "By default, one is enough, but if this is defined, the user needs to use this amount of authentication methods before he/she is authenticated. Must be at least one",
              "type": "number"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Creates a new `Person` for a `Device`. Adds that person to the `Device`.\n\n- Can only be done with at least one authenticationMethod\n- Can only be done if authentication is not applied on an existing person already.\n- Function is wrappable",
  "returnType": {
    "rawType": "Promise<{ isSuccessful: boolean; message: string; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 2767,
    "lines": 102,
    "bytes": 2767,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 102,
    "numberOfFiles": 1
  },
  "id": "ndkikrxigqmxqpcnmsxbfbxo"
}