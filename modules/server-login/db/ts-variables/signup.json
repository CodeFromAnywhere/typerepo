{
  "createdAt": 1667378551480,
  "updatedAt": 1667378551480,
  "deletedAt": 0,
  "createdFirstAt": 1667378551480,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "signup",
  "slug": "signup",
  "operationRelativeTypescriptFilePath": "src/signup.ts",
  "type": {
    "rawType": "(deviceId: string, personData: Pick<import(\"/Users/king/King/operations/tools/p2p/peer-types/build/Person\").Person, \"authorizations\" | \"credits\" | \"dataEntries\" | \"interestSlugs\" | \"media\" | \"name\" | \"slug\" | \"pictureImage\" | \"groupSlugs\" | \"requiredAuthenticationMethods\" | \"amountAuthenticationMethodsRequired\">) => Promise<{ isSuccessful: boolean; message: string; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  deviceId: string,\n  /**\n   * Data required for creating a `Person`. Can be filled in by the user partly, but also partly automatically\n   */\n  personData: Pick<\n    Person,\n    | \"authorizations\"\n    | \"credits\"\n    | \"dataEntries\"\n    | \"interestSlugs\"\n    | \"media\"\n    | \"name\"\n    | \"slug\"\n    | \"pictureImage\"\n    | \"groupSlugs\"\n    | \"requiredAuthenticationMethods\"\n    | \"amountAuthenticationMethodsRequired\"\n  >\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  const device = (await db.get(\"Device\")).find((x) => x.id === deviceId);\n\n  if (!device) {\n    return {\n      isSuccessful: false,\n      message: \"Couldn't find that device\",\n    };\n  }\n\n  if (device.authenticationMethods.length === 0) {\n    return { isSuccessful: false, message: \"Please authenticate first\" };\n  }\n\n  const newPersonId = generateId();\n  const newPerson: Creation<Person> = {\n    id: newPersonId,\n    authenticationMethods: device.authenticationMethods,\n    ...personData,\n  };\n\n  //@ts-ignore\n  const upsertResult = await db.upsert(\"Person\", newPerson, {\n    onlyInsert: true,\n  });\n\n  const updateResult = await db.update(\n    \"Device\",\n    (item) => item.id === deviceId,\n    (old) => ({ ...old, personId: newPersonId })\n  );\n\n  const isSuccessful =\n    updateResult.amountUpdated === 1 &&\n    !!updateResult.isSuccesful &&\n    upsertResult.amountInserted === 1 &&\n    !!upsertResult.isSuccesful;\n\n  return {\n    isSuccessful,\n    message: isSuccessful\n      ? \"Signed up\"\n      : (!updateResult.isSuccesful\n          ? updateResult.message\n          : !upsertResult.isSuccesful\n          ? upsertResult.message\n          : undefined) || \"Something went wrong\",\n  };\n}",
  "description": "Creates a new `Person` for a `Device`. Adds that person to the `Device`.\n\n- Can only be done if authentication is not applied on an existing person already.\n- Can only be done with at least one authenticationMethod\n- Function is wrappable",
  "id": "cbkbgzuefcrxuomabdosajjr"
}