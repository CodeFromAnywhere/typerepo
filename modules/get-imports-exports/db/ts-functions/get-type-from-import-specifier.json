{
  "createdAt": 1662732861760,
  "updatedAt": 1662732861760,
  "deletedAt": 0,
  "createdFirstAt": 1662732861760,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": false,
  "operationRelativeTypescriptFilePath": "src/getImportsExports.ts",
  "commentsInside": [],
  "rawText": " (\n  importSpecifier: ImportSpecifier,\n  debug?: boolean\n): TypeSpecifier => {\n  // NB: find the file where the import is defined\n  const fileOfExport = importSpecifier\n    .getImportDeclaration()\n    .getModuleSpecifierSourceFile();\n\n  // NB: without the module source we can't know the type of this importspecifier\n  if (!fileOfExport) return { type: undefined };\n\n  // NB: in the source, find all exported stuff\n  const exportSymbols: Symbol[] = fileOfExport.getExportSymbols();\n\n  // NB: find the export with the same name as the import\n  const importedSymbol = exportSymbols.find(\n    (x) => x.getName() === importSpecifier.getName()\n  );\n\n  // NB: if the source doesn't contain any export with that name, we can't know its type\n  if (!importedSymbol) return { type: undefined };\n\n  /**\n   * NB: all ExportSpecifiers don't have a more specific SyntaxKind because they are imported.\n   * If there are any ExportSpecifiers with a matching ImportSpecifier, recurse on that!\n   */\n  const exportSpecifierNames = getExportSpecifierNames(importedSymbol);\n\n  if (exportSpecifierNames.length > 0) {\n    const importSpecifiers = getImportSpecifiersWithNames(\n      fileOfExport,\n      exportSpecifierNames\n    );\n\n    if (importSpecifiers.length > 1) {\n      // NB: warn if there is more than one as that would be strange\n\n      log(\"More than one importsSpecifiers with that name\", {\n        type: \"warning\",\n      });\n    }\n\n    if (importSpecifiers.length > 0) {\n      // NB: recursion!\n      return getTypeFromImportSpecifier(importSpecifiers[0], debug);\n    } else {\n      if (debug)\n        console.log(\"Weird, no importspecifiers found for exportSpecifier!!\");\n      return { type: undefined };\n    }\n  }\n\n  // console.log({\n  //   fileOfExport: fileOfExport?.getFilePath(),\n  //   exportSymbols: exportSymbols?.map((x) => x.getName()),\n  //   importSpecifier: importSpecifier.getName(),\n  //   importedSymbol: importedSymbol?.getName(),\n  //   name: importSpecifier.getName(),\n  // });\n\n  return getDefaultSymbolType(importedSymbol, debug);\n}",
  "name": "getTypeFromImportSpecifier",
  "slug": "get-type-from-import-specifier",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "TypeSpecifier",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "type",
            "value"
          ],
          "x-enumNames": [
            "type",
            "value"
          ],
          "type": "string"
        },
        "hasGeneric": {
          "type": "boolean"
        }
      },
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "type",
          "required": false,
          "schema": {
            "enum": [
              "type",
              "value"
            ],
            "type": "string"
          }
        },
        {
          "name": "hasGeneric",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 2046,
    "lines": 63,
    "bytes": 2046,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 63,
    "numberOfFiles": 1
  },
  "id": "ozuATgmpTMTwBZeR"
}