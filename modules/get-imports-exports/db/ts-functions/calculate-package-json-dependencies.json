{
  "createdAt": 1667635754517,
  "updatedAt": 1667635754517,
  "deletedAt": 0,
  "createdFirstAt": 1667635754517,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/calculatePackageJsonDependencies.ts",
  "commentsInside": [],
  "rawText": " (\n  /**\n   * Current dependencies object in your operation\n   */\n  dependencies: PackageInfoObject | undefined,\n  /**\n   * All imports found in your operation\n   */\n  imports: Creation<TsImport>[],\n  /**\n   * All package-json's in your monorepo\n   */\n  packageJsons: PackageJson[],\n  operationName: string\n) => {\n  const dependencyImports = imports\n    // NB: imports of types are removed and need not to be installed for running this package\n    .filter((x) => x.type === \"value\")\n    .filter((x) => x.isAbsolute)\n    .filter((x) => !isAbsoluteImportBuiltin(x.module))\n    .filter((x) => !isImportFromOptionalFile(x))\n    .filter(onlyUnique2<Creation<TsImport>>((a, b) => a.module === b.module));\n\n  const monorepoImports = dependencyImports.filter(\n    (x) =>\n      operationName &&\n      x.isModuleFromMonorepo &&\n      !isGeneratedOperationName(operationName)\n  );\n\n  const hasGeneratedDependencies =\n    dependencyImports.filter(\n      (x) =>\n        x.operationName &&\n        x.isModuleFromMonorepo &&\n        isGeneratedOperationName(x.operationName)\n    ).length > 0;\n\n  const externalImports = dependencyImports.filter(\n    (x) => !x.isModuleFromMonorepo\n  );\n\n  const externalDependencyObject = mergeObjectsArray(\n    externalImports\n      .map((x) => {\n        const moduleName = getPackageNameFromAbsoluteImport(x.module);\n        if (!moduleName) return;\n        const already = dependencies?.[moduleName];\n        /**\n         * TODO: fetch this from monorepo\n         */\n        const calculatedVersion = \"*\";\n\n        /**\n         * NB: Minimize the use of \"*\"\n         */\n        const version =\n          already !== \"*\" && already !== undefined\n            ? already\n            : calculatedVersion;\n        return { [moduleName]: version };\n      })\n      .filter(notEmpty)\n  );\n\n  const monorepoDependencyObject = mergeObjectsArray(\n    monorepoImports\n      .map((x) => {\n        const moduleName = getPackageNameFromAbsoluteImport(x.module);\n        if (!moduleName) return;\n        const packageJson = packageJsons.find((x) => x.name === moduleName);\n        if (!packageJson) return;\n        const { version } = packageJson;\n        if (!version) return;\n        return { [moduleName]: version };\n      })\n      .filter(notEmpty)\n  );\n\n  // console.log({\n  //   imports: imports.length,\n  //   dependencyImports: dependencyImports,\n  //   dependencies,\n  //   monorepoImports,\n  //   monorepoDependencyObject,\n  //   externalDependencyObject,\n  // });\n\n  const newDependencies: PackageInfoObject = {\n    ...dependencies,\n    ...monorepoDependencyObject,\n    ...externalDependencyObject,\n  };\n\n  return { newDependencies, hasGeneratedDependencies };\n}",
  "name": "calculatePackageJsonDependencies",
  "slug": "calculate-package-json-dependencies",
  "parameters": [
    {
      "name": "dependencies",
      "schema": {
        "$ref": "#/definitions/PackageInfoObject",
        "description": "Current dependencies object in your operation"
      },
      "simplifiedSchema": {
        "fullComment": "Current dependencies object in your operation\n\n",
        "properties": [],
        "type": "object"
      },
      "required": false
    },
    {
      "name": "imports",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Creation%3CTsImport%3E"
        },
        "description": "All imports found in your operation"
      },
      "simplifiedSchema": {
        "fullComment": "All imports found in your operation",
        "items": [],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "packageJsons",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PackageJson"
        },
        "description": "All package-json's in your monorepo"
      },
      "simplifiedSchema": {
        "fullComment": "All package-json's in your monorepo",
        "items": [
          {
            "schema": {
              "fullComment": "--- dbStorageMethod: jsonSingle operationRelativePath: package.json\n---",
              "properties": [
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "path",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "main",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "source",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "description",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "version",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "private",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "author",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "repository",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "homepage",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "dependencies",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "devDependencies",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "peerDependencies",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "bin",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "workspaces",
                  "required": false,
                  "schema": {
                    "items": [
                      {
                        "schema": {
                          "type": "string"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "scripts",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                }
              ],
              "type": "object"
            },
            "name": "PackageJson"
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "operationName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "Calculates new packageJson dependencies object based on imports found in the whole operation.\n\nFor monorepo modules, uses the version inside its packagejson (Uses the database to obtain the package.json)\n\nGenerated packages are not added to dependencies. Instead a sensible config prop is added to state that this operation only works within a monorepo since it has generated operation deps that are not on the npm registry\n\nFor external modules, uses the version that was already present in dependencies, or uses \"*\"\n\nAlso keeps the dependencies that were already there, nothing is removed.",
  "returnType": {
    "rawType": "{ newDependencies: import(\"/Users/king/King/operations/tools/types/code-types/build/PackageJson\").PackageInfoObject; hasGeneratedDependencies: boolean; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "newDependencies": {
          "type": "object",
          "properties": {}
        },
        "hasGeneratedDependencies": {
          "type": "boolean"
        }
      },
      "required": [
        "newDependencies",
        "hasGeneratedDependencies"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "newDependencies",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "hasGeneratedDependencies",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 3268,
    "lines": 104,
    "bytes": 3268,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 104,
    "numberOfFiles": 1
  },
  "id": "knzzccavvpkhjjpopmlwykwi"
}