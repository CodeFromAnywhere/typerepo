{
  "createdAt": 1662732859256,
  "updatedAt": 1662732859256,
  "deletedAt": 0,
  "createdFirstAt": 1662732859256,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/calculatePackageJsonDependencies.ts",
  "commentsInside": [],
  "rawText": " (\n  /**\n   * Current dependencies object in your operation\n   */\n  dependencies: PackageInfoObject | undefined,\n  /**\n   * All imports found in your operation\n   */\n  imports: Creation<TsImport>[],\n  /**\n   * All package-json's in your monorepo\n   */\n  packageJsons: PackageJson[]\n) => {\n  const dependencyImports = imports\n    // NB: imports of types are removed and need not to be installed for running this package\n    .filter((x) => x.type === \"value\")\n    .filter((x) => x.isAbsolute)\n    .filter((x) => !isAbsoluteImportBuiltin(x.module))\n    .filter((x) => !isImportFromOptionalFile(x))\n    .filter(onlyUnique2<Creation<TsImport>>((a, b) => a.module === b.module));\n\n  const monorepoImports = dependencyImports.filter(\n    (x) => x.isModuleFromMonorepo\n  );\n\n  const externalImports = dependencyImports.filter(\n    (x) => !x.isModuleFromMonorepo\n  );\n\n  const externalDependencyObject = mergeObjectsArray(\n    externalImports\n      .map((x) => {\n        const moduleName = getPackageNameFromAbsoluteImport(x.module);\n        if (!moduleName) return;\n        const already = dependencies?.[moduleName];\n        /**\n         * TODO: fetch this from monorepo\n         */\n        const calculatedVersion = \"*\";\n\n        /**\n         * NB: Minimize the use of \"*\"\n         */\n        const version =\n          already !== \"*\" && already !== undefined\n            ? already\n            : calculatedVersion;\n        return { [moduleName]: version };\n      })\n      .filter(notEmpty)\n  );\n\n  const monorepoDependencyObject = mergeObjectsArray(\n    monorepoImports\n      .map((x) => {\n        const moduleName = getPackageNameFromAbsoluteImport(x.module);\n        if (!moduleName) return;\n        const packageJson = packageJsons.find((x) => x.name === moduleName);\n        if (!packageJson) return;\n        const { version } = packageJson;\n        if (!version) return;\n        return { [moduleName]: version };\n      })\n      .filter(notEmpty)\n  );\n\n  const newDependencies: PackageInfoObject = {\n    ...dependencies,\n    ...monorepoDependencyObject,\n    ...externalDependencyObject,\n  };\n\n  return newDependencies;\n}",
  "name": "calculatePackageJsonDependencies",
  "slug": "calculate-package-json-dependencies",
  "parameters": [],
  "description": "Calculates new packageJson dependencies object based on imports found in the whole operation.\n\nFor monorepo modules, uses the version inside its packagejson (Uses the database to obtain the package.json)\n\nFor external modules, uses the version that was already present in dependencies, or uses \"*\"\n\nAlso keeps the dependencies that were already there, nothing is removed.",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/PackageJson\").PackageInfoObject",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 2489,
    "lines": 81,
    "bytes": 2489,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 81,
    "numberOfFiles": 1
  },
  "id": "LFzSLtdXomPSmgYr"
}