{
  "createdAt": 1670934927290,
  "updatedAt": 1670934927290,
  "deletedAt": 0,
  "createdFirstAt": 1670934927290,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/useLastSelection.ts",
  "commentsInside": [],
  "rawText": " (isDisabled?: boolean): string | null => {\n  // Initialize a ref to store the last selection\n  const [selection, setSelection] = useState<string | null>(null);\n\n  // Create a callback that updates the ref when the user makes a selection\n  const updateLastSelection = () => {\n    if (typeof window === \"undefined\") return null;\n\n    const newSelection = window.getSelection()?.toString() || null;\n\n    if (!newSelection) return null;\n\n    setSelection(newSelection);\n\n    return null;\n  };\n\n  // Add the event listener when the hook is called\n  useEffect(() => {\n    // Add the event listener to the document, so it will fire whenever the user makes a selection anywhere on the page\n    document.addEventListener(\"selectionchange\", updateLastSelection);\n\n    // Return a cleanup function that removes the event listener\n    return () => {\n      document.removeEventListener(\"selectionchange\", updateLastSelection);\n    };\n  }, []); // We only want to add the event listener once, so we pass an empty array as the second argument to useEffect\n\n  if (isDisabled) return \"\";\n  // Return the last selection\n  return selection;\n}",
  "name": "useLastSelection",
  "slug": "use-last-selection",
  "parameters": [
    {
      "name": "isDisabled",
      "schema": {
        "type": "boolean"
      },
      "simplifiedSchema": {
        "type": "boolean"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "string | null",
    "typeDefinition": {
      "optional": true,
      "type": "string | null"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1124,
    "lines": 32,
    "bytes": 1124,
    "bytesPerCharacter": 1,
    "charactersPerLine": 35,
    "linesPerFile": 32,
    "numberOfFiles": 1
  },
  "id": "ysmpqujipjgbeostcsskrbzy"
}