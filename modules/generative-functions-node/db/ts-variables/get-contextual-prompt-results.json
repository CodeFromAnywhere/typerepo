{
  "createdAt": 1671553288150,
  "updatedAt": 1671553288150,
  "deletedAt": 0,
  "createdFirstAt": 1671553288150,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getContextualPromptResults",
  "slug": "get-contextual-prompt-results",
  "operationRelativeTypescriptFilePath": "src/getContextualPromptResults.ts",
  "type": {
    "rawType": "(config?: { prompt_projectRelativePath?: string | undefined; promptSlugs?: string[] | undefined; } | undefined) => Promise<import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPromptResult\").ContextualPromptResult[] | null>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (config?: {\n  /**\n   * If given, will only provide `ContextualPromptResult`s for this path\n   */\n  prompt_projectRelativePath?: string;\n  /**\n   * If given, will only return the db result if it is part of this array\n   */\n  promptSlugs?: string[];\n}): Promise<ContextualPromptResult[] | null> => {\n  const { prompt_projectRelativePath, promptSlugs } =\n    destructureOptionalObject(config);\n\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    console.log(\"NO projectroot in getContextualPromptResults.ts\");\n    return null;\n  }\n  const prompt_absolutePath = prompt_projectRelativePath\n    ? path.join(projectRoot, prompt_projectRelativePath)\n    : undefined;\n\n  const exists = prompt_absolutePath\n    ? fs.existsSync(prompt_absolutePath)\n    : undefined;\n\n  const stats =\n    exists && prompt_absolutePath\n      ? await fs.stat(prompt_absolutePath)\n      : undefined;\n\n  const isFolder = stats ? stats.isDirectory() : false;\n  const isFile = stats ? stats.isFile() : false;\n  const pathParse = prompt_absolutePath\n    ? path.parse(prompt_absolutePath)\n    : undefined;\n\n  if (prompt_absolutePath && !exists) {\n    console.log(\"You gave a path that doesn't exist\", { prompt_absolutePath });\n    return null;\n  }\n\n  const dbResults = (await db.get(\"ContextualPromptResult\")).map(\n    omitUndefinedValues\n  );\n\n  const onlyForPath = prompt_projectRelativePath\n    ? dbResults?.filter(\n        (x) => x.prompt_projectRelativePath === prompt_projectRelativePath\n      )\n    : dbResults;\n\n  const onlyForPrompts = promptSlugs\n    ? onlyForPath.filter((result) => {\n        if (!result.contextualPromptSlug) return false;\n\n        if (promptSlugs.includes(result.contextualPromptSlug)) return true;\n\n        return false;\n      })\n    : onlyForPath;\n\n  if (!prompt_projectRelativePath || !pathParse || !prompt_absolutePath) {\n    // we don't need the .index one\n    console.log(\"No .index needed\", {\n      prompt_projectRelativePath,\n      pathParse,\n      prompt_absolutePath,\n    });\n    return onlyForPrompts;\n  }\n\n  const contextualPromptResultsJsonPath = isFile\n    ? path.join(pathParse.dir, \".index\", pathParse.name, \"prompt-results.json\")\n    : isFolder\n    ? path.join(prompt_absolutePath, \".index\", \"prompt-results.json\")\n    : undefined;\n\n  if (\n    !contextualPromptResultsJsonPath ||\n    !fs.existsSync(contextualPromptResultsJsonPath)\n  ) {\n    // console.log(\"results json path doesn't exist\", {\n    //   contextualPromptResultsJsonPath,\n    // });\n    return onlyForPrompts;\n  }\n\n  const indexResults = await readJsonFile<ContextualPromptResult[]>(\n    contextualPromptResultsJsonPath\n  );\n\n  if (!indexResults) {\n    console.log(\n      \"We tried to read the results but couldn't\",\n      contextualPromptResultsJsonPath\n    );\n    return onlyForPrompts;\n  }\n\n  const allResults: ContextualPromptResult[] = onlyForPrompts\n    .concat(indexResults)\n    .sort((a, b) => {\n      if (a.isFake) return 1;\n      if (b.isFake) return -1;\n      return 0;\n    })\n    .sort((a, b) => {\n      if (a.isFavorite) return -1;\n      if (b.isFavorite) return 1;\n      return 0;\n    });\n  return allResults;\n}",
  "description": "Gets all contextualPromptResults, but only if specific things are true\n\n- For any prompt we have for this filetype: get it from the database\n- For prompts about a folder: path/to/folder/.index/prompt-results.json\n- For prompts about a file or a selection thereof: path/to/folder/.index/[filename]/prompt-results.json\n\nNB: the slug of the ones in index should be the ID, and does not need to be set by the user, because we cannot guarantee that it's no duplicate.",
  "id": "hlgtytlenpgphrodxsvkkubi"
}