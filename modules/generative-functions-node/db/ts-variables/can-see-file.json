{
  "createdAt": 1671553283656,
  "updatedAt": 1671553283656,
  "deletedAt": 0,
  "createdFirstAt": 1671553283656,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "canSeeFile",
  "slug": "can-see-file",
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "type": {
    "rawType": "(parameters: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ReaderProps\").FolderContent | undefined, isDev: boolean) => boolean",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(\n  parameters: FolderContent | undefined,\n  isDev: boolean\n) => {\n  // dev can always see it\n  if (isDev) {\n    return true;\n  }\n\n  // no parameters seems fine\n  if (!parameters) {\n    return true;\n  }\n\n  if (parameters.isDraft || parameters.isSecret) {\n    return false;\n  }\n\n  if (\n    parameters.authorizedGroup === \"premium\" ||\n    parameters.authorizedGroup === \"enterprise\"\n  ) {\n    // for now we have no way to check if you're premium/enterprise, but we can still see them\n    return true;\n  }\n\n  if (parameters.isPrivate) {\n    // private files can still be seen, just not the content\n    return true;\n  }\n\n  return true;\n}",
  "description": "TODO: use something like this to ensure we have the type safety and not work with strings >.<\n\n```ts\nimport { frontmatterToObject } from \"frontmatter-util\";\nimport webMarkdownFileTsInterface from \"markdown-types/db/ts-interfaces/webmarkdownfile.json\";\n```",
  "id": "wzutbirpjotrnoopvekpphpy"
}