{
  "createdAt": 1671553297250,
  "updatedAt": 1671553297250,
  "deletedAt": 0,
  "createdFirstAt": 1671553297250,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getReaderPageProps",
  "slug": "get-reader-page-props",
  "operationRelativeTypescriptFilePath": "src/getReaderPageProps.ts",
  "type": {
    "rawType": "(basePath: string | undefined, queryPath: string, isAdmin?: boolean | undefined, absoluteBasePath?: string | undefined) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  /**\n   * BasePath for this project\n   */\n  basePath: string | undefined,\n  /**\n   * QueryPath as in the URL\n   */\n  queryPath: string,\n  /**\n   * If true, isDev will be overwritten to be false, even in prod\n   */\n  isAdmin?: boolean,\n  /**\n   * If given, will be used instead of basePath, if it exists.\n   */\n  absoluteBasePath?: string\n) => {\n  const contextualPromptCategories: CategoryChildObject =\n    await getContextualPromptCategories();\n\n  // console.log(\"getReaderPageProps:\", { projectRelativeFilePath });\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return {\n      props: {\n        notFound: true,\n        notFoundReason: \"No projectroot\",\n        contextualPromptCategories,\n      },\n    };\n  }\n\n  const expectedAbsolutePath = absoluteBasePath\n    ? path.join(absoluteBasePath, queryPath)\n    : basePath\n    ? path.join(projectRoot, basePath, queryPath)\n    : path.join(projectRoot, queryPath);\n\n  const { absoluteQueryPath, isFile, isFolder } = await findClosestAbsolutePath(\n    expectedAbsolutePath\n  );\n  const isValidPath = absoluteQueryPath === expectedAbsolutePath;\n\n  const folderPath = isFile\n    ? path.parse(absoluteQueryPath).dir\n    : absoluteQueryPath;\n\n  const dirents = await fs.readdir(folderPath, {\n    withFileTypes: true,\n    encoding: \"utf8\",\n  });\n\n  // TODO: Confirm that this works if you run the server locally. For development locally it should be working\n  const isDev = process.env.NODE_ENV === \"development\";\n\n  const readmeDirent = dirents.find(\n    (x) => x.name.toLowerCase() === \"readme.md\"\n  );\n\n  const readmePath = readmeDirent\n    ? path.join(folderPath, readmeDirent.name)\n    : undefined;\n  const readmeFrontmatter = readmePath\n    ? (await readMarkdownFile(readmePath))?.parameters\n    : undefined;\n  const canSeeFolder = readmePath\n    ? canSeeFileContent(readmeFrontmatter, isDev)\n    : true;\n  // TODO: look in all readmes from basePath until the folder we are, to see if this should be allowed to see. It's very easy now to still see and access content if there's folders inside of folders that should not be allowed to be seen.\n\n  const navigation: FolderContent[] = (\n    await Promise.all(\n      dirents.map(async (dirent) => {\n        // TODO: think about it. Maybe we should do something with symbolic links because we don't want to go deep forever, it could actually be nice to use this feature of the OS as well!\"\n\n        const ignoredFilesFolders = [\".DS_Store\", \".index\"];\n        if (ignoredFilesFolders.includes(dirent.name)) return;\n\n        const fullPath = path.join(folderPath, dirent.name);\n\n        const type = dirent.isDirectory()\n          ? \"folder\"\n          : dirent.isSymbolicLink()\n          ? \"link\"\n          : dirent.isFile()\n          ? \"file\"\n          : \"unknown\";\n\n        const firstFile =\n          type === \"folder\" ? await getFirstFile(fullPath) : undefined;\n\n        /**\n         * If it's a markdown file, take its parameters\n         * If it's a folder, take the parameters of the REAMDE in that folder.\n         */\n        const frontmatter =\n          getExtension(dirent.name) === \"md\"\n            ? (await readMarkdownFile(fullPath))?.parameters\n            : type === \"folder\"\n            ? (await readMarkdownFile(path.join(fullPath, \"README.md\")))\n                ?.parameters\n            : undefined;\n        const folderContent: FolderContent = {\n          type,\n          name: dirent.name,\n          firstFile,\n          frontmatter,\n\n          projectRelativePath: makeRelative(\n            path.join(folderPath, dirent.name),\n            projectRoot\n          ),\n        };\n\n        return folderContent;\n      })\n    )\n  )\n    .filter(notEmpty)\n    .map(({ frontmatter, ...other }) => {\n      const folderContent: FolderContent = {\n        ...other,\n        ...expandFrontmatter(frontmatter),\n      };\n      return folderContent;\n    })\n    .filter((file) => {\n      // filter out the files that should be HIDDEN\n      return canSeeFile(file, isDev);\n    })\n    .map(omitUndefinedValues);\n\n  const markdownParse = isFile\n    ? await readMarkdownFile(absoluteQueryPath)\n    : null;\n\n  const allowedOtherExtensions = [\".ts\", \".tsx\", \".json\"];\n\n  const pathParse = path.parse(absoluteQueryPath);\n\n  const rawContent =\n    isFile && allowedOtherExtensions.includes(pathParse.ext)\n      ? await fs.readFile(absoluteQueryPath, \"utf8\")\n      : undefined;\n\n  // TODO: in case of a folder, we might be able to show an indexed thing based on the information of this emptyness (just the files and folders around it). This could provide a lot of interesting content already.\n  const canSeeContent = canSeeFileContent(markdownParse?.parameters, isDev);\n\n  const fileContentString =\n    !canSeeContent || !canSeeFolder || !isFile\n      ? null\n      : markdownParse\n      ? markdownParse.raw\n      : rawContent\n      ? rawContent\n      : null;\n\n  const augmentedResult = await augmentMarkdown(fileContentString, {\n    // for now no code yet, it's too slow\n    isAdmin,\n    augmentCode: false,\n    augmentContextualPrompts: false,\n    augmentContextualPromptResults: true,\n    augmentStatements: true,\n    augmentWords: true,\n    externalHost: undefined,\n    markdown_projectRelativeFilePath: makeRelative(\n      absoluteQueryPath,\n      projectRoot\n    ),\n  });\n\n  const props: ReaderProps = {\n    contextualPromptCategories,\n    notFound: !isValidPath,\n    notFoundReason: isValidPath\n      ? null\n      : `Path isn't valid: ${expectedAbsolutePath}. We found ${absoluteQueryPath}`,\n    isFolder,\n    canSeeContent,\n    unauthorizedWarningMessage: canSeeContent\n      ? null\n      : \"You have to be premium to see this. [Click here to see our offers](/offers)\",\n    markdown: augmentedResult?.augmentedMarkdown || rawContent || null,\n    navigation,\n    actualProjectRelativeFilePath: makeRelative(absoluteQueryPath, projectRoot),\n    contextualPromptResults: augmentedResult?.contextualPromptResults || null,\n    contextualPromptsObject: augmentedResult?.contextualPromptsObject || null,\n  };\n\n  return { props };\n}",
  "description": "NB: this thing doesn't know about the basepath, it allows any path in the project.\n\nIdea: would it be easy to allow for path outside of project as well?",
  "id": "tmpvrphhchisseqghivosmml"
}