{
  "createdAt": 1671553282957,
  "updatedAt": 1671553282957,
  "deletedAt": 0,
  "createdFirstAt": 1671553282957,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/general.ts",
  "commentsInside": [],
  "rawText": " (frontmatter?: Frontmatter) => {\n  if (!frontmatter) return {};\n  return {\n    isPrivate: frontmatter.isPrivate === \"true\",\n    authorizedGroup: frontmatter.authorizedGroup,\n    isDraft: frontmatter.isDraft === \"true\",\n    isSecret: frontmatter.isSecret === \"true\",\n  };\n}",
  "name": "expandFrontmatter",
  "slug": "expand-frontmatter",
  "parameters": [
    {
      "name": "frontmatter",
      "schema": {
        "$ref": "#/definitions/Frontmatter"
      },
      "simplifiedSchema": {
        "fullComment": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
        "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
        "properties": [],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "{ isPrivate?: undefined; authorizedGroup?: undefined; isDraft?: undefined; isSecret?: undefined; } | { isPrivate: boolean; authorizedGroup: string; isDraft: boolean; isSecret: boolean; }",
    "typeDefinition": {
      "optional": false,
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "isPrivate": {
              "type": "boolean"
            },
            "authorizedGroup": {
              "type": "string",
              "allOf": [
                {
                  "transform": [
                    "trim"
                  ]
                },
                {
                  "minLength": 1
                }
              ]
            },
            "isDraft": {
              "type": "boolean"
            },
            "isSecret": {
              "type": "boolean"
            }
          },
          "required": [
            "isPrivate",
            "authorizedGroup",
            "isDraft",
            "isSecret"
          ],
          "optional": false
        },
        {
          "type": "object",
          "properties": {
            "isPrivate": {
              "type": "boolean"
            },
            "authorizedGroup": {
              "type": "string",
              "allOf": [
                {
                  "transform": [
                    "trim"
                  ]
                },
                {
                  "minLength": 1
                }
              ]
            },
            "isDraft": {
              "type": "boolean"
            },
            "isSecret": {
              "type": "boolean"
            }
          },
          "required": [
            "isPrivate",
            "authorizedGroup",
            "isDraft",
            "isSecret"
          ],
          "optional": false
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 273,
    "lines": 9,
    "bytes": 273,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 9,
    "numberOfFiles": 1
  },
  "id": "ybhvcbwpaxqrpjdpxvshsbka"
}