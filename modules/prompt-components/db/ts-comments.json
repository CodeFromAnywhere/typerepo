[
  {
    "createdAt": 1671483649816,
    "updatedAt": 1671483649816,
    "deletedAt": 0,
    "createdFirstAt": 1671483649816,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/FilePromptSelect.tsx",
    "comment": "Component that shows a selectbox for different prompts that can be applied on this file",
    "rawStatement": "export const FilePromptSelect = (props: {\n  items: ContextualPrompt[] | undefined;\n  contextContent: string;\n  context_projectRelativeFilePath?: string;\n}) => {\n  const { items, contextContent, context_projectRelativeFilePath } = props;\n\n  const { selection: contextSelection } = useLastSelection();\n  const showPromptAlert = usePromptResultAlert();\n  const alert = useAlert();\n\n  const selectItems = items?.map((prompt) => {\n    const item: Item<string> = { label: prompt.name, value: prompt.id };\n\n    return item;\n  });\n  const allSelectItems = [{ label: \"Select a prompt\", value: \"\" }].concat(\n    selectItems || []\n  );\n  const [SelectComponent, _, setValue] = useSelect(\n    allSelectItems,\n    undefined,\n    async (selection) => {\n      const id = selection?.value;\n\n      const prompt = items?.find((x) => x.id === id);\n\n      if (!prompt) {\n        alert?.(\"Invalid value\");\n        return;\n      }\n\n      setValue(null);\n\n      processPrompt({\n        contextualPromptSlug: prompt.slug,\n        contextualContent: {\n          contextContent,\n          context_projectRelativeFilePath,\n          contextSelection,\n        },\n        showPromptAlert,\n      });\n    }\n  );\n  return <SelectComponent />;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 9,
    "lastLine": 11,
    "id": "tamsmvxynjwawudiapkrtplq"
  }
]