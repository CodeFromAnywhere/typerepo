{
  "createdAt": 1674134614065,
  "updatedAt": 1674134614065,
  "deletedAt": 0,
  "createdFirstAt": 1674134614065,
  "isApiExposed": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/usePromptResultAlert.tsx",
  "commentsInside": [],
  "rawText": " () => {\n  // const alert = useAlert();\n\n  const showPromptAlert: ShowPromptAlertFunction = (\n    originalPromptName,\n    _,\n    thread,\n    projectRelativeFilePath\n  ) => {\n    // const markdownRender = (\n    //   <MarkdownContent config={{}} content={textMarkdown || \"No content\"} />\n    // );\n\n    successToast(\n      `${originalPromptName} is now being executed on ${projectRelativeFilePath} (thread: ${thread})`\n    );\n    // const buttons: AlertButton[] = [\n    //   { text: \"Okay\", style: \"cancel\", onPress: () => null },\n    //   {\n    //     text: \"Share\",\n    //     style: \"default\",\n    //     onPress: () => {\n    //       // should open share view\n    //     },\n    //   },\n    //   {\n    //     text: \"Respond\",\n    //     style: \"default\",\n    //     onPress: async () => {\n    //       //  submits extra request that opens a new alert with the answer to that\n    //       let response = prompt(\"What do you want to say?\", \"\");\n\n    //       const apiResult = await api.processChatGptPrompt({\n    //         contextContent: null,\n    //         selectionContent: null,\n    //         contextualPromptSlug: undefined,\n    //         customPromptContent: response || undefined,\n    //         saveNewPromptWithName: null,\n    //         isHeadless: false,\n    //         isDeferred: true,\n    //         thread,\n    //         prompt_projectRelativePath: projectRelativeFilePath,\n    //       });\n\n    //       // NB: Recursion!\n    //       showPromptAlert(\n    //         originalPromptName,\n    //         apiResult.result?.result?.text || \"No response\",\n    //         thread,\n    //         projectRelativeFilePath\n    //       );\n\n    //       // could also enable a loading indicator somewhere\n    //     },\n    //   },\n    // ];\n\n    // alert?.(originalPromptName, markdownRender, buttons);\n  };\n\n  return showPromptAlert;\n}",
  "name": "usePromptResultAlert",
  "slug": "use-prompt-result-alert",
  "parameters": [],
  "description": "Recursive hook that calls its own function if you click \"respond\", which creates an additional item in the thread",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/ai/prompt-components/src/usePromptResultAlert\").ShowPromptAlertFunction",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1959,
    "lines": 62,
    "bytes": 1959,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 62,
    "numberOfFiles": 1
  },
  "id": "yiyvnjtkglbuqmarvheyljbn"
}