{
  "createdAt": 1671017282823,
  "updatedAt": 1671017282823,
  "deletedAt": 0,
  "createdFirstAt": 1671017282823,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/useSelectionPromptsMenu.tsx",
  "commentsInside": [],
  "rawText": " (\n  selectionPrompts: ContextualPrompt[],\n  contextualContent: ContextualContent\n) => {\n  const showPromptAlert = usePromptResultAlert();\n\n  const contextSelection = useLastSelection();\n\n  /**\n   * TODO: also sort them here based on which selection you make (`.contextualContent.contextSelection`) and your settings (probably isFavorite first, but other sorting may be beneficial.\n   */\n  const promptItems = selectionPrompts.map((prompt) => {\n    const item: ContextMenuItem = {\n      onClick: () =>\n        processPrompt({\n          contextualPromptSlug: prompt.slug,\n          contextualContent: { ...contextualContent, contextSelection },\n          showPromptAlert,\n        }),\n      getTitle: () => prompt.name || \"Noname\",\n      // TODO: not sure if this is the right level, but eventually we want to filter based on the selection, maybe\n      getIsEnabled: () => true,\n    };\n\n    return item;\n  });\n\n  const alert = useAlert();\n\n  const selectionWordCount = contextSelection\n    ? contextSelection.split(\" \").length\n    : 0;\n\n  const isStatement = selectionWordCount > 1;\n  const isWord = selectionWordCount <= 4;\n\n  const { renderContextMenu, openContextMenuProps, onClose, isOpen } =\n    useContextMenu({\n      items: [\n        {\n          onClick: async () => {\n            if (!contextSelection) {\n              alert?.(\n                \"Select a word\",\n                `You didn't select a word or word-combination (up to 4 words)`\n              );\n              return;\n            }\n            const apiResult = await api.addWord(contextSelection, undefined);\n\n            showStandardResponse(apiResult);\n          },\n          getTitle: () => \"ðŸ§  Add word\",\n          getIsEnabled: () => isWord,\n        },\n\n        {\n          onClick: async () => {\n            if (!contextSelection) {\n              alert?.(\n                \"Select a statement\",\n                `You didn't select a statement (minimum 2 words)`\n              );\n              return;\n            }\n\n            // NB: for now, don't let user add agreement and importancy, just assume the defaults. Let's see where this goes first\n\n            const apiResult = await api.addStatement(\n              contextSelection,\n              undefined,\n              undefined\n            );\n\n            showStandardResponse(apiResult);\n          },\n          getTitle: () => \"ðŸ§  Add statement\",\n          getIsEnabled: () => isStatement,\n        },\n\n        {\n          getTitle: () => \"ðŸ•Š Free-form prompt\",\n          getIsEnabled: () => true,\n          onClick: async () => {\n            let question = prompt(\"What do you want to ask/prompt?\");\n\n            if (!question || question === \"\") {\n              return;\n            }\n\n            const customPromptContent = `I am reading this file:\\n\\n\\`\\`\\`\\n${contextualContent.contextContent}\\n\\`\\`\\`\\n\\nMore specifically, I'm looking at this part: \\n\\n\\`\\`\\`\\n${contextualContent.contextSelection}\\n\\`\\`\\`\\n\\n${question}`;\n\n            await processPrompt({\n              contextualContent,\n              showPromptAlert,\n              customPromptContent,\n            });\n          },\n        },\n\n        {\n          getTitle: () => \"ðŸŽ¤ Speak\",\n          getIsEnabled: () => true,\n          onClick: () => {\n            alert?.(\n              \"Coming soon!\",\n              <Div>\n                <P>\n                  This button should let you record your voice so you can ask a\n                  question through human speech. The speech will be converted\n                  into text by whisper, it will then choose an existing prompt\n                  action, or if it can't find that, do a free-form prompt.\n                </P>\n\n                <P>\n                  P.S. Would be nice if this option is there by default, also\n                  for other menus, or it's even accessible via other ways, but\n                  this is a great way to try it out first.\n                </P>\n              </Div>\n            );\n          },\n        },\n\n        ...promptItems,\n      ],\n    });\n\n  // ensure the thing only updates if the menu opens\n  const result = {\n    renderContextMenu,\n    openContextMenuProps,\n    onClose,\n    isOpen,\n  };\n\n  return result;\n}",
  "name": "useSelectionPromptsMenu",
  "slug": "use-selection-prompts-menu",
  "parameters": [
    {
      "name": "selectionPrompts",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ContextualPrompt"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nModel for prompting information from third party sources",
              "properties": [
                {
                  "name": "contextType",
                  "required": false,
                  "schema": {
                    "fullComment": "If given, will be used to filter the selection of prompts to match the context type",
                    "items": [
                      {
                        "schema": {
                          "enum": [
                            "code",
                            "data",
                            "text"
                          ],
                          "fullComment": "",
                          "type": "string"
                        },
                        "name": "FileType"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "instantExecution",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "isFavorite",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "categoryStackCalculated",
                  "required": false,
                  "schema": {
                    "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                    "nb": "Changing this value when updating/upserting, changes where the item is located!",
                    "items": [
                      {
                        "schema": {
                          "type": "string"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "pricing",
                  "required": false,
                  "schema": {
                    "enum": [
                      "bad",
                      "good",
                      "premium",
                      "enterprise",
                      "private"
                    ],
                    "type": "string"
                  }
                },
                {
                  "name": "slug",
                  "required": true,
                  "schema": {
                    "fullComment": "kebab-case of the name, should be unique\n\nuse this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "fullComment": "descriptive name of what the prompt does, the same way as you would name a function.\n\nUsed to generate the name of the function",
                    "type": "string"
                  }
                },
                {
                  "name": "language",
                  "required": true,
                  "schema": {
                    "enum": [
                      "english",
                      "dutch",
                      "nepali",
                      "portuguese",
                      "brazilian",
                      "german",
                      "french",
                      "spanish",
                      "italian",
                      "norwegian",
                      "swedish",
                      "danish",
                      "vietnamese",
                      "indonesian",
                      "southAfrican",
                      "tokiPona",
                      "hindi",
                      "mandarin",
                      "arabic",
                      "bengali",
                      "urdu",
                      "japanese",
                      "swahili"
                    ],
                    "fullComment": "all currently supported languages",
                    "type": "string"
                  }
                },
                {
                  "name": "createdAt",
                  "required": true,
                  "schema": {
                    "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                    "type": "number"
                  }
                },
                {
                  "name": "updatedAt",
                  "required": true,
                  "schema": {
                    "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                    "type": "number"
                  }
                },
                {
                  "name": "deletedAt",
                  "required": true,
                  "schema": {
                    "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                    "type": "number"
                  }
                },
                {
                  "name": "createdFirstAt",
                  "required": true,
                  "schema": {
                    "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                    "type": "number"
                  }
                },
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "id",
                  "required": true,
                  "schema": {
                    "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                    "type": "string"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "fullComment": "Short description of the function.\n\nUsed to be added to as a doc-comment when generating a function for the prompt",
                    "type": "string"
                  }
                },
                {
                  "name": "scopeProjectRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "if given, should be a path to a file or folder, so the prompt will never be shown outside of this scope\n\nNever stored! Is found based on the location of the file in your file system",
                    "type": "string"
                  }
                },
                {
                  "name": "model",
                  "required": false,
                  "schema": {
                    "fullComment": "Which models can this be applied on?",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "promptContent",
                  "required": true,
                  "schema": {
                    "fullComment": "Only prompt is stored (string)",
                    "type": "string"
                  }
                },
                {
                  "name": "folderContentContext",
                  "required": false,
                  "schema": {
                    "enum": [
                      "flat",
                      "recursive"
                    ],
                    "fullComment": "Variable: ${folder}\n\nIf set to `flat`, all folder content will be added as context, without sub-folders\n\nIf set to `recursive`, all folder content will be added as context, including sub-folders",
                    "type": "string"
                  }
                },
                {
                  "name": "usesContext",
                  "required": false,
                  "schema": {
                    "fullComment": "Variable: ${context}\n\nWhether or not the prompt requires the context\n\nCan be a file contents, but can also be the contents of an HTML page",
                    "type": "boolean"
                  }
                },
                {
                  "name": "usesSelection",
                  "required": false,
                  "schema": {
                    "fullComment": "Variable: ${selection}\n\nWhether or not the prompt requires the selection",
                    "type": "boolean"
                  }
                },
                {
                  "name": "usesAnyContext",
                  "required": false,
                  "schema": {
                    "fullComment": "Variable: ${any}\n\nIf true, will return this prompt in any context prompt, as selection results because it can use any of them as its variable. It will use the smallest one available.",
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            },
            "name": "ContextualPrompt"
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "contextualContent",
      "schema": {
        "$ref": "#/definitions/ContextualContent"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "contextContent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextSelection",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context_projectRelativeFilePath",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Provides the props needed to render a context-menu that allows you to add prompts and other things into your database. All actions require api access.",
  "returnType": {
    "rawType": "{ renderContextMenu: () => JSX.Element | null; openContextMenuProps: { ref: React.RefObject<HTMLDivElement>; onContextMenu: (event: React.MouseEvent<Element, MouseEvent>) => void; onTouchStart: (event: React.TouchEvent<Element>) => void; onTouchEnd: () => void; onClick: (mouseEvent: React.MouseEvent<Element, MouseEvent>) => void; style: React.CSSProperties; }; onClose: () => void; isOpen: boolean; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "renderContextMenu": {
          "type": "object",
          "properties": {}
        },
        "openContextMenuProps": {
          "type": "object",
          "properties": {
            "ref": {
              "type": "object",
              "properties": {
                "current": {
                  "enum": [
                    "ul",
                    ""
                  ],
                  "x-enumNames": [
                    "ul",
                    ""
                  ],
                  "type": "string"
                }
              }
            },
            "onContextMenu": {
              "type": "object",
              "properties": {}
            },
            "onTouchStart": {
              "type": "object",
              "properties": {}
            },
            "onTouchEnd": {
              "type": "object",
              "properties": {}
            },
            "onClick": {
              "type": "object",
              "properties": {}
            },
            "style": {
              "$ref": "#/definitions/React.CSSProperties"
            }
          },
          "required": [
            "ref",
            "onContextMenu",
            "onTouchStart",
            "onTouchEnd",
            "onClick",
            "style"
          ]
        },
        "onClose": {
          "type": "object",
          "properties": {}
        },
        "isOpen": {
          "type": "boolean"
        }
      },
      "required": [
        "renderContextMenu",
        "openContextMenuProps",
        "onClose",
        "isOpen"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "renderContextMenu",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "openContextMenuProps",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "ref",
                "required": true,
                "schema": {
                  "properties": [
                    {
                      "name": "current",
                      "required": false,
                      "schema": {
                        "enum": [
                          "ul",
                          ""
                        ],
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "onContextMenu",
                "required": true,
                "schema": {
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "onTouchStart",
                "required": true,
                "schema": {
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "onTouchEnd",
                "required": true,
                "schema": {
                  "properties": [],
                  "type": "object"
                }
              },
              {
                "name": "onClick",
                "required": true,
                "schema": {
                  "properties": [],
                  "type": "object"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "onClose",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "isOpen",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 9,
  "size": {
    "characters": 4348,
    "lines": 138,
    "bytes": 4356,
    "bytesPerCharacter": 1.0018399264029438,
    "charactersPerLine": 32,
    "linesPerFile": 138,
    "numberOfFiles": 1
  },
  "id": "ldjimnifvncoptjsgtarsaxd"
}