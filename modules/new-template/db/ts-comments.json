[
  {
    "createdAt": 1667635801991,
    "updatedAt": 1667635801991,
    "deletedAt": 0,
    "createdFirstAt": 1667635801991,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/newTemplate.ts",
    "comment": "Returns either the `basePath` of the created template, or undefined if something went wrong",
    "rawStatement": "export const newTemplate = async (\n  type: string,\n  destinationPath?: string\n): Promise<string | undefined> => {\n  const manualProjectRoot = getProjectRoot(destinationPath);\n\n  const source = path.resolve(__dirname, \"..\", \"assets\", \"templates\", type);\n  const templateExists = fs.existsSync(source);\n\n  if (!templateExists) {\n    log(\n      `${type} cannot be generated yet. Create a template in assets/templates/${type}`\n    );\n    return;\n  }\n\n  const basePath = destinationPath\n    ? destinationPath\n    : path.join(process.cwd(), type);\n  // const availableFolderName = await getAvailableOperationName(\n  //   rootFolderPath,\n  //   type,\n  //   manualProjectRoot\n  // );\n\n  // const basePath = path.join(rootFolderPath, availableFolderName);\n\n  // if (fs.existsSync(basePath)) {\n  //   log(`${basePath} already exists`);\n  //   return;\n  // }\n  // Make the non-existing folder\n  await fs.mkdir(basePath, { recursive: true });\n  // Copy the template inthere\n  await fs.cpAsync(source, basePath, { recursive: true });\n  // Rename templatefiles if needed\n  await renameTemplateFiles({ appDir: basePath });\n\n  return basePath;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 9,
    "lastLine": 12,
    "id": "ygjcaiebduxbruxlmpjqphvc"
  }
]