[
  {
    "createdAt": 1673523024509,
    "updatedAt": 1673523024509,
    "deletedAt": 0,
    "createdFirstAt": 1673523024509,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "NB: this is removed at compilation so it's not a dependency and doesn't end up in the bundle",
    "rawStatement": "import type {\n  ApiConfig,\n  ApiTypeWithoutConfig,\n  ApiTypeWithConfig,\n  RealApiReturnType,\n  QueryType,\n} from \"api-types\";",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 1,
    "lastLine": 1,
    "id": "dlinirzqfkscrlcedwxuewhq"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "NB: this is the main reason why we have an `sdk-api-keys`",
    "rawStatement": "import { functionApiKeys } from \"sdk-api-keys\";",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 12,
    "lastLine": 14,
    "id": "slmstyypkreeusxkyzivnwwm"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "",
    "rawStatement": "export const AUTH_TOKEN_STORAGE_KEY = \"api.authToken\";",
    "parameters": {},
    "types": [],
    "firstLine": 17,
    "lastLine": 19,
    "id": "aysbloxxzrgswzetwhnqldfl"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "Should contain a string unix timestamp of the last time the API had no response.",
    "rawStatement": "export const API_NO_RESPONSE_TIME_KEY = \"api.timeoutAt\";",
    "parameters": {},
    "types": [],
    "firstLine": 21,
    "lastLine": 23,
    "id": "yowsnnuqbylmkkimicrqbqzt"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "Used for calling the actual api for a function with some config\n\nNB: this is not a typed function as we are just overwriting it so we don't need any inference on this",
    "rawStatement": "export const untypedApiFunction = async (\n  fnName: string,\n  config: ApiConfig,\n  ...parameters: any\n): Promise<RealApiReturnType<any>> => {\n  // TODO: document this convention\n  const storageAuthToken: string | undefined = await getItem(\n    AUTH_TOKEN_STORAGE_KEY\n  );\n\n  const authToken = config.authToken || storageAuthToken;\n  const realApiUrl = config.apiUrl || apiUrl;\n\n  if (realApiUrl === undefined) {\n    return {\n      isSuccessful: false,\n      isNotConnected: true,\n      message: \"The API cannot be found\",\n    };\n  }\n\n  const fullUrl = `${realApiUrl}/function/${fnName}`;\n\n  try {\n    const abortController = new AbortController();\n    const id = setTimeout(\n      () => abortController.abort(),\n      config.timeout || 10000\n    );\n\n    const response = await fetch(fullUrl, {\n      method: \"POST\",\n      signal: config.timeout ? abortController.signal : undefined,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ authToken, parameters }),\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        setItem(API_NO_RESPONSE_TIME_KEY, \"0\");\n\n        return response;\n      })\n      .catch((error) => {\n        console.log({\n          explanation:\n            \"Your request could not be executed, you may be disconnected or the server may not be available.\",\n          error,\n          errorStatus: error.status,\n          errorString: String(error),\n        });\n\n        setItem(API_NO_RESPONSE_TIME_KEY, String(Date.now()));\n        return {\n          isSuccessful: false,\n          isNotConnected: true,\n          message:\n            \"Error! There's no API running (yet). Please read the docs to set this up locally. More info in the console.\",\n        };\n      });\n\n    clearTimeout(id);\n    return response;\n  } catch (e) {\n    setItem(API_NO_RESPONSE_TIME_KEY, String(Date.now()));\n\n    return {\n      isSuccessful: false,\n      isNotConnected: true,\n      message:\n        \"The API didn't resolve, and the fetch crashed because of it: \" +\n        String(e),\n    };\n  }\n};",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 27,
    "lastLine": 31,
    "id": "wqokruhhthentnvsrsldrgbk"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "This object contains a api function for every function in the backend\n\nThe difference from `api` is that it allows you to also insert custom api configurations",
    "rawStatement": "export const apiWithConfig = mergeObjectsArray(\n  functionApiKeys.map((fnName) => {\n    const apiWithConfigFunction = (config: ApiConfig, ...parameters: any[]) =>\n      untypedApiFunction(fnName, config, ...parameters);\n    const objectPart = { [fnName]: apiWithConfigFunction };\n\n    return objectPart;\n  })\n) as unknown as ApiTypeWithConfig;",
    "parameters": {},
    "types": [],
    "firstLine": 110,
    "lastLine": 114,
    "id": "lhmapubalsiadhgyytxhwgct"
  },
  {
    "createdAt": 1673523024510,
    "updatedAt": 1673523024510,
    "deletedAt": 0,
    "createdFirstAt": 1673523024510,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/api.ts",
    "comment": "This object contains an api function for every function in the backend\n\n\nNB: only use this if you can access localStorage of the browser or the app. This means this won't work in node or in getStaticProps functions or so",
    "rawStatement": "export const api = mergeObjectsArray(\n  functionApiKeys.map((fnName) => {\n    const config: ApiConfig = { apiUrl };\n    const apiWithConfigFunction = (...parameters: any[]) =>\n      untypedApiFunction(fnName, config, ...parameters);\n    const objectPart = { [fnName]: apiWithConfigFunction };\n\n    return objectPart;\n  })\n) as unknown as ApiTypeWithoutConfig;",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 125,
    "lastLine": 130,
    "id": "sfzxhxrgyngfplcyhkmfbkup"
  }
]