{
  "createdAt": 1666260899192,
  "updatedAt": 1666260899192,
  "deletedAt": 0,
  "createdFirstAt": 1666260899192,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getSdkFunctionPaths.ts",
  "commentsInside": [],
  "rawText": " async (): Promise<false | FnMatch[]> => {\n  const menu = await getMenu();\n\n  if (!menu) {\n    return false;\n  }\n\n  const paths = Object.keys(menu).reduce((all, relativeOperationPath) => {\n    //@ts-ignore\n    const fnArray: TsFunction[] | undefined = menu[relativeOperationPath];\n\n    return fnArray && Array.isArray(fnArray)\n      ? all.concat(\n          fnArray.map((x) => {\n            return {\n              matcher: `${relativeOperationPath}/${x.name}`,\n              relativeOperationPath,\n              ...x,\n            };\n          })\n        )\n      : all;\n  }, [] as FnMatch[]);\n\n  return paths;\n}",
  "name": "getSdkFunctionPaths",
  "slug": "get-sdk-function-paths",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "Promise<false | import(\"/Users/king/King/operations/tools/interfaces/cli/function-util/src/getSdkFunctionPaths\").FnMatch[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 609,
    "lines": 26,
    "bytes": 609,
    "bytesPerCharacter": 1,
    "charactersPerLine": 23,
    "linesPerFile": 26,
    "numberOfFiles": 1
  },
  "id": "pbakqcntvackkvampynbjlzb"
}