{
  "createdAt": 1666260893537,
  "updatedAt": 1666260893537,
  "deletedAt": 0,
  "createdFirstAt": 1666260893537,
  "classification": "const",
  "comments": [],
  "isExported": false,
  "name": "getParameters",
  "slug": "get-parameters",
  "operationRelativeTypescriptFilePath": "src/converse.ts",
  "type": {
    "rawType": "(parameters?: import(\"/Users/king/King/operations/tools/types/code-types/build/TsFunction\").FunctionParameter[] | undefined) => unknown",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (parameters?: FunctionParameter[]) => {\n  return parameters\n    ? oneByOne(parameters, async (parameter) => {\n        /** TODO: Walking:\n         * - if a parameter is a string, it's easy\n         * - if a parameter is a number or boolean, just cast string to that\n         * - if a parameter is an object, walk over all keys\n         * - if a parameter is/can be an array, just insert the first via the above way, but ask if you want to insert another entry after that\n         * - for every entry you can also enter '?'. This will look for all operations that return something that could be used as entry here.\n         */\n        const answer = await ask(`${parameter.name} (${parameter.required})`);\n        return answer;\n      })\n    : undefined;\n}",
  "description": "",
  "id": "pklgifpqdoscrnizvqbetvne"
}