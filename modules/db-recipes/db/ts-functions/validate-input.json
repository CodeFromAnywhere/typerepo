{
  "createdAt": 1669962351150,
  "updatedAt": 1669962351150,
  "deletedAt": 0,
  "createdFirstAt": 1669962351150,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/validateInput.ts",
  "commentsInside": [],
  "rawText": " <TFunctionName extends keyof typeof sdk>(\n  functionName: TFunctionName,\n  parameters: undefined | any[],\n  tsFunction: TsFunction\n): ValidationResult => {\n  const invalidParameters =\n    tsFunction.parameters\n      ?.map((parameter, index) => {\n        if (!parameter.schema) return;\n\n        const validate = ajv.compile(parameter.schema);\n\n        const value = parameters?.[index];\n\n        const isValid = validate(value);\n\n        if (isValid) return;\n\n        return { isValid, parameter, value };\n      })\n      .filter(notEmpty) || [];\n\n  const isValid = invalidParameters.length === 0;\n  if (!isValid) {\n    log(\n      `According to the schema, you have given invalid arguments to the function`,\n      { type: \"warning\" }\n    );\n    console.dir({ invalidParameters }, { depth: 99 });\n  }\n\n  return { isValid };\n}",
  "name": "validateInput",
  "slug": "validate-input",
  "parameters": [],
  "description": "wrapper function that takes that data but also the interface of the function and validates the parameters before it executes the function.",
  "returnType": {
    "rawType": "ValidationResult",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fieldStack": {
                "type": "array",
                "items": {
                  "type": "string",
                  "allOf": [
                    {
                      "transform": [
                        "trim"
                      ]
                    },
                    {
                      "minLength": 1
                    }
                  ]
                }
              },
              "error": {
                "type": "string",
                "allOf": [
                  {
                    "transform": [
                      "trim"
                    ]
                  },
                  {
                    "minLength": 1
                  }
                ]
              }
            },
            "required": [
              "fieldStack",
              "error"
            ]
          }
        }
      },
      "required": [
        "isValid"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "isValid",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "errors",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "properties": [
                    {
                      "name": "fieldStack",
                      "required": true,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "error",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 961,
    "lines": 33,
    "bytes": 961,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 33,
    "numberOfFiles": 1
  },
  "id": "whfzrozvhopbcpyfskuyyuki"
}