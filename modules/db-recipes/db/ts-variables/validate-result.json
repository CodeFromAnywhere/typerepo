{
  "createdAt": 1671316732984,
  "updatedAt": 1671316732984,
  "deletedAt": 0,
  "createdFirstAt": 1671316732984,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "validateResult",
  "slug": "validate-result",
  "operationRelativeTypescriptFilePath": "src/validateResult.ts",
  "type": {
    "rawType": "<TFunctionName extends \"addStatement\" | \"addWord\" | \"biggestFunctionName\" | \"cleanup\" | \"controlChatGptWrapper\" | \"controlChatGpt\" | \"convertTo1337speak\" | \"deletePromptResult\" | \"developersQuote\" | \"diaryToInstagram\" | \"documentationWriting\" | \"emojiAugmentation\" | \"explainInDutch\" | \"explainInNepali\" | \"explainInPortuguese\" | \"explain\" | \"fixGrammarAndSpellingMistakes\" | \"getContextualPromptCategories\" | \"getContextualPromptResultJsonFilePath\" | \"getContextualPrompt\" | \"getObjectForkKeyRecursively\" | \"gptIdeasRegisterWithContext\" | \"haiku\" | \"improveCode\" | \"keywords\" | \"marcusAurelius\" | \"poem\" | \"processChatGptPrompt\" | \"removeAllFake\" | \"rickAndMortyRick\" | \"rickAndMorty\" | \"setIsFavoritePromptResult\" | \"socratesAndSnoopDogg\" | \"storytelling\" | \"translateEverythingIntoHindi\" | \"translateEverythingPortuguese\" | \"translateEverything\" | \"translateToPortuguese\" | \"typescriptExplain\" | \"williamShakespear\" | \"writeContextualPromptSdk\" | \"writeCreatePromptCode\" | \"ye\" | \"yodafy\" | \"augmentMarkdown\" | \"getContextualPromptResults\" | \"getContextualPromptsArray\" | \"getContextualPrompts\" | \"getFolderRelativeScopeDbFilePath\" | \"getReaderPageProps\" | \"makeMarkdownLink\" | \"readerPageGetStaticPaths\" | \"readerPageGetStaticProps\" | \"compressAsset\" | \"deleteReferencedAsset\" | \"downloadRemoteAsset\" | \"findAbsoluteAssetPathFromReference\" | \"findAllProjectMedia\" | \"getAssetDirectlyGetApi\" | \"getReferencedAssetGetApi\" | \"getStorageLocationInfo\" | \"getTemporaryAssetsFolderPath\" | \"processAsset\" | \"processItemAssets\" | \"removeOldTemporaryAssets\" | \"serverDownloadReply\" | \"uploadAssetWithContext\" | \"folderGetUpdatedAt\" | \"getExtension\" | \"getFileOrFolderName\" | \"getFolderJs\" | \"getSubExtension\" | \"isPathRelative\" | \"makeRelative\" | \"removeTrailingSlash\" | \"withoutExtension\" | \"getAssociatedMd\" | \"getAvailableFolderPath\" | \"getOperationBins\" | \"getOperationPackageName\" | \"getPackageJson\" | \"getPackageSourcePaths\" | \"isEqualArray\" | \"renameTemplateFiles\" | \"renameTemplateToNormalFile\" | \"renameToTemplateFile\" | \"setJsonKey\" | \"setKeyAtLocation\" | \"initiateWatch\" | \"makeSubscription\" | \"pickWatcher\" | \"watchFoldersChokidar\" | \"watchFoldersFs\" | \"watchFolders\" | \"writeToAssets\" | \"allOperationsRemoveJsSrc\" | \"allOperationsToMarkdown\" | \"clearAllTsDatabases\" | \"codeAll\" | \"forAllFiles\" | \"forAllFolders\" | \"getAllOperationClassifications\" | \"gitShipAllRepos\" | \"mdAllOperations\" | \"minifyAllOperations\" | \"publishAllOperations\" | \"removeAllFiles\" | \"removeAllFolders\" | \"removeAll\" | \"renameAll\" | \"runScriptEverywhere\" | \"setScriptEverywhere\" | \"exploreOperation\" | \"exploreProject\" | \"getExplorationType\" | \"getFileWithExtension\" | \"getFolderExplorationDetails\" | \"getFrontmattersMappedObject\" | \"getInstanceNames\" | \"getProjectRelativePaths\" | \"getTodoPages\" | \"getTodoPaths\" | \"hasSameProjectPath\" | \"getAllOperationSourcePaths\" | \"determineFileType\" | \"exploreGitRepoFolders\" | \"exploreMultiple\" | \"exploreOperationFolders\" | \"explorePreset\" | \"explore\" | \"findAllDocsFolderPaths\" | \"findAllDotGitFolders\" | \"findAllFoldersWithName\" | \"findAllPackages\" | \"findAllTodoFolderPaths\" | \"findFilesRecursively\" | \"pathArrayIsOperation\" | \"deleteApp\" | \"listApps\" | \"logApp\" | \"logTableObject\" | \"pm2ConnectDisconnect\" | \"pm2Connect\" | \"restartApp\" | \"startApp\" | \"stopAllAppsExcept\" | \"stopApps\" | \"watchAll\" | \"exitIfOperationsChange\" | \"gitCommitAllCron\" | \"watchOperations\" | \"brigtnessFull\" | \"brigtnessZero\" | \"decreaseBrightness\" | \"increaseBrightness\" | \"macosSetup\" | \"fileExplorerOpen\" | \"playMusic\" | \"generateRecurringReminders\" | \"remindMeAboutNextMinute\" | \"setRandomTimezone\" | \"disableDarkMode\" | \"enableDarkMode\" | \"setDarkmodeCommand\" | \"toggleDarkMode\" | \"disableScreenSleep2\" | \"disableScreenSleep\" | \"enableScreenSleep\" | \"downVolume\" | \"getVolume\" | \"setVolume\" | \"upVolume\" | \"getOpenableFilePath\" | \"vscodeOpen\" | \"loginToDevto\" | \"publishBlogOnDevTo\" | \"typeIntoTheField\" | \"facebookPostOnTheGroup\" | \"facebookPost\" | \"facebookTimeLinePost\" | \"getLatestFacebookPostUrl\" | \"sendFacebookMessage\" | \"searchAndDownloadGifs\" | \"buildQuery\" | \"errArrayLenZero\" | \"errFileSize\" | \"errFileType\" | \"errInvalidType\" | \"errTextLenZero\" | \"errTextOverflow\" | \"generateArrayFromJson\" | \"getStringForTranslation\" | \"launch\" | \"startTranslation\" | \"storeResult\" | \"translateText\" | \"sendMail\" | \"publishBlogOnMedium\" | \"publishBlogOnReddit\" | \"sendSms\" | \"getTwitterPostUrl\" | \"postTweetOnTwitter\" | \"youtubeSearchAndDownload\" | \"youtubeSearch\" | \"youtubeToMp3\" | \"youtubeToMp4\" | \"getPort\" | \"getBundleSummary\" | \"getDbModelsForBundle\" | \"createBackup\" | \"getHumanReadableDate\" | \"createDistribution\" | \"filterInterfacesFromOperationNames\" | \"getDbModelsFromOperations\" | \"applyDataset\" | \"calculateBundleDependencies\" | \"calculateToPath\" | \"copyCodestories\" | \"copyDocsAndReadme\" | \"copyFromRepoToNiche\" | \"copyOperation\" | \"copyReadmesBeforeFolderToBundle\" | \"copyTodosIntoBundle\" | \"findAndCopyOperations\" | \"findInherited\" | \"generateAllBundles\" | \"generateBundle\" | \"generateBundles\" | \"getBundlePaths\" | \"getCompareFn\" | \"getDataset\" | \"getIndirectDependencies\" | \"getMatchingFilters\" | \"mergeBundleConfigs\" | \"syncInformation\" | \"syncNicheFolder\" | \"yarnInstall\" | \"installNodeModules\" | \"yarnInstallNewDistribution\" | \"detectLanguage\" | \"generateSimpleSentence\" | \"makeAudioCourse\" | \"sleep\" | \"createFolder\" | \"getAllMarkdownFiles\" | \"getFileInfo\" | \"getTranslatedWord\" | \"markdownStoreAndRecord\" | \"parseMarkdownWordByWord\" | \"recordMdFile\" | \"startMarkdownTranslator\" | \"translatedArrayToKeyValue\" | \"watchMdFile\" | \"createWordSimplificationMap\" | \"findBetterWords\" | \"getSynonymFrequencyDataset\" | \"preprocessSynonyms\" | \"preprocessWordFrequencies\" | \"speakWordsToLearn\" | \"createPaymentRequestWithContext\" | \"createPaymentTransactionWithContext\" | \"defaultResponse\" | \"fail\" | \"getPaymentWebPages\" | \"succeed\" | \"mapArrayJson\" | \"mapObjectJson\" | \"videoToMp3\" | \"unzip\" | \"zip\" | \"csvItemArrayToCsvString\" | \"tryParseCsv\" | \"convertCsvToJson\" | \"convertXlsToJson\" | \"compressImage\" | \"compressImages\" | \"convertToMp3\" | \"convertToMp4\" | \"copyCopyPairs\" | \"copyReaderStaticAssets\" | \"findReaderStaticAssets\" | \"findStaticAssets\" | \"docToMd\" | \"docxToMd\" | \"addCodestoryToSection\" | \"addModelName\" | \"findCodestories\" | \"makeCodespanMappedObject\" | \"makeCodestory\" | \"mapChunkRecursively\" | \"mapMarkdownParseSections\" | \"writeAllCodestories\" | \"writeCodespanDetails\" | \"addDependantCount\" | \"bundleFolderWithMarkdown\" | \"bundleToBookMarkdown\" | \"bundleToMarkdown\" | \"createMinimizedSectionMarkdown\" | \"createMinimizedSection\" | \"deployToVercel\" | \"emailMarkdownParse\" | \"flattenNestedObject\" | \"generateStaticSite\" | \"getJsonSchemaSummary\" | \"getMarkdownContents\" | \"getMergedMarkdownOutlineUrl\" | \"getOperationSummary\" | \"getOutline\" | \"getPublicMarkdownNestedPathObject\" | \"getTitlesRecursively\" | \"getTypeDescriptorRecursive\" | \"isConventionFileStatement\" | \"isUpperCase\" | \"makeOutlineMarkdownString\" | \"makePropertiesTable\" | \"markdownChunkToMarkdownStringRecursive\" | \"markdownChunksToMarkdownStringRecursive\" | \"markdownToSayable\" | \"mdToPdf\" | \"mergeMarkdownParse\" | \"noNewlines\" | \"operationRadio\" | \"operationToMarkdown\" | \"printNestedTitles\" | \"print\" | \"projectToMarkdown\" | \"propertyToTableRow\" | \"sayablesToMp3\" | \"selectRandomOperation\" | \"simplifiedSchemaToMarkdownString\" | \"statementItemToMarkdown\" | \"tsFunctionToMarkdownString\" | \"tsInterfaceToMarkdownString\" | \"tsVariableToMarkdownString\" | \"upMarkdownChunkLevelRecursively\" | \"findAudioWithViewsArray\" | \"markdownParseToShortMarkdown\" | \"shortMarkdownToMarkdownParse\" | \"augmentShortMarkdown\" | \"fetchVoices\" | \"generateAugmentedShortMarkdown\" | \"getOrGenerateShortMarkdown\" | \"parseDialogue\" | \"uberduckGetPath\" | \"uberduckSpeak\" | \"voiceCloneDialogue\" | \"readCsvFileSync\" | \"readCsvFile\" | \"readJsonFileSync\" | \"readJsonFile\" | \"readProjectRelativeJsonFile\" | \"readKvmdFile\" | \"readMarkdownFileToModel\" | \"readMarkdownFile\" | \"getFolderTypescriptIndex\" | \"readTypescriptFile\" | \"generateCsvInstance\" | \"generateJsonSingleInstance\" | \"generateKvmdInstance\" | \"generateMarkdownInstance\" | \"generateSlugTestModel\" | \"getMergedQueryConfig\" | \"randomName\" | \"runModelEndToEndTest\" | \"testOperationModels\" | \"cacheLookup\" | \"calculateOperatingSystemBundle\" | \"deleteDbModel\" | \"getDatabaseMenu\" | \"getDbModelMetadata\" | \"getDbModelNames\" | \"getDbModel\" | \"getFunctionIndex\" | \"getNestedDatabaseMenu\" | \"getReferencableModelData\" | \"hasDbRecipes\" | \"makeSrcRelativeFolder\" | \"tsInterfaceToDbMenu\" | \"upsertDbModel\" | \"validateInput\" | \"validateResult\" | \"addDefaultValues\" | \"alterAny\" | \"alterCsv\" | \"alterJsonMultiple\" | \"alterJsonSingle\" | \"alterKeyValueMarkdown\" | \"alterMarkdown\" | \"augmentItemWithReferencedDataRecursively\" | \"calculateOperationsObject\" | \"createDb\" | \"findParent\" | \"getAugmentedData\" | \"getDatabaseFiles\" | \"getDatabaseRootFolder\" | \"getDbFileLocation\" | \"getDbStorageMethodExtension\" | \"getDefaultLocationPattern\" | \"getItemModelLocation\" | \"getLength\" | \"getLocationPattern\" | \"getMergedConfigOperationPath\" | \"getParentSlug\" | \"getRootFolders\" | \"getWildcardDbFileLocations__OLD\" | \"getWildcardDbFileLocations\" | \"groupByFile\" | \"makeStoringItem\" | \"mergeConfigs\" | \"removeKeyValueMarkdown\" | \"removeMultiple\" | \"upsertItems\" | \"upsertKeyValueMarkdown\" | \"upsert\" | \"waitForLockfile\" | \"validateModel\" | \"validate\" | \"getFunctionExecutions\" | \"getFunctionQueryPaths\" | \"getPublicBundleConfig\" | \"getSrcRelativeFolderPath\" | \"getTsFunction\" | \"getAugmentedWordObject\" | \"getAugmentedWords\" | \"getBundleAugmentedWords\" | \"codestoriesGetPages\" | \"codestoriesGetStaticPaths\" | \"codestoriesGetStaticProps\" | \"copyStaticAssets\" | \"docsGetPages\" | \"docsGetStaticPaths\" | \"docsGetStaticProps\" | \"getAllMarkdownReaderPages\" | \"getChildren\" | \"getFolderExplorationInfo\" | \"getMarkdownModelPages\" | \"getMarkdownPageInfo\" | \"getMarkdownReaderPages\" | \"getMarkdownReaderQueryPaths\" | \"getOperationPages\" | \"getPublicMarkdownFilePaths\" | \"getReaderTodoPages\" | \"markdownReaderGetStaticPaths\" | \"markdownReaderGetStaticPropsFromPages\" | \"markdownReaderGetStaticProps\" | \"putReadmeOnTop\" | \"removeExtensionsFromPath\" | \"removeNumberPrefix\" | \"shouldExposeMarkdownFile\" | \"stripReadmeFromFolder\" | \"getQueryPath\" | \"addPeerMessage\" | \"addPeer\" | \"augmentDevice\" | \"deviceGetAppsCalculated\" | \"getAllAppOperations\" | \"getAugmentedPersons\" | \"getFirstEmoji\" | \"getNestedPathObject\" | \"getPeerMessages\" | \"getPeerPeople\" | \"getPeersFromPeersRecursively\" | \"getPublicFolderNestedPathObjectFromPeer\" | \"getPublicFolderNestedPathObject\" | \"getPublicPeers\" | \"isPortUsed\" | \"lateFetchPeerMessageSync\" | \"ping\" | \"proactivePushAddPeerMessage\" | \"removePeer\" | \"sortDevices\" | \"updatePeer\" | \"getPrimaryPersona\" | \"youtubeToPlayItem\" | \"getDayNumber\" | \"remindMe\" | \"getPostableFrontmatterSchema\" | \"copyPath\" | \"deleteFileOrFolder\" | \"getFileContents\" | \"getFrontmatterSchema\" | \"getWriterWebPagesMenu\" | \"getWriterWebPages\" | \"movePath\" | \"newFile\" | \"newFolder\" | \"processAssetUpload\" | \"renameFileOrFolder\" | \"saveFileContents\" | \"trashFileOrFolder\" | \"updateFrontmatter\" | \"getLight\" | \"getLocation\" | \"fetchWithTimeout\" | \"isOnline\" | \"calculateBbqAbility\" | \"calculateCloudyness\" | \"calculateCodeFromNatureAbility\" | \"calculateDresscode\" | \"calculateKiteability\" | \"calculateRainyness\" | \"calculateSunnyness\" | \"calculateWindyness\" | \"fetchWeatherStormGlass\" | \"fetchWeatherTommorowIOApi\" | \"getCustomWeatherData\" | \"cleanupTsDatabase\" | \"shouldDeleteTsModel\" | \"findAllDependencyOperations\" | \"findDependantsRecursively\" | \"findDependants\" | \"findDependenciesRecursively\" | \"findMonorepoModules\" | \"getDependencyObject\" | \"getDependencyTree\" | \"generateBunMonopackage\" | \"getItemNewPath\" | \"generateNamedIndex\" | \"generateSimpleIndex\" | \"isTestFn\" | \"mapToImportStatement\" | \"generateDbSdk\" | \"generateEnvSdks\" | \"generateFunctionPathsSdk\" | \"generateFunctionSdks\" | \"generateInterfacePathsSdk\" | \"generateOperationsSdk\" | \"generateSdkApiWatcher\" | \"generateSdkApi\" | \"generateSdkOperations\" | \"getFunctionSdksContent\" | \"getSdkDescription\" | \"getSdkFunctionsPerClassification\" | \"isNonUiOperationBuild\" | \"newEnvSdk\" | \"newFunctionKeysSdkOperation\" | \"newFunctionSdkOperation\" | \"tsFunctionIsIndexable\" | \"tsFunctionIsSdkable\" | \"updateClassifications\" | \"getImportedDependencies\" | \"getPackage\" | \"isAbsoluteImport\" | \"calculatePackageJsonDependencies\" | \"findAndWriteImportsExports\" | \"getDefaultSymbolType\" | \"getExportSpecifierNames\" | \"getExportSymbolTypeRecursive\" | \"getImportSpecifiersWithNames\" | \"getImportsExports\" | \"getPackageNameFromAbsoluteImport\" | \"getSymbolTypeDeclarations\" | \"getTypeFromImportSpecifierRecursive\" | \"isAbsoluteImportBuiltin\" | \"isImportFromOptionalFile\" | \"writeResult\" | \"getMissingDependencies\" | \"findAndUpsertTsInterfaces\" | \"findCommentTypes\" | \"generateSchema\" | \"getAllComments\" | \"getDbStorageMethod\" | \"getFrontmatterDbStorageMethod\" | \"getFrontmatterFunctionParameters\" | \"getIndexId\" | \"getMaxIndentationDepth\" | \"getMinMaxValidation\" | \"getNumberOfLines\" | \"getParamSchema\" | \"getParametersFromInterfaces\" | \"getPossibleRefs\" | \"getSpecialExtensionDbStorageMethod\" | \"getTsStatements\" | \"getTypeInfo\" | \"getValidatedOperationPathParse\" | \"hasDefinition\" | \"hasTypescriptFileChanged\" | \"indexImportsExportsForFilePath\" | \"indexTypescriptFilePath\" | \"indexTypescriptFile\" | \"indexTypescript\" | \"isPrimitive\" | \"makeTsComment\" | \"removeTypescriptIndex\" | \"schemaToTsInterface\" | \"tryCreateSchema\" | \"typeToSchema\" | \"preIndexLint\" | \"minifyBuild\" | \"getAvailableOperationName\" | \"newOperationWithFiles\" | \"newOperation\" | \"newTemplate\" | \"buildPackage\" | \"installMissingMonorepoDependencies\" | \"obfucsate\" | \"testPackage\" | \"prettierOperation\" | \"clearTsDatabase\" | \"executeCommandQuietUnlessFail\" | \"exitIfProcessDependenciesChanged\" | \"generateJsonSchemas\" | \"getAllDbModels\" | \"getFileIds\" | \"getIndexFileIds\" | \"getSrcIds\" | \"isOperationBuildNeeded\" | \"isSdkOperation\" | \"rebuildAllOperations\" | \"rebuildOperation\" | \"shouldSkip\" | \"yarnBuild\" | \"renameOperation\" | \"createSimpleTypescriptFile\" | \"runTestsForOperation\" | \"runTests\" | \"getAllTsMorphSourceFiles\" | \"getHasGeneric\" | \"getTsMorphProject\" | \"comparePassword\" | \"encryptPassword\" | \"calculateDeviceName\" | \"executeFunctionWithParameters\" | \"getAuthorizationInfo\" | \"isGetEndpoint\" | \"savePageVisit\" | \"storeFunctionExecution\" | \"upsertDevice\" | \"addAuthenticationMethod\" | \"addDeviceAuthenticationMethodConfirm\" | \"addDeviceAuthenticationMethodWithContext\" | \"addPersonAuthenticationMethodWithContext\" | \"findAuthenticatedPersonWithHandle\" | \"findLoggedinPersonsWithContext\" | \"getMeWithContext\" | \"getPublicPerson\" | \"getPublicPersons\" | \"isPhoneNumber\" | \"isValidPassword\" | \"loginWithContext\" | \"loginWithPasswordWithContext\" | \"logoutWithContext\" | \"removeDeviceAuthenticationMethodWithContext\" | \"removePersonAuthenticationMethodWithContext\" | \"signupWithContext\" | \"signupWithPasswordWithContext\" | \"switchCurrentPersonWithContext\" | \"updateMeWithContext\" | \"sayDutch\" | \"sayLanguage\" | \"sayNepali\" | \"saySomething\" | \"textToMp3\" | \"askOk\" | \"ask\" | \"getArgumentOrAsk\" | \"cliVersionUpdates\" | \"handleVersionUpdates\" | \"execAsync\" | \"spawnAsync\" | \"executeCommand\" | \"getCommand\" | \"isCommandPerOs\" | \"getDbPath\" | \"rawPolygonToPolygon\" | \"dev\" | \"nodemon\" | \"chatGPTAuth\" | \"detectChatGptPage\" | \"openAIChat\" | \"checkAndGetSlackFileUrl\" | \"elementExists\" | \"getAllMessages\" | \"getLatestMessages\" | \"getSlackChannelMemberList\" | \"getSlackChannels\" | \"getSlackMessageFrom\" | \"getSlackWorkspaces\" | \"scrapeSlackMessage\" | \"scrollToTop\" | \"selectSlackChannel\" | \"selectSlackWorkspace\" | \"sendSlackMessage\" | \"slackLogin\" | \"storeAllSlackChannel\" | \"storeSlackChannelMember\" | \"getAbsolutePathMdFileName\" | \"getAllPostables\" | \"getPersonDetails\" | \"getPersonsMenu\" | \"getSocialMediaChannelsMenu\" | \"getSocialMediaMenu\" | \"getSubExtensions\" | \"addSocialMediaCredential\" | \"canBePosted\" | \"createAllSocialMediaPost\" | \"createSocialMediaPost\" | \"devtoCotentAnalyzer\" | \"facebookContentAnalyzer\" | \"getSocialMediaCredentials\" | \"mediumCotentAnalyzer\" | \"postSocialMediaPostToDevto\" | \"postSocialMediaPostToFacebook\" | \"postSocialMediaPostToMedium\" | \"postSocialMediaPostToReddit\" | \"postSocialMediaPostToTwitter\" | \"redditContentAnalyzer\" | \"socialMediaPostPlanner\" | \"startSocialMediaController\" | \"twitterContentAnalyzer\" | \"updateSocialMediaPost\" | \"makeExercises\" | \"driverLogin\" | \"driverSignup\" | \"earthDistance\" | \"getMyJeep\" | \"getPublicJeeps\" | \"updateMyProfile\" | \"getAllOperations\" | \"getAllPackagesNames\" | \"getGithubPersonalAccessToken\" | \"getGithubRepoLastCommitInfo\" | \"getRepoNameFromRepositoryUrl\" | \"initializeGitOrUseExistingAndPull\" | \"operationGithubPull\" | \"operationGithubPush\" | \"pullMultipleOperations\" | \"pushMultipleOperations\" | \"readAndWriteToPackageJsonExample\" | \"updateAllOperationStatus\" | \"calculateFullCompany\" | \"companyAttachContributionInformation\" | \"companyAttachEsgMetricProofStates\" | \"companyAttachRequirements\" | \"companyAttachTransparency\" | \"concatenateItems\" | \"contributionAddNextContributions\" | \"getActivities\" | \"getAverage\" | \"getCompanies\" | \"getFinalProducts\" | \"getFullCompanyData\" | \"getIngredientProducts\" | \"getProductValueChainForProduct\" | \"getProductValueChain\" | \"getRequiredValueChainData\" | \"getSustainabilityPlan\" | \"hasEsgMetricWithStatus\" | \"requirementAttachProofStates\" | \"sumEsgMetricProofStates\" | \"getCompanyRequirementDescription\" | \"requirementAppliesToCompany\" | \"parseAddress\" | \"addToken\" | \"ensureToken\" | \"findAssetParametersRecursively\" | \"getAssetDirectlyApiUrl\" | \"getConversionInfoFromType\" | \"getExtensionFromAsset\" | \"getNameFromRelativePath\" | \"getNameWithTokenFromRelativePath\" | \"getReferencedAssetApiUrl\" | \"getTypeFromUrlOrPath\" | \"readableSize\" | \"removeTokenIfPresent\" | \"getEncoding\" | \"isBinary\" | \"isText\" | \"canAccessSync\" | \"canAccess\" | \"canExecuteSync\" | \"canExecute\" | \"canReadSync\" | \"canRead\" | \"canSeeSync\" | \"canSee\" | \"canWriteSync\" | \"canWrite\" | \"copyAllRelativeFiles\" | \"findFileNameCaseInsensitive\" | \"getAllFoldersUntilFolder\" | \"getFileName\" | \"getFirstAvailableFilename\" | \"getFolderSizeObject\" | \"getFolder\" | \"getLastFolder\" | \"getOneFolderUpPath\" | \"getPathCombinations\" | \"oneUp\" | \"parseMd\" | \"removeAllExcept\" | \"renameAndCreate\" | \"writeJsonToFile\" | \"writeStringToFile\" | \"writeToFiles\" | \"getTsConfig\" | \"byteCount\" | \"calculatePathMetaData\" | \"categorizeFiles\" | \"getFolderSummary\" | \"getPathMainComment\" | \"getSizeSummary\" | \"sumSizeSummary\" | \"makeFileType\" | \"findFolderWhereMatch\" | \"findOperationBasePathWithClassification\" | \"findOperationBasePath\" | \"getAllPackageJsonDependencies\" | \"getCommonAncestor\" | \"getOperationClassificationObject\" | \"getOperationClassification\" | \"getOperationPathParse\" | \"getOperationPath\" | \"getOperationRelativePath\" | \"getPathParse\" | \"getPathsWithOperations\" | \"getProjectRoot\" | \"getRelativeLinkPath\" | \"getRelativePath\" | \"getRootPath\" | \"getSrcRelativeFileId\" | \"hasDependency\" | \"isBundle\" | \"isOperation\" | \"isUiOperation\" | \"isWorkspaceRoot\" | \"packageCompilesTs\" | \"tsconfigCompilesEsm\" | \"getDependenciesSummary\" | \"getOperationMetaData\" | \"recalculateOperationIndexJson\" | \"getFileTypeFromPath\" | \"getWriterType\" | \"hasSubExtension\" | \"isGeneratedOperationName\" | \"isGeneratedOperation\" | \"isIndexableFileId\" | \"getAssetInputType\" | \"getParameterContentType\" | \"isCalculatedParameter\" | \"isGeneratedParameterName\" | \"jsonToMdString\" | \"jsonToSayString\" | \"getSimpleJsonString\" | \"flattenMarkdownChunks\" | \"getKvmdItemsRecursively\" | \"getParagraphsRecursively\" | \"kvmdDataMap\" | \"kvmdDataToString\" | \"kvmdParseToMarkdownString\" | \"markdownStringToKvmdParse\" | \"parseKvmdLine\" | \"chunkToStringRecursively\" | \"getChunkParagraphsRecursively\" | \"getImplicitId\" | \"getMarkdownIntro\" | \"getMarkdownParseParagraphs\" | \"getMarkdownReferencePaths\" | \"getMarkdownReferencesFromParagraph\" | \"markdownParseToMarkdownStringFromContent\" | \"markdownParseToMarkdownString\" | \"mdContentParseRecursively\" | \"mdToJsonParse\" | \"parseFrontmatterMarkdownString\" | \"parseMarkdownParagraph\" | \"parseMdToChunks\" | \"removeHeaderPrefix\" | \"findCodespans\" | \"findEmbeds\" | \"findLinks\" | \"flattenMarkdownString\" | \"flattenMarkedTokenRecursive\" | \"parsePrimitiveArray\" | \"parsePrimitiveBoolean\" | \"parsePrimitiveString\" | \"parsePrimitive\" | \"tryParseJson\" | \"bodyFromQueryString\" | \"getFirstQueryStrings\" | \"getQueryPart\" | \"isValidEntry\" | \"toQueryString\" | \"MatchingText\" | \"PathSearchResults\" | \"findSentenceMatches\" | \"searchRecursiveObjectArray\" | \"frontmatterParseToString\" | \"frontmatterToObject\" | \"getFrontmatterValueString\" | \"objectToFrontmatter\" | \"parseFrontmatterString\" | \"quotedOrNot\" | \"stringifyNewlines\" | \"getFunctionExersize\" | \"createInvoiceContactMarkdown\" | \"createInvoiceMarkdown\" | \"createKeyValueMarkdown\" | \"money\" | \"newInvoice\" | \"printDate\" | \"markdownParseToMarkdownModelType\" | \"parseMarkdownModelTimestamp\" | \"tryParseDate\" | \"generateId\" | \"generatePassword\" | \"generateRandomString\" | \"generateTime\" | \"isEmail\" | \"markdownModelTypeToMarkdownString\" | \"createUser\" | \"getBacktickContents\" | \"isInPeriod\" | \"isOutOfStock\" | \"kvmdToCredential\" | \"upcomingOutgoingFlights\" | \"whereShouldIgo\" | \"crudPageToWebPages\" | \"functionFormPageToWebPage\" | \"stripCommentEnd\" | \"stripCommentStart\" | \"stripComment\" | \"stripSlashes\" | \"stripStar\" | \"trim\" | \"getCompileErrors\" | \"getTypescriptErrorsFromFiles\" | \"writeBuildErrors\" | \"findFirstCommentTypes\" | \"getDataParameterNames\" | \"getPossibleReferenceParameterNames\" | \"getProperties\" | \"getRefLink\" | \"getReferencableModels\" | \"getReferenceParameterInfo\" | \"getSchemaItems\" | \"getSchema\" | \"simplifiedSchemaToTypeDefinitionString\" | \"simplifySchema\" | \"getSimpleTypescriptFileString\" | \"jsonToString\" | \"parseRawSimpleTypescriptFile\" | \"isResultOfInterface\" | \"makeTest\" | \"getGetApiUrl\" | \"untypedApiFunction\" | \"makeArraysGetEndpoint\" | \"makeGetEndpoint\" | \"converse\" | \"executeSdkFunction\" | \"getCachedExportedFunctions\" | \"getMenu\" | \"getSdkFunctionPaths\" | \"objectStringToJson\" | \"parseIfJson\" | \"parsePrimitiveJson\" | \"stringToJson\" | \"BreadCrumbs\" | \"renderBreadCrumbs\" | \"ClickableIcon\" | \"errorToast\" | \"infoToast\" | \"showStandardResponse\" | \"successToast\" | \"warningToast\" | \"FancyLoader\" | \"getFileType\" | \"LabeledButton\" | \"getFullPath\" | \"getLastPathsChunk\" | \"usePath\" | \"createCodeblockMarkdown\" | \"useCustomUrlStore\" | \"getKeysAtPathFromNestedObject\" | \"getMenuPagesObject\" | \"makeNestedObjectFromQueryPathObject\" | \"nestedObjectToChildObject\" | \"nestedPathObjectToNestedMenuRecursive\" | \"nestifyQueryPathObjectRecursive\" | \"queryPathsArrayToNestedPathObject\" | \"reduceQueryPathsRecursively\" | \"camelCase\" | \"capitalCase\" | \"capitaliseFirstLetter\" | \"convertCase\" | \"getDelimiter\" | \"humanCase\" | \"kebabCase\" | \"lowerCaseArray\" | \"pascalCase\" | \"slugify\" | \"snakeCase\" | \"apply\" | \"createEnum\" | \"createMappedObject\" | \"destructureOptionalObject\" | \"findLastIndex\" | \"getObjectFromParamsString\" | \"getObjectKeysArray\" | \"getParameterAtLocation\" | \"getSubsetFromObject\" | \"groupByKey\" | \"hasAllLetters\" | \"insertAt\" | \"isAllTrue\" | \"makeArray\" | \"mapAsync\" | \"mapKeys\" | \"mapMany\" | \"mapValuesSync\" | \"mergeNestedObject\" | \"mergeObjectParameters\" | \"mergeObjectsArray\" | \"mergeObjects\" | \"noEmptyString\" | \"objectMapAsync\" | \"objectMapSync\" | \"objectValuesMap\" | \"omitUndefinedValues\" | \"onlyUnique2\" | \"onlyUnique\" | \"pickRandomArrayItem\" | \"putIndexAtIndex\" | \"removeIndexFromArray\" | \"removeOptionalKeysFromObjectStrings\" | \"removeOptionalKeysFromObject\" | \"replaceLastOccurence\" | \"reverseString\" | \"sumAllKeys\" | \"sumObjectParameters\" | \"sum\" | \"takeFirst\" | \"trimSlashes\" | \"getCallerFileName\" | \"log\" | \"parseTitle\" | \"cleanupTimer\" | \"generateUniqueId\" | \"getNewPerformance\" | \"oneByOne\" | \"isPlural\" | \"isSingular\" | \"pluralize\" | \"singularize\" | \"runChildProcess\" | \"clickOnSpanTag\" | \"facebookLogin\" | \"foundOrNotXpath\" | \"foundOrNot\" | \"getBrowserPage\" | \"getBrowserSession\" | \"getBrowserTabs\" | \"getChromeExecutablePath\" | \"getConnectedBrowsers\" | \"gmailLogin\" | \"isCaptchaExist\" | \"logConsoleIfDebug\" | \"openNewBrowser\" | \"openPage\" | \"racePromises\" | \"retryClickAndWaitSelector\" | \"retryWaitSelector\" | \"runBrowser\" | \"setBrowserPage\" | \"setBrowserSession\" | \"setInnerHtml\" | \"setInputValue\" | \"solveReptcha\" | \"trueClick\" | \"twitterLogin\" | \"typeInTheInputField\" | \"typeOnTheTargetWithXpathSelector\" | \"waitMilliseconds\">(functionName: TFunctionName, result: any, tsFunction: import(\"/Users/king/King/operations/tools/types/code-types/build/TsFunction\").TsFunction) => ValidationResult",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<TFunctionName extends keyof typeof sdk>(\n  functionName: TFunctionName,\n  result: any,\n  tsFunction: TsFunction\n): ValidationResult => {\n  const fn = sdk[functionName];\n\n  type ResultType = ReturnType<typeof fn>;\n  /**\n   * NB: https://www.npmjs.com/package/typescript-json\n   *\n   * this seems a great way to validate the return type, not sure what it would do to my compile times and runtime performance and if it works at all, but if it works, it'd be great because we basically create 100% typesafety, not only for the input, but also for the output!\n   */\n  // const isValid = TSON.equal<ResultType>(result)\n\n  const schema = tsFunction.returnType.typeDefinition;\n\n  if (!schema) {\n    log(`Not able to validate ${functionName} result`, { type: \"debug\" });\n    return { isValid: true };\n  }\n\n  //const validate = ajv.compile(schema);\n\n  const isValid = true; //validate(result);\n\n  if (!isValid) {\n    log(\n      `According to the schema, you have given invalid arguments to the function`,\n      { type: \"warning\" }\n    );\n  }\n\n  return { isValid };\n}",
  "description": "wrapper function that takes that data but also the interface of the function and validates the parameters before it executes the function.",
  "id": "hhohsvkxxboihhnswscpeixy"
}