{
  "createdAt": 1671315097839,
  "updatedAt": 1671315097839,
  "deletedAt": 0,
  "createdFirstAt": 1671315097839,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/queue-functions.ts",
  "commentsInside": [],
  "rawText": " async (config: {\n  projectRelativeFolderPath: string;\n  promptSlug: string;\n  isRecursive?: boolean;\n  extension?: string | string[];\n}) => {\n  const { projectRelativeFolderPath, promptSlug, extension, isRecursive } =\n    config;\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) {\n    return { isSuccessful: false, message: \"No projectroot\" };\n  }\n  const absoluteFolderPath = path.join(projectRoot, projectRelativeFolderPath);\n\n  const exists = fs.existsSync(absoluteFolderPath);\n\n  if (!exists) {\n    return { isSuccessful: false, message: \"Folder not found\" };\n  }\n\n  const stats = await fs.stat(absoluteFolderPath);\n  if (!stats.isDirectory()) {\n    return { isSuccessful: false, message: \"That's not a folder\" };\n  }\n\n  // get files\n  const projectRelativeFilePaths = (\n    await explore({\n      basePath: absoluteFolderPath,\n      doNotExploreChildFolders: !isRecursive,\n      extension,\n      ignore: \".index\",\n    })\n  ).map((x) => makeRelative(x.path, projectRoot));\n\n  const queueItems: Creation<Queue>[] = projectRelativeFilePaths.map(\n    (projectRelativeFilePath) => {\n      return {\n        functionName: \"processPromptOnFile\",\n        parameters: [projectRelativeFilePath, promptSlug],\n        type: \"puppeteer\",\n      };\n    }\n  );\n\n  const upsertResult = await db.upsert(\"Queue\", queueItems);\n\n  return {\n    isSuccessful: upsertResult.isSuccesful,\n    message: upsertResult.isSuccesful ? \"Added to queue\" : upsertResult.message,\n  };\n}",
  "name": "processPromptOnFolder",
  "slug": "process-prompt-on-folder",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "projectRelativeFolderPath": {
            "type": "string"
          },
          "promptSlug": {
            "type": "string"
          },
          "isRecursive": {
            "type": "boolean"
          },
          "extension": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        },
        "required": [
          "projectRelativeFolderPath",
          "promptSlug"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "projectRelativeFolderPath",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptSlug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isRecursive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "function that can execute `processPromptOnFile` for all files in a folder, by just upserting the executions to the queue.",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1586,
    "lines": 52,
    "bytes": 1586,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 52,
    "numberOfFiles": 1
  },
  "id": "ezwwodbmycpwjbfegdqkwrhs"
}