{
  "createdAt": 1674133303054,
  "updatedAt": 1674133303054,
  "deletedAt": 0,
  "createdFirstAt": 1674133303054,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "checkQueue",
  "slug": "check-queue",
  "operationRelativeTypescriptFilePath": "src/queue/checkQueue.ts",
  "type": {
    "rawType": "() => any",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async () => {\n  const isOffline = !(await isOnline());\n  const isBusy = await isSystemBusy();\n\n  const startTime = Date.now();\n\n  const allQueueItems = (await db.get(\"Queue\")).sort((a, b) =>\n    a.priority === \"high\" ? 1 : -1\n  );\n\n  /**\n   * Light queue items we can do asap\n   */\n  const regularQueueItems = allQueueItems\n    .filter((x) => {\n      const fn = sdk[x.functionName as keyof typeof sdk] as\n        | ProjectWatcher\n        | undefined;\n\n      if (isOffline && fn?.config?.isInternetRequired) {\n        return false;\n      }\n      if (fn?.config?.isHeavy || fn?.config?.isBrowserRequired) {\n        return false;\n      }\n      return true;\n    })\n    .slice(0, MAX_REGULAR_ITEMS_AMOUNT);\n\n  /**\n   * Only get heavy items if system isn't busy\n   */\n  const heavyItems = isBusy\n    ? []\n    : allQueueItems.filter((x) => {\n        const fn = sdk[x.functionName as keyof typeof sdk] as\n          | ProjectWatcher\n          | undefined;\n\n        return (\n          fn?.config?.isHeavy && (!isOffline || !fn?.config?.isBrowserRequired)\n        );\n      });\n\n  const idlePages = (await db.get(\"BrowserPage\")).filter((p) => p.isIdle);\n  const browserQueueItems = allQueueItems.filter((x) => {\n    const fn = sdk[x.functionName as keyof typeof sdk] as\n      | ProjectWatcher\n      | undefined;\n\n    return (\n      fn?.config?.isBrowserRequired &&\n      (!isOffline || !fn?.config?.isBrowserRequired)\n    );\n  });\n  const browserRunnableNowAmount = 1; //idlePages.length\n  const browserItemsToExecute = browserQueueItems.slice(\n    0,\n    browserRunnableNowAmount\n  );\n\n  const queueItemsToExecute = [\n    ...heavyItems,\n    ...browserItemsToExecute,\n    ...regularQueueItems,\n  ].filter(notEmpty);\n\n  if (queueItemsToExecute.length === 0) {\n    console.log(\"Checking queue: No queue\", {\n      isBusy,\n      isOffline,\n      allQueueItems: allQueueItems.length,\n    });\n    return;\n  }\n\n  const lateQueueItemsToNotify = allQueueItems.filter(\n    (x) =>\n      x.notifyLateAfterSeconds &&\n      Date.now() - x.createdAt > x.notifyLateAfterSeconds * 1000 &&\n      !x.hasNotifiedLate\n  );\n\n  // 1. check how many chrome tabs are available (according to OS settings / memory limit)\n\n  if (browserRunnableNowAmount < lateQueueItemsToNotify.length) {\n    //email the ones that won't be executed\n    console.log(\n      {\n        browserRunnableNowAmount,\n        lateQueueItemsToNotify: lateQueueItemsToNotify.length,\n      },\n      \"SHOULD EMAIL SOME THAT CAN'T BE EXECUTED AND PUT THEM ON NOTIFIED WITH ETA\"\n    );\n  }\n\n  // 2. check how many queue items can be executed now, and sort by importancy\n  // NB: limit to 1 for now to test if that works\n\n  console.log(`Executing ${queueItemsToExecute.length} from queue, one by one`);\n\n  // 3. take the ones that are most important and execute those, only for a minute!\n\n  await oneByOne(queueItemsToExecute, async (queue) => {\n    const fn = sdk[queue.functionName as keyof typeof sdk] as\n      | ((...parameters: any[]) => any)\n      | undefined;\n\n    if (!fn) return;\n\n    if (Date.now() > startTime + 60000) {\n      // time's up! skip the rest, because this function starts again.\n      return;\n    }\n\n    await fn(...queue.parameters);\n\n    // after it's done, remove from queue\n    const removeResult = await db.remove(\n      \"Queue\",\n      (item) => queue.id === item.id\n    );\n  });\n}",
  "description": "---\nrunEveryPeriod: minute\n---\n\n\nCron that runs every minute for executing queue items.\n\nRegular items: It will execute max `MAX_REGULAR_ITEMS_AMOUNT`\n\nBrowser items: You can set the amount of tabs it should have as a limit, and it will keep the tabs open afterwards, but after the thing is done it will just remove the item from the `Queue`.\n\nHeavy items: functions with `.isHeavy: true` inside. Will execute max 1 every minute if the system isn't busy already.\n\n- sort on priority high first\n- filter out internet items if we are offline\n- find single heavy item if it's there and if we're not busy\n- find up to N (amount tabs available) queue items that require browser",
  "id": "oaymxecbplmwdupvlvzqeyoq"
}