{
  "createdAt": 1672638740984,
  "updatedAt": 1672638740984,
  "deletedAt": 0,
  "createdFirstAt": 1672638740984,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/useFileWriter.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  markdownModelName?: keyof DbModels;\n  projectRelativeFilePath?: string;\n  initialWriterView?: WriterViewEnum;\n  disabledMenuItems?: string[];\n  hideButtons?: boolean;\n}) => {\n  const {\n    markdownModelName,\n    projectRelativeFilePath,\n    initialWriterView,\n    disabledMenuItems,\n    hideButtons,\n  } = props;\n\n  // fullPath is the project relative path\n  const {\n    data: fileContentsResult,\n    isLoading,\n    refetch,\n  } = useGetFileContents(projectRelativeFilePath);\n  const fileContents = fileContentsResult?.result?.fileContents;\n\n  // console.log({ fileContents });\n  const [unsavedFiles, setUnsavedFiles] = useStore(\"unsavedFiles\");\n\n  const unsavedFileContent = projectRelativeFilePath\n    ? unsavedFiles[projectRelativeFilePath]\n    : undefined;\n\n  const isSaved = projectRelativeFilePath\n    ? unsavedFileContent === undefined\n    : true;\n\n  const value = isSaved ? fileContents || \"\" : unsavedFileContent || \"\";\n  const onChange = (text: string) => {\n    if (!projectRelativeFilePath) return;\n    setUnsavedFiles({ ...unsavedFiles, [projectRelativeFilePath]: text });\n  };\n\n  const save = async () => {\n    if (!projectRelativeFilePath) return;\n    const apiResult = await saveFileContents(projectRelativeFilePath, value);\n    await refetch();\n    const { isSuccessful, result, message } = apiResult;\n\n    if (!isSuccessful || !result?.isSuccessful) {\n      toast({\n        title: \"Error\",\n        body: result?.message || message || \"Something went wrong\",\n      });\n    } else {\n      // removing the file that is now saved\n      const newUnsavedFiles = { ...unsavedFiles };\n      // NB: for some reason, delete` doesn't let the updated store rerender the object. React doesn't see the change! The solution is to also set it to undefined first.\n      newUnsavedFiles[projectRelativeFilePath] = undefined;\n      delete unsavedFiles[projectRelativeFilePath];\n\n      await setUnsavedFiles(newUnsavedFiles);\n    }\n  };\n  useHotkey(isCtrlS, save, [projectRelativeFilePath, value]);\n\n  const errorMessage = !fileContentsResult?.isSuccessful\n    ? fileContentsResult?.message\n    : !fileContentsResult?.result?.isSuccessful\n    ? fileContentsResult?.result?.message\n    : null;\n\n  const renderFileWriter = () => {\n    return (\n      <Div className=\"flex flex-1 flex-col h-full\">\n        {errorMessage ? (\n          <P>{errorMessage}</P>\n        ) : (\n          <WriterInput\n            key={projectRelativeFilePath}\n            isLoading={isLoading}\n            onChange={onChange}\n            value={value}\n            projectRelativeFilePath={projectRelativeFilePath}\n            reload={refetch}\n            save={save}\n            hideButtons={hideButtons}\n            initialWriterView={initialWriterView}\n            isSaved={isSaved}\n            markdownModelName={markdownModelName}\n            disabledMenuItems={disabledMenuItems}\n          />\n        )}\n      </Div>\n    );\n  };\n  return {\n    renderFileWriter,\n    save,\n    isSaved,\n  };\n}",
  "name": "useFileWriter",
  "slug": "use-file-writer",
  "parameters": [],
  "description": "Returns a filewriter for a project relative filePath with a function to save it",
  "returnType": {
    "rawType": "{ renderFileWriter: () => JSX.Element; save: () => any; isSaved: boolean; }",
    "typeDefinition": {
      "type": "object",
      "properties": {
        "renderFileWriter": {
          "type": "object",
          "properties": {}
        },
        "save": {
          "type": "object",
          "properties": {}
        },
        "isSaved": {
          "type": "boolean"
        }
      },
      "required": [
        "renderFileWriter",
        "save",
        "isSaved"
      ],
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [
        {
          "name": "renderFileWriter",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "save",
          "required": true,
          "schema": {
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "isSaved",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    }
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 3056,
    "lines": 99,
    "bytes": 3056,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 99,
    "numberOfFiles": 1
  },
  "id": "iqomamksnmyzddguxhmggxzi"
}