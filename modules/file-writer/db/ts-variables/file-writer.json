{
  "createdAt": 1669288085512,
  "updatedAt": 1669288085512,
  "deletedAt": 0,
  "createdFirstAt": 1669288085512,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "FileWriter",
  "slug": "file-writer",
  "operationRelativeTypescriptFilePath": "src/FileWriter.tsx",
  "type": {
    "rawType": "(props: { markdownModelName?: keyof import(\"/Users/king/King/operations/tools/generated/sdk-db/build/sdk-db\").DbModels | undefined; projectRelativeFilePath: string; augmentedWordObject?: import(\"/Users/king/King/operations/tools/util/js-util/build/createMappedObject\").MappedObject<import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/reader/augmented-word-types/build/AugmentedWord\").AugmentedWord> | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  markdownModelName?: keyof DbModels;\n  projectRelativeFilePath: string;\n  augmentedWordObject?: MappedObject<AugmentedWord> | undefined;\n}) => {\n  const { markdownModelName, projectRelativeFilePath, augmentedWordObject } =\n    props;\n\n  // fullPath is the project relative path\n  const {\n    data: fileContentsResult,\n    isLoading,\n    refetch,\n  } = useGetFileContents(projectRelativeFilePath);\n  const fileContents = fileContentsResult?.result?.fileContents;\n\n  // console.log({ fileContents });\n  const [unsavedFiles, setUnsavedFiles] = useStore(\"unsavedFiles\");\n  const isSaved = unsavedFiles[projectRelativeFilePath] === undefined;\n\n  const value = isSaved\n    ? fileContents || \"\"\n    : unsavedFiles[projectRelativeFilePath] || \"\";\n  const onChange = (text: string) => {\n    setUnsavedFiles({ ...unsavedFiles, [projectRelativeFilePath]: text });\n  };\n\n  const save = async () => {\n    const apiResult = await saveFileContents(projectRelativeFilePath, value);\n    await refetch();\n    const { isSuccessful, result, message } = apiResult;\n\n    if (!isSuccessful || !result?.isSuccessful) {\n      toast({\n        title: \"Error\",\n        body: result?.message || message || \"Something went wrong\",\n      });\n    } else {\n      // removing the file that is now saved\n      const newUnsavedFiles = { ...unsavedFiles };\n      // NB: for some reason, delete` doesn't let the updated store rerender the object. React doesn't see the change! The solution is to also set it to undefined first.\n      newUnsavedFiles[projectRelativeFilePath] = undefined;\n      delete unsavedFiles[projectRelativeFilePath];\n\n      await setUnsavedFiles(newUnsavedFiles);\n    }\n  };\n\n  useHotkey(isCtrlS, save, [projectRelativeFilePath, value]);\n\n  const errorMessage = !fileContentsResult?.isSuccessful\n    ? fileContentsResult?.message\n    : !fileContentsResult?.result?.isSuccessful\n    ? fileContentsResult?.result?.message\n    : null;\n\n  return (\n    <Div className=\"flex flex-1 flex-col h-full\">\n      {errorMessage ? (\n        <P>{errorMessage}</P>\n      ) : (\n        <WriterInput\n          key={projectRelativeFilePath}\n          isLoading={isLoading}\n          onChange={onChange}\n          value={value}\n          augmentedWordObject={augmentedWordObject}\n          projectRelativeFilePath={projectRelativeFilePath}\n          reload={refetch}\n          save={save}\n          isSaved={isSaved}\n          markdownModelName={markdownModelName}\n        />\n      )}\n    </Div>\n  );\n}",
  "description": "",
  "id": "gwtpqprvafbdxhjxlyovuzek"
}