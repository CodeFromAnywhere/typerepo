{
  "createdAt": 1666264082857,
  "updatedAt": 1666264082857,
  "deletedAt": 0,
  "createdFirstAt": 1666264082857,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateSchema.ts",
  "commentsInside": [],
  "rawText": " async (\n  filePath: string,\n  morphInterfaceInfo: MorphInterfaceInfo[],\n  namedAbsoluteImportNames: string[]\n): Promise<Creation<TsInterface>[]> => {\n  // console.log({ filePath, namedAbsoluteImportNames });\n  const problems: string[] = [];\n\n  const operationBasePath = findOperationBasePath(filePath);\n  if (!operationBasePath) {\n    log(\"No operation base path\");\n    return [];\n  }\n  const operationRelativePath = makeRelative(filePath, operationBasePath);\n\n  if (operationRelativePath === \"src/index.ts\") {\n    // should not index index\n    log(\"This should never happen, operationRelativePath is src/index\");\n    return [];\n  }\n\n  const tsConfigPath = path.join(operationBasePath, \"tsconfig.json\");\n  const tsConfigExists = fs.existsSync(tsConfigPath);\n\n  if (!tsConfigExists) {\n    const problem = `no tsconfig found for ${filePath}, not generating schemas`;\n    log(problem, {\n      type: \"error\",\n    });\n    problems.push(problem);\n\n    await writeKeyToOperationIndexJson(\n      filePath,\n      \"indexInteracesErrors\",\n      problems\n    );\n\n    return [];\n  }\n\n  // TODO: check the defaults and possibilities in the docs/readme\n  const config: Config = {\n    // skipTypeCheck: true,\n    path: filePath,\n    tsconfig: tsConfigPath,\n\n    type: \"*\", // Or <type-name> if you want to generate schema for that one type only\n  };\n  const { schema, error } = tryCreateSchema(config);\n\n  if (!schema || !schema.definitions) {\n    const problem = `No schema/definitions found for ${filePath}. Error: ${error}`;\n    log(problem, { type: \"warning\" });\n\n    await writeKeyToOperationIndexJson(filePath, \"indexInteracesErrors\", [\n      problem,\n    ]);\n\n    return [];\n  }\n\n  const interfacePromises = Object.keys(schema.definitions).map((typeName) => {\n    const thisMorphInterfaceInfo = morphInterfaceInfo.find(\n      (x) => x.name === typeName\n    );\n\n    const tsMorphFoundTypeAlso = !!thisMorphInterfaceInfo;\n    const isImportedType = namedAbsoluteImportNames.includes(typeName);\n    const isNamedParameters = typeName.startsWith(\"NamedParameters\");\n    if (tsMorphFoundTypeAlso || isImportedType || isNamedParameters) {\n      return schemaToTsInterface(\n        filePath,\n        typeName,\n        schema,\n        thisMorphInterfaceInfo\n      );\n    }\n\n    // console.log({ definitionNames: Object.keys(schema.definitions) });\n\n    log(\n      `Skipping type ${typeName}`,\n      { type: \"debug\" },\n      { tsMorphFoundTypeAlso, isImportedType, isNamedParameters }\n    );\n\n    // NB: only the interfaces declared in this file end up in the database! otherwise you'll get duplicates anyway.\n\n    // NB: we are still allowing absolute imported types to end up in the database. They will not be exported from our index, but we still need them for some frontend-generation tasks.\n    return;\n  });\n\n  const interfaces = (await Promise.all(interfacePromises)).filter(notEmpty);\n\n  return interfaces;\n}",
  "name": "generateSchema",
  "slug": "generate-schema",
  "parameters": [
    {
      "name": "filePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "morphInterfaceInfo",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/MorphInterfaceInfo"
        }
      },
      "simplifiedSchema": {
        "items": [],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "namedAbsoluteImportNames",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "If existing schema is not stale, just require it.\nOtherwise, generate it for a file\n\nNB: The `createGenerator` function finds also imported TsInterfaces, which leads to duplicate TsInterfaces. With pushing the interfaces to the slug filename, this is no problem though, there should not be any duplication!",
  "returnType": {
    "rawType": "Promise<any[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 3205,
    "lines": 99,
    "bytes": 3205,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 99,
    "numberOfFiles": 1
  },
  "id": "uiqmzrdpqmiffigefjtrrxat"
}