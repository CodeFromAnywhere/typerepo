{
  "createdAt": 1668775644967,
  "updatedAt": 1668775644967,
  "deletedAt": 0,
  "createdFirstAt": 1668775644967,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "UpsertPage",
  "slug": "upsert-page",
  "operationRelativeTypescriptFilePath": "src/UpsertPage.tsx",
  "type": {
    "rawType": "() => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "() => {\n  const router = useRouter();\n  const modelQuery = useModelQuery();\n  const query = mapValuesSync(router.query, (value) => takeFirst(value));\n  const model = useGetDbModelQuery(modelQuery as DbModelEnum);\n\n  const allItems = model?.data?.pages\n    ?.map((x) => x.result?.data)\n    .flat()\n    .filter(notEmpty) as AugmentedAnyModelType[];\n  const instance = allItems?.find((x) => x.id === query.id);\n  const index = model?.data?.pages[0]?.result?.index;\n\n  // NB: this is quite ugly, it's obviously not always the same location for every item... yet this is the best I can do for now, I guess...\n  const fileLocations = model?.data?.pages[0]?.result?.fileLocations;\n\n  const projectRelativeStorageFilePath =\n    instance?.projectRelativePath || fileLocations?.[0] || \"\";\n\n  const simplifiedSchema = index?.type?.simplifiedSchema;\n  const referencableModelNames = getReferencableModels(simplifiedSchema)\n    ?.map((x) => x.interfaceName)\n    .filter(notEmpty);\n\n  return (\n    <Div scroll className=\"py-4 px-8 lg:px-20\">\n      {model.isLoading || !simplifiedSchema ? null : (\n        <UpsertForm\n          projectRelativeStorageFilePath={projectRelativeStorageFilePath}\n          simplifiedSchema={simplifiedSchema}\n          instance={instance}\n          referencableModelNames={referencableModelNames}\n        />\n      )}\n    </Div>\n  );\n}",
  "description": "",
  "id": "verrixaakkrrewfmqeomgvin"
}