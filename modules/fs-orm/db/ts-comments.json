[
  {
    "createdAt": 1662755317992,
    "updatedAt": 1662755317992,
    "deletedAt": 0,
    "createdFirstAt": 1662755317992,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/convention/getDbFileLocation.ts",
    "comment": "relative",
    "rawStatement": "import { MergedQueryConfig, AugmentedAnyModelType } from \"../types\";",
    "parameters": {},
    "types": [],
    "firstLine": 4,
    "lastLine": 4,
    "id": "VyrRGmuTqVvibtIb"
  },
  {
    "createdAt": 1662755317993,
    "updatedAt": 1662755317993,
    "deletedAt": 0,
    "createdFirstAt": 1662755317993,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/convention/getDbFileLocation.ts",
    "comment": "Applies the convention to get the db-file-location of an item\n\nBased on the merged config:\n\n- if `operationRelativePath` is specified, gets a filePath in the operation\n- if `projectRelativePath` is specified, gets a filepath in the project\n- otherwise gets the pattern and replaces \"*\" with the slug (or id if slug is not available)\n\nBesides the absolute path, the operationName, projectRelativePath and operationRelativePath are also supplied.\n\nNB: currently, the item's `operationName`, `operationRelativePath` or `projectRelativePath` is not taken into account. It will simply look at the convention to see where it should be saved, and apply the MergedQueryConfig...",
    "rawStatement": "export const getDbFileLocation = async (\n  /**\n   * The ModelLocation properties in the item are completely ignored. Only the ID or slug are used to determine the exact file the item should be stored in.\n   */\n  storedItem: Storing<AugmentedAnyModelType>,\n  /**\n   * Should be the modellocation of the actual item. If the operationName is present there, this will take priority over the merged query config.\n   */\n  itemModelLocation: ModelLocation,\n  mergedConfig: MergedQueryConfig,\n  modelName: string\n): Promise<DbFileLocation | undefined> => {\n  if (!mergedConfig.manualProjectRoot) {\n    log(\"No project root\", { type: \"error\" });\n    return;\n  }\n  const operationName =\n    itemModelLocation.operationName || mergedConfig.operationName;\n\n  const rootFolder = await getDatabaseRootFolder(\n    operationName,\n    mergedConfig.manualProjectRoot\n  );\n\n  if (!rootFolder) return;\n\n  const slugOrId: string = storedItem.slug || storedItem.id;\n\n  const pattern = getLocationPattern(\n    mergedConfig.dbStorageMethod,\n    modelName,\n    mergedConfig\n  );\n  if (!pattern) return;\n\n  const absolutePath = path.join(rootFolder, pattern.replace(\"*\", slugOrId));\n  if (!absolutePath) return;\n\n  const operationRelativePath = makeRelative(absolutePath, rootFolder);\n  const projectRelativePath = makeRelative(\n    absolutePath,\n    mergedConfig.manualProjectRoot\n  );\n\n  const dbFileLocation: DbFileLocation = {\n    modelName,\n    absolutePath,\n    operationName: operationName || null,\n    projectRelativePath,\n    operationRelativePath,\n  };\n\n  return dbFileLocation;\n};",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 11,
    "lastLine": 23,
    "id": "KDDFHZMXKBtoNgdu"
  }
]