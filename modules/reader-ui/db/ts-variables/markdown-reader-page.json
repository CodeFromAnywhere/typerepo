{
  "createdAt": 1669200645085,
  "updatedAt": 1669200645085,
  "deletedAt": 0,
  "createdFirstAt": 1669200645085,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "MarkdownReaderPage",
  "slug": "markdown-reader-page",
  "operationRelativeTypescriptFilePath": "src/components/MarkdownReaderPage.tsx",
  "type": {
    "rawType": "(props: import(\"/Users/king/King/operations/tools/purpose/codebase-introspection/reader/markdown-reader-types/build/MarkdownReaderPageProps\").MarkdownReaderPageProps) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: MarkdownReaderPageProps) => {\n  const router = useRouter();\n\n  const [view, setView] = useState(\"view\" as \"view\" | \"presentation\");\n  const queryPath = getQueryPath(router.query);\n  const [_, setIsMobileMenuEnabled] = useStore(\"menu.isMobileMenuEnabled\");\n  const { augmentedWordObject, projectRelativeMarkdownPath } = props;\n\n  const renderBottomNavigation = () => {\n    return (\n      <Div className=\"flex flex-row w-full justify-between\">\n        {props.previousQueryPath ? (\n          <ALink href={`${props.previousQueryPath}`}>\n            <Div className=\"w-60 h-40 border-2 border-black rounded-3xl m-4 p-4 flex flex-col justify-center items-center\">\n              <P className=\"font-bold text-xl\">\n                {props.previousQueryPath.split(\"/\").pop()}\n              </P>\n              <P className=\"font-bold text-6xl\">⬅</P>\n            </Div>\n          </ALink>\n        ) : (\n          <Div />\n        )}\n\n        {props.nextQueryPath ? (\n          <ALink href={`${props.nextQueryPath}`}>\n            <Div className=\"w-60 h-40 border-2 border-black rounded-3xl m-4 p-4 flex flex-col justify-center items-center\">\n              <P className=\"font-bold text-xl\">\n                {props.nextQueryPath.split(\"/\").pop()}\n              </P>\n              <P className=\"font-bold text-6xl\">➡</P>\n            </Div>\n          </ALink>\n        ) : (\n          <Div />\n        )}\n      </Div>\n    );\n  };\n\n  const markdownParse = props.markdownFile?.markdown\n    ? mdToJsonParse(props.markdownFile?.markdown)\n    : null;\n\n  const renderMarkdownView = () => {\n    const projectRelativeMarkdownFilePath = projectRelativeMarkdownPath;\n    const projectRelativeBaseFolderPath = projectRelativeMarkdownPath\n      ? getFolderJs(projectRelativeMarkdownPath)\n      : undefined;\n\n    if (\n      !markdownParse ||\n      projectRelativeBaseFolderPath === undefined ||\n      projectRelativeMarkdownFilePath === undefined ||\n      projectRelativeMarkdownFilePath === null\n    ) {\n      return null;\n    }\n\n    const markdownParseRenderConfig = {\n      augmentedWordObject,\n      projectRelativeBaseFolderPath,\n      projectRelativeMarkdownFilePath,\n      isDev,\n      isStatic: true,\n    };\n\n    return (\n      <MarkdownView\n        markdownParse={markdownParse}\n        markdownParseRenderConfig={markdownParseRenderConfig}\n        view={view}\n      />\n    );\n  };\n  const renderPage = () => {\n    const hasNoMainTitle =\n      markdownParse?.content?.filter((x) => !!x.title && x.level === 1)\n        .length !== 1;\n\n    // console.log({ hasNoMainTitle, f: props.markdownFile?.name });\n\n    return (\n      <Div>\n        <Div className=\"flex flex-row justify-between\">\n          {queryPath.length > 1 ? (\n            <ClickableIcon\n              emoji=\"⬅\"\n              onClick={() => {\n                const parts = queryPath.split(\"/\");\n                parts.pop();\n                const oneFolderUp = parts.join(\"/\");\n                router.push(oneFolderUp.length === 0 ? \"/\" : oneFolderUp);\n              }}\n            />\n          ) : null}\n\n          <Div className=\"flex flex-row\">\n            <Div className=\"lg:hidden\">\n              <ClickableIcon\n                emoji=\"⃛\"\n                onClick={() => {\n                  setIsMobileMenuEnabled(true);\n                }}\n              />\n            </Div>\n            <ClickableIcon\n              emoji=\"👁\"\n              onClick={() => {\n                setView(view === \"presentation\" ? \"view\" : \"presentation\");\n              }}\n            />\n          </Div>\n        </Div>\n\n        {hasNoMainTitle && props.markdownFile?.name ? (\n          <P className=\"text-3xl\">{humanCase(props.markdownFile.name)}</P>\n        ) : null}\n\n        {renderMarkdownView()}\n\n        {props.previousQueryPath || props.nextQueryPath\n          ? renderBottomNavigation()\n          : null}\n      </Div>\n    );\n  };\n\n  const renderNav = () => {\n    return (\n      <Div>\n        <Div className=\"flex flex-row items-center\">\n          <ClickableIcon\n            emoji=\"⬅\"\n            onClick={() => {\n              const parts = queryPath.split(\"/\");\n              parts.pop();\n              const oneFolderUp = parts.join(\"/\");\n              router.push(oneFolderUp.length === 0 ? \"/\" : oneFolderUp);\n            }}\n          />\n          <P className=\"text-xl lg:text-4xl w-full\">\n            &nbsp;&nbsp;{props.title}\n          </P>\n\n          <Div className=\"lg:hidden\">\n            <ClickableIcon\n              emoji=\"⃛\"\n              onClick={() => {\n                setIsMobileMenuEnabled(true);\n              }}\n            />\n          </Div>\n        </Div>\n\n        {props.description && props.projectRelativeMarkdownPath ? (\n          <Div>\n            {renderMarkdownContent(props.description, {\n              projectRelativeMarkdownFilePath:\n                props.projectRelativeMarkdownPath,\n              augmentedWordObject,\n              projectRelativeBaseFolderPath: getFolderJs(\n                props.projectRelativeMarkdownPath\n              )!,\n            })}\n          </Div>\n        ) : null}\n\n        <Div className=\"flex flex-row flex-wrap\">\n          {props.children?.map((child, index) => {\n            return (\n              <ALink\n                key={`child${child.projectRelativeMarkdownPath}-${index}`}\n                href={`${queryPath}/${child.folderName}`}\n              >\n                <Div className=\"w-60 border-2 border-black rounded-3xl m-4 p-4 flex flex-col justify-center items-center\">\n                  <P className=\"font-bold text-xl\">{child.title}</P>\n                  {child.firstParagraph && child.projectRelativeMarkdownPath ? (\n                    <Div>\n                      {renderMarkdownContent(child.firstParagraph, {\n                        projectRelativeBaseFolderPath: getFolderJs(\n                          child.projectRelativeMarkdownPath\n                        )!,\n                        projectRelativeMarkdownFilePath:\n                          child.projectRelativeMarkdownPath,\n                        augmentedWordObject,\n                      })}\n                    </Div>\n                  ) : null}\n                </Div>\n              </ALink>\n            );\n          })}\n        </Div>\n      </Div>\n    );\n  };\n\n  const word: string | undefined = Array.isArray(router.query?.word)\n    ? router.query?.word?.[0]\n    : router.query.word;\n\n  return (\n    <Layout\n      publicBundleConfig={props.publicBundleConfig}\n      augmentedWordObject={props.augmentedWordObject}\n      menu={props.menu}\n    >\n      {queryPath === \"dictionary\" && props.augmentedWordObject ? (\n        <Dictionary\n          augmentedWordObject={props.augmentedWordObject}\n          word={word}\n        />\n      ) : (\n        <Div className=\"pb-4 px-4\">\n          {props.children ? renderNav() : renderPage()}\n        </Div>\n      )}\n    </Layout>\n  );\n}",
  "description": "",
  "id": "elpsrqfctkxcdzfsizlzmtgj"
}