[
  {
    "operationName": "ai-browser",
    "totalInstancesCount": 10,
    "totalImportCount": 6,
    "totalDependencyCount": 3,
    "importDependencies": [
      "write-to-assets",
      "ai-functions-node",
      "marked-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "automatePuppeteer",
        "fileName": "src/puppeteer.test.ts",
        "imports": []
      },
      {
        "name": "browseInternet",
        "fileName": "src/browse-internet.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      },
      {
        "name": "browsingPromptLoop",
        "fileName": "src/wikipediaGame.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      },
      {
        "name": "fetchUrl",
        "fileName": "src/fetchUrl.ts",
        "imports": []
      },
      {
        "name": "wikipediaGame",
        "fileName": "src/wikipediaGame.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      },
      {
        "name": "NamedParameters<typeof automatePuppeteer>",
        "fileName": "src/puppeteer.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof browseInternet>",
        "fileName": "src/browse-internet.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      },
      {
        "name": "NamedParameters<typeof browsingPromptLoop>",
        "fileName": "src/wikipediaGame.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      },
      {
        "name": "NamedParameters<typeof fetchUrl>",
        "fileName": "src/fetchUrl.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof wikipediaGame>",
        "fileName": "src/wikipediaGame.test.ts",
        "imports": [
          "writeToAssets from write-to-assets",
          "controlChatGptWrapper from ai-functions-node",
          "findLinks from marked-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "ai-browser",
      "write-to-assets",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "sdk-operations",
      "fs-util-js",
      "ai-functions-node",
      "database",
      "sdk-db",
      "language-types",
      "playwright",
      "ai-types",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "function-context-type",
      "auth-types",
      "server/typings/common",
      "peer-types",
      "geo-types",
      "social-media-types",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "asset-functions-js",
      "api",
      "api-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "ffmpeg-util",
      "one-by-one",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "mail",
      "@sendgrid/mail",
      "sdk-api",
      "queue-types",
      "function-server-types",
      "function-functions-node",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "function-types",
      "marked-util",
      "marked"
    ]
  },
  {
    "operationName": "ai-demo-web",
    "totalInstancesCount": 16,
    "totalImportCount": 49,
    "totalDependencyCount": 24,
    "importDependencies": [
      "next",
      "generative-functions-node",
      "database",
      "js-util",
      "react",
      "react-with-native",
      "writer-input",
      "timeline",
      "next/router",
      "model-types",
      "ai-types",
      "convert-case",
      "authentication",
      "markdown",
      "react-icons/bs",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "ai-functions-node",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "ai-functions-node",
      "ai-types",
      "api-store",
      "authentication",
      "db-recipes",
      "filename-conventions",
      "js-util",
      "layout",
      "markdown",
      "nested-menu",
      "next",
      "next-a-link",
      "next-pwa",
      "next-transpile-modules",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-icons",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "timeline",
      "worker-loader",
      "writer-input",
      "database",
      "model-types",
      "convert-case",
      "generative-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "anyGetStaticProps",
        "fileName": "src/anyGetStaticProps.ts",
        "imports": [
          "GetStaticProps from next",
          "getContextualPromptResults from generative-functions-node",
          "getContextualPrompts from generative-functions-node",
          "db from database",
          "groupByKey from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "Chatbox",
        "fileName": "src/Chatbox.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native"
        ]
      },
      {
        "name": "DemoPage",
        "fileName": "src/DemoPage.tsx",
        "imports": [
          "EditWriterInput from writer-input",
          "Timeline from timeline",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from next/router",
          "Creation from model-types",
          "Storing from model-types",
          "AiDemoApp from ai-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "FancyTitle",
        "fileName": "src/FancyTitle.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "getDefaultApp",
        "fileName": "src/getDefaultApp.ts",
        "imports": [
          "AiDemoApp from ai-types",
          "humanCase from convert-case",
          "Creation from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "LoginWrapper from authentication"
        ]
      },
      {
        "name": "OverviewPage",
        "fileName": "src/OverviewPage.tsx",
        "imports": [
          "MarkdownContent from markdown",
          "Div from react-with-native",
          "BsDiscord from react-icons/bs",
          "BsMailbox from react-icons/bs",
          "BsTwitter from react-icons/bs"
        ]
      },
      {
        "name": "ResultExample",
        "fileName": "src/ResultExample.tsx",
        "imports": [
          "ContextualPromptResult from ai-types",
          "MarkdownContent from markdown",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "ContextualPromptResult",
        "fileName": "src/ResultExample.tsx",
        "imports": [
          "ContextualPromptResult from ai-types",
          "MarkdownContent from markdown",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof anyGetStaticProps>",
        "fileName": "src/anyGetStaticProps.ts",
        "imports": [
          "GetStaticProps from next",
          "getContextualPromptResults from generative-functions-node",
          "getContextualPrompts from generative-functions-node",
          "db from database",
          "groupByKey from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof FancyTitle>",
        "fileName": "src/FancyTitle.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof getDefaultApp>",
        "fileName": "src/getDefaultApp.ts",
        "imports": [
          "AiDemoApp from ai-types",
          "humanCase from convert-case",
          "Creation from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "LoginWrapper from authentication"
        ]
      },
      {
        "name": "NamedParameters<typeof ResultExample>",
        "fileName": "src/ResultExample.tsx",
        "imports": [
          "ContextualPromptResult from ai-types",
          "MarkdownContent from markdown",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "ai-demo-web",
      "next",
      "generative-functions-node",
      "filename-conventions",
      "augmented-word-node",
      "augmented-word-types",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "log",
      "measure-performance",
      "code-types",
      "ts-json-schema-generator",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "markdown-types",
      "bundle-types",
      "pluralize",
      "sdk-operations",
      "markdown-parse-js",
      "sdk-db",
      "language-types",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "fs-util-js",
      "matter-types",
      "read-json-file",
      "get-path",
      "try-parse-json",
      "read-markdown-file",
      "k-explore",
      "write-to-assets",
      "next-types",
      "database",
      "js-util",
      "react",
      "react-with-native",
      "writer-input",
      "clickable-icon",
      "cool-toast",
      "prompt-components",
      "react-with-native-select",
      "react-native",
      "react-with-native-ui",
      "simplified-schema-form",
      "big-button",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "share",
      "function-form",
      "timeline",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "vscode-open",
      "next/router",
      "model-types",
      "ai-types",
      "function-server-types",
      "convert-case",
      "authentication",
      "next-a-link",
      "next/link",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "react-icons/bs",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "webpage-types",
      "nested-menu-types",
      "ai-functions-node",
      "playwright",
      "function-context-type",
      "server/typings/common",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "mail",
      "@sendgrid/mail",
      "queue-types",
      "function-functions-node",
      "recursive-util",
      "function-types",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "ai-functions-node",
    "totalInstancesCount": 122,
    "totalImportCount": 96,
    "totalDependencyCount": 25,
    "importDependencies": [
      "database",
      "language-types",
      "model-types",
      "convert-case",
      "playwright",
      "ai-types",
      "fs-orm",
      "filename-conventions",
      "write-to-assets",
      "js-util",
      "fs-util",
      "get-path",
      "function-context-type",
      "peer-types",
      "server-login",
      "fs-util-js",
      "chatgpt-controller",
      "k-explore",
      "read-json-file",
      "mail",
      "sdk-api",
      "queue-types",
      "code-types",
      "function-server-types",
      "function-functions-node"
    ],
    "packageJsonDependencies": [
      "delay",
      "html-to-md",
      "playwright",
      "ai-types",
      "database",
      "model-types",
      "filename-conventions",
      "asset-type",
      "convert-case",
      "js-util",
      "fs-util",
      "get-path",
      "try-parse-json",
      "language-types",
      "read-json-file",
      "fs-orm",
      "augmented-word-node",
      "next-types",
      "fs-util-js",
      "matter-types",
      "read-markdown-file",
      "write-to-assets",
      "chatgpt-controller",
      "k-explore",
      "function-context-type",
      "peer-types",
      "server-login",
      "recursive-types",
      "queue-types",
      "mail",
      "code-types",
      "function-server-types",
      "function-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addEmojiToEveryWord",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "addStatement",
        "fileName": "src/addStatement.ts",
        "imports": [
          "db from database",
          "Statement from language-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "addWord",
        "fileName": "src/addWord.ts",
        "imports": [
          "kebabCase from convert-case",
          "lowerCaseArray from convert-case",
          "db from database",
          "WordCombination from language-types",
          "WordMatrix from language-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "biggestFunctionName",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "checkQueue",
        "fileName": "src/queue/checkQueue.ts",
        "imports": [
          "db from database",
          "sendMail from mail",
          "sdk from sdk-api"
        ]
      },
      {
        "name": "cleanup",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "controlChatGptCli",
        "fileName": "src/cli/controlChatGpt.cli.ts",
        "imports": []
      },
      {
        "name": "controlChatGptWrapper",
        "fileName": "src/processChatGptPrompt.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ProcessPromptFunctionResult from ai-types",
          "fileTypePerExtension from ai-types",
          "alterJsonMultiple from fs-orm",
          "upsert from fs-orm",
          "upsertItems from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "openAIChat from chatgpt-controller",
          "generateId from model-types",
          "Storing from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "controlChatGpt",
        "fileName": "src/controlChatGpt.ts",
        "imports": [
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "deletePromptResult",
        "fileName": "src/deletePromptResult.ts",
        "imports": [
          "alterJsonMultiple from fs-orm"
        ]
      },
      {
        "name": "developersQuote",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "diaryToInstagram",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "documentationWriting",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "emojiAugmentation",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "explainInDutch",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "explainInNepali",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "explainInPortuguese",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "explainLineByLine",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "explain",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "fixGrammarAndSpellingMistakes",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "followUpQuestions",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "getCategoriesTest",
        "fileName": "src/getContextualPromptCategories.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "getContextualPromptCategories",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "getContextualPromptResultJsonFilePath",
        "fileName": "src/getContextualPromptResultJsonFilePath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getContextualPrompt",
        "fileName": "src/getContextualPrompt.ts",
        "imports": [
          "ContextualPrompt from ai-types",
          "db from database",
          "Creation from model-types",
          "generateId from model-types",
          "slugify from convert-case",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "getObjectForkKeyRecursively",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "getToolFunctions",
        "fileName": "src/tool/getToolFunctions.ts",
        "imports": [
          "TsFunction from code-types",
          "db from database",
          "ApiFunction from function-server-types",
          "sdk from sdk-api",
          "getPublicBundleConfig from function-functions-node"
        ]
      },
      {
        "name": "gptIdeasRegisterWithContext",
        "fileName": "src/gptIdeasRegisterWithContext.ts",
        "imports": [
          "slugify from convert-case",
          "db from database",
          "FunctionContext from function-context-type",
          "generateId from model-types",
          "AuthenticationMethodMethod from peer-types",
          "addDeviceAuthenticationMethodWithContext from server-login",
          "signupWithContext from server-login"
        ]
      },
      {
        "name": "haiku",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "hookOneliners",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "improveCode",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "investorPitch",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "marcusAurelius",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "opposite",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "outlineToInvestorPitch",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "poem",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "processChatGptPrompt",
        "fileName": "src/processChatGptPrompt.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ProcessPromptFunctionResult from ai-types",
          "fileTypePerExtension from ai-types",
          "alterJsonMultiple from fs-orm",
          "upsert from fs-orm",
          "upsertItems from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "openAIChat from chatgpt-controller",
          "generateId from model-types",
          "Storing from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "processPromptOnFile",
        "fileName": "src/queue/processPromptOnFile.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "processPromptOnFolderWithContext",
        "fileName": "src/queue/processPromptOnFolderWithContext.ts",
        "imports": [
          "Queue from queue-types",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "Creation from model-types",
          "db from database",
          "explore from k-explore",
          "makeRelative from fs-util-js",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "quiz",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "removeAllFake",
        "fileName": "src/removeAllFake.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "mapMany from js-util",
          "explore from k-explore",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "rickAndMortyRick",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "rickAndMorty",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "setIsFavoritePromptResult",
        "fileName": "src/setIsFavoritePromptResult.ts",
        "imports": [
          "alterJsonMultiple from fs-orm"
        ]
      },
      {
        "name": "socratesAndSnoopDogg",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "storytelling",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/generate-sdk/writeContextualPromptSdk.test.ts",
        "imports": [
          "path from fs-util",
          "writeStringToFile from fs-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "toolFunctionWithContext",
        "fileName": "src/tool/toolFunctionWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Creation from model-types",
          "Queue from queue-types",
          "sdk from sdk-api",
          "addAuthenticationMethod from server-login",
          "addDeviceAuthenticationMethodWithContext from server-login"
        ]
      },
      {
        "name": "translateEverythingIntoHindi",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "translateEverythingPortuguese",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "translateEverything",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "translateToPortuguese",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "typescriptExplain",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "williamShakespear",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "writeContextualPromptSdk",
        "fileName": "src/generate-sdk/writeContextualPromptSdk.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "writeCreatePromptCode",
        "fileName": "src/generate-sdk/writeCreatePromptCode.ts",
        "imports": [
          "camelCase from convert-case",
          "ContextualPrompt from ai-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "ye",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "yodafy",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "AuthenticationMethodMethod",
        "fileName": "src/gptIdeasRegisterWithContext.ts",
        "imports": [
          "slugify from convert-case",
          "db from database",
          "FunctionContext from function-context-type",
          "generateId from model-types",
          "AuthenticationMethodMethod from peer-types",
          "addDeviceAuthenticationMethodWithContext from server-login",
          "signupWithContext from server-login"
        ]
      },
      {
        "name": "ContextualPrompt",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "FileType",
        "fileName": "src/getContextualPrompt.ts",
        "imports": [
          "ContextualPrompt from ai-types",
          "db from database",
          "Creation from model-types",
          "generateId from model-types",
          "slugify from convert-case",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "FunctionContext",
        "fileName": "src/tool/toolFunctionWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Creation from model-types",
          "Queue from queue-types",
          "sdk from sdk-api",
          "addAuthenticationMethod from server-login",
          "addDeviceAuthenticationMethodWithContext from server-login"
        ]
      },
      {
        "name": "NamedParameters<typeof addEmojiToEveryWord>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addStatement>",
        "fileName": "src/addStatement.ts",
        "imports": [
          "db from database",
          "Statement from language-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addWord>",
        "fileName": "src/addWord.ts",
        "imports": [
          "kebabCase from convert-case",
          "lowerCaseArray from convert-case",
          "db from database",
          "WordCombination from language-types",
          "WordMatrix from language-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof biggestFunctionName>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof checkQueue>",
        "fileName": "src/queue/checkQueue.ts",
        "imports": [
          "db from database",
          "sendMail from mail",
          "sdk from sdk-api"
        ]
      },
      {
        "name": "NamedParameters<typeof cleanup>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof controlChatGpt>",
        "fileName": "src/controlChatGpt.ts",
        "imports": [
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof controlChatGptCli>",
        "fileName": "src/cli/controlChatGpt.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof controlChatGptWrapper>",
        "fileName": "src/processChatGptPrompt.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ProcessPromptFunctionResult from ai-types",
          "fileTypePerExtension from ai-types",
          "alterJsonMultiple from fs-orm",
          "upsert from fs-orm",
          "upsertItems from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "openAIChat from chatgpt-controller",
          "generateId from model-types",
          "Storing from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof deletePromptResult>",
        "fileName": "src/deletePromptResult.ts",
        "imports": [
          "alterJsonMultiple from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof developersQuote>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof diaryToInstagram>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof documentationWriting>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof emojiAugmentation>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof explain>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof explainInDutch>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof explainInNepali>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof explainInPortuguese>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof explainLineByLine>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof fixGrammarAndSpellingMistakes>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof followUpQuestions>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCategoriesTest>",
        "fileName": "src/getContextualPromptCategories.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPrompt>",
        "fileName": "src/getContextualPrompt.ts",
        "imports": [
          "ContextualPrompt from ai-types",
          "db from database",
          "Creation from model-types",
          "generateId from model-types",
          "slugify from convert-case",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPromptCategories>",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPromptResultJsonFilePath>",
        "fileName": "src/getContextualPromptResultJsonFilePath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getObjectForkKeyRecursively>",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getToolFunctions>",
        "fileName": "src/tool/getToolFunctions.ts",
        "imports": [
          "TsFunction from code-types",
          "db from database",
          "ApiFunction from function-server-types",
          "sdk from sdk-api",
          "getPublicBundleConfig from function-functions-node"
        ]
      },
      {
        "name": "NamedParameters<typeof gptIdeasRegisterWithContext>",
        "fileName": "src/gptIdeasRegisterWithContext.ts",
        "imports": [
          "slugify from convert-case",
          "db from database",
          "FunctionContext from function-context-type",
          "generateId from model-types",
          "AuthenticationMethodMethod from peer-types",
          "addDeviceAuthenticationMethodWithContext from server-login",
          "signupWithContext from server-login"
        ]
      },
      {
        "name": "NamedParameters<typeof haiku>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof hookOneliners>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof improveCode>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof investorPitch>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof marcusAurelius>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof opposite>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof outlineToInvestorPitch>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof poem>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof processChatGptPrompt>",
        "fileName": "src/processChatGptPrompt.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ProcessPromptFunctionResult from ai-types",
          "fileTypePerExtension from ai-types",
          "alterJsonMultiple from fs-orm",
          "upsert from fs-orm",
          "upsertItems from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "openAIChat from chatgpt-controller",
          "generateId from model-types",
          "Storing from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof processPromptOnFile>",
        "fileName": "src/queue/processPromptOnFile.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof processPromptOnFolderWithContext>",
        "fileName": "src/queue/processPromptOnFolderWithContext.ts",
        "imports": [
          "Queue from queue-types",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "Creation from model-types",
          "db from database",
          "explore from k-explore",
          "makeRelative from fs-util-js",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof quiz>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof removeAllFake>",
        "fileName": "src/removeAllFake.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "mapMany from js-util",
          "explore from k-explore",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof rickAndMorty>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof rickAndMortyRick>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof setIsFavoritePromptResult>",
        "fileName": "src/setIsFavoritePromptResult.ts",
        "imports": [
          "alterJsonMultiple from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof socratesAndSnoopDogg>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof storytelling>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/generate-sdk/writeContextualPromptSdk.test.ts",
        "imports": [
          "path from fs-util",
          "writeStringToFile from fs-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof toolFunctionWithContext>",
        "fileName": "src/tool/toolFunctionWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Creation from model-types",
          "Queue from queue-types",
          "sdk from sdk-api",
          "addAuthenticationMethod from server-login",
          "addDeviceAuthenticationMethodWithContext from server-login"
        ]
      },
      {
        "name": "NamedParameters<typeof translateEverything>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof translateEverythingIntoHindi>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof translateEverythingPortuguese>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof translateToPortuguese>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof typescriptExplain>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof williamShakespear>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof writeContextualPromptSdk>",
        "fileName": "src/generate-sdk/writeContextualPromptSdk.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof writeCreatePromptCode>",
        "fileName": "src/generate-sdk/writeCreatePromptCode.ts",
        "imports": [
          "camelCase from convert-case",
          "ContextualPrompt from ai-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof ye>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof yodafy>",
        "fileName": "src/prompts.ts",
        "imports": [
          "PromptFunction from ai-types"
        ]
      },
      {
        "name": "ProcessPromptProps",
        "fileName": "src/processChatGptPrompt.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ProcessPromptFunctionResult from ai-types",
          "fileTypePerExtension from ai-types",
          "alterJsonMultiple from fs-orm",
          "upsert from fs-orm",
          "upsertItems from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "openAIChat from chatgpt-controller",
          "generateId from model-types",
          "Storing from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "StackCount",
        "fileName": "src/getContextualPromptCategories.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "ContextualPrompt from ai-types",
          "db from database",
          "isArrayEqual from js-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "ai-functions-node",
      "database",
      "sdk-db",
      "measure-performance",
      "log",
      "language-types",
      "asset-type",
      "model-types",
      "matter-types",
      "convert-case",
      "make-test",
      "playwright",
      "ai-types",
      "recursive-types",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "pluralize",
      "sdk-operations",
      "filename-conventions",
      "write-to-assets",
      "js-util",
      "fs-util",
      "graceful-fs",
      "get-path",
      "try-parse-json",
      "function-context-type",
      "auth-types",
      "server/typings/common",
      "peer-types",
      "geo-types",
      "social-media-types",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "fs-util-js",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "k-explore",
      "read-json-file",
      "mail",
      "@sendgrid/mail",
      "sdk-api",
      "queue-types",
      "code-types",
      "ts-json-schema-generator",
      "function-server-types",
      "function-functions-node",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "function-types"
    ]
  },
  {
    "operationName": "ai-types",
    "totalInstancesCount": 17,
    "totalImportCount": 11,
    "totalDependencyCount": 6,
    "importDependencies": [
      "model-types",
      "recursive-types",
      "filename-conventions",
      "asset-type",
      "function-server-types",
      "matter-types"
    ],
    "packageJsonDependencies": [
      "model-types",
      "filename-conventions",
      "asset-type",
      "matter-types",
      "recursive-types",
      "function-server-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AiDemoApp",
        "fileName": "src/AiDemoApp.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/ProcessPromptFunctionResult.ts",
        "imports": [
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CategoryChildObject",
        "fileName": "src/CategoryChildObject.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "ContextualContent",
        "fileName": "src/ContextualContent.ts",
        "imports": []
      },
      {
        "name": "ContextualPrompt",
        "fileName": "src/ContextualPrompt.ts",
        "imports": [
          "SlugModelType from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "ContextualPromptInfo",
        "fileName": "src/ContextualPrompt.ts",
        "imports": [
          "SlugModelType from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "ContextualPromptResult",
        "fileName": "src/ContextualPromptResult.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ContextualPromptsObject",
        "fileName": "src/ContextualPromptObject.ts",
        "imports": []
      },
      {
        "name": "FileType",
        "fileName": "src/ContextualPrompt.ts",
        "imports": [
          "SlugModelType from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "FolderContent",
        "fileName": "src/ReaderProps.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/ReaderProps.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "GptIdeasUser",
        "fileName": "src/GptIdeasUser.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "LanguageModelEnum",
        "fileName": "src/ContextualPrompt.ts",
        "imports": [
          "SlugModelType from model-types",
          "FileType from filename-conventions"
        ]
      },
      {
        "name": "ProcessPromptFunctionResult",
        "fileName": "src/ProcessPromptFunctionResult.ts",
        "imports": [
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "PromptFunction",
        "fileName": "src/PromptFunction.ts",
        "imports": [
          "ApiFunctionParameters from function-server-types"
        ]
      },
      {
        "name": "ReaderProps",
        "fileName": "src/ReaderProps.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/ContextualPrompt.ts",
        "imports": [
          "SlugModelType from model-types",
          "FileType from filename-conventions"
        ]
      }
    ],
    "cumulativeDependencies": [
      "ai-types",
      "model-types",
      "recursive-types",
      "filename-conventions",
      "js-util",
      "asset-type",
      "function-server-types",
      "matter-types"
    ]
  },
  {
    "operationName": "generative-functions-node",
    "totalInstancesCount": 30,
    "totalImportCount": 53,
    "totalDependencyCount": 16,
    "importDependencies": [
      "ai-types",
      "database",
      "filename-conventions",
      "js-util",
      "augmented-word-node",
      "language-types",
      "fs-util",
      "fs-util-js",
      "matter-types",
      "read-json-file",
      "get-path",
      "try-parse-json",
      "ai-functions-node",
      "read-markdown-file",
      "k-explore",
      "next-types"
    ],
    "packageJsonDependencies": [
      "ai-types",
      "database",
      "filename-conventions",
      "js-util",
      "augmented-word-node",
      "language-types",
      "fs-util",
      "read-json-file",
      "get-path",
      "try-parse-json",
      "fs-util-js",
      "matter-types",
      "next-types",
      "read-markdown-file",
      "k-explore",
      "next",
      "ai-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "augmentMarkdown",
        "fileName": "src/augmentMarkdown.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ContextualPromptsObject from ai-types",
          "db from database",
          "getFileTypeFromPath from filename-conventions",
          "createMappedObject from js-util",
          "destructureOptionalObject from js-util",
          "getSubsetFromObject from js-util",
          "notEmpty from js-util",
          "getAugmentedWordObject from augmented-word-node",
          "WordMatrix from language-types"
        ]
      },
      {
        "name": "canSeeFileContent",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "canSeeFile",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "expandFrontmatter",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "findClosestAbsolutePath",
        "fileName": "src/findClosestAbsolutePath.ts",
        "imports": [
          "fs from fs-util",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "getContextualPromptResults",
        "fileName": "src/getContextualPromptResults.ts",
        "imports": [
          "db from database",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "getProjectRoot from get-path",
          "destructureOptionalObject from js-util",
          "omitUndefinedValues from js-util",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "getContextualPromptsArray",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "getContextualPrompts",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "getFirstFile",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "getFolderRelativeScopeDbFilePath",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "getReaderPageProps",
        "fileName": "src/getReaderPageProps.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "FolderContent from ai-types",
          "ReaderProps from ai-types",
          "fs from fs-util",
          "path from fs-util",
          "getExtension from fs-util-js",
          "makeRelative from fs-util-js",
          "getProjectRoot from get-path",
          "getContextualPromptCategories from ai-functions-node",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "readMarkdownFile from read-markdown-file"
        ]
      },
      {
        "name": "makeMarkdownLink",
        "fileName": "src/augmentMarkdown.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "ContextualPromptsObject from ai-types",
          "db from database",
          "getFileTypeFromPath from filename-conventions",
          "createMappedObject from js-util",
          "destructureOptionalObject from js-util",
          "getSubsetFromObject from js-util",
          "notEmpty from js-util",
          "getAugmentedWordObject from augmented-word-node",
          "WordMatrix from language-types"
        ]
      },
      {
        "name": "readerPageGetStaticPaths",
        "fileName": "src/readerPageGetStatic.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "makeArray from js-util",
          "omitUndefinedValues from js-util",
          "GetStaticPaths from next-types",
          "GetStaticPropsContext from next-types",
          "ReaderProps from ai-types"
        ]
      },
      {
        "name": "readerPageGetStaticProps",
        "fileName": "src/readerPageGetStatic.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "makeArray from js-util",
          "omitUndefinedValues from js-util",
          "GetStaticPaths from next-types",
          "GetStaticPropsContext from next-types",
          "ReaderProps from ai-types"
        ]
      },
      {
        "name": "FileType",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "FolderContent",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "GetStaticPropsContext",
        "fileName": "src/readerPageGetStatic.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "makeArray from js-util",
          "omitUndefinedValues from js-util",
          "GetStaticPaths from next-types",
          "GetStaticPropsContext from next-types",
          "ReaderProps from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof canSeeFile>",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof canSeeFileContent>",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof expandFrontmatter>",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof findClosestAbsolutePath>",
        "fileName": "src/findClosestAbsolutePath.ts",
        "imports": [
          "fs from fs-util",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPromptResults>",
        "fileName": "src/getContextualPromptResults.ts",
        "imports": [
          "db from database",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "getProjectRoot from get-path",
          "destructureOptionalObject from js-util",
          "omitUndefinedValues from js-util",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPrompts>",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getContextualPromptsArray>",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFirstFile>",
        "fileName": "src/general.ts",
        "imports": [
          "FolderContent from ai-types",
          "fs from fs-util",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderRelativeScopeDbFilePath>",
        "fileName": "src/getContextualPrompts.ts",
        "imports": [
          "db from database",
          "FileType from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "omitUndefinedValues from js-util",
          "getProjectRoot from get-path",
          "tryParseJson from try-parse-json",
          "ContextualPrompt from ai-types",
          "ContextualPromptsObject from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getReaderPageProps>",
        "fileName": "src/getReaderPageProps.ts",
        "imports": [
          "CategoryChildObject from ai-types",
          "FolderContent from ai-types",
          "ReaderProps from ai-types",
          "fs from fs-util",
          "path from fs-util",
          "getExtension from fs-util-js",
          "makeRelative from fs-util-js",
          "getProjectRoot from get-path",
          "getContextualPromptCategories from ai-functions-node",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "readMarkdownFile from read-markdown-file"
        ]
      },
      {
        "name": "NamedParameters<typeof readerPageGetStaticPaths>",
        "fileName": "src/readerPageGetStatic.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "makeArray from js-util",
          "omitUndefinedValues from js-util",
          "GetStaticPaths from next-types",
          "GetStaticPropsContext from next-types",
          "ReaderProps from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof readerPageGetStaticProps>",
        "fileName": "src/readerPageGetStatic.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "makeArray from js-util",
          "omitUndefinedValues from js-util",
          "GetStaticPaths from next-types",
          "GetStaticPropsContext from next-types",
          "ReaderProps from ai-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generative-functions-node",
      "ai-types",
      "model-types",
      "recursive-types",
      "asset-type",
      "function-server-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "filename-conventions",
      "js-util",
      "augmented-word-node",
      "augmented-word-types",
      "language-types",
      "fs-util",
      "graceful-fs",
      "fs-util-js",
      "matter-types",
      "read-json-file",
      "get-path",
      "try-parse-json",
      "ai-functions-node",
      "playwright",
      "write-to-assets",
      "function-context-type",
      "auth-types",
      "server/typings/common",
      "peer-types",
      "geo-types",
      "social-media-types",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "mail",
      "@sendgrid/mail",
      "queue-types",
      "function-functions-node",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "function-types",
      "read-markdown-file",
      "k-explore",
      "next-types"
    ]
  },
  {
    "operationName": "generative-ui",
    "totalInstancesCount": 34,
    "totalImportCount": 104,
    "totalDependencyCount": 30,
    "importDependencies": [
      "api",
      "markdown",
      "react-with-native",
      "ai-types",
      "file-writer",
      "context-menu",
      "react-with-native-alert",
      "cool-toast",
      "fs-util-js",
      "js-util",
      "react-with-native-router",
      "layout",
      "next/router",
      "next-a-link",
      "clickable-icon",
      "prompt-components",
      "tooltip",
      "react",
      "tabs",
      "share",
      "react-with-native-store",
      "function-form",
      "fancy-loader",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "peer-types",
      "react-with-native-select"
    ],
    "packageJsonDependencies": [
      "api",
      "markdown",
      "react-with-native",
      "ai-types",
      "cool-toast",
      "fs-util-js",
      "context-menu",
      "js-util",
      "react-with-native-router",
      "react-with-native-alert",
      "layout",
      "next-a-link",
      "clickable-icon",
      "prompt-components",
      "tooltip",
      "breadcrumbs",
      "file-writer",
      "generative-functions-node",
      "fs-util",
      "get-path",
      "k-explore",
      "share",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "peer-types",
      "react-with-native-select",
      "next",
      "react",
      "function-form",
      "fancy-loader",
      "tabs"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Dataset",
        "fileName": "src/components/Dataset.tsx",
        "imports": [
          "queries from api",
          "MarkdownContent from markdown",
          "Div from react-with-native"
        ]
      },
      {
        "name": "FileActions",
        "fileName": "src/components/FileActions.tsx",
        "imports": [
          "FolderContent from ai-types",
          "Div from react-with-native",
          "useFileWriter from file-writer",
          "ContextMenuItem from context-menu",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "Menu",
        "fileName": "src/components/Menu.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types",
          "ContextualPromptsObject from ai-types",
          "FolderContent from ai-types",
          "api from api",
          "useContextMenu from context-menu",
          "showStandardResponse from cool-toast",
          "warningToast from cool-toast",
          "getFolderJs from fs-util-js",
          "notEmpty from js-util",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/components/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "useRouter from next/router"
        ]
      },
      {
        "name": "NavButton",
        "fileName": "src/components/NavButton.tsx",
        "imports": [
          "ALink from next-a-link",
          "P from react-with-native"
        ]
      },
      {
        "name": "PromptButton",
        "fileName": "src/components/PromptButton.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "api from api",
          "ClickableIcon from clickable-icon",
          "showStandardResponse from cool-toast",
          "warningToast from cool-toast",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "Tooltip from tooltip",
          "MarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "ReaderPageNext",
        "fileName": "src/components/ReaderPageNext.tsx",
        "imports": [
          "ReaderProps from ai-types",
          "queries from api"
        ]
      },
      {
        "name": "ReaderPage",
        "fileName": "src/components/ReaderPage.tsx",
        "imports": [
          "ReaderProps from ai-types",
          "apiWithConfig from api",
          "ClickableIcon from clickable-icon",
          "useFileWriter from file-writer",
          "getFileOrFolderName from fs-util-js",
          "getFolderJs from fs-util-js",
          "MarkdownContent from markdown",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "useRouter from react-with-native-router",
          "Tabs from tabs"
        ]
      },
      {
        "name": "SelectionPrompts",
        "fileName": "src/components/SelectionPrompts.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "api from api",
          "showStandardResponse from cool-toast",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "Div from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "useLastSelection from share",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "setConfig",
        "fileName": "src/components/setConfig.ts",
        "imports": [
          "setItem from react-with-native-store"
        ]
      },
      {
        "name": "SettingsPage",
        "fileName": "src/components/SettingsPage.tsx",
        "imports": [
          "Div from react-with-native",
          "FunctionForm from function-form",
          "FancyLoader from fancy-loader",
          "showStandardResponse from cool-toast"
        ]
      },
      {
        "name": "useAdmin",
        "fileName": "src/components/useAdmin.ts",
        "imports": [
          "queries from api",
          "Group from peer-types"
        ]
      },
      {
        "name": "useFileActions",
        "fileName": "src/components/useFileActions.ts",
        "imports": [
          "FolderContent from ai-types",
          "api from api",
          "ContextMenuItem from context-menu",
          "showStandardResponse from cool-toast",
          "getFileOrFolderName from fs-util-js",
          "getFolderJs from fs-util-js",
          "makeRelative from fs-util-js",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "useQueryPath",
        "fileName": "src/components/useQueryPath.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "useVariantResult",
        "fileName": "src/components/useVariant.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "takeFirst from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "VariantSelector",
        "fileName": "src/components/VariantSelector.tsx",
        "imports": [
          "ContextualPromptResult from ai-types",
          "api from api",
          "ClickableIcon from clickable-icon",
          "showStandardResponse from cool-toast",
          "withoutExtension from fs-util-js",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "Item from react-with-native-select",
          "Select from react-with-native-select"
        ]
      },
      {
        "name": "ContextualPrompt",
        "fileName": "src/components/PromptButton.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "api from api",
          "ClickableIcon from clickable-icon",
          "showStandardResponse from cool-toast",
          "warningToast from cool-toast",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "Tooltip from tooltip",
          "MarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "ContextualPromptResult",
        "fileName": "src/components/useVariant.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "takeFirst from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "FolderContent",
        "fileName": "src/components/useFileActions.ts",
        "imports": [
          "FolderContent from ai-types",
          "api from api",
          "ContextMenuItem from context-menu",
          "showStandardResponse from cool-toast",
          "getFileOrFolderName from fs-util-js",
          "getFolderJs from fs-util-js",
          "makeRelative from fs-util-js",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "NamedParameters<typeof Dataset>",
        "fileName": "src/components/Dataset.tsx",
        "imports": [
          "queries from api",
          "MarkdownContent from markdown",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof FileActions>",
        "fileName": "src/components/FileActions.tsx",
        "imports": [
          "FolderContent from ai-types",
          "Div from react-with-native",
          "useFileWriter from file-writer",
          "ContextMenuItem from context-menu",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "NamedParameters<typeof Menu>",
        "fileName": "src/components/Menu.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types",
          "ContextualPromptsObject from ai-types",
          "FolderContent from ai-types",
          "api from api",
          "useContextMenu from context-menu",
          "showStandardResponse from cool-toast",
          "warningToast from cool-toast",
          "getFolderJs from fs-util-js",
          "notEmpty from js-util",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/components/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "useRouter from next/router"
        ]
      },
      {
        "name": "NamedParameters<typeof PromptButton>",
        "fileName": "src/components/PromptButton.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "api from api",
          "ClickableIcon from clickable-icon",
          "showStandardResponse from cool-toast",
          "warningToast from cool-toast",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "Tooltip from tooltip",
          "MarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof ReaderPage>",
        "fileName": "src/components/ReaderPage.tsx",
        "imports": [
          "ReaderProps from ai-types",
          "apiWithConfig from api",
          "ClickableIcon from clickable-icon",
          "useFileWriter from file-writer",
          "getFileOrFolderName from fs-util-js",
          "getFolderJs from fs-util-js",
          "MarkdownContent from markdown",
          "processPrompt from prompt-components",
          "usePromptResultAlert from prompt-components",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "useRouter from react-with-native-router",
          "Tabs from tabs"
        ]
      },
      {
        "name": "NamedParameters<typeof ReaderPageNext>",
        "fileName": "src/components/ReaderPageNext.tsx",
        "imports": [
          "ReaderProps from ai-types",
          "queries from api"
        ]
      },
      {
        "name": "NamedParameters<typeof setConfig>",
        "fileName": "src/components/setConfig.ts",
        "imports": [
          "setItem from react-with-native-store"
        ]
      },
      {
        "name": "NamedParameters<typeof SettingsPage>",
        "fileName": "src/components/SettingsPage.tsx",
        "imports": [
          "Div from react-with-native",
          "FunctionForm from function-form",
          "FancyLoader from fancy-loader",
          "showStandardResponse from cool-toast"
        ]
      },
      {
        "name": "NamedParameters<typeof useAdmin>",
        "fileName": "src/components/useAdmin.ts",
        "imports": [
          "queries from api",
          "Group from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof useFileActions>",
        "fileName": "src/components/useFileActions.ts",
        "imports": [
          "FolderContent from ai-types",
          "api from api",
          "ContextMenuItem from context-menu",
          "showStandardResponse from cool-toast",
          "getFileOrFolderName from fs-util-js",
          "getFolderJs from fs-util-js",
          "makeRelative from fs-util-js",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "NamedParameters<typeof useQueryPath>",
        "fileName": "src/components/useQueryPath.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof useVariantResult>",
        "fileName": "src/components/useVariant.ts",
        "imports": [
          "ContextualPromptResult from ai-types",
          "takeFirst from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof VariantSelector>",
        "fileName": "src/components/VariantSelector.tsx",
        "imports": [
          "ContextualPromptResult from ai-types",
          "api from api",
          "ClickableIcon from clickable-icon",
          "showStandardResponse from cool-toast",
          "withoutExtension from fs-util-js",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "Item from react-with-native-select",
          "Select from react-with-native-select"
        ]
      },
      {
        "name": "ReaderProps",
        "fileName": "src/components/ReaderPageNext.tsx",
        "imports": [
          "ReaderProps from ai-types",
          "queries from api"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generative-ui",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "markdown",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "asset-view",
      "asset-type",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "react-with-native",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "file-writer",
      "breadcrumbs",
      "next-paths",
      "context-menu",
      "react-popper",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "fs-util-js",
      "js-util",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "layout",
      "authentication",
      "react-with-native-ui",
      "big-button",
      "simplified-schema-form",
      "schema-util",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "next/router",
      "next-a-link",
      "next/link",
      "clickable-icon",
      "prompt-components",
      "tooltip",
      "@popperjs/core",
      "react",
      "tabs",
      "labeled-button",
      "share",
      "react-with-native-modal",
      "react-with-native-store",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "fancy-loader",
      "api-store",
      "nested-menu",
      "writer-input",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "db-crud",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-select"
    ]
  },
  {
    "operationName": "generative-web",
    "totalInstancesCount": 1,
    "totalImportCount": 18,
    "totalDependencyCount": 12,
    "importDependencies": [
      "next/app",
      "react-query",
      "generative-ui",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "generative-functions-node",
      "markdown",
      "react-with-native",
      "js-util",
      "next-a-link",
      "react-with-native-router"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "fs-util",
      "next",
      "next-pwa",
      "next-transpile-modules",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-twitter-embed",
      "generative-ui",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native",
      "timeline",
      "markdown",
      "function-form",
      "fancy-loader",
      "cool-toast",
      "js-util",
      "next-a-link",
      "react-with-native-router",
      "generative-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "StoreProvider from generative-ui",
          "MyLayout from generative-ui",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generative-web",
      "next/app",
      "react-query",
      "generative-ui",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "ai-types",
      "model-types",
      "recursive-types",
      "filename-conventions",
      "asset-type",
      "function-server-types",
      "matter-types",
      "file-writer",
      "breadcrumbs",
      "next-paths",
      "context-menu",
      "react-popper",
      "cool-toast",
      "fs-util-js",
      "layout",
      "authentication",
      "react-with-native-ui",
      "big-button",
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "simplified-schema-form",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "bundle-types",
      "next/router",
      "clickable-icon",
      "prompt-components",
      "tooltip",
      "@popperjs/core",
      "react",
      "tabs",
      "labeled-button",
      "share",
      "react-with-native-store",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "frontmatter-util",
      "marked-util",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "fancy-loader",
      "api-store",
      "nested-menu",
      "writer-input",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "db-crud",
      "ui-util",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-select",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "generative-functions-node",
      "augmented-word-node",
      "ai-functions-node",
      "playwright",
      "function-context-type",
      "server/typings/common",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "mail",
      "@sendgrid/mail",
      "queue-types",
      "function-functions-node",
      "function-types",
      "next-types",
      "markdown",
      "react-markdown",
      "react-with-native",
      "js-util",
      "next-a-link",
      "next/link",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ]
  },
  {
    "operationName": "gptideas-web",
    "totalInstancesCount": 3,
    "totalImportCount": 33,
    "totalDependencyCount": 21,
    "importDependencies": [
      "next/app",
      "react-query",
      "generative-ui",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native",
      "timeline",
      "tooltip",
      "generative-functions-node",
      "react-twitter-embed",
      "next/router",
      "react",
      "ai-types",
      "markdown",
      "tree1",
      "recursive-util",
      "clickable-icon",
      "js-util",
      "next-a-link",
      "react-with-native-router"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "fs-util",
      "next",
      "next-pwa",
      "next-transpile-modules",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-twitter-embed",
      "generative-ui",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native",
      "timeline",
      "markdown",
      "function-form",
      "fancy-loader",
      "cool-toast",
      "js-util",
      "next-a-link",
      "react-with-native-router",
      "tooltip",
      "generative-functions-node",
      "ai-types",
      "tree1",
      "recursive-util",
      "clickable-icon"
    ],
    "instancesAndTheirImports": [
      {
        "name": "GptIde",
        "fileName": "src/pages/index.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Timeline from timeline",
          "Dataset from generative-ui",
          "NavButton from generative-ui",
          "Tooltip from tooltip",
          "readerPageGetStaticProps from generative-functions-node",
          "TwitterTimelineEmbed from react-twitter-embed",
          "useRouter from next/router",
          "useEffect from react",
          "useState from react",
          "ReaderProps from ai-types",
          "MarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "Tree from tree1",
          "mapChildObjectRecursive from recursive-util",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "StoreProvider from generative-ui",
          "MyLayout from generative-ui",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "TextWriter",
        "fileName": "src/pages/index.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Timeline from timeline",
          "Dataset from generative-ui",
          "NavButton from generative-ui",
          "Tooltip from tooltip",
          "readerPageGetStaticProps from generative-functions-node",
          "TwitterTimelineEmbed from react-twitter-embed",
          "useRouter from next/router",
          "useEffect from react",
          "useState from react",
          "ReaderProps from ai-types",
          "MarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "Tree from tree1",
          "mapChildObjectRecursive from recursive-util",
          "ClickableIcon from clickable-icon"
        ]
      }
    ],
    "cumulativeDependencies": [
      "gptideas-web",
      "next/app",
      "react-query",
      "generative-ui",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "file-writer",
      "breadcrumbs",
      "next-paths",
      "context-menu",
      "react-popper",
      "cool-toast",
      "fs-util-js",
      "layout",
      "authentication",
      "react-with-native-ui",
      "big-button",
      "model-types",
      "matter-types",
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "asset-type",
      "text-or-binary",
      "simplified-schema-form",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "augmented-word-types",
      "bundle-types",
      "prompt-components",
      "tabs",
      "labeled-button",
      "share",
      "react-with-native-store",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "fancy-loader",
      "api-store",
      "nested-menu",
      "nested-menu-types",
      "writer-input",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "db-crud",
      "ui-util",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-select",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "react-with-native",
      "timeline",
      "vscode-open",
      "tooltip",
      "@popperjs/core",
      "generative-functions-node",
      "augmented-word-node",
      "ai-functions-node",
      "playwright",
      "function-context-type",
      "server/typings/common",
      "server-login",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "encrypt-password",
      "bcrypt",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "mail",
      "@sendgrid/mail",
      "queue-types",
      "function-server-types",
      "function-functions-node",
      "function-types",
      "next-types",
      "react-twitter-embed",
      "next/router",
      "react",
      "ai-types",
      "markdown",
      "react-markdown",
      "tree1",
      "react-d3-tree/lib/types/types/common",
      "recursive-util",
      "clickable-icon",
      "js-util",
      "next-a-link",
      "next/link",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ]
  },
  {
    "operationName": "prompt-components",
    "totalInstancesCount": 7,
    "totalImportCount": 15,
    "totalDependencyCount": 10,
    "importDependencies": [
      "api",
      "react-with-native",
      "ai-types",
      "markdown",
      "react-with-native-alert",
      "react-with-native-select",
      "share",
      "convert-case",
      "model-types",
      "cool-toast"
    ],
    "packageJsonDependencies": [
      "api",
      "react-with-native",
      "ai-types",
      "markdown",
      "react-with-native-alert",
      "react-with-native-select",
      "share",
      "react-native",
      "context-menu",
      "convert-case",
      "model-types",
      "cool-toast"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ContextualPromptResultsTab",
        "fileName": "src/ContextualPromptResultsTab.tsx",
        "imports": [
          "queries from api",
          "Div from react-with-native",
          "ContextualPromptResult from ai-types",
          "MarkdownContent from markdown"
        ]
      },
      {
        "name": "FilePromptSelect",
        "fileName": "src/FilePromptSelect.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "useAlert from react-with-native-alert",
          "Item from react-with-native-select",
          "useSelect from react-with-native-select",
          "useLastSelection from share"
        ]
      },
      {
        "name": "processPrompt",
        "fileName": "src/processPrompt.ts",
        "imports": [
          "ContextualContent from ai-types",
          "api from api",
          "humanCase from convert-case",
          "Slug from model-types",
          "showStandardResponse from cool-toast"
        ]
      },
      {
        "name": "usePromptResultAlert",
        "fileName": "src/usePromptResultAlert.tsx",
        "imports": [
          "successToast from cool-toast"
        ]
      },
      {
        "name": "ContextualPrompt",
        "fileName": "src/FilePromptSelect.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "useAlert from react-with-native-alert",
          "Item from react-with-native-select",
          "useSelect from react-with-native-select",
          "useLastSelection from share"
        ]
      },
      {
        "name": "NamedParameters<typeof ContextualPromptResultsTab>",
        "fileName": "src/ContextualPromptResultsTab.tsx",
        "imports": [
          "queries from api",
          "Div from react-with-native",
          "ContextualPromptResult from ai-types",
          "MarkdownContent from markdown"
        ]
      },
      {
        "name": "NamedParameters<typeof FilePromptSelect>",
        "fileName": "src/FilePromptSelect.tsx",
        "imports": [
          "ContextualPrompt from ai-types",
          "useAlert from react-with-native-alert",
          "Item from react-with-native-select",
          "useSelect from react-with-native-select",
          "useLastSelection from share"
        ]
      }
    ],
    "cumulativeDependencies": [
      "prompt-components",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "react-with-native",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "asset-type",
      "function-server-types",
      "matter-types",
      "markdown",
      "fs-util-js",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "text-or-binary",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "make-test",
      "ui-util",
      "clickable-icon",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-select",
      "react-with-native-ui",
      "share",
      "react-with-native-modal",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "writer-input",
      "breadcrumbs",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "convert-case",
      "model-types",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "queue-types",
    "totalInstancesCount": 1,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Queue",
        "fileName": "src/Queue.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "queue-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "tool-web",
    "totalInstancesCount": 5,
    "totalImportCount": 12,
    "totalDependencyCount": 11,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...queryPath].tsx",
        "imports": []
      },
      {
        "name": "getStaticProps",
        "fileName": "src/pages/[...queryPath].tsx",
        "imports": []
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "tool-web",
      "layout",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "menu",
      "fancy-loader",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types"
    ]
  },
  {
    "operationName": "asset-demo-web",
    "totalInstancesCount": 3,
    "totalImportCount": 14,
    "totalDependencyCount": 13,
    "importDependencies": [
      "react-with-native",
      "react",
      "asset-type",
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "asset-type",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "asset-demo-web",
      "react-with-native",
      "react",
      "asset-type",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "model-types",
      "js-util",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "asset-view",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "asset-functions-js",
    "totalInstancesCount": 27,
    "totalImportCount": 11,
    "totalDependencyCount": 7,
    "importDependencies": [
      "js-util",
      "name-conventions",
      "asset-type",
      "fs-util-js",
      "api",
      "text-or-binary",
      "model-types"
    ],
    "packageJsonDependencies": [
      "api",
      "asset-type",
      "fs-util-js",
      "model-types",
      "server-api-url",
      "text-or-binary",
      "js-util",
      "name-conventions"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addToken",
        "fileName": "src/token/addToken.ts",
        "imports": [
          "generateRandomString from model-types"
        ]
      },
      {
        "name": "ensureToken",
        "fileName": "src/token/ensureToken.ts",
        "imports": []
      },
      {
        "name": "findAssetParametersRecursively",
        "fileName": "src/findAssetParametersRecursively.ts",
        "imports": [
          "notEmpty from js-util",
          "AssetInputType from name-conventions",
          "getAssetInputType from name-conventions"
        ]
      },
      {
        "name": "getConversionInfoFromType",
        "fileName": "src/getConversionInfoFromType.ts",
        "imports": []
      },
      {
        "name": "getExtensionFromAsset",
        "fileName": "src/getExtensionFromAsset.ts",
        "imports": [
          "Asset from asset-type",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "getNameFromRelativePath",
        "fileName": "src/getNameFromRelativePath.ts",
        "imports": [
          "withoutExtension from fs-util-js"
        ]
      },
      {
        "name": "getNameWithTokenFromRelativePath",
        "fileName": "src/token/getNameWithTokenFromRelativePath.ts",
        "imports": []
      },
      {
        "name": "getReferencedAssetApiUrl",
        "fileName": "src/getReferencedAssetApiUrl.ts",
        "imports": [
          "getGetApiUrl from api"
        ]
      },
      {
        "name": "getTypeFromUrlOrPath",
        "fileName": "src/getTypeFromUrlOrPath.ts",
        "imports": [
          "AssetType from asset-type",
          "getExtension from fs-util-js",
          "isText from text-or-binary"
        ]
      },
      {
        "name": "readableSize",
        "fileName": "src/readableSize.ts",
        "imports": []
      },
      {
        "name": "removeTokenIfPresent",
        "fileName": "src/token/removeTokenIfPresent.ts",
        "imports": []
      },
      {
        "name": "test",
        "fileName": "src/findAssetParametersRecursively.test.ts",
        "imports": []
      },
      {
        "name": "Asset",
        "fileName": "src/getExtensionFromAsset.ts",
        "imports": [
          "Asset from asset-type",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "AssetInputType",
        "fileName": "src/findAssetParametersRecursively.ts",
        "imports": [
          "notEmpty from js-util",
          "AssetInputType from name-conventions",
          "getAssetInputType from name-conventions"
        ]
      },
      {
        "name": "AssetParameter",
        "fileName": "src/findAssetParametersRecursively.ts",
        "imports": [
          "notEmpty from js-util",
          "AssetInputType from name-conventions",
          "getAssetInputType from name-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof addToken>",
        "fileName": "src/token/addToken.ts",
        "imports": [
          "generateRandomString from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof ensureToken>",
        "fileName": "src/token/ensureToken.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findAssetParametersRecursively>",
        "fileName": "src/findAssetParametersRecursively.ts",
        "imports": [
          "notEmpty from js-util",
          "AssetInputType from name-conventions",
          "getAssetInputType from name-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getConversionInfoFromType>",
        "fileName": "src/getConversionInfoFromType.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getExtensionFromAsset>",
        "fileName": "src/getExtensionFromAsset.ts",
        "imports": [
          "Asset from asset-type",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getNameFromRelativePath>",
        "fileName": "src/getNameFromRelativePath.ts",
        "imports": [
          "withoutExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getNameWithTokenFromRelativePath>",
        "fileName": "src/token/getNameWithTokenFromRelativePath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getReferencedAssetApiUrl>",
        "fileName": "src/getReferencedAssetApiUrl.ts",
        "imports": [
          "getGetApiUrl from api"
        ]
      },
      {
        "name": "NamedParameters<typeof getTypeFromUrlOrPath>",
        "fileName": "src/getTypeFromUrlOrPath.ts",
        "imports": [
          "AssetType from asset-type",
          "getExtension from fs-util-js",
          "isText from text-or-binary"
        ]
      },
      {
        "name": "NamedParameters<typeof readableSize>",
        "fileName": "src/readableSize.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof removeTokenIfPresent>",
        "fileName": "src/token/removeTokenIfPresent.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/findAssetParametersRecursively.test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "asset-functions-js",
      "js-util",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize",
      "asset-type",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "model-types"
    ]
  },
  {
    "operationName": "asset-functions-node",
    "totalInstancesCount": 32,
    "totalImportCount": 64,
    "totalDependencyCount": 19,
    "importDependencies": [
      "asset-type",
      "fs-util",
      "filename-conventions",
      "get-path",
      "fs-util-js",
      "k-explore",
      "sdk-operations",
      "convert-case",
      "log",
      "js-util",
      "database",
      "sdk-db",
      "fs-orm",
      "set-json-key",
      "model-types",
      "asset-functions-js",
      "function-context-type",
      "server/typings/common",
      "ffmpeg-util"
    ],
    "packageJsonDependencies": [
      "fluent-ffmpeg",
      "asset-type",
      "fs-util",
      "filename-conventions",
      "get-path",
      "k-explore",
      "js-util",
      "name-conventions",
      "convert-case",
      "log",
      "database",
      "fs-orm",
      "set-json-key",
      "model-types",
      "asset-functions-js",
      "fs-util-js",
      "server",
      "peer-types",
      "function-context-type",
      "ffmpeg-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "compressAsset",
        "fileName": "src/compressAsset.ts",
        "imports": [
          "CompressionConfig from asset-type"
        ]
      },
      {
        "name": "deleteReferencedAsset",
        "fileName": "src/deleteReferencedAsset.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "downloadRemoteAsset",
        "fileName": "src/downloadRemoteAsset.ts",
        "imports": [
          "UploadAssetResult from asset-type"
        ]
      },
      {
        "name": "findAbsoluteAssetPathFromReference",
        "fileName": "src/util/findAbsoluteAssetPathFromReference.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getExtension from fs-util-js",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "findAllProjectMedia",
        "fileName": "src/findAllProjectMedia.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "generatedFolders from filename-conventions",
          "sourceFolderName from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "explore from k-explore",
          "pathArrayIsOperation from k-explore",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "getAssetDirectlyGetApi",
        "fileName": "src/server-context/getAssetDirectlyGetApi.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "takeFirst from js-util",
          "FunctionContext from function-context-type",
          "Context from server/typings/common"
        ]
      },
      {
        "name": "getReferencedAssetGetApi",
        "fileName": "src/server-context/getReferencedAssetGetApi.ts",
        "imports": [
          "Context from server/typings/common",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "getStorageLocationInfo",
        "fileName": "src/getStorageLocationInfo.ts",
        "imports": [
          "sourceFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "path from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "kebabCase from convert-case"
        ]
      },
      {
        "name": "getTemporaryAssetsFolderPath",
        "fileName": "src/getTemporaryAssetsFolderPath.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "processAsset",
        "fileName": "src/processAsset.ts",
        "imports": [
          "BackendAsset from asset-type",
          "fs from fs-util",
          "getFirstAvailableFilename from fs-util",
          "path from fs-util",
          "renameAndCreate from fs-util",
          "getProjectRoot from get-path",
          "getRelativeLinkPath from get-path",
          "slugify from convert-case",
          "log from log",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "processItemAssets",
        "fileName": "src/processItemAssets.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "CustomQueryConfig from fs-orm",
          "setKeyAtLocation from set-json-key",
          "BackendAsset from asset-type",
          "notEmpty from js-util",
          "AugmentedAnyModelType from model-types",
          "findAssetParametersRecursively from asset-functions-js",
          "getParameterAtLocation from js-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "removeOldTemporaryAssets",
        "fileName": "src/removeOldTemporaryAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "serverDownloadReply",
        "fileName": "src/util/serverDownloadReply.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "uploadAssetWithContext",
        "fileName": "src/server-context/uploadAssetWithContext.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "UploadAssetResult from asset-type",
          "generateRandomString from model-types",
          "getConversionInfoFromType from asset-functions-js",
          "convertToMp3 from ffmpeg-util",
          "FunctionContext from function-context-type",
          "convertToMp4 from ffmpeg-util"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/processAsset.ts",
        "imports": [
          "BackendAsset from asset-type",
          "fs from fs-util",
          "getFirstAvailableFilename from fs-util",
          "path from fs-util",
          "renameAndCreate from fs-util",
          "getProjectRoot from get-path",
          "getRelativeLinkPath from get-path",
          "slugify from convert-case",
          "log from log",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "CompressionConfig",
        "fileName": "src/compressAsset.ts",
        "imports": [
          "CompressionConfig from asset-type"
        ]
      },
      {
        "name": "CompressionConfig",
        "fileName": "src/compressAsset.ts",
        "imports": [
          "CompressionConfig from asset-type"
        ]
      },
      {
        "name": "FunctionContext",
        "fileName": "src/server-context/uploadAssetWithContext.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "UploadAssetResult from asset-type",
          "generateRandomString from model-types",
          "getConversionInfoFromType from asset-functions-js",
          "convertToMp3 from ffmpeg-util",
          "FunctionContext from function-context-type",
          "convertToMp4 from ffmpeg-util"
        ]
      },
      {
        "name": "NamedParameters<typeof compressAsset>",
        "fileName": "src/compressAsset.ts",
        "imports": [
          "CompressionConfig from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof downloadRemoteAsset>",
        "fileName": "src/downloadRemoteAsset.ts",
        "imports": [
          "UploadAssetResult from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof compressAsset>",
        "fileName": "src/compressAsset.ts",
        "imports": [
          "CompressionConfig from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof deleteReferencedAsset>",
        "fileName": "src/deleteReferencedAsset.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof downloadRemoteAsset>",
        "fileName": "src/downloadRemoteAsset.ts",
        "imports": [
          "UploadAssetResult from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof findAbsoluteAssetPathFromReference>",
        "fileName": "src/util/findAbsoluteAssetPathFromReference.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getExtension from fs-util-js",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof findAllProjectMedia>",
        "fileName": "src/findAllProjectMedia.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "generatedFolders from filename-conventions",
          "sourceFolderName from filename-conventions",
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "explore from k-explore",
          "pathArrayIsOperation from k-explore",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof getStorageLocationInfo>",
        "fileName": "src/getStorageLocationInfo.ts",
        "imports": [
          "sourceFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "path from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "kebabCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getTemporaryAssetsFolderPath>",
        "fileName": "src/getTemporaryAssetsFolderPath.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof processAsset>",
        "fileName": "src/processAsset.ts",
        "imports": [
          "BackendAsset from asset-type",
          "fs from fs-util",
          "getFirstAvailableFilename from fs-util",
          "path from fs-util",
          "renameAndCreate from fs-util",
          "getProjectRoot from get-path",
          "getRelativeLinkPath from get-path",
          "slugify from convert-case",
          "log from log",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof removeOldTemporaryAssets>",
        "fileName": "src/removeOldTemporaryAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof serverDownloadReply>",
        "fileName": "src/util/serverDownloadReply.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof uploadAssetWithContext>",
        "fileName": "src/server-context/uploadAssetWithContext.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "UploadAssetResult from asset-type",
          "generateRandomString from model-types",
          "getConversionInfoFromType from asset-functions-js",
          "convertToMp3 from ffmpeg-util",
          "FunctionContext from function-context-type",
          "convertToMp4 from ffmpeg-util"
        ]
      },
      {
        "name": "ReceivedFile",
        "fileName": "src/server-context/uploadAssetWithContext.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "UploadAssetResult from asset-type",
          "generateRandomString from model-types",
          "getConversionInfoFromType from asset-functions-js",
          "convertToMp3 from ffmpeg-util",
          "FunctionContext from function-context-type",
          "convertToMp4 from ffmpeg-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "asset-functions-node",
      "asset-type",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "fs-util-js",
      "k-explore",
      "markdown-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "marked",
      "make-test",
      "write-to-assets",
      "sdk-operations",
      "convert-case",
      "log",
      "js-util",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "set-json-key",
      "model-types",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "function-context-type",
      "auth-types",
      "peer-types",
      "geo-types",
      "social-media-types",
      "server/typings/common",
      "ffmpeg-util",
      "one-by-one"
    ]
  },
  {
    "operationName": "asset-input",
    "totalInstancesCount": 19,
    "totalImportCount": 44,
    "totalDependencyCount": 16,
    "importDependencies": [
      "react-with-native-store",
      "react",
      "react-with-native",
      "clickable-icon",
      "api",
      "server-api-url",
      "js-util",
      "asset-view",
      "react-with-native-alert",
      "asset-type",
      "asset-functions-js",
      "model-types",
      "api-types",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder"
    ],
    "packageJsonDependencies": [
      "audio-react-recorder",
      "react-media-recorder",
      "react-webcam",
      "react-with-native-store",
      "react-with-native",
      "clickable-icon",
      "api",
      "server-api-url",
      "js-util",
      "asset-view",
      "react-with-native-alert",
      "asset-type",
      "asset-functions-js",
      "model-types",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "api-types",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AssetInput",
        "fileName": "src/AssetInput.tsx",
        "imports": [
          "getItem from react-with-native-store",
          "useState from react",
          "useEffect from react",
          "Div from react-with-native",
          "ClickableIcon from clickable-icon",
          "api from api",
          "AUTH_TOKEN_STORAGE_KEY from api",
          "apiUrl from server-api-url",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "InteractiveAsset from asset-view",
          "useAlert from react-with-native-alert",
          "NewAssetType from asset-type",
          "UploadAssetResult from asset-type",
          "Asset from asset-type",
          "BackendAsset from asset-type",
          "ensureToken from asset-functions-js",
          "generateRandomString from model-types",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "Audio",
        "fileName": "src/MediaRecorder.tsx",
        "imports": [
          "useRef from react",
          "useEffect from react"
        ]
      },
      {
        "name": "base64UrltoBlob",
        "fileName": "src/Webcam.tsx",
        "imports": [
          "useState from react",
          "Button from react-with-native",
          "Div from react-with-native",
          "Image from react-with-native"
        ]
      },
      {
        "name": "FileInput",
        "fileName": "src/FileInput.tsx",
        "imports": [
          "Asset from asset-type",
          "AssetType from asset-type",
          "withoutExtension from fs-util-js",
          "notEmpty from js-util",
          "Input from react-with-native"
        ]
      },
      {
        "name": "getTypeFromFileBlob",
        "fileName": "src/util/getTypeFromFileBlob.ts",
        "imports": [
          "AssetType from asset-type"
        ]
      },
      {
        "name": "makeBackendAsset",
        "fileName": "src/util/makeBackendAsset.ts",
        "imports": [
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "MediaRecorderComponent",
        "fileName": "src/MediaRecorder.tsx",
        "imports": [
          "useRef from react",
          "useEffect from react"
        ]
      },
      {
        "name": "MediaRecorder",
        "fileName": "src/MediaRecorder.tsx",
        "imports": [
          "useRef from react",
          "useEffect from react"
        ]
      },
      {
        "name": "ReactMediaRecorder",
        "fileName": "src/ReactMediaRecorder.tsx",
        "imports": [
          "register from extendable-media-recorder",
          "MediaRecorder from extendable-media-recorder",
          "IMediaRecorder from extendable-media-recorder",
          "ReactElement from react",
          "useCallback from react",
          "useEffect from react",
          "useRef from react",
          "useState from react",
          "connect from extendable-media-recorder-wav-encoder",
          "disconnect from extendable-media-recorder-wav-encoder"
        ]
      },
      {
        "name": "SelectMedia",
        "fileName": "src/select-media/SelectMedia.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "useReactMediaRecorder",
        "fileName": "src/ReactMediaRecorder.tsx",
        "imports": [
          "register from extendable-media-recorder",
          "MediaRecorder from extendable-media-recorder",
          "IMediaRecorder from extendable-media-recorder",
          "ReactElement from react",
          "useCallback from react",
          "useEffect from react",
          "useRef from react",
          "useState from react",
          "connect from extendable-media-recorder-wav-encoder",
          "disconnect from extendable-media-recorder-wav-encoder"
        ]
      },
      {
        "name": "VideoPreview",
        "fileName": "src/MediaRecorder.tsx",
        "imports": [
          "useRef from react",
          "useEffect from react"
        ]
      },
      {
        "name": "Video",
        "fileName": "src/MediaRecorder.tsx",
        "imports": [
          "useRef from react",
          "useEffect from react"
        ]
      },
      {
        "name": "WebcamCapture",
        "fileName": "src/Webcam.tsx",
        "imports": [
          "useState from react",
          "Button from react-with-native",
          "Div from react-with-native",
          "Image from react-with-native"
        ]
      },
      {
        "name": "Asset",
        "fileName": "src/util/makeBackendAsset.ts",
        "imports": [
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "MediaSourceEnum",
        "fileName": "src/select-media/types.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getTypeFromFileBlob>",
        "fileName": "src/util/getTypeFromFileBlob.ts",
        "imports": [
          "AssetType from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof makeBackendAsset>",
        "fileName": "src/util/makeBackendAsset.ts",
        "imports": [
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof SelectMedia>",
        "fileName": "src/select-media/SelectMedia.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "asset-input",
      "react-with-native-store",
      "react",
      "react-with-native",
      "clickable-icon",
      "api",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "marked",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "asset-type",
      "asset-functions-js",
      "model-types",
      "api-types",
      "sdk-api",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder"
    ]
  },
  {
    "operationName": "asset-type",
    "totalInstancesCount": 14,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Asset",
        "fileName": "src/Asset.ts",
        "imports": []
      },
      {
        "name": "AssetType",
        "fileName": "src/Asset.ts",
        "imports": []
      },
      {
        "name": "BackendAsset",
        "fileName": "src/BackendAsset.ts",
        "imports": []
      },
      {
        "name": "CompressionConfig",
        "fileName": "src/CompressionConfig.ts",
        "imports": []
      },
      {
        "name": "CompressionOption",
        "fileName": "src/frontend-types.ts",
        "imports": []
      },
      {
        "name": "CompressionConfig",
        "fileName": "src/CompressionConfig.ts",
        "imports": []
      },
      {
        "name": "CompressionOption",
        "fileName": "src/frontend-types.ts",
        "imports": []
      },
      {
        "name": "Image",
        "fileName": "src/Image.ts",
        "imports": []
      },
      {
        "name": "NewAssetType",
        "fileName": "src/frontend-types.ts",
        "imports": []
      },
      {
        "name": "NewAssetType",
        "fileName": "src/frontend-types.ts",
        "imports": []
      },
      {
        "name": "UploadAssetBody",
        "fileName": "src/UploadAssetBody.ts",
        "imports": []
      },
      {
        "name": "UploadAssetResult",
        "fileName": "src/frontend-types.ts",
        "imports": []
      },
      {
        "name": "UploadAssetBody",
        "fileName": "src/UploadAssetBody.ts",
        "imports": []
      },
      {
        "name": "UploadAssetResult",
        "fileName": "src/frontend-types.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "asset-type"
    ]
  },
  {
    "operationName": "asset-view",
    "totalInstancesCount": 15,
    "totalImportCount": 32,
    "totalDependencyCount": 10,
    "importDependencies": [
      "asset-functions-js",
      "asset-type",
      "server-api-url",
      "markdown",
      "react-with-native",
      "js-util",
      "clickable-icon",
      "model-types",
      "react",
      "text-or-binary"
    ],
    "packageJsonDependencies": [
      "asset-functions-js",
      "asset-type",
      "binaryextensions",
      "clickable-icon",
      "istextorbinary",
      "js-util",
      "markdown",
      "model-types",
      "path-browserify",
      "react",
      "react-with-native",
      "server-api-url",
      "text-or-binary",
      "textextensions"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AssetView",
        "fileName": "src/AssetView.tsx",
        "imports": [
          "readableSize from asset-functions-js",
          "Asset from asset-type",
          "isDev from server-api-url",
          "MarkdownCodeblock from markdown",
          "A from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "destructureOptionalObject from js-util"
        ]
      },
      {
        "name": "getSrc",
        "fileName": "src/useAsset.ts",
        "imports": [
          "getExtensionFromAsset from asset-functions-js",
          "getReferencedAssetApiUrl from asset-functions-js",
          "Asset from asset-type",
          "apiUrl from server-api-url"
        ]
      },
      {
        "name": "InteractiveAsset",
        "fileName": "src/InteractiveAsset.tsx",
        "imports": [
          "Asset from asset-type",
          "ClickableIcon from clickable-icon",
          "Div from react-with-native",
          "Input from react-with-native",
          "Span from react-with-native",
          "addToken from asset-functions-js",
          "removeTokenIfPresent from asset-functions-js",
          "getNameWithTokenFromRelativePath from asset-functions-js"
        ]
      },
      {
        "name": "itemGetBackendAssetUrl",
        "fileName": "src/itemGetBackendAssetUrl.ts",
        "imports": [
          "BackendAsset from asset-type",
          "getReferencedAssetApiUrl from asset-functions-js",
          "apiUrl from server-api-url",
          "AugmentedAnyModelType from model-types",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "ModelItemAssetView",
        "fileName": "src/ModelItemAssetView.tsx",
        "imports": [
          "BackendAsset from asset-type",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "useAssetInfo",
        "fileName": "src/useAssetInfo.ts",
        "imports": [
          "getTypeFromUrlOrPath from asset-functions-js",
          "useEffect from react",
          "useState from react",
          "isText from text-or-binary"
        ]
      },
      {
        "name": "useAsset",
        "fileName": "src/useAsset.ts",
        "imports": [
          "getExtensionFromAsset from asset-functions-js",
          "getReferencedAssetApiUrl from asset-functions-js",
          "Asset from asset-type",
          "apiUrl from server-api-url"
        ]
      },
      {
        "name": "Asset",
        "fileName": "src/useAsset.ts",
        "imports": [
          "getExtensionFromAsset from asset-functions-js",
          "getReferencedAssetApiUrl from asset-functions-js",
          "Asset from asset-type",
          "apiUrl from server-api-url"
        ]
      },
      {
        "name": "AugmentedAnyModelType",
        "fileName": "src/itemGetBackendAssetUrl.ts",
        "imports": [
          "BackendAsset from asset-type",
          "getReferencedAssetApiUrl from asset-functions-js",
          "apiUrl from server-api-url",
          "AugmentedAnyModelType from model-types",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/itemGetBackendAssetUrl.ts",
        "imports": [
          "BackendAsset from asset-type",
          "getReferencedAssetApiUrl from asset-functions-js",
          "apiUrl from server-api-url",
          "AugmentedAnyModelType from model-types",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof AssetView>",
        "fileName": "src/AssetView.tsx",
        "imports": [
          "readableSize from asset-functions-js",
          "Asset from asset-type",
          "isDev from server-api-url",
          "MarkdownCodeblock from markdown",
          "A from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "destructureOptionalObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getSrc>",
        "fileName": "src/useAsset.ts",
        "imports": [
          "getExtensionFromAsset from asset-functions-js",
          "getReferencedAssetApiUrl from asset-functions-js",
          "Asset from asset-type",
          "apiUrl from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof itemGetBackendAssetUrl>",
        "fileName": "src/itemGetBackendAssetUrl.ts",
        "imports": [
          "BackendAsset from asset-type",
          "getReferencedAssetApiUrl from asset-functions-js",
          "apiUrl from server-api-url",
          "AugmentedAnyModelType from model-types",
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof useAsset>",
        "fileName": "src/useAsset.ts",
        "imports": [
          "getExtensionFromAsset from asset-functions-js",
          "getReferencedAssetApiUrl from asset-functions-js",
          "Asset from asset-type",
          "apiUrl from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof useAssetInfo>",
        "fileName": "src/useAssetInfo.ts",
        "imports": [
          "getTypeFromUrlOrPath from asset-functions-js",
          "useEffect from react",
          "useState from react",
          "isText from text-or-binary"
        ]
      }
    ],
    "cumulativeDependencies": [
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "react-with-native-store",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "asset-type",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "react-with-native",
      "js-util",
      "clickable-icon",
      "model-types",
      "react",
      "text-or-binary"
    ]
  },
  {
    "operationName": "text-or-binary",
    "totalInstancesCount": 19,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getChunkBegin",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getChunkEnd",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getEncoding",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isBinary",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isFirstByteOf2ByteChar",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isFirstByteOf3ByteChar",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isFirstByteOf4ByteChar",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isLaterByteOfUtf8",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isText",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "EncodingOpts",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getChunkBegin>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getChunkEnd>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getEncoding>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isBinary>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isFirstByteOf2ByteChar>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isFirstByteOf3ByteChar>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isFirstByteOf4ByteChar>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isLaterByteOfUtf8>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isText>",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "text-or-binary"
    ]
  },
  {
    "operationName": "folder-get-updated-at",
    "totalInstancesCount": 3,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "k-explore"
    ],
    "packageJsonDependencies": [
      "k-explore"
    ],
    "instancesAndTheirImports": [
      {
        "name": "folderGetUpdatedAt",
        "fileName": "src/folderGetUpdatedAt.ts",
        "imports": [
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof folderGetUpdatedAt>",
        "fileName": "src/folderGetUpdatedAt.ts",
        "imports": [
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof folderGetUpdatedAt>",
        "fileName": "src/folderGetUpdatedAt.ts",
        "imports": [
          "explore from k-explore"
        ]
      }
    ],
    "cumulativeDependencies": [
      "folder-get-updated-at",
      "k-explore",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "get-path",
      "sdk-operations",
      "write-to-assets"
    ]
  },
  {
    "operationName": "fs-util",
    "totalInstancesCount": 64,
    "totalImportCount": 19,
    "totalDependencyCount": 5,
    "importDependencies": [
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions"
    ],
    "packageJsonDependencies": [
      "gray-matter",
      "js-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "write-to-assets"
    ],
    "instancesAndTheirImports": [
      {
        "name": "canAccessSync",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canAccess",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canExecuteSync",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canExecute",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canReadSync",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canRead",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canSeeSync",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canSee",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canWriteSync",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "canWrite",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "copyAllRelativeFiles",
        "fileName": "src/copyAllRelativeFiles.ts",
        "imports": []
      },
      {
        "name": "findFileNameCaseInsensitive",
        "fileName": "src/findFileNameCaseInsensitive.ts",
        "imports": []
      },
      {
        "name": "getAllFoldersUntilFolder",
        "fileName": "src/getAllFoldersUntilFolder.ts",
        "imports": [
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "getFileName",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getFirstAvailableFilename",
        "fileName": "src/getFirstAvailableFilename.ts",
        "imports": []
      },
      {
        "name": "getFolderSizeObject",
        "fileName": "src/getFolderSizeObject.ts",
        "imports": [
          "ChildObject from recursive-types",
          "generatedFolders from filename-conventions",
          "notEmpty from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "getFolderSize",
        "fileName": "src/getFolderSize.ts",
        "imports": [
          "ChildObject from recursive-types",
          "sum from js-util"
        ]
      },
      {
        "name": "getFolder",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getLastFolder",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getOneFolderUpPath",
        "fileName": "src/getOneFolderUpPath.ts",
        "imports": []
      },
      {
        "name": "getPathCombinations",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "oneUp",
        "fileName": "src/getFirstAvailableFilename.ts",
        "imports": []
      },
      {
        "name": "parseMd",
        "fileName": "src/parseMd.ts",
        "imports": []
      },
      {
        "name": "removeAllExcept",
        "fileName": "src/removeAllExcept.ts",
        "imports": []
      },
      {
        "name": "renameAndCreate",
        "fileName": "src/renameAndCreate.ts",
        "imports": []
      },
      {
        "name": "writeJsonToFile",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "writeStringToFile",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "writeToFiles",
        "fileName": "src/files.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "Dir",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "Dirent",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "FolderPath",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "FolderPath",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "Fs",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "MarkdownContent",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "Markdown",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "MarkdownContent",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findFileNameCaseInsensitive>",
        "fileName": "src/findFileNameCaseInsensitive.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getFileName>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolder>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getLastFolder>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getPathCombinations>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof parseMd>",
        "fileName": "src/parseMd.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof removeAllExcept>",
        "fileName": "src/removeAllExcept.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof copyAllRelativeFiles>",
        "fileName": "src/copyAllRelativeFiles.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findFileNameCaseInsensitive>",
        "fileName": "src/findFileNameCaseInsensitive.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getAllFoldersUntilFolder>",
        "fileName": "src/getAllFoldersUntilFolder.ts",
        "imports": [
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFileName>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFirstAvailableFilename>",
        "fileName": "src/getFirstAvailableFilename.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getFolder>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderSize>",
        "fileName": "src/getFolderSize.ts",
        "imports": [
          "ChildObject from recursive-types",
          "sum from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderSizeObject>",
        "fileName": "src/getFolderSizeObject.ts",
        "imports": [
          "ChildObject from recursive-types",
          "generatedFolders from filename-conventions",
          "notEmpty from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getLastFolder>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getOneFolderUpPath>",
        "fileName": "src/getOneFolderUpPath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getPathCombinations>",
        "fileName": "src/js.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof oneUp>",
        "fileName": "src/getFirstAvailableFilename.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof parseMd>",
        "fileName": "src/parseMd.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof removeAllExcept>",
        "fileName": "src/removeAllExcept.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof renameAndCreate>",
        "fileName": "src/renameAndCreate.ts",
        "imports": []
      },
      {
        "name": "PathLike",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "PathLike",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "Stats",
        "fileName": "src/fs.ts",
        "imports": [
          "constants from graceful-fs",
          "rmSync from graceful-fs",
          "existsSync from graceful-fs",
          "accessSync from graceful-fs",
          "cpSync from graceful-fs",
          "PathLike from graceful-fs",
          "Dir from graceful-fs",
          "Dirent from graceful-fs",
          "Stats from graceful-fs"
        ]
      },
      {
        "name": "UnixTimestamp",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "UnixTimestamp",
        "fileName": "src/types.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions"
    ]
  },
  {
    "operationName": "fs-util-js",
    "totalInstancesCount": 11,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getExtension",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "getFileOrFolderName",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "getFolderJs",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "getSubExtension",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "isPathRelative",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "join",
        "fileName": "src/path.ts",
        "imports": []
      },
      {
        "name": "makeRelative",
        "fileName": "src/makeRelative.ts",
        "imports": []
      },
      {
        "name": "removeTrailingSlash",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "withoutExtension",
        "fileName": "src/js.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof join>",
        "fileName": "src/path.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof makeRelative>",
        "fileName": "src/makeRelative.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "fs-util-js"
    ]
  },
  {
    "operationName": "get-associated-md",
    "totalInstancesCount": 3,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "get-path",
      "fs-util"
    ],
    "packageJsonDependencies": [
      "get-path",
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAssociatedMd",
        "fileName": "src/general.ts",
        "imports": [
          "findOperationBasePath from get-path",
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAssociatedMd>",
        "fileName": "src/general.ts",
        "imports": [
          "findOperationBasePath from get-path",
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAssociatedMd>",
        "fileName": "src/general.ts",
        "imports": [
          "findOperationBasePath from get-path",
          "path from fs-util",
          "fs from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-associated-md",
      "get-path",
      "log",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types"
    ]
  },
  {
    "operationName": "get-available-folder-path",
    "totalInstancesCount": 3,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "fs-util"
    ],
    "packageJsonDependencies": [
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAvailableFolderPath",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAvailableFolderPath>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAvailableFolderPath>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-available-folder-path",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions"
    ]
  },
  {
    "operationName": "get-package-json",
    "totalInstancesCount": 9,
    "totalImportCount": 3,
    "totalDependencyCount": 3,
    "importDependencies": [
      "code-types",
      "fs-util",
      "read-json-file"
    ],
    "packageJsonDependencies": [
      "code-types",
      "fs-util",
      "read-json-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getOperationBins",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getOperationPackageName",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getPackageJson",
        "fileName": "src/getPackageJson.ts",
        "imports": [
          "Operation from code-types",
          "path from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationBins>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getOperationPackageName>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getPackageJson>",
        "fileName": "src/getPackageJson.ts",
        "imports": [
          "Operation from code-types",
          "path from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationBins>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getOperationPackageName>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getPackageJson>",
        "fileName": "src/getPackageJson.ts",
        "imports": [
          "Operation from code-types",
          "path from fs-util",
          "readJsonFile from read-json-file"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-package-json",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "get-package-source-paths",
    "totalInstancesCount": 3,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "k-explore"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "k-explore"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getPackageSourcePaths",
        "fileName": "src/getPackageSourcePaths.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getPackageSourcePaths>",
        "fileName": "src/getPackageSourcePaths.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getPackageSourcePaths>",
        "fileName": "src/getPackageSourcePaths.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-package-source-paths",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "get-path",
      "sdk-operations",
      "write-to-assets"
    ]
  },
  {
    "operationName": "get-ts-config",
    "totalInstancesCount": 3,
    "totalImportCount": 3,
    "totalDependencyCount": 3,
    "importDependencies": [
      "read-json-file",
      "fs-util",
      "code-types"
    ],
    "packageJsonDependencies": [
      "read-json-file",
      "fs-util",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getTsConfig",
        "fileName": "src/getTsConfig.ts",
        "imports": [
          "readJsonFile from read-json-file",
          "path from fs-util",
          "TsConfig from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsConfig>",
        "fileName": "src/getTsConfig.ts",
        "imports": [
          "readJsonFile from read-json-file",
          "path from fs-util",
          "TsConfig from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsConfig>",
        "fileName": "src/getTsConfig.ts",
        "imports": [
          "readJsonFile from read-json-file",
          "path from fs-util",
          "TsConfig from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-ts-config",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "log",
      "js-util",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "path-util",
    "totalInstancesCount": 22,
    "totalImportCount": 25,
    "totalDependencyCount": 8,
    "importDependencies": [
      "markdown-parse-js",
      "fs-util",
      "code-types",
      "index-typescript",
      "get-path",
      "k-explore",
      "filename-conventions",
      "js-util"
    ],
    "packageJsonDependencies": [
      "markdown-parse-js",
      "fs-util",
      "code-types",
      "index-typescript",
      "get-path",
      "k-explore",
      "filename-conventions",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "byteCount",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "calculatePathMetaData",
        "fileName": "src/calculatePathMetaData.ts",
        "imports": [
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "getFolder from fs-util",
          "CategorizedFilePaths from code-types",
          "PathMetaData from code-types",
          "TsComment from code-types",
          "findCommentTypes from index-typescript",
          "getIndexId from index-typescript",
          "getNumberOfLines from index-typescript",
          "getPathParse from get-path",
          "determineFileType from k-explore"
        ]
      },
      {
        "name": "categorizeFiles",
        "fileName": "src/categorizeFiles.ts",
        "imports": [
          "explore from k-explore",
          "determineFileType from k-explore",
          "SearchableExtension from filename-conventions",
          "extensions from filename-conventions",
          "CategorizedFilePaths from code-types",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "getFolderSummary",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "getPathMainComment",
        "fileName": "src/calculatePathMetaData.ts",
        "imports": [
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "getFolder from fs-util",
          "CategorizedFilePaths from code-types",
          "PathMetaData from code-types",
          "TsComment from code-types",
          "findCommentTypes from index-typescript",
          "getIndexId from index-typescript",
          "getNumberOfLines from index-typescript",
          "getPathParse from get-path",
          "determineFileType from k-explore"
        ]
      },
      {
        "name": "getSizeSummary",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "sumSizeSummary",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "CategorizedFilePaths",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "CategorizedFilePaths",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof byteCount>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSizeSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof sumSizeSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof byteCount>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof calculatePathMetaData>",
        "fileName": "src/calculatePathMetaData.ts",
        "imports": [
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "getFolder from fs-util",
          "CategorizedFilePaths from code-types",
          "PathMetaData from code-types",
          "TsComment from code-types",
          "findCommentTypes from index-typescript",
          "getIndexId from index-typescript",
          "getNumberOfLines from index-typescript",
          "getPathParse from get-path",
          "determineFileType from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof categorizeFiles>",
        "fileName": "src/categorizeFiles.ts",
        "imports": [
          "explore from k-explore",
          "determineFileType from k-explore",
          "SearchableExtension from filename-conventions",
          "extensions from filename-conventions",
          "CategorizedFilePaths from code-types",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPathMainComment>",
        "fileName": "src/calculatePathMetaData.ts",
        "imports": [
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "getFolder from fs-util",
          "CategorizedFilePaths from code-types",
          "PathMetaData from code-types",
          "TsComment from code-types",
          "findCommentTypes from index-typescript",
          "getIndexId from index-typescript",
          "getNumberOfLines from index-typescript",
          "getPathParse from get-path",
          "determineFileType from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getSizeSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof sumSizeSummary>",
        "fileName": "src/getFolderSummary.ts",
        "imports": [
          "sumAllKeys from js-util",
          "fs from fs-util",
          "CategorizedFilePaths from code-types",
          "FolderSummary from code-types",
          "SizeSummary from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "path-util",
      "markdown-parse-js",
      "markdown-types",
      "model-types",
      "asset-type",
      "bundle-types",
      "convert-case",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "matter-types",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "index-typescript",
      "ts-morph",
      "database",
      "sdk-db",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "sdk-operations",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "schema-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "read-json-file",
      "try-parse-json",
      "one-by-one",
      "cleanup-typescript-database",
      "get-path",
      "k-explore",
      "write-to-assets",
      "filename-conventions",
      "js-util"
    ]
  },
  {
    "operationName": "rename-template-files",
    "totalInstancesCount": 10,
    "totalImportCount": 4,
    "totalDependencyCount": 4,
    "importDependencies": [
      "fs-util",
      "k-explore",
      "one-by-one",
      "make-test"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "k-explore",
      "one-by-one",
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findTemplates",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "isEqualArray",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "renameTemplateFiles",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "renameTemplateToNormalFile",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "renameToTemplateFile",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof findTemplates>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof isEqualArray>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof renameTemplateFiles>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof renameTemplateToNormalFile>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof renameToTemplateFile>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "oneByOne from one-by-one"
        ]
      }
    ],
    "cumulativeDependencies": [
      "rename-template-files",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "one-by-one",
      "make-test"
    ]
  },
  {
    "operationName": "set-json-key",
    "totalInstancesCount": 4,
    "totalImportCount": 3,
    "totalDependencyCount": 1,
    "importDependencies": [
      "fs-util"
    ],
    "packageJsonDependencies": [
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "setJsonKey",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getFolder from fs-util"
        ]
      },
      {
        "name": "setKeyAtLocation",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof setJsonKey>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof setKeyAtLocation>",
        "fileName": "src/general.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getFolder from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "set-json-key",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions"
    ]
  },
  {
    "operationName": "watch-folders",
    "totalInstancesCount": 12,
    "totalImportCount": 12,
    "totalDependencyCount": 5,
    "importDependencies": [
      "chokidar",
      "fs-util",
      "make-file-type",
      "log",
      "code-types"
    ],
    "packageJsonDependencies": [
      "code-types",
      "fs-util",
      "log",
      "make-file-type",
      "chokidar"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getSubInfo",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "getSubName",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "initiateWatch",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "isClientOk",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "isStillPending",
        "fileName": "src/fswatch.ts",
        "imports": [
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "makeSubscription",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "noPending",
        "fileName": "src/fswatch.ts",
        "imports": [
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "pickWatcher",
        "fileName": "src/pickWatcher.ts",
        "imports": []
      },
      {
        "name": "watchFoldersChokidar",
        "fileName": "src/chokidar.ts",
        "imports": [
          "watch from chokidar",
          "fs from fs-util",
          "path from fs-util",
          "makeFileType from make-file-type",
          "FileType from make-file-type",
          "log from log"
        ]
      },
      {
        "name": "watchFoldersFs",
        "fileName": "src/fswatch.ts",
        "imports": [
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "watchFolders",
        "fileName": "src/watchman.ts",
        "imports": [
          "path from fs-util",
          "FileType from make-file-type",
          "Operation from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof pickWatcher>",
        "fileName": "src/pickWatcher.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "watch-folders",
      "chokidar",
      "fs-util",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "make-file-type",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "log",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "write-to-assets",
    "totalInstancesCount": 2,
    "totalImportCount": 5,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "writeToAssets",
        "fileName": "src/writeToAssets.ts",
        "imports": [
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "findOperationBasePath from get-path",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof writeToAssets>",
        "fileName": "src/writeToAssets.ts",
        "imports": [
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "findOperationBasePath from get-path",
          "getOperationPath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "write-to-assets",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "all",
    "totalInstancesCount": 30,
    "totalImportCount": 47,
    "totalDependencyCount": 10,
    "importDependencies": [
      "get-path",
      "log",
      "markdown-parsings",
      "fs-util",
      "rebuild-operation",
      "k-explore",
      "one-by-one",
      "minify-build",
      "set-json-key",
      "make-test"
    ],
    "packageJsonDependencies": [
      "get-path",
      "rebuild-operation",
      "log",
      "fs-util",
      "k-explore",
      "one-by-one",
      "markdown-parsings",
      "minify-build",
      "set-json-key",
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "allOperationsRemoveJsSrc",
        "fileName": "src/allOperationsRemoveJsSrc.ts",
        "imports": [
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "allOperationsToMarkdown",
        "fileName": "src/allOperationsToMarkdown.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "log from log",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "clearAllTsDatabases",
        "fileName": "src/clearAllTsDatabases.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "rebuildOperation from rebuild-operation",
          "log from log",
          "clearTsDatabase from rebuild-operation",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "codeAll",
        "fileName": "src/codeAll.ts",
        "imports": [
          "getProjectRoot from get-path",
          "explore from k-explore"
        ]
      },
      {
        "name": "forAllFiles",
        "fileName": "src/forAllFiles.ts",
        "imports": [
          "getFolder from fs-util"
        ]
      },
      {
        "name": "forAllFolders",
        "fileName": "src/forAllFolders.ts",
        "imports": [
          "getFolder from fs-util",
          "path from fs-util",
          "BaseConfig from k-explore",
          "explore from k-explore",
          "exploreGitRepoFolders from k-explore",
          "exploreOperationFolders from k-explore",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getAllOperationClassifications",
        "fileName": "src/getAllOperationClassifications.ts",
        "imports": [
          "getOperationClassification from get-path",
          "getPathsWithOperations from get-path",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "gitShipAllRepos",
        "fileName": "src/gitShipAllRepos.ts",
        "imports": []
      },
      {
        "name": "mdAllOperations",
        "fileName": "src/mdAllOperations.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "log from log",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "minifyAllOperations",
        "fileName": "src/minifyAllOperations.ts",
        "imports": [
          "minifyBuild from minify-build",
          "path from fs-util",
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "publishAllOperations",
        "fileName": "src/publishAllOperations.ts",
        "imports": []
      },
      {
        "name": "removeAllFiles",
        "fileName": "src/removeAllFiles.ts",
        "imports": [
          "fs from fs-util",
          "getRootPath from get-path",
          "explore from k-explore"
        ]
      },
      {
        "name": "removeAllFoldersCli",
        "fileName": "src/cli/removeAllFolders.cli.ts",
        "imports": []
      },
      {
        "name": "removeAllFolders",
        "fileName": "src/removeAllFolders.ts",
        "imports": []
      },
      {
        "name": "removeAll",
        "fileName": "src/removeAll.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "renameAll",
        "fileName": "src/renameAll.ts",
        "imports": [
          "fs from fs-util",
          "getFolder from fs-util",
          "log from log"
        ]
      },
      {
        "name": "runScriptEverywhere",
        "fileName": "src/runScriptEverywhere.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "log from log"
        ]
      },
      {
        "name": "setScriptEverywhere",
        "fileName": "src/setScriptEverywhere.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "setJsonKey from set-json-key",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof allOperationsRemoveJsSrc>",
        "fileName": "src/allOperationsRemoveJsSrc.ts",
        "imports": [
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof allOperationsToMarkdown>",
        "fileName": "src/allOperationsToMarkdown.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "log from log",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof clearAllTsDatabases>",
        "fileName": "src/clearAllTsDatabases.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "rebuildOperation from rebuild-operation",
          "log from log",
          "clearTsDatabase from rebuild-operation",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof codeAll>",
        "fileName": "src/codeAll.ts",
        "imports": [
          "getProjectRoot from get-path",
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllOperationClassifications>",
        "fileName": "src/getAllOperationClassifications.ts",
        "imports": [
          "getOperationClassification from get-path",
          "getPathsWithOperations from get-path",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof mdAllOperations>",
        "fileName": "src/mdAllOperations.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "log from log",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof minifyAllOperations>",
        "fileName": "src/minifyAllOperations.ts",
        "imports": [
          "minifyBuild from minify-build",
          "path from fs-util",
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof removeAllFiles>",
        "fileName": "src/removeAllFiles.ts",
        "imports": [
          "fs from fs-util",
          "getRootPath from get-path",
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof removeAllFolders>",
        "fileName": "src/removeAllFolders.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof removeAllFoldersCli>",
        "fileName": "src/cli/removeAllFolders.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof runScriptEverywhere>",
        "fileName": "src/runScriptEverywhere.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof setScriptEverywhere>",
        "fileName": "src/setScriptEverywhere.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "setJsonKey from set-json-key",
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "all",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "log",
      "markdown-parsings",
      "find-all-dependency-operations",
      "markdown-types",
      "asset-type",
      "json-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "bundle-types",
      "bundle-util",
      "db-util",
      "write-to-assets",
      "recursive-types",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "read-markdown-file",
      "recursive-util",
      "nested-menu-types",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "database",
      "schema-util",
      "fs-util",
      "graceful-fs",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "k-explore",
      "one-by-one",
      "minify-build",
      "terser",
      "set-json-key",
      "make-test"
    ]
  },
  {
    "operationName": "make-file-type",
    "totalInstancesCount": 3,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "makeFileType",
        "fileName": "src/makeFileType.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "FileType",
        "fileName": "src/makeFileType.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof makeFileType>",
        "fileName": "src/makeFileType.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "findOperationBasePath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "make-file-type",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "explore-project",
    "totalInstancesCount": 26,
    "totalImportCount": 64,
    "totalDependencyCount": 19,
    "importDependencies": [
      "fs-util",
      "k-explore",
      "bundle-util",
      "get-path",
      "database",
      "code-types",
      "js-util",
      "filename-conventions",
      "path-util",
      "read-markdown-file",
      "read-typescript-file",
      "read-json-file",
      "write-to-assets",
      "fs-util-js",
      "convert-case",
      "recursive-util",
      "todo-types",
      "webpage-types",
      "model-types"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "k-explore",
      "bundle-util",
      "get-path",
      "database",
      "code-types",
      "js-util",
      "filename-conventions",
      "path-util",
      "read-markdown-file",
      "read-typescript-file",
      "read-json-file",
      "model-types",
      "write-to-assets",
      "peer-types",
      "fs-util-js",
      "convert-case",
      "webpage-types",
      "nested-menu",
      "recursive-types",
      "todo-types",
      "recursive-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "exploreOperation",
        "fileName": "src/exploreOperation.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore"
        ]
      },
      {
        "name": "exploreProject",
        "fileName": "src/exploreProject.ts",
        "imports": [
          "getBundleSummary from bundle-util",
          "BundleSummary from bundle-util",
          "explore from k-explore",
          "exploreOperationFolders from k-explore",
          "pathArrayIsOperation from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "db from database",
          "FolderExploration from code-types",
          "notEmpty from js-util",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "getExplorationType",
        "fileName": "src/getOperationType.ts",
        "imports": [
          "FolderExploration from code-types",
          "path from fs-util"
        ]
      },
      {
        "name": "getFileWithExtension",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "getFolderExplorationDetails",
        "fileName": "src/getFolderExplorationDetails.ts",
        "imports": [
          "ExplorationDetails from code-types",
          "FolderExploration from code-types",
          "Operation from code-types",
          "calculatePathMetaData from path-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "findOperationBasePath from get-path",
          "readMarkdownFile from read-markdown-file",
          "getFolderTypescriptIndex from read-typescript-file",
          "IndexFilter from read-typescript-file",
          "readJsonFile from read-json-file",
          "db from database",
          "IndexModels from code-types",
          "getProjectRoot from get-path",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "getFrontmattersMappedObject",
        "fileName": "src/getFrontmattersMappedObject.ts",
        "imports": [
          "path from fs-util",
          "mergeObjectsArray from js-util",
          "readMarkdownFile from read-markdown-file"
        ]
      },
      {
        "name": "getInstanceNames",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "getProjectRelativePaths",
        "fileName": "src/getProjectRelativePaths.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "generatedFolders from filename-conventions",
          "path from fs-util",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js",
          "destructureOptionalObject from js-util",
          "explore from k-explore",
          "findAllTodoFolderPaths from k-explore"
        ]
      },
      {
        "name": "getTodoPages",
        "fileName": "src/getTodoPages.ts",
        "imports": [
          "humanCase from convert-case",
          "db from database",
          "getLastFolder from fs-util",
          "withoutExtension from fs-util-js",
          "getProjectRoot from get-path",
          "getMenuPagesObject from recursive-util",
          "TodoPagesConfig from todo-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "WriterWebPage from webpage-types"
        ]
      },
      {
        "name": "getTodoPaths",
        "fileName": "src/getTodoPaths.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "destructureOptionalObject from js-util",
          "getSubExtension from fs-util-js",
          "TodoPagesConfig from todo-types"
        ]
      },
      {
        "name": "hasSameProjectPath",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "main",
        "fileName": "src/getProjectRelativePaths.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof exploreOperation>",
        "fileName": "src/exploreOperation.ts",
        "imports": [
          "path from fs-util",
          "explore from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof exploreProject>",
        "fileName": "src/exploreProject.ts",
        "imports": [
          "getBundleSummary from bundle-util",
          "BundleSummary from bundle-util",
          "explore from k-explore",
          "exploreOperationFolders from k-explore",
          "pathArrayIsOperation from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "db from database",
          "FolderExploration from code-types",
          "notEmpty from js-util",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getExplorationType>",
        "fileName": "src/getOperationType.ts",
        "imports": [
          "FolderExploration from code-types",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFileWithExtension>",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderExplorationDetails>",
        "fileName": "src/getFolderExplorationDetails.ts",
        "imports": [
          "ExplorationDetails from code-types",
          "FolderExploration from code-types",
          "Operation from code-types",
          "calculatePathMetaData from path-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "findOperationBasePath from get-path",
          "readMarkdownFile from read-markdown-file",
          "getFolderTypescriptIndex from read-typescript-file",
          "IndexFilter from read-typescript-file",
          "readJsonFile from read-json-file",
          "db from database",
          "IndexModels from code-types",
          "getProjectRoot from get-path",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getFrontmattersMappedObject>",
        "fileName": "src/getFrontmattersMappedObject.ts",
        "imports": [
          "path from fs-util",
          "mergeObjectsArray from js-util",
          "readMarkdownFile from read-markdown-file"
        ]
      },
      {
        "name": "NamedParameters<typeof getInstanceNames>",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getProjectRelativePaths>",
        "fileName": "src/getProjectRelativePaths.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "generatedFolders from filename-conventions",
          "path from fs-util",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js",
          "destructureOptionalObject from js-util",
          "explore from k-explore",
          "findAllTodoFolderPaths from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getTodoPages>",
        "fileName": "src/getTodoPages.ts",
        "imports": [
          "humanCase from convert-case",
          "db from database",
          "getLastFolder from fs-util",
          "withoutExtension from fs-util-js",
          "getProjectRoot from get-path",
          "getMenuPagesObject from recursive-util",
          "TodoPagesConfig from todo-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "WriterWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTodoPaths>",
        "fileName": "src/getTodoPaths.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "destructureOptionalObject from js-util",
          "getSubExtension from fs-util-js",
          "TodoPagesConfig from todo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof hasSameProjectPath>",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/getProjectRelativePaths.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "RelativePathType",
        "fileName": "src/getProjectRelativePaths.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "generatedFolders from filename-conventions",
          "path from fs-util",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js",
          "destructureOptionalObject from js-util",
          "explore from k-explore",
          "findAllTodoFolderPaths from k-explore"
        ]
      },
      {
        "name": "TodoPagesConfig",
        "fileName": "src/getTodoPaths.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "destructureOptionalObject from js-util",
          "getSubExtension from fs-util-js",
          "TodoPagesConfig from todo-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "explore-project",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "k-explore",
      "markdown-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "bundle-util",
      "db-util",
      "get-path",
      "try-parse-json",
      "sdk-operations",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "json-schema",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "measure-performance",
      "code-types",
      "ts-json-schema-generator",
      "js-util",
      "filename-conventions",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-markdown-file",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "read-json-file",
      "write-to-assets",
      "fs-util-js",
      "convert-case",
      "recursive-util",
      "nested-menu-types",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "webpage-types",
      "model-types"
    ]
  },
  {
    "operationName": "get-all-operation-source-paths",
    "totalInstancesCount": 2,
    "totalImportCount": 4,
    "totalDependencyCount": 3,
    "importDependencies": [
      "k-explore",
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "k-explore",
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAllOperationSourcePaths",
        "fileName": "src/getAllOperationSourcePaths.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "path from fs-util",
          "fs from fs-util",
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllOperationSourcePaths>",
        "fileName": "src/getAllOperationSourcePaths.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "path from fs-util",
          "fs from fs-util",
          "getPathsWithOperations from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-all-operation-source-paths",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "write-to-assets",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "get-path",
      "sdk-operations"
    ]
  },
  {
    "operationName": "get-path",
    "totalInstancesCount": 56,
    "totalImportCount": 50,
    "totalDependencyCount": 10,
    "importDependencies": [
      "fs-util",
      "log",
      "code-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "k-explore",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "log",
      "code-types",
      "read-json-file",
      "k-explore",
      "filename-conventions",
      "try-parse-json",
      "js-util",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findFolderWhereMatch",
        "fileName": "src/findFolderWhereMatch.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log"
        ]
      },
      {
        "name": "findOperationBasePathWithClassification",
        "fileName": "src/findOperationBasePath.ts",
        "imports": [
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "findOperationBasePath",
        "fileName": "src/findOperationBasePath.ts",
        "imports": [
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "getAllPackageJsonDependencies",
        "fileName": "src/getAllPackageJsonDependencies.ts",
        "imports": [
          "Operation from code-types"
        ]
      },
      {
        "name": "getCommonAncestor",
        "fileName": "src/getCommonAncestor.ts",
        "imports": []
      },
      {
        "name": "getOperationClassificationObject",
        "fileName": "src/getOperationClassificationObject.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "getOperationClassification",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "getOperationPathParse",
        "fileName": "src/getOperationPathParse.ts",
        "imports": [
          "path from fs-util",
          "getLastFolder from fs-util",
          "OperationPathParse from code-types",
          "Operation from code-types",
          "readJsonFileSync from read-json-file",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "getOperationPath",
        "fileName": "src/getOperationPath.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "operations from sdk-operations",
          "log from log"
        ]
      },
      {
        "name": "getOperationRelativePath",
        "fileName": "src/getOperationRelativePath.ts",
        "imports": []
      },
      {
        "name": "getPathParse",
        "fileName": "src/getPathParse.ts",
        "imports": [
          "PathParse from code-types"
        ]
      },
      {
        "name": "getPathsWithOperations",
        "fileName": "src/getPathsWithOperations.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "getProjectRoot",
        "fileName": "src/getProjectRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "getRelativeLinkPath",
        "fileName": "src/getRelativeLinkPath.ts",
        "imports": [
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "getRelativePath",
        "fileName": "src/getRelativePath.ts",
        "imports": []
      },
      {
        "name": "getRootPath",
        "fileName": "src/getRootPath.ts",
        "imports": [
          "databaseFolderName from filename-conventions",
          "path from fs-util"
        ]
      },
      {
        "name": "getSrcRelativeFileId",
        "fileName": "src/getSrcRelativeFileId.ts",
        "imports": []
      },
      {
        "name": "hasDependency",
        "fileName": "src/hasDependency.ts",
        "imports": [
          "Operation from code-types"
        ]
      },
      {
        "name": "hasProjectRootFile",
        "fileName": "src/getProjectRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "isBundle",
        "fileName": "src/isBundle.ts",
        "imports": [
          "path from fs-util",
          "Operation from code-types",
          "readJsonFileSync from read-json-file"
        ]
      },
      {
        "name": "isOperation",
        "fileName": "src/isOperation.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "isUiOperation",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "isWorkspaceRoot",
        "fileName": "src/isWorkspaceRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "packageCompilesTs",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "test",
        "fileName": "src/getRelativeLinkPath.test.ts",
        "imports": []
      },
      {
        "name": "tsconfigCompilesEsm",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "ModuleKind",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "ModuleResolutionKind",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof findOperationBasePath>",
        "fileName": "src/findOperationBasePath.ts",
        "imports": [
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof findOperationBasePathWithClassification>",
        "fileName": "src/findOperationBasePath.ts",
        "imports": [
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllPackageJsonDependencies>",
        "fileName": "src/getAllPackageJsonDependencies.ts",
        "imports": [
          "Operation from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCommonAncestor>",
        "fileName": "src/getCommonAncestor.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getOperationClassification>",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationClassificationObject>",
        "fileName": "src/getOperationClassificationObject.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationPath>",
        "fileName": "src/getOperationPath.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "operations from sdk-operations",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationPathParse>",
        "fileName": "src/getOperationPathParse.ts",
        "imports": [
          "path from fs-util",
          "getLastFolder from fs-util",
          "OperationPathParse from code-types",
          "Operation from code-types",
          "readJsonFileSync from read-json-file",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationRelativePath>",
        "fileName": "src/getOperationRelativePath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getPathParse>",
        "fileName": "src/getPathParse.ts",
        "imports": [
          "PathParse from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPathsWithOperations>",
        "fileName": "src/getPathsWithOperations.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getProjectRoot>",
        "fileName": "src/getProjectRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getRelativeLinkPath>",
        "fileName": "src/getRelativeLinkPath.ts",
        "imports": [
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getRelativePath>",
        "fileName": "src/getRelativePath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSrcRelativeFileId>",
        "fileName": "src/getSrcRelativeFileId.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof hasDependency>",
        "fileName": "src/hasDependency.ts",
        "imports": [
          "Operation from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof hasProjectRootFile>",
        "fileName": "src/getProjectRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof isBundle>",
        "fileName": "src/isBundle.ts",
        "imports": [
          "path from fs-util",
          "Operation from code-types",
          "readJsonFileSync from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof isOperation>",
        "fileName": "src/isOperation.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof isUiOperation>",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof isWorkspaceRoot>",
        "fileName": "src/isWorkspaceRoot.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof packageCompilesTs>",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/getRelativeLinkPath.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof tsconfigCompilesEsm>",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "Operation",
        "fileName": "src/hasDependency.ts",
        "imports": [
          "Operation from code-types"
        ]
      },
      {
        "name": "OperationClassification",
        "fileName": "src/getOperationClassificationObject.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "OperationClassificationObject",
        "fileName": "src/getOperationClassificationObject.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "TsConfig",
        "fileName": "src/getOperationClassification.ts",
        "imports": [
          "ModuleKind from code-types",
          "ModuleResolutionKind from code-types",
          "Operation from code-types",
          "OperationClassification from code-types",
          "TsConfig from code-types",
          "fs from fs-util",
          "path from fs-util",
          "readJsonFileSync from read-json-file",
          "tryParseJson from try-parse-json"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-path",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions"
    ]
  },
  {
    "operationName": "k-explore",
    "totalInstancesCount": 27,
    "totalImportCount": 37,
    "totalDependencyCount": 9,
    "importDependencies": [
      "fs-util",
      "read-json-file",
      "markdown-types",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "filename-conventions",
      "get-path",
      "write-to-assets"
    ],
    "packageJsonDependencies": [
      "gray-matter",
      "fs-util",
      "read-json-file",
      "code-types",
      "js-util",
      "markdown-parse-js",
      "get-path",
      "make-test",
      "fs-util-js",
      "filename-conventions",
      "write-to-assets",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "benchmark",
        "fileName": "src/test.ts",
        "imports": [
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "determineFileType",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "exploreGitRepoFolders",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "exploreMultiple",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "exploreOperationFolders",
        "fileName": "src/exploreOperationFolders.ts",
        "imports": [
          "fs from fs-util",
          "getFolder from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "explorePreset",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "explore",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "findAllDocsFolderPaths",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "findAllDotGitFolders",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "findAllFoldersWithName",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "findAllPackages",
        "fileName": "src/findAllPackages.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "generatedFolders from filename-conventions"
        ]
      },
      {
        "name": "findAllTodoFolderPaths",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "findFilesRecursively",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "getArgument",
        "fileName": "src/cli.ts",
        "imports": []
      },
      {
        "name": "getContents",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "getOutline",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "isMatch",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "isSearchContentExtension",
        "fileName": "src/explore.ts",
        "imports": [
          "Dirent from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "canRead from fs-util",
          "canSee from fs-util",
          "readJsonFile from read-json-file",
          "MarkdownParse from markdown-types",
          "TextJson from markdown-types",
          "getExtension from fs-util-js",
          "getSubExtension from fs-util-js",
          "makeArray from js-util",
          "notEmpty from js-util",
          "removeIndexFromArray from js-util",
          "mdToJsonParse from markdown-parse-js",
          "FileType from filename-conventions",
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "SearchableExtension from filename-conventions",
          "allowedSearchContentExtensions from filename-conventions",
          "fileTypes from filename-conventions",
          "extensions from filename-conventions",
          "markdownExtensions from filename-conventions",
          "SearchLevel from filename-conventions",
          "jsonExtensions from filename-conventions",
          "typescriptExtensions from filename-conventions"
        ]
      },
      {
        "name": "pathArrayIsOperation",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof benchmark>",
        "fileName": "src/test.ts",
        "imports": [
          "getPathsWithOperations from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof exploreOperationFolders>",
        "fileName": "src/exploreOperationFolders.ts",
        "imports": [
          "fs from fs-util",
          "getFolder from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findAllDocsFolderPaths>",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof findAllFoldersWithName>",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof findAllPackages>",
        "fileName": "src/findAllPackages.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "generatedFolders from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof findAllTodoFolderPaths>",
        "fileName": "src/find-folders.ts",
        "imports": [
          "generatedFolders from filename-conventions",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getArgument>",
        "fileName": "src/cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof pathArrayIsOperation>",
        "fileName": "src/util.ts",
        "imports": [
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "k-explore",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "get-path",
      "sdk-operations",
      "write-to-assets"
    ]
  },
  {
    "operationName": "operation-util",
    "totalInstancesCount": 8,
    "totalImportCount": 17,
    "totalDependencyCount": 10,
    "importDependencies": [
      "database",
      "get-path",
      "get-package-json",
      "js-util",
      "fs-util",
      "code-types",
      "fs-util-js",
      "log",
      "path-util",
      "model-types"
    ],
    "packageJsonDependencies": [
      "database",
      "get-path",
      "get-package-json",
      "js-util",
      "fs-util",
      "code-types",
      "log",
      "path-util",
      "model-types",
      "set-json-key",
      "filename-conventions",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getDependenciesSummary",
        "fileName": "src/getDependenciesSummary.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getOperationMetaData",
        "fileName": "src/getOperationMetaData.ts",
        "imports": [
          "getProjectRoot from get-path",
          "getPackageJson from get-package-json",
          "takeFirst from js-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "db from database",
          "Operation from code-types",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "recalculateOperationIndexJson",
        "fileName": "src/recalculateOperationIndexJson.ts",
        "imports": [
          "log from log",
          "Operation from code-types",
          "getOperationClassification from get-path",
          "categorizeFiles from path-util",
          "getFolderSummary from path-util",
          "db from database",
          "Creation from model-types",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDependenciesSummary>",
        "fileName": "src/getDependenciesSummary.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationMetaData>",
        "fileName": "src/getOperationMetaData.ts",
        "imports": [
          "getProjectRoot from get-path",
          "getPackageJson from get-package-json",
          "takeFirst from js-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "db from database",
          "Operation from code-types",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof recalculateOperationIndexJson>",
        "fileName": "src/recalculateOperationIndexJson.ts",
        "imports": [
          "log from log",
          "Operation from code-types",
          "getOperationClassification from get-path",
          "categorizeFiles from path-util",
          "getFolderSummary from path-util",
          "db from database",
          "Creation from model-types",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "Operation",
        "fileName": "src/getOperationMetaData.ts",
        "imports": [
          "getProjectRoot from get-path",
          "getPackageJson from get-package-json",
          "takeFirst from js-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "db from database",
          "Operation from code-types",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "OperationMetaData",
        "fileName": "src/getOperationMetaData.ts",
        "imports": [
          "getProjectRoot from get-path",
          "getPackageJson from get-package-json",
          "takeFirst from js-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "db from database",
          "Operation from code-types",
          "makeRelative from fs-util-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "operation-util",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "k-explore",
      "filename-conventions",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "get-path",
      "get-package-json",
      "js-util",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "ts-json-schema-generator",
      "fs-util-js",
      "log",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "model-types"
    ]
  },
  {
    "operationName": "pm2-util",
    "totalInstancesCount": 31,
    "totalImportCount": 12,
    "totalDependencyCount": 7,
    "importDependencies": [
      "pm2",
      "get-path",
      "get-package-json",
      "peer-functions",
      "log",
      "one-by-one",
      "js-util"
    ],
    "packageJsonDependencies": [
      "pm2",
      "get-path",
      "get-package-json",
      "js-util",
      "log",
      "one-by-one",
      "port-conventions",
      "peer-functions"
    ],
    "instancesAndTheirImports": [
      {
        "name": "deleteAppCli",
        "fileName": "src/cli/deleteApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "deleteApp",
        "fileName": "src/deleteApp.ts",
        "imports": []
      },
      {
        "name": "listAppsCli",
        "fileName": "src/cli/listApps.cli.ts",
        "imports": []
      },
      {
        "name": "listApps",
        "fileName": "src/listApps.ts",
        "imports": []
      },
      {
        "name": "logApp",
        "fileName": "src/logApp.ts",
        "imports": []
      },
      {
        "name": "logTableObject",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "pm2ConnectDisconnect",
        "fileName": "src/pm2ConnectDisconnect.ts",
        "imports": []
      },
      {
        "name": "pm2Connect",
        "fileName": "src/pm2Connect.ts",
        "imports": []
      },
      {
        "name": "restartAppCli",
        "fileName": "src/cli/restartApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "restartApp",
        "fileName": "src/restartApp.ts",
        "imports": [
          "restart from pm2"
        ]
      },
      {
        "name": "startAppCli",
        "fileName": "src/cli/startApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "startApp",
        "fileName": "src/startApp.ts",
        "imports": [
          "getOperationPath from get-path",
          "getPackageJson from get-package-json",
          "isPortUsed from peer-functions"
        ]
      },
      {
        "name": "stopAllAppsExceptCli",
        "fileName": "src/cli/stopAllAppsExcept.cli.ts",
        "imports": []
      },
      {
        "name": "stopAllAppsExcept",
        "fileName": "src/stopAllAppsExcept.ts",
        "imports": [
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "stopAppsCli",
        "fileName": "src/cli/stopApps.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "stopApps",
        "fileName": "src/stopApps.ts",
        "imports": [
          "stop from pm2"
        ]
      },
      {
        "name": "NamedParameters<typeof deleteApp>",
        "fileName": "src/deleteApp.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof deleteAppCli>",
        "fileName": "src/cli/deleteApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof listApps>",
        "fileName": "src/listApps.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof listAppsCli>",
        "fileName": "src/cli/listApps.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof logApp>",
        "fileName": "src/logApp.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof logTableObject>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof pm2Connect>",
        "fileName": "src/pm2Connect.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof restartApp>",
        "fileName": "src/restartApp.ts",
        "imports": [
          "restart from pm2"
        ]
      },
      {
        "name": "NamedParameters<typeof restartAppCli>",
        "fileName": "src/cli/restartApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof startApp>",
        "fileName": "src/startApp.ts",
        "imports": [
          "getOperationPath from get-path",
          "getPackageJson from get-package-json",
          "isPortUsed from peer-functions"
        ]
      },
      {
        "name": "NamedParameters<typeof startAppCli>",
        "fileName": "src/cli/startApp.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stopAllAppsExcept>",
        "fileName": "src/stopAllAppsExcept.ts",
        "imports": [
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof stopAllAppsExceptCli>",
        "fileName": "src/cli/stopAllAppsExcept.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof stopApps>",
        "fileName": "src/stopApps.ts",
        "imports": [
          "stop from pm2"
        ]
      },
      {
        "name": "NamedParameters<typeof stopAppsCli>",
        "fileName": "src/cli/stopApps.cli.ts",
        "imports": [
          "takeFirst from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "pm2-util",
      "pm2",
      "get-path",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "get-package-json",
      "peer-functions",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "recursive-util",
      "webpage-types",
      "nested-menu-types",
      "function-server-types",
      "log",
      "one-by-one",
      "js-util"
    ]
  },
  {
    "operationName": "testtest",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "testtest"
    ]
  },
  {
    "operationName": "watch-all",
    "totalInstancesCount": 4,
    "totalImportCount": 8,
    "totalDependencyCount": 8,
    "importDependencies": [
      "chokidar",
      "log",
      "get-path",
      "sdk-api",
      "database",
      "watch-types",
      "js-util",
      "one-by-one"
    ],
    "packageJsonDependencies": [
      "fs-util-js",
      "log",
      "one-by-one",
      "get-path",
      "chokidar",
      "database",
      "js-util",
      "watch-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "watchAllCli",
        "fileName": "src/cli/watchAll.cli.ts",
        "imports": []
      },
      {
        "name": "watchAll",
        "fileName": "src/watchAll.ts",
        "imports": [
          "watch from chokidar",
          "log from log",
          "getProjectRoot from get-path",
          "sdk from sdk-api",
          "db from database",
          "ProjectWatcher from watch-types",
          "notEmpty from js-util",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof watchAll>",
        "fileName": "src/watchAll.ts",
        "imports": [
          "watch from chokidar",
          "log from log",
          "getProjectRoot from get-path",
          "sdk from sdk-api",
          "db from database",
          "ProjectWatcher from watch-types",
          "notEmpty from js-util",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof watchAllCli>",
        "fileName": "src/cli/watchAll.cli.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "watch-all",
      "chokidar",
      "log",
      "get-path",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "sdk-api",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "watch-types",
      "js-util",
      "one-by-one"
    ]
  },
  {
    "operationName": "watch-operations",
    "totalInstancesCount": 8,
    "totalImportCount": 8,
    "totalDependencyCount": 5,
    "importDependencies": [
      "get-all-operation-source-paths",
      "log",
      "get-path",
      "watch-folders",
      "rebuild-operation"
    ],
    "packageJsonDependencies": [
      "watch-folders",
      "get-all-operation-source-paths",
      "log",
      "rebuild-operation",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "exitIfOperationsChange",
        "fileName": "src/general.ts",
        "imports": [
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "gitCommitAllCron",
        "fileName": "src/general.ts",
        "imports": [
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "main",
        "fileName": "src/cli/watchOperations.cli.ts",
        "imports": []
      },
      {
        "name": "watchOperations",
        "fileName": "src/watchOperations.ts",
        "imports": [
          "pickWatcher from watch-folders",
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "rebuildOperation from rebuild-operation",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof exitIfOperationsChange>",
        "fileName": "src/general.ts",
        "imports": [
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof gitCommitAllCron>",
        "fileName": "src/general.ts",
        "imports": [
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/cli/watchOperations.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof watchOperations>",
        "fileName": "src/watchOperations.ts",
        "imports": [
          "pickWatcher from watch-folders",
          "getAllOperationSourcePaths from get-all-operation-source-paths",
          "log from log",
          "rebuildOperation from rebuild-operation",
          "getProjectRoot from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "watch-operations",
      "get-all-operation-source-paths",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "write-to-assets",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log",
      "get-path",
      "sdk-operations",
      "watch-folders",
      "chokidar",
      "make-file-type",
      "rebuild-operation",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "all",
      "run-child-process",
      "set-json-key",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "markdown-parsings",
      "find-all-dependency-operations",
      "json-util",
      "bundle-util",
      "db-util",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "one-by-one",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser"
    ]
  },
  {
    "operationName": "watch-types",
    "totalInstancesCount": 1,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "WatchEventType",
        "fileName": "src/WatchEventType.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "watch-types"
    ]
  },
  {
    "operationName": "brightness",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "brigtnessFull",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "brigtnessZero",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "decreaseBrightness",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "increaseBrightness",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof brigtnessFull>",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof brigtnessZero>",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof decreaseBrightness>",
        "fileName": "src/brightness.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof increaseBrightness>",
        "fileName": "src/brightness.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "brightness"
    ]
  },
  {
    "operationName": "clean-macos-setup",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "macosSetup",
        "fileName": "src/macosSetup.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof macosSetup>",
        "fileName": "src/macosSetup.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "clean-macos-setup"
    ]
  },
  {
    "operationName": "file-explorer-open",
    "totalInstancesCount": 2,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "fileExplorerOpen",
        "fileName": "src/fileExplorerOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof fileExplorerOpen>",
        "fileName": "src/fileExplorerOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "file-explorer-open",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "play-music",
    "totalInstancesCount": 2,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "playMusic",
        "fileName": "src/playMusic.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof playMusic>",
        "fileName": "src/playMusic.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "getRootPath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "play-music",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "reminders",
    "totalInstancesCount": 4,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "os-types",
      "say"
    ],
    "packageJsonDependencies": [
      "os-types",
      "say"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateRecurringReminders",
        "fileName": "src/general.ts",
        "imports": [
          "Reminder from os-types",
          "RecurringReminder from os-types",
          "say from say"
        ]
      },
      {
        "name": "remindMeAboutNextMinute",
        "fileName": "src/general.ts",
        "imports": [
          "Reminder from os-types",
          "RecurringReminder from os-types",
          "say from say"
        ]
      },
      {
        "name": "NamedParameters<typeof generateRecurringReminders>",
        "fileName": "src/general.ts",
        "imports": [
          "Reminder from os-types",
          "RecurringReminder from os-types",
          "say from say"
        ]
      },
      {
        "name": "NamedParameters<typeof remindMeAboutNextMinute>",
        "fileName": "src/general.ts",
        "imports": [
          "Reminder from os-types",
          "RecurringReminder from os-types",
          "say from say"
        ]
      }
    ],
    "cumulativeDependencies": [
      "reminders",
      "os-types",
      "model-types",
      "matter-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "social-media-types",
      "geo-types",
      "asset-type",
      "say",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "ffmpeg-util",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "one-by-one"
    ]
  },
  {
    "operationName": "set-random-timezone",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "setRandomTimezone",
        "fileName": "src/setRandomTimezone.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof setRandomTimezone>",
        "fileName": "src/setRandomTimezone.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "set-random-timezone"
    ]
  },
  {
    "operationName": "toggle-dark-mode",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "disableDarkMode",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "enableDarkMode",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "setDarkmodeCommand",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "toggleDarkMode",
        "fileName": "src/toggleDarkMode.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof disableDarkMode>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof enableDarkMode>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof setDarkmodeCommand>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof toggleDarkMode>",
        "fileName": "src/toggleDarkMode.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "toggle-dark-mode"
    ]
  },
  {
    "operationName": "toggle-screen-sleep",
    "totalInstancesCount": 6,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "disableScreenSleep2",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      },
      {
        "name": "disableScreenSleep",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      },
      {
        "name": "enableScreenSleep",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof disableScreenSleep>",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof disableScreenSleep2>",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof enableScreenSleep>",
        "fileName": "src/toggle-screen-sleep.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "toggle-screen-sleep"
    ]
  },
  {
    "operationName": "volume",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "downVolume",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "getVolume",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "setVolume",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "upVolume",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof downVolume>",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getVolume>",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof setVolume>",
        "fileName": "src/volume.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof upVolume>",
        "fileName": "src/volume.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "volume"
    ]
  },
  {
    "operationName": "vscode-open",
    "totalInstancesCount": 5,
    "totalImportCount": 5,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getOpenableFilePath",
        "fileName": "src/vscodeOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "vscodeOpen",
        "fileName": "src/vscodeOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getOpenableFilePath>",
        "fileName": "src/vscodeOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof vscodeOpen>",
        "fileName": "src/vscodeOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "OpenableFile",
        "fileName": "src/vscodeOpen.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "vscode-open",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "dev-to-controller",
    "totalInstancesCount": 12,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "puppeteer-core",
      "social-media-types",
      "puppeteer-utils"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "loginToDevto",
        "fileName": "src/loginToDevto.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "publishBlogOnDevTo",
        "fileName": "src/publishBlogOnDevTo.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "typeIntoTheField",
        "fileName": "src/utils/typeInTheField.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "devtoLoginProps",
        "fileName": "src/loginToDevto.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof loginToDevto>",
        "fileName": "src/loginToDevto.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof publishBlogOnDevTo>",
        "fileName": "src/publishBlogOnDevTo.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof typeIntoTheField>",
        "fileName": "src/utils/typeInTheField.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "Page",
        "fileName": "src/utils/typeInTheField.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "ResponseType",
        "fileName": "src/publishBlogOnDevTo.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "TypeInTheField",
        "fileName": "src/utils/typeInTheField.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      }
    ],
    "cumulativeDependencies": [
      "dev-to-controller",
      "puppeteer-core",
      "social-media-types",
      "model-types",
      "matter-types",
      "geo-types",
      "asset-type",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path"
    ]
  },
  {
    "operationName": "facebook-controller",
    "totalInstancesCount": 13,
    "totalImportCount": 12,
    "totalDependencyCount": 3,
    "importDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "social-media-types"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "facebookPostOnTheGroup",
        "fileName": "src/facebookPostOnTheGroup.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "facebookPost",
        "fileName": "src/facebookPost.ts",
        "imports": [
          "facebookLogin from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "facebookTimeLinePost",
        "fileName": "src/facebookTimeLinePost.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "getLatestFacebookPostUrl",
        "fileName": "src/getLatestFacebookPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "sendFacebookMessage",
        "fileName": "src/sendFacebookMessage.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "facebookLogin from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof sendFacebookMessage>",
        "fileName": "src/sendFacebookMessage.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "facebookLogin from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof facebookPost>",
        "fileName": "src/facebookPost.ts",
        "imports": [
          "facebookLogin from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof facebookTimeLinePost>",
        "fileName": "src/facebookTimeLinePost.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getLatestFacebookPostUrl>",
        "fileName": "src/getLatestFacebookPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof sendFacebookMessage>",
        "fileName": "src/sendFacebookMessage.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "facebookLogin from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "Page",
        "fileName": "src/getLatestFacebookPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      }
    ],
    "cumulativeDependencies": [
      "facebook-controller",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types",
      "puppeteer-core",
      "social-media-types",
      "geo-types"
    ]
  },
  {
    "operationName": "gif-controller",
    "totalInstancesCount": 5,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "puppeteer-utils",
      "puppeteer-core"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript"
    ],
    "instancesAndTheirImports": [
      {
        "name": "searchAndDownloadGifs",
        "fileName": "src/searchAndDownloadGifs.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof searchAndDownloadGifs>",
        "fileName": "src/searchAndDownloadGifs.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof searchAndDownloadGifs>",
        "fileName": "src/searchAndDownloadGifs.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "gif-controller",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types",
      "puppeteer-core"
    ]
  },
  {
    "operationName": "google-translate-controller",
    "totalInstancesCount": 31,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "big-json",
      "puppeteer-core",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "buildQuery",
        "fileName": "src/utils/buildQuery.ts",
        "imports": []
      },
      {
        "name": "errArrayLenZero",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "errFileSize",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "errFileType",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "errInvalidType",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "errTextLenZero",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "errTextOverflow",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "generateArrayFromJson",
        "fileName": "src/words-matirix/generateArrayFromJson.ts",
        "imports": []
      },
      {
        "name": "getStringForTranslation",
        "fileName": "src/words-matirix/getStringForTranslation.ts",
        "imports": []
      },
      {
        "name": "launch",
        "fileName": "src/launch.ts",
        "imports": []
      },
      {
        "name": "startTranslation",
        "fileName": "src/words-matirix/startTranslation.ts",
        "imports": []
      },
      {
        "name": "storeResult",
        "fileName": "src/words-matirix/storeResult.ts",
        "imports": []
      },
      {
        "name": "translateText",
        "fileName": "src/translate/translateText.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof buildQuery>",
        "fileName": "src/utils/buildQuery.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errArrayLenZero>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errFileSize>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errFileType>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errInvalidType>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errTextLenZero>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof errTextOverflow>",
        "fileName": "src/error.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateArrayFromJson>",
        "fileName": "src/words-matirix/generateArrayFromJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getStringForTranslation>",
        "fileName": "src/words-matirix/getStringForTranslation.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof launch>",
        "fileName": "src/launch.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof startTranslation>",
        "fileName": "src/words-matirix/startTranslation.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof storeResult>",
        "fileName": "src/words-matirix/storeResult.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof translateText>",
        "fileName": "src/translate/translateText.ts",
        "imports": []
      },
      {
        "name": "Options",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "PuppeteerOptions",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "Query",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "Todo",
        "fileName": "src/words-matirix/Todo.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "WordType",
        "fileName": "src/words-matirix/getStringForTranslation.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "google-translate-controller",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "mail",
    "totalInstancesCount": 3,
    "totalImportCount": 7,
    "totalDependencyCount": 4,
    "importDependencies": [
      "js-util",
      "@sendgrid/mail",
      "database",
      "persona-functions-node"
    ],
    "packageJsonDependencies": [
      "@sendgrid/mail",
      "js-util",
      "database",
      "persona-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "sendMail",
        "fileName": "src/sendMail.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "MailDataRequired from @sendgrid/mail",
          "ResponseError from @sendgrid/mail",
          "ClientResponse from @sendgrid/mail",
          "db from database",
          "getPrimaryPersona from persona-functions-node"
        ]
      },
      {
        "name": "MailDataFromOptional",
        "fileName": "src/sendMail.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "MailDataRequired from @sendgrid/mail",
          "ResponseError from @sendgrid/mail",
          "ClientResponse from @sendgrid/mail",
          "db from database",
          "getPrimaryPersona from persona-functions-node"
        ]
      },
      {
        "name": "NamedParameters<typeof sendMail>",
        "fileName": "src/sendMail.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "MailDataRequired from @sendgrid/mail",
          "ResponseError from @sendgrid/mail",
          "ClientResponse from @sendgrid/mail",
          "db from database",
          "getPrimaryPersona from persona-functions-node"
        ]
      }
    ],
    "cumulativeDependencies": [
      "mail",
      "js-util",
      "@sendgrid/mail",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "persona-functions-node"
    ]
  },
  {
    "operationName": "medium-controller",
    "totalInstancesCount": 6,
    "totalImportCount": 6,
    "totalDependencyCount": 3,
    "importDependencies": [
      "social-media-types",
      "puppeteer-utils",
      "puppeteer-core"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "publishBlogOnMedium",
        "fileName": "src/publishBlogOnMedium.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "facebookLogin from puppeteer-utils",
          "gmailLogin from puppeteer-utils",
          "setInnerHtml from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof publishBlogOnMedium>",
        "fileName": "src/publishBlogOnMedium.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "facebookLogin from puppeteer-utils",
          "gmailLogin from puppeteer-utils",
          "setInnerHtml from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof publishBlogOnMedium>",
        "fileName": "src/publishBlogOnMedium.ts",
        "imports": [
          "SocialMediaPostTypeReturnType from social-media-types",
          "facebookLogin from puppeteer-utils",
          "gmailLogin from puppeteer-utils",
          "setInnerHtml from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "medium-controller",
      "social-media-types",
      "model-types",
      "matter-types",
      "geo-types",
      "asset-type",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "puppeteer-core"
    ]
  },
  {
    "operationName": "reddit-controller",
    "totalInstancesCount": 6,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "puppeteer-utils",
      "social-media-types",
      "puppeteer-core"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "publishBlogOnReddit",
        "fileName": "src/publishBlogOnReddit.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "setInputValue from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof publishBlogOnReddit>",
        "fileName": "src/publishBlogOnReddit.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "setInputValue from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof publishBlogOnReddit>",
        "fileName": "src/publishBlogOnReddit.ts",
        "imports": [
          "getChromeExecutablePath from puppeteer-utils",
          "setInputValue from puppeteer-utils",
          "typeInTheInputField from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "reddit-controller",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types",
      "social-media-types",
      "geo-types",
      "puppeteer-core"
    ]
  },
  {
    "operationName": "sms",
    "totalInstancesCount": 2,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node"
    ],
    "packageJsonDependencies": [
      "twilio",
      "persona-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "sendSms",
        "fileName": "src/sendSms.ts",
        "imports": [
          "MessageInstance from twilio/lib/rest/api/v2010/account/message",
          "MessageListInstanceCreateOptions from twilio/lib/rest/api/v2010/account/message",
          "getPrimaryPersona from persona-functions-node"
        ]
      },
      {
        "name": "NamedParameters<typeof sendSms>",
        "fileName": "src/sendSms.ts",
        "imports": [
          "MessageInstance from twilio/lib/rest/api/v2010/account/message",
          "MessageListInstanceCreateOptions from twilio/lib/rest/api/v2010/account/message",
          "getPrimaryPersona from persona-functions-node"
        ]
      }
    ],
    "cumulativeDependencies": [
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "youtube-controller",
    "totalInstancesCount": 12,
    "totalImportCount": 6,
    "totalDependencyCount": 3,
    "importDependencies": [
      "fs-util",
      "ffmpeg-util",
      "convert-case"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "fluent-ffmpeg",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "readline-sync",
      "typescript",
      "ytdl-core",
      "fs-util",
      "ffmpeg-util",
      "convert-case"
    ],
    "instancesAndTheirImports": [
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "youtubeSearchAndDownload",
        "fileName": "src/youtubeSearchAndDownlaod.ts",
        "imports": []
      },
      {
        "name": "youtubeSearch",
        "fileName": "src/youtubeSearch.ts",
        "imports": []
      },
      {
        "name": "youtubeToMp3",
        "fileName": "src/youtubeToMp3.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "convertToMp3 from ffmpeg-util",
          "slugify from convert-case",
          "kebabCase from convert-case"
        ]
      },
      {
        "name": "youtubeToMp4",
        "fileName": "src/youtubeToMp4.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof youtubeSearch>",
        "fileName": "src/youtubeSearch.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof youtubeSearchAndDownload>",
        "fileName": "src/youtubeSearchAndDownlaod.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof youtubeToMp3>",
        "fileName": "src/youtubeToMp3.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "convertToMp3 from ffmpeg-util",
          "slugify from convert-case",
          "kebabCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof youtubeToMp4>",
        "fileName": "src/youtubeToMp4.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "ReturnType",
        "fileName": "src/youtubeSearch.ts",
        "imports": []
      },
      {
        "name": "VideoMetaType",
        "fileName": "src/youtubeSearch.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "youtube-controller",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "ffmpeg-util",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "one-by-one",
      "convert-case"
    ]
  },
  {
    "operationName": "filename-conventions",
    "totalInstancesCount": 20,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "js-util"
    ],
    "packageJsonDependencies": [
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getFileTypeFromPath",
        "fileName": "src/getFileTypeFromPath.ts",
        "imports": []
      },
      {
        "name": "getWriterType",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "hasSubExtension",
        "fileName": "src/hasSubExtension.ts",
        "imports": [
          "makeArray from js-util"
        ]
      },
      {
        "name": "isGeneratedOperationName",
        "fileName": "src/isGeneratedOperation.ts",
        "imports": []
      },
      {
        "name": "isGeneratedOperation",
        "fileName": "src/isGeneratedOperation.ts",
        "imports": []
      },
      {
        "name": "isIndexableFileId",
        "fileName": "src/filename-conventions.ts",
        "imports": []
      },
      {
        "name": "DropboxExtension",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "FileType",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "JsonExtension",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "MarkdownExtension",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getFileTypeFromPath>",
        "fileName": "src/getFileTypeFromPath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getWriterType>",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof hasSubExtension>",
        "fileName": "src/hasSubExtension.ts",
        "imports": [
          "makeArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof isGeneratedOperation>",
        "fileName": "src/isGeneratedOperation.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isGeneratedOperationName>",
        "fileName": "src/isGeneratedOperation.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isIndexableFileId>",
        "fileName": "src/filename-conventions.ts",
        "imports": []
      },
      {
        "name": "SearchableExtension",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "SearchLevel",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "TypescriptExtension",
        "fileName": "src/extensions.ts",
        "imports": []
      },
      {
        "name": "WriterType",
        "fileName": "src/extensions.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "filename-conventions",
      "js-util"
    ]
  },
  {
    "operationName": "get-port",
    "totalInstancesCount": 2,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "database"
    ],
    "packageJsonDependencies": [
      "port-conventions",
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getPort",
        "fileName": "src/getPort.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getPort>",
        "fileName": "src/getPort.ts",
        "imports": [
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-port",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "name-conventions",
    "totalInstancesCount": 11,
    "totalImportCount": 6,
    "totalDependencyCount": 3,
    "importDependencies": [
      "code-types",
      "convert-case",
      "pluralize"
    ],
    "packageJsonDependencies": [
      "convert-case",
      "pluralize",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAssetInputType",
        "fileName": "src/getAssetInputType.ts",
        "imports": [
          "SimplifiedSchemaType from code-types",
          "lowerCaseArray from convert-case",
          "singularize from pluralize",
          "isPlural from pluralize"
        ]
      },
      {
        "name": "getParameterContentType",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "isCalculatedParameter",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "isGeneratedParameterName",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "AssetInputType",
        "fileName": "src/getAssetInputType.ts",
        "imports": [
          "SimplifiedSchemaType from code-types",
          "lowerCaseArray from convert-case",
          "singularize from pluralize",
          "isPlural from pluralize"
        ]
      },
      {
        "name": "NamedParameters<typeof getAssetInputType>",
        "fileName": "src/getAssetInputType.ts",
        "imports": [
          "SimplifiedSchemaType from code-types",
          "lowerCaseArray from convert-case",
          "singularize from pluralize",
          "isPlural from pluralize"
        ]
      },
      {
        "name": "NamedParameters<typeof getParameterContentType>",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof isCalculatedParameter>",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof isGeneratedParameterName>",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "PatternMatcher",
        "fileName": "src/name-conventions.ts",
        "imports": [
          "ParameterName from code-types",
          "SimplifiedSchemaType from code-types"
        ]
      },
      {
        "name": "SimplifiedSchemaType",
        "fileName": "src/getAssetInputType.ts",
        "imports": [
          "SimplifiedSchemaType from code-types",
          "lowerCaseArray from convert-case",
          "singularize from pluralize",
          "isPlural from pluralize"
        ]
      }
    ],
    "cumulativeDependencies": [
      "name-conventions",
      "code-types",
      "model-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize"
    ]
  },
  {
    "operationName": "port-conventions",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "port-conventions"
    ]
  },
  {
    "operationName": "bundle-util",
    "totalInstancesCount": 6,
    "totalImportCount": 10,
    "totalDependencyCount": 7,
    "importDependencies": [
      "convert-case",
      "get-path",
      "js-util",
      "bundle-types",
      "fs-util",
      "code-types",
      "db-util"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path",
      "k-explore",
      "convert-case",
      "js-util",
      "bundle-types",
      "code-types",
      "db-util",
      "markdown-parse-js",
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getBundleSummary",
        "fileName": "src/getBundleSummary.ts",
        "imports": [
          "kebabCase from convert-case",
          "getRootPath from get-path",
          "makeArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "BundleConfig from bundle-types",
          "path from fs-util"
        ]
      },
      {
        "name": "getDbModelsForBundle",
        "fileName": "src/getDbModelsForBundle.ts",
        "imports": [
          "TsInterface from code-types",
          "getDbModelsFromOperations from db-util",
          "BundleConfig from bundle-types"
        ]
      },
      {
        "name": "BundleConfig",
        "fileName": "src/getDbModelsForBundle.ts",
        "imports": [
          "TsInterface from code-types",
          "getDbModelsFromOperations from db-util",
          "BundleConfig from bundle-types"
        ]
      },
      {
        "name": "BundleSummary",
        "fileName": "src/getBundleSummary.ts",
        "imports": [
          "kebabCase from convert-case",
          "getRootPath from get-path",
          "makeArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "BundleConfig from bundle-types",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getBundleSummary>",
        "fileName": "src/getBundleSummary.ts",
        "imports": [
          "kebabCase from convert-case",
          "getRootPath from get-path",
          "makeArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "BundleConfig from bundle-types",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbModelsForBundle>",
        "fileName": "src/getDbModelsForBundle.ts",
        "imports": [
          "TsInterface from code-types",
          "getDbModelsFromOperations from db-util",
          "BundleConfig from bundle-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "bundle-util",
      "convert-case",
      "make-test",
      "get-path",
      "log",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "js-util",
      "bundle-types",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "db-util",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file"
    ]
  },
  {
    "operationName": "create-backup",
    "totalInstancesCount": 6,
    "totalImportCount": 10,
    "totalDependencyCount": 7,
    "importDependencies": [
      "fs-util",
      "get-available-folder-path",
      "all",
      "filename-conventions",
      "zip",
      "log",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-available-folder-path",
      "all",
      "filename-conventions",
      "zip",
      "log",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createBackupCli",
        "fileName": "src/cli/createBackup.cli.ts",
        "imports": []
      },
      {
        "name": "createBackup",
        "fileName": "src/createBackup.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "getAvailableFolderPath from get-available-folder-path",
          "removeAllFolders from all",
          "databaseFolderName from filename-conventions",
          "zip from zip",
          "log from log",
          "getPathsWithOperations from get-path",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "getHumanReadableDate",
        "fileName": "src/createBackup.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "getAvailableFolderPath from get-available-folder-path",
          "removeAllFolders from all",
          "databaseFolderName from filename-conventions",
          "zip from zip",
          "log from log",
          "getPathsWithOperations from get-path",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof createBackup>",
        "fileName": "src/createBackup.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "getAvailableFolderPath from get-available-folder-path",
          "removeAllFolders from all",
          "databaseFolderName from filename-conventions",
          "zip from zip",
          "log from log",
          "getPathsWithOperations from get-path",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof createBackupCli>",
        "fileName": "src/cli/createBackup.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getHumanReadableDate>",
        "fileName": "src/createBackup.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "getAvailableFolderPath from get-available-folder-path",
          "removeAllFolders from all",
          "databaseFolderName from filename-conventions",
          "zip from zip",
          "log from log",
          "getPathsWithOperations from get-path",
          "getRootPath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "create-backup",
      "fs-util",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "get-available-folder-path",
      "all",
      "markdown-parsings",
      "code-types",
      "model-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "matter-types",
      "find-all-dependency-operations",
      "markdown-types",
      "asset-type",
      "json-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "bundle-types",
      "bundle-util",
      "db-util",
      "fs-util-js",
      "write-to-assets",
      "json-schema",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "sdk-operations",
      "read-json-file",
      "try-parse-json",
      "read-markdown-file",
      "recursive-util",
      "nested-menu-types",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "database",
      "schema-util",
      "convert-case",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "k-explore",
      "one-by-one",
      "minify-build",
      "terser",
      "set-json-key",
      "make-test",
      "filename-conventions",
      "zip",
      "log",
      "get-path"
    ]
  },
  {
    "operationName": "create-distribution",
    "totalInstancesCount": 2,
    "totalImportCount": 14,
    "totalDependencyCount": 8,
    "importDependencies": [
      "fs-util",
      "filename-conventions",
      "get-path",
      "all",
      "zip",
      "log",
      "k-explore",
      "get-available-folder-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "filename-conventions",
      "get-path",
      "all",
      "zip",
      "log",
      "k-explore",
      "get-available-folder-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createDistribution",
        "fileName": "src/createDistribution.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "sourceFolderName from filename-conventions",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "removeAllFolders from all",
          "zip from zip",
          "log from log",
          "explore from k-explore",
          "getAvailableFolderPath from get-available-folder-path"
        ]
      },
      {
        "name": "NamedParameters<typeof createDistribution>",
        "fileName": "src/createDistribution.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "sourceFolderName from filename-conventions",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "removeAllFolders from all",
          "zip from zip",
          "log from log",
          "explore from k-explore",
          "getAvailableFolderPath from get-available-folder-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "create-distribution",
      "fs-util",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "sdk-operations",
      "fs-util-js",
      "all",
      "markdown-parsings",
      "find-all-dependency-operations",
      "markdown-types",
      "asset-type",
      "json-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "bundle-types",
      "bundle-util",
      "db-util",
      "write-to-assets",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "read-markdown-file",
      "recursive-util",
      "nested-menu-types",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "database",
      "schema-util",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "one-by-one",
      "minify-build",
      "terser",
      "set-json-key",
      "zip",
      "log",
      "k-explore",
      "get-available-folder-path"
    ]
  },
  {
    "operationName": "db-util",
    "totalInstancesCount": 5,
    "totalImportCount": 3,
    "totalDependencyCount": 3,
    "importDependencies": [
      "code-types",
      "database",
      "js-util"
    ],
    "packageJsonDependencies": [
      "code-types",
      "database",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "filterInterfacesFromOperationNames",
        "fileName": "src/dbUtil.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "getDbModelsFromOperations",
        "fileName": "src/dbUtil.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof filterInterfacesFromOperationNames>",
        "fileName": "src/dbUtil.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbModelsFromOperations>",
        "fileName": "src/dbUtil.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/dbUtil.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "db-util",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "generate-bundle",
    "totalInstancesCount": 48,
    "totalImportCount": 121,
    "totalDependencyCount": 25,
    "importDependencies": [
      "bundle-types",
      "find-all-dependency-operations",
      "js-util",
      "filename-conventions",
      "database",
      "fs-util",
      "get-path",
      "fs-util-js",
      "explore-project",
      "collect-static-assets",
      "log",
      "k-explore",
      "bundle-util",
      "one-by-one",
      "edit-json-file",
      "generate-sdk-operations",
      "is-online",
      "new-template",
      "code-types",
      "convert-case",
      "get-package-json",
      "model-types",
      "fs-orm",
      "sdk-db",
      "rebuild-operation"
    ],
    "packageJsonDependencies": [
      "find-all-dependency-operations",
      "js-util",
      "fs-util",
      "get-path",
      "log",
      "all",
      "rename-template-files",
      "bundle-util",
      "database",
      "one-by-one",
      "generate-sdk-operations",
      "convert-case",
      "filename-conventions",
      "get-package-json",
      "fs-orm",
      "rebuild-operation",
      "k-explore",
      "edit-json-file",
      "is-online",
      "new-template",
      "bundle-types",
      "code-types",
      "model-types",
      "explore-project",
      "collect-static-assets",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "applyDataset",
        "fileName": "src/syncInformation.ts",
        "imports": [
          "log from log",
          "BundleConfig from bundle-types",
          "copyAllRelativeFiles from fs-util",
          "getDbModelsForBundle from bundle-util",
          "AugmentedAnyModelType from model-types",
          "getDatabaseFiles from fs-orm",
          "db from database",
          "getMergedQueryConfig from database",
          "DbModels from sdk-db",
          "makeRelative from fs-util-js",
          "Dataset from code-types",
          "DatasetFilter from code-types",
          "DatasetItem from code-types",
          "getSubsetFromObject from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "calculateBundleDependencies",
        "fileName": "src/calculateBundleDependencies.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "CreateBundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "findAllDependencyOperations from find-all-dependency-operations",
          "makeArray from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "isGeneratedOperationName from filename-conventions",
          "db from database"
        ]
      },
      {
        "name": "calculateToPath",
        "fileName": "src/calculateToPath.ts",
        "imports": [
          "path from fs-util",
          "getOperationPath from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "copyCodestories",
        "fileName": "src/copyCodestories.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRelativePaths from explore-project",
          "copyAllRelativeFiles from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "findStaticAssets from collect-static-assets",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "copyDocsAndReadme",
        "fileName": "src/copyDocsAndReadme.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "BundleConfig from bundle-types",
          "makeArray from js-util",
          "findStaticAssets from collect-static-assets",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "copyFromRepoToNiche",
        "fileName": "src/copyFromRepoToNiche.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "copyOperation",
        "fileName": "src/copyOperation.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "BundleConfig from bundle-types",
          "log from log",
          "getOperationClassification from get-path"
        ]
      },
      {
        "name": "copyReadmesBeforeFolderToBundle",
        "fileName": "src/copyReadmesBeforeToBundle.ts",
        "imports": [
          "fs from fs-util",
          "getAllFoldersUntilFolder from fs-util",
          "path from fs-util",
          "getRootPath from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "copyTodosIntoBundle",
        "fileName": "src/copyTodosIntoBundle.ts",
        "imports": [
          "findAllTodoFolderPaths from k-explore",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js",
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "findAndCopyOperations",
        "fileName": "src/findAndCopyOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "getBundleSummary from bundle-util",
          "log from log",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "findInherited",
        "fileName": "src/findInherited.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "generateAllBundles",
        "fileName": "src/generateAllBundles.ts",
        "imports": [
          "CustomisableBundleConfig from bundle-types",
          "db from database",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "generateBundle",
        "fileName": "src/generateBundle.ts",
        "imports": [
          "db from database",
          "mapObjectJson from edit-json-file",
          "BundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "log from log",
          "generateSdkOperations from generate-sdk-operations",
          "isOnline from is-online",
          "newTemplate from new-template",
          "path from fs-util",
          "removeAllExcept from fs-util",
          "writeJsonToFile from fs-util",
          "Operation from code-types"
        ]
      },
      {
        "name": "generateBundles",
        "fileName": "src/generateBundles.ts",
        "imports": [
          "CustomisableBundleConfig from bundle-types",
          "db from database",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getBundlePaths",
        "fileName": "src/getBundlePaths.ts",
        "imports": [
          "kebabCase from convert-case",
          "path from fs-util",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "log from log",
          "BundleConfig from bundle-types",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "getCompareFn",
        "fileName": "src/syncInformation.ts",
        "imports": [
          "log from log",
          "BundleConfig from bundle-types",
          "copyAllRelativeFiles from fs-util",
          "getDbModelsForBundle from bundle-util",
          "AugmentedAnyModelType from model-types",
          "getDatabaseFiles from fs-orm",
          "db from database",
          "getMergedQueryConfig from database",
          "DbModels from sdk-db",
          "makeRelative from fs-util-js",
          "Dataset from code-types",
          "DatasetFilter from code-types",
          "DatasetItem from code-types",
          "getSubsetFromObject from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "getDataset",
        "fileName": "src/syncInformation.ts",
        "imports": [
          "log from log",
          "BundleConfig from bundle-types",
          "copyAllRelativeFiles from fs-util",
          "getDbModelsForBundle from bundle-util",
          "AugmentedAnyModelType from model-types",
          "getDatabaseFiles from fs-orm",
          "db from database",
          "getMergedQueryConfig from database",
          "DbModels from sdk-db",
          "makeRelative from fs-util-js",
          "Dataset from code-types",
          "DatasetFilter from code-types",
          "DatasetItem from code-types",
          "getSubsetFromObject from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "getIndirectDependencies",
        "fileName": "src/getIndirectDependencies.ts",
        "imports": [
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "getPackageJson from get-package-json",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "getMatchingFilters",
        "fileName": "src/syncInformation.ts",
        "imports": [
          "log from log",
          "BundleConfig from bundle-types",
          "copyAllRelativeFiles from fs-util",
          "getDbModelsForBundle from bundle-util",
          "AugmentedAnyModelType from model-types",
          "getDatabaseFiles from fs-orm",
          "db from database",
          "getMergedQueryConfig from database",
          "DbModels from sdk-db",
          "makeRelative from fs-util-js",
          "Dataset from code-types",
          "DatasetFilter from code-types",
          "DatasetItem from code-types",
          "getSubsetFromObject from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "mergeBundleConfigs",
        "fileName": "src/mergeBundleConfigs.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "FinalBundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "FinalCustomisableBundleConfig from bundle-types",
          "FinalCreateBundleConfig from bundle-types"
        ]
      },
      {
        "name": "syncInformation",
        "fileName": "src/syncInformation.ts",
        "imports": [
          "log from log",
          "BundleConfig from bundle-types",
          "copyAllRelativeFiles from fs-util",
          "getDbModelsForBundle from bundle-util",
          "AugmentedAnyModelType from model-types",
          "getDatabaseFiles from fs-orm",
          "db from database",
          "getMergedQueryConfig from database",
          "DbModels from sdk-db",
          "makeRelative from fs-util-js",
          "Dataset from code-types",
          "DatasetFilter from code-types",
          "DatasetItem from code-types",
          "getSubsetFromObject from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "syncNicheFolder",
        "fileName": "src/syncNicheFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "isOperation from get-path",
          "FinalBundleConfig from bundle-types",
          "isAllTrue from js-util",
          "databaseFolderName from filename-conventions",
          "rebuildOperation from rebuild-operation",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": [
          "db from database",
          "log from log"
        ]
      },
      {
        "name": "yarnInstall",
        "fileName": "src/yarnInstall.ts",
        "imports": []
      },
      {
        "name": "BundleConfig",
        "fileName": "src/mergeBundleConfigs.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "FinalBundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "FinalCustomisableBundleConfig from bundle-types",
          "FinalCreateBundleConfig from bundle-types"
        ]
      },
      {
        "name": "CreateBundleConfig",
        "fileName": "src/calculateBundleDependencies.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "CreateBundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "findAllDependencyOperations from find-all-dependency-operations",
          "makeArray from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "isGeneratedOperationName from filename-conventions",
          "db from database"
        ]
      },
      {
        "name": "CustomisableBundleConfig",
        "fileName": "src/mergeBundleConfigs.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "FinalBundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "FinalCustomisableBundleConfig from bundle-types",
          "FinalCreateBundleConfig from bundle-types"
        ]
      },
      {
        "name": "FinalBundleConfig",
        "fileName": "src/syncNicheFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "isOperation from get-path",
          "FinalBundleConfig from bundle-types",
          "isAllTrue from js-util",
          "databaseFolderName from filename-conventions",
          "rebuildOperation from rebuild-operation",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof calculateBundleDependencies>",
        "fileName": "src/calculateBundleDependencies.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "CreateBundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "findAllDependencyOperations from find-all-dependency-operations",
          "makeArray from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "isGeneratedOperationName from filename-conventions",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof calculateToPath>",
        "fileName": "src/calculateToPath.ts",
        "imports": [
          "path from fs-util",
          "getOperationPath from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof copyCodestories>",
        "fileName": "src/copyCodestories.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRelativePaths from explore-project",
          "copyAllRelativeFiles from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "findStaticAssets from collect-static-assets",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof copyDocsAndReadme>",
        "fileName": "src/copyDocsAndReadme.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "BundleConfig from bundle-types",
          "makeArray from js-util",
          "findStaticAssets from collect-static-assets",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof copyFromRepoToNiche>",
        "fileName": "src/copyFromRepoToNiche.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof copyOperation>",
        "fileName": "src/copyOperation.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "BundleConfig from bundle-types",
          "log from log",
          "getOperationClassification from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof copyReadmesBeforeFolderToBundle>",
        "fileName": "src/copyReadmesBeforeToBundle.ts",
        "imports": [
          "fs from fs-util",
          "getAllFoldersUntilFolder from fs-util",
          "path from fs-util",
          "getRootPath from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof copyTodosIntoBundle>",
        "fileName": "src/copyTodosIntoBundle.ts",
        "imports": [
          "findAllTodoFolderPaths from k-explore",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "makeRelative from fs-util-js",
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findAndCopyOperations>",
        "fileName": "src/findAndCopyOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "getBundleSummary from bundle-util",
          "log from log",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findInherited>",
        "fileName": "src/findInherited.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateAllBundles>",
        "fileName": "src/generateAllBundles.ts",
        "imports": [
          "CustomisableBundleConfig from bundle-types",
          "db from database",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBundle>",
        "fileName": "src/generateBundle.ts",
        "imports": [
          "db from database",
          "mapObjectJson from edit-json-file",
          "BundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "log from log",
          "generateSdkOperations from generate-sdk-operations",
          "isOnline from is-online",
          "newTemplate from new-template",
          "path from fs-util",
          "removeAllExcept from fs-util",
          "writeJsonToFile from fs-util",
          "Operation from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBundles>",
        "fileName": "src/generateBundles.ts",
        "imports": [
          "CustomisableBundleConfig from bundle-types",
          "db from database",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof getBundlePaths>",
        "fileName": "src/getBundlePaths.ts",
        "imports": [
          "kebabCase from convert-case",
          "path from fs-util",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "log from log",
          "BundleConfig from bundle-types",
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getIndirectDependencies>",
        "fileName": "src/getIndirectDependencies.ts",
        "imports": [
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "getPackageJson from get-package-json",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof mergeBundleConfigs>",
        "fileName": "src/mergeBundleConfigs.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "FinalBundleConfig from bundle-types",
          "CustomisableBundleConfig from bundle-types",
          "FinalCustomisableBundleConfig from bundle-types",
          "FinalCreateBundleConfig from bundle-types"
        ]
      },
      {
        "name": "NamedParameters<typeof syncNicheFolder>",
        "fileName": "src/syncNicheFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "isOperation from get-path",
          "FinalBundleConfig from bundle-types",
          "isAllTrue from js-util",
          "databaseFolderName from filename-conventions",
          "rebuildOperation from rebuild-operation",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": [
          "db from database",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof yarnInstall>",
        "fileName": "src/yarnInstall.ts",
        "imports": []
      },
      {
        "name": "OperationPrivacy",
        "fileName": "src/findAndCopyOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "OperationPrivacy from bundle-types",
          "getBundleSummary from bundle-util",
          "log from log",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generate-bundle",
      "bundle-types",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "markdown-types",
      "asset-type",
      "matter-types",
      "json-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "recursive-types",
      "json-schema",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "sdk-operations",
      "read-json-file",
      "try-parse-json",
      "read-markdown-file",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "schema-util",
      "minify-build",
      "terser",
      "set-json-key",
      "make-test",
      "js-util",
      "filename-conventions",
      "database",
      "measure-performance",
      "fs-util",
      "graceful-fs",
      "get-path",
      "fs-util-js",
      "explore-project",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "ts-json-schema-generator",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "cleanup-typescript-database",
      "read-typescript-file",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "collect-static-assets",
      "log",
      "k-explore",
      "bundle-util",
      "db-util",
      "one-by-one",
      "edit-json-file",
      "generate-sdk-operations",
      "is-online",
      "new-template",
      "rename-template-files",
      "code-types",
      "convert-case",
      "get-package-json",
      "model-types",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "rebuild-operation",
      "run-child-process",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at"
    ]
  },
  {
    "operationName": "install-node-modules",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "installNodeModules",
        "fileName": "src/installNodeModules.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof installNodeModules>",
        "fileName": "src/installNodeModules.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "install-node-modules"
    ]
  },
  {
    "operationName": "yarn-install-new-distribution",
    "totalInstancesCount": 2,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "unzip",
      "fs-util",
      "install-node-modules"
    ],
    "packageJsonDependencies": [
      "unzip",
      "fs-util",
      "install-node-modules"
    ],
    "instancesAndTheirImports": [
      {
        "name": "yarnInstallNewDistribution",
        "fileName": "src/general.ts",
        "imports": [
          "unzip from unzip",
          "getFolder from fs-util",
          "getFileName from fs-util",
          "installNodeModules from install-node-modules",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof yarnInstallNewDistribution>",
        "fileName": "src/general.ts",
        "imports": [
          "unzip from unzip",
          "getFolder from fs-util",
          "getFileName from fs-util",
          "installNodeModules from install-node-modules",
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "yarn-install-new-distribution",
      "unzip",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "install-node-modules"
    ]
  },
  {
    "operationName": "deploy-project",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "deploy-project"
    ]
  },
  {
    "operationName": "deployment-types",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "deployment-types"
    ]
  },
  {
    "operationName": "linode-api-recipes",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "linode-api-recipes"
    ]
  },
  {
    "operationName": "namecheap-api-recipes",
    "totalInstancesCount": 0,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "deployment-types"
    ],
    "packageJsonDependencies": [
      "deployment-types"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "namecheap-api-recipes",
      "deployment-types"
    ]
  },
  {
    "operationName": "server-deployment-recipes",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "server-deployment-recipes"
    ]
  },
  {
    "operationName": "vercel-api-recipes",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "vercel-api-recipes"
    ]
  },
  {
    "operationName": "sdk",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk"
    ]
  },
  {
    "operationName": "sdk-api",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-api"
    ]
  },
  {
    "operationName": "sdk-api-keys",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-api-keys"
    ]
  },
  {
    "operationName": "sdk-api1",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-api1"
    ]
  },
  {
    "operationName": "sdk-db",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-db"
    ]
  },
  {
    "operationName": "sdk-env-private",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-env-private"
    ]
  },
  {
    "operationName": "sdk-env-public",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-env-public"
    ]
  },
  {
    "operationName": "sdk-function-paths",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-function-paths"
    ]
  },
  {
    "operationName": "sdk-interface-paths",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-interface-paths"
    ]
  },
  {
    "operationName": "sdk-js",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-js"
    ]
  },
  {
    "operationName": "sdk-operations",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-operations"
    ]
  },
  {
    "operationName": "sdk-ui",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-ui"
    ]
  },
  {
    "operationName": "sdk-ui1",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-ui1"
    ]
  },
  {
    "operationName": "sdk-ui2",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-ui2"
    ]
  },
  {
    "operationName": "sdk-ui3",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "sdk-ui3"
    ]
  },
  {
    "operationName": "detect-language",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "detectLanguage",
        "fileName": "src/detectLanguage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof detectLanguage>",
        "fileName": "src/detectLanguage.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "detect-language"
    ]
  },
  {
    "operationName": "generate-simple-sentence",
    "totalInstancesCount": 10,
    "totalImportCount": 6,
    "totalDependencyCount": 5,
    "importDependencies": [
      "database",
      "language-types",
      "say",
      "one-by-one",
      "js-util"
    ],
    "packageJsonDependencies": [
      "database",
      "say",
      "one-by-one",
      "js-util",
      "language-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateSimpleSentence",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "main",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "makeAudioCourse",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "sleep",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSimpleSentence>",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof makeAudioCourse>",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof sleep>",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "SayLanguageEnum",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      },
      {
        "name": "TokiPonaMatrix",
        "fileName": "src/generateSimpleSentence.ts",
        "imports": [
          "db from database",
          "TokiPonaMatrix from language-types",
          "sayLanguage from say",
          "SayLanguageEnum from say",
          "oneByOne from one-by-one",
          "pickRandomArrayItem from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generate-simple-sentence",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "language-types",
      "say",
      "ffmpeg-util",
      "one-by-one",
      "js-util"
    ]
  },
  {
    "operationName": "learn-toki-web",
    "totalInstancesCount": 5,
    "totalImportCount": 27,
    "totalDependencyCount": 21,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "database",
      "js-util",
      "language-types",
      "markdown",
      "model-types",
      "next",
      "react",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-icons/bs"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "api-store",
      "database",
      "db-recipes",
      "file-tabs",
      "js-util",
      "language-types",
      "layout",
      "model-types",
      "nested-menu",
      "next",
      "next-pwa",
      "next-transpile-modules",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-icons",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-form-inputs",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "writer-input",
      "markdown"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticProps",
        "fileName": "src/pages/index.tsx",
        "imports": [
          "db from database",
          "omitUndefinedValues from js-util",
          "TokiPonaMatrix from language-types",
          "renderMarkdownContent from markdown",
          "Language from model-types",
          "GetStaticProps from next",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "TextArea from react-with-native",
          "SelectMultipleInput from react-with-native-form-inputs",
          "BsDiscord from react-icons/bs",
          "BsMailbox from react-icons/bs",
          "BsTwitter from react-icons/bs"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "WordMatrix",
        "fileName": "src/pages/index.tsx",
        "imports": [
          "db from database",
          "omitUndefinedValues from js-util",
          "TokiPonaMatrix from language-types",
          "renderMarkdownContent from markdown",
          "Language from model-types",
          "GetStaticProps from next",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "TextArea from react-with-native",
          "SelectMultipleInput from react-with-native-form-inputs",
          "BsDiscord from react-icons/bs",
          "BsMailbox from react-icons/bs",
          "BsTwitter from react-icons/bs"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "learn-toki-web",
      "layout",
      "authentication",
      "function-form",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "asset-type",
      "social-media-types",
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "convert-case",
      "make-test",
      "pluralize",
      "fs-util-js",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "text-or-binary",
      "fancy-loader",
      "simplified-schema-form",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-select",
      "react-native",
      "react-with-native-form-asset-input",
      "react-with-native-form",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "matter-types",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "filename-conventions",
      "prompt-components",
      "ai-types",
      "function-server-types",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "breadcrumbs",
      "key-value-markdown-js",
      "markdown/build/esm",
      "writer-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "try-parse-json",
      "file-tabs",
      "file-icons",
      "next-paths",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "js-util",
      "language-types",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "model-types",
      "next",
      "react",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-dropzone",
      "react-map-gl",
      "react-icons/bs"
    ]
  },
  {
    "operationName": "markdown-translator",
    "totalInstancesCount": 26,
    "totalImportCount": 6,
    "totalDependencyCount": 5,
    "importDependencies": [
      "fs-util",
      "chokidar",
      "k-explore",
      "get-path",
      "detect-language"
    ],
    "packageJsonDependencies": [
      "chokidar",
      "k-explore",
      "get-path",
      "fs-util",
      "detect-language"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createFolder",
        "fileName": "src/utils/createFolder.ts",
        "imports": []
      },
      {
        "name": "detectLanguage",
        "fileName": "src/utils/detectLanguage.ts",
        "imports": []
      },
      {
        "name": "getAllMarkdownFiles",
        "fileName": "src/utils/getAllReadmeFiles.ts",
        "imports": [
          "explore from k-explore",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getFileInfo",
        "fileName": "src/utils/getFileInfo.ts",
        "imports": []
      },
      {
        "name": "getTranslatedWord",
        "fileName": "src/utils/getTranslatedWord.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "markdownStoreAndRecord",
        "fileName": "src/utils/markdownStoreAndRecord.ts",
        "imports": []
      },
      {
        "name": "parseMarkdownWordByWord",
        "fileName": "src/utils/parseMarkdownWordByWord.ts",
        "imports": []
      },
      {
        "name": "recordMdFile",
        "fileName": "src/utils/recordMdFile.ts",
        "imports": []
      },
      {
        "name": "startMarkdownTranslator",
        "fileName": "src/startMarkdownTranslator.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "startTranslation",
        "fileName": "src/utils/startTranslation.ts",
        "imports": [
          "detectLanguage from detect-language"
        ]
      },
      {
        "name": "translatedArrayToKeyValue",
        "fileName": "src/utils/translatedArrayToKeyValue.ts",
        "imports": []
      },
      {
        "name": "watchMdFile",
        "fileName": "src/watchMdFile.ts",
        "imports": [
          "watch from chokidar"
        ]
      },
      {
        "name": "DefaultResponseType",
        "fileName": "src/utils/recordMdFile.ts",
        "imports": []
      },
      {
        "name": "FileInfo",
        "fileName": "src/utils/getFileInfo.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof createFolder>",
        "fileName": "src/utils/createFolder.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof detectLanguage>",
        "fileName": "src/utils/detectLanguage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getAllMarkdownFiles>",
        "fileName": "src/utils/getAllReadmeFiles.ts",
        "imports": [
          "explore from k-explore",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getFileInfo>",
        "fileName": "src/utils/getFileInfo.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getTranslatedWord>",
        "fileName": "src/utils/getTranslatedWord.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownStoreAndRecord>",
        "fileName": "src/utils/markdownStoreAndRecord.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof parseMarkdownWordByWord>",
        "fileName": "src/utils/parseMarkdownWordByWord.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof recordMdFile>",
        "fileName": "src/utils/recordMdFile.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof startMarkdownTranslator>",
        "fileName": "src/startMarkdownTranslator.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof startTranslation>",
        "fileName": "src/utils/startTranslation.ts",
        "imports": [
          "detectLanguage from detect-language"
        ]
      },
      {
        "name": "NamedParameters<typeof translatedArrayToKeyValue>",
        "fileName": "src/utils/translatedArrayToKeyValue.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof watchMdFile>",
        "fileName": "src/watchMdFile.ts",
        "imports": [
          "watch from chokidar"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-translator",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "chokidar",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "get-path",
      "sdk-operations",
      "detect-language"
    ]
  },
  {
    "operationName": "simplify-text",
    "totalInstancesCount": 14,
    "totalImportCount": 4,
    "totalDependencyCount": 3,
    "importDependencies": [
      "fs-util",
      "read-json-file",
      "js-util"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "read-json-file",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createWordSimplificationMap",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "findBetterWords",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getSynonymFrequencyDataset",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "preprocessSynonyms",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "preprocessWordFrequencies",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "simplifyText",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "testSimplifiedText",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof createWordSimplificationMap>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findBetterWords>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getSynonymFrequencyDataset>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof preprocessSynonyms>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof preprocessWordFrequencies>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof simplifyText>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof testSimplifiedText>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "readJsonFile from read-json-file",
          "notEmpty from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "simplify-text",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "js-util"
    ]
  },
  {
    "operationName": "speak-words-to-learn",
    "totalInstancesCount": 2,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "database"
    ],
    "packageJsonDependencies": [
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "speakWordsToLearn",
        "fileName": "src/general.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof speakWordsToLearn>",
        "fileName": "src/general.ts",
        "imports": [
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "speak-words-to-learn",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "payment-node",
    "totalInstancesCount": 10,
    "totalImportCount": 17,
    "totalDependencyCount": 6,
    "importDependencies": [
      "function-context-type",
      "database",
      "model-types",
      "payment-types",
      "fs-orm",
      "webpage-types"
    ],
    "packageJsonDependencies": [
      "function-context-type",
      "database",
      "model-types",
      "payment-types",
      "fs-orm",
      "webpage-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createPaymentRequestWithContext",
        "fileName": "src/createPaymentRequestWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "db from database",
          "Creation from model-types",
          "generateRandomString from model-types",
          "PaymentRequest from payment-types"
        ]
      },
      {
        "name": "createPaymentTransactionWithContext",
        "fileName": "src/createPaymentTransactionWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "db from database",
          "Creation from model-types",
          "PaymentTransaction from payment-types",
          "DbQueryResult from fs-orm"
        ]
      },
      {
        "name": "defaultResponse",
        "fileName": "src/DefaultResponse.ts",
        "imports": []
      },
      {
        "name": "fail",
        "fileName": "src/DefaultResponse.ts",
        "imports": []
      },
      {
        "name": "getPaymentWebPages",
        "fileName": "src/getPaymentWebPages.ts",
        "imports": [
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "FunctionFormPage from webpage-types",
          "CrudPage from webpage-types",
          "CustomWebPage from webpage-types",
          "functionFormPageToWebPage from webpage-types",
          "crudPageToWebPages from webpage-types"
        ]
      },
      {
        "name": "succeed",
        "fileName": "src/DefaultResponse.ts",
        "imports": []
      },
      {
        "name": "FunctionContext",
        "fileName": "src/createPaymentTransactionWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "db from database",
          "Creation from model-types",
          "PaymentTransaction from payment-types",
          "DbQueryResult from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof createPaymentRequestWithContext>",
        "fileName": "src/createPaymentRequestWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "db from database",
          "Creation from model-types",
          "generateRandomString from model-types",
          "PaymentRequest from payment-types"
        ]
      },
      {
        "name": "NamedParameters<typeof createPaymentTransactionWithContext>",
        "fileName": "src/createPaymentTransactionWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "db from database",
          "Creation from model-types",
          "PaymentTransaction from payment-types",
          "DbQueryResult from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof getPaymentWebPages>",
        "fileName": "src/getPaymentWebPages.ts",
        "imports": [
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "FunctionFormPage from webpage-types",
          "CrudPage from webpage-types",
          "CustomWebPage from webpage-types",
          "functionFormPageToWebPage from webpage-types",
          "crudPageToWebPages from webpage-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "payment-node",
      "function-context-type",
      "auth-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "peer-types",
      "geo-types",
      "asset-type",
      "social-media-types",
      "server/typings/common",
      "database",
      "sdk-db",
      "log",
      "js-util",
      "model-types",
      "payment-types",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "webpage-types"
    ]
  },
  {
    "operationName": "payment-types",
    "totalInstancesCount": 14,
    "totalImportCount": 7,
    "totalDependencyCount": 2,
    "importDependencies": [
      "code-types",
      "model-types"
    ],
    "packageJsonDependencies": [
      "code-types",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Credit",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentConfig",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentCoupon",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentEvent",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentPlan",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentRequest",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentSubscription",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "PaymentTransaction",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "Price",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "RunEveryPeriodEnum",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/payments.ts",
        "imports": [
          "RunEveryPeriodEnum from code-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Price from model-types",
          "Slug from model-types",
          "Credit from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "payment-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "model-types"
    ]
  },
  {
    "operationName": "payment-web",
    "totalInstancesCount": 3,
    "totalImportCount": 12,
    "totalDependencyCount": 11,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification",
      "authentication"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "payment-web",
      "layout",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "menu",
      "fancy-loader",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types"
    ]
  },
  {
    "operationName": "edit-json-file",
    "totalInstancesCount": 2,
    "totalImportCount": 4,
    "totalDependencyCount": 2,
    "importDependencies": [
      "read-json-file",
      "fs-util"
    ],
    "packageJsonDependencies": [
      "read-json-file",
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "mapArrayJson",
        "fileName": "src/mapArrayJson.ts",
        "imports": [
          "readJsonFile from read-json-file",
          "writeJsonToFile from fs-util"
        ]
      },
      {
        "name": "mapObjectJson",
        "fileName": "src/mapObjectJson.ts",
        "imports": [
          "readJsonFile from read-json-file",
          "writeJsonToFile from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "edit-json-file",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "log",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types"
    ]
  },
  {
    "operationName": "video-to-mp3",
    "totalInstancesCount": 4,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "cross-env",
      "dot-env",
      "fluent-ffmpeg",
      "puppeteer",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript"
    ],
    "instancesAndTheirImports": [
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "videoToMp3",
        "fileName": "src/videoToMp3.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof videoToMp3>",
        "fileName": "src/videoToMp3.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "video-to-mp3"
    ]
  },
  {
    "operationName": "unzip",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "unzip",
        "fileName": "src/unzip.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof unzip>",
        "fileName": "src/unzip.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "unzip"
    ]
  },
  {
    "operationName": "zip",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "zip",
        "fileName": "src/zip.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof zip>",
        "fileName": "src/zip.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "zip"
    ]
  },
  {
    "operationName": "csv-util",
    "totalInstancesCount": 4,
    "totalImportCount": 6,
    "totalDependencyCount": 5,
    "importDependencies": [
      "make-test",
      "csv-stringify/sync",
      "js-util",
      "parse-primitive",
      "csv-parse"
    ],
    "packageJsonDependencies": [
      "csv-stringify",
      "js-util",
      "make-test",
      "parse-primitive",
      "csv-parse"
    ],
    "instancesAndTheirImports": [
      {
        "name": "csvItemArrayToCsvString",
        "fileName": "src/csvItemArrayToCsvString.ts",
        "imports": [
          "makeTest from make-test",
          "stringify from csv-stringify/sync"
        ]
      },
      {
        "name": "tryParseCsv",
        "fileName": "src/tryParseCsv.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "makeTest from make-test",
          "parsePrimitive from parse-primitive",
          "parse from csv-parse"
        ]
      },
      {
        "name": "CsvItemType",
        "fileName": "src/tryParseCsv.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "makeTest from make-test",
          "parsePrimitive from parse-primitive",
          "parse from csv-parse"
        ]
      },
      {
        "name": "NamedParameters<typeof tryParseCsv>",
        "fileName": "src/tryParseCsv.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "makeTest from make-test",
          "parsePrimitive from parse-primitive",
          "parse from csv-parse"
        ]
      }
    ],
    "cumulativeDependencies": [
      "csv-util",
      "make-test",
      "csv-stringify/sync",
      "js-util",
      "parse-primitive",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "csv-parse"
    ]
  },
  {
    "operationName": "xls-to-csv-json",
    "totalInstancesCount": 6,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "allto-json"
    ],
    "instancesAndTheirImports": [
      {
        "name": "convertCsvToJson",
        "fileName": "src/convertCsvToJson.ts",
        "imports": []
      },
      {
        "name": "convertXlsToJson",
        "fileName": "src/convertXlsToJson.ts",
        "imports": []
      },
      {
        "name": "main",
        "fileName": "src/convertXlsToJson.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof convertCsvToJson>",
        "fileName": "src/convertCsvToJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof convertXlsToJson>",
        "fileName": "src/convertXlsToJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/convertXlsToJson.test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "xls-to-csv-json"
    ]
  },
  {
    "operationName": "ffmpeg-util",
    "totalInstancesCount": 14,
    "totalImportCount": 14,
    "totalDependencyCount": 5,
    "importDependencies": [
      "fs-util",
      "js-util",
      "k-explore",
      "log",
      "one-by-one"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "js-util",
      "k-explore",
      "log",
      "one-by-one"
    ],
    "instancesAndTheirImports": [
      {
        "name": "compressImage",
        "fileName": "src/compressImage.ts",
        "imports": [
          "fs from fs-util",
          "getFirstAvailableFilename from fs-util",
          "path from fs-util",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "compressImagesCli",
        "fileName": "src/cli/compressImages.cli.ts",
        "imports": [
          "path from fs-util",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "compressImages",
        "fileName": "src/compressImages.ts",
        "imports": [
          "explore from k-explore",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "compressMp4",
        "fileName": "src/compressMp4.ts",
        "imports": []
      },
      {
        "name": "compressMp4sCli",
        "fileName": "src/cli/compressMp4s.cli.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "convertToMp3",
        "fileName": "src/convertToMp3.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "convertToMp4",
        "fileName": "src/convertToMp4.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof compressImage>",
        "fileName": "src/compressImage.ts",
        "imports": [
          "fs from fs-util",
          "getFirstAvailableFilename from fs-util",
          "path from fs-util",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof compressImages>",
        "fileName": "src/compressImages.ts",
        "imports": [
          "explore from k-explore",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof compressImagesCli>",
        "fileName": "src/cli/compressImages.cli.ts",
        "imports": [
          "path from fs-util",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof compressMp4>",
        "fileName": "src/compressMp4.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof compressMp4sCli>",
        "fileName": "src/cli/compressMp4s.cli.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof convertToMp3>",
        "fileName": "src/convertToMp3.ts",
        "imports": [
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof convertToMp4>",
        "fileName": "src/convertToMp4.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "ffmpeg-util",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "js-util",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "log",
      "one-by-one"
    ]
  },
  {
    "operationName": "json-to-md",
    "totalInstancesCount": 5,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "jsonToMdString",
        "fileName": "src/general.ts",
        "imports": [
          "Json from model-types"
        ]
      },
      {
        "name": "printObject",
        "fileName": "src/general.ts",
        "imports": [
          "Json from model-types"
        ]
      },
      {
        "name": "Json",
        "fileName": "src/general.ts",
        "imports": [
          "Json from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof jsonToMdString>",
        "fileName": "src/general.ts",
        "imports": [
          "Json from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof printObject>",
        "fileName": "src/general.ts",
        "imports": [
          "Json from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "json-to-md",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "json-to-say-string",
    "totalInstancesCount": 3,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "json-util"
    ],
    "packageJsonDependencies": [
      "json-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "jsonToSayString",
        "fileName": "src/general.ts",
        "imports": [
          "Json from json-util",
          "getSimpleJsonString from json-util"
        ]
      },
      {
        "name": "Json",
        "fileName": "src/general.ts",
        "imports": [
          "Json from json-util",
          "getSimpleJsonString from json-util"
        ]
      },
      {
        "name": "NamedParameters<typeof jsonToSayString>",
        "fileName": "src/general.ts",
        "imports": [
          "Json from json-util",
          "getSimpleJsonString from json-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "json-to-say-string",
      "json-util"
    ]
  },
  {
    "operationName": "json-util",
    "totalInstancesCount": 3,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getSimpleJsonString",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "Json",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSimpleJsonString>",
        "fileName": "src/util.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "json-util"
    ]
  },
  {
    "operationName": "collect-static-assets",
    "totalInstancesCount": 10,
    "totalImportCount": 19,
    "totalDependencyCount": 6,
    "importDependencies": [
      "fs-util",
      "get-path",
      "webpage-types",
      "fs-util-js",
      "js-util",
      "marked-util"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path",
      "webpage-types",
      "js-util",
      "marked-util",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "copyCopyPairs",
        "fileName": "src/copyCopyPairs.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "copyReaderStaticAssets",
        "fileName": "src/copyReaderStaticAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "findReaderStaticAssets",
        "fileName": "src/findReaderStaticAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "onlyUnique2 from js-util",
          "getProjectRoot from get-path",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "findStaticAssets",
        "fileName": "src/findStaticAssets.ts",
        "imports": [
          "findEmbeds from marked-util",
          "findLinks from marked-util",
          "fs from fs-util",
          "path from fs-util",
          "getFolderJs from fs-util-js",
          "isPathRelative from fs-util-js"
        ]
      },
      {
        "name": "CopyPair",
        "fileName": "src/copyCopyPairs.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof copyCopyPairs>",
        "fileName": "src/copyCopyPairs.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof copyReaderStaticAssets>",
        "fileName": "src/copyReaderStaticAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof findReaderStaticAssets>",
        "fileName": "src/findReaderStaticAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "onlyUnique2 from js-util",
          "getProjectRoot from get-path",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof findStaticAssets>",
        "fileName": "src/findStaticAssets.ts",
        "imports": [
          "findEmbeds from marked-util",
          "findLinks from marked-util",
          "fs from fs-util",
          "path from fs-util",
          "getFolderJs from fs-util-js",
          "isPathRelative from fs-util-js"
        ]
      },
      {
        "name": "ReaderWebPage",
        "fileName": "src/findReaderStaticAssets.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "onlyUnique2 from js-util",
          "getProjectRoot from get-path",
          "ReaderWebPage from webpage-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "collect-static-assets",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "write-to-assets",
      "sdk-operations",
      "webpage-types",
      "fs-util-js",
      "js-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked"
    ]
  },
  {
    "operationName": "doc-to-md",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "mammoth",
      "textract"
    ],
    "instancesAndTheirImports": [
      {
        "name": "docToMd",
        "fileName": "src/docToMd.ts",
        "imports": []
      },
      {
        "name": "docxToMd",
        "fileName": "src/docxToMd.ts",
        "imports": []
      },
      {
        "name": "runTests",
        "fileName": "src/docxToMd.test.ts",
        "imports": []
      },
      {
        "name": "waitMilliseconds",
        "fileName": "src/docxToMd.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof docToMd>",
        "fileName": "src/docToMd.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof docxToMd>",
        "fileName": "src/docxToMd.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof runTests>",
        "fileName": "src/docxToMd.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof waitMilliseconds>",
        "fileName": "src/docxToMd.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "doc-to-md"
    ]
  },
  {
    "operationName": "key-value-markdown-js",
    "totalInstancesCount": 21,
    "totalImportCount": 32,
    "totalDependencyCount": 7,
    "importDependencies": [
      "model-types",
      "markdown-types",
      "js-util",
      "make-test",
      "markdown-parse-js",
      "frontmatter-util",
      "convert-case"
    ],
    "packageJsonDependencies": [
      "model-types",
      "code-types",
      "js-util",
      "make-test",
      "markdown-parse-js",
      "matter-types",
      "convert-case",
      "markdown-types",
      "frontmatter-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "flattenMarkdownChunks",
        "fileName": "src/flattenMarkdownChunks.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types"
        ]
      },
      {
        "name": "getKvmdItemsRecursively",
        "fileName": "src/getKvmdItemsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "notEmpty from js-util",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "getParagraphsRecursively",
        "fileName": "src/getParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types",
          "CategoryStack from model-types",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "kvmdDataMap",
        "fileName": "src/kvmdDataMap.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "kvmdDataToString",
        "fileName": "src/kvmdDataToString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "kvmdParseToMarkdownString",
        "fileName": "src/kvmdParseToMarkdownString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "markdownStringToKvmdParse",
        "fileName": "src/markdownStringToKvmdParse.ts",
        "imports": [
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "camelCase from convert-case",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "parseKvmdLine",
        "fileName": "src/parseKvmdLine.ts",
        "imports": [
          "KvmdLine from model-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "makeTest from make-test"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/getParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types",
          "CategoryStack from model-types",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "DbFileLocation",
        "fileName": "src/markdownStringToKvmdParse.ts",
        "imports": [
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "camelCase from convert-case",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/kvmdParseToMarkdownString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "KeyValueMarkdownParse",
        "fileName": "src/kvmdParseToMarkdownString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "MarkdownChunk",
        "fileName": "src/getParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types",
          "CategoryStack from model-types",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof flattenMarkdownChunks>",
        "fileName": "src/flattenMarkdownChunks.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getKvmdItemsRecursively>",
        "fileName": "src/getKvmdItemsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "notEmpty from js-util",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getParagraphsRecursively>",
        "fileName": "src/getParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParagraph from markdown-types",
          "CategoryStack from model-types",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof kvmdDataMap>",
        "fileName": "src/kvmdDataMap.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof kvmdDataToString>",
        "fileName": "src/kvmdDataToString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof kvmdParseToMarkdownString>",
        "fileName": "src/kvmdParseToMarkdownString.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownStringToKvmdParse>",
        "fileName": "src/markdownStringToKvmdParse.ts",
        "imports": [
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "camelCase from convert-case",
          "makeTest from make-test",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof parseKvmdLine>",
        "fileName": "src/parseKvmdLine.ts",
        "imports": [
          "KvmdLine from model-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "makeTest from make-test"
        ]
      }
    ],
    "cumulativeDependencies": [
      "key-value-markdown-js",
      "model-types",
      "matter-types",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "js-util",
      "make-test",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "convert-case"
    ]
  },
  {
    "operationName": "make-codestory",
    "totalInstancesCount": 20,
    "totalImportCount": 23,
    "totalDependencyCount": 13,
    "importDependencies": [
      "marked-util",
      "js-util",
      "get-path",
      "fs-util",
      "explore-project",
      "database",
      "model-types",
      "write-to-assets",
      "read-markdown-file",
      "markdown-parse-js",
      "markdown-types",
      "one-by-one",
      "read-json-file"
    ],
    "packageJsonDependencies": [
      "js-util",
      "get-path",
      "fs-util",
      "k-explore",
      "database",
      "model-types",
      "write-to-assets",
      "read-markdown-file",
      "markdown-parse-js",
      "code-types",
      "one-by-one",
      "marked",
      "marked-util",
      "explore-project",
      "markdown-types",
      "read-json-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addCodestoryToSection",
        "fileName": "src/addCodeStoryToSection.ts",
        "imports": [
          "findCodespans from marked-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "addModelName",
        "fileName": "src/addModelName.ts",
        "imports": []
      },
      {
        "name": "findCodestories",
        "fileName": "src/findCodestories.ts",
        "imports": [
          "getProjectRoot from get-path",
          "path from fs-util",
          "getFrontmattersMappedObject from explore-project",
          "getProjectRelativePaths from explore-project"
        ]
      },
      {
        "name": "makeCodespanMappedObject",
        "fileName": "src/makeCodespanMappedObject.ts",
        "imports": [
          "db from database",
          "getSubsetFromObject from js-util",
          "mergeObjectsArray from js-util",
          "AugmentedAnyModelType from model-types",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "makeCodestory",
        "fileName": "src/makeCodestory.ts",
        "imports": [
          "readMarkdownFile from read-markdown-file",
          "markdownParseToMarkdownString from markdown-parse-js",
          "markdownParseToMarkdownStringFromContent from markdown-parse-js",
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "mapChunkRecursively",
        "fileName": "src/mapChunkRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "mapMarkdownParseSections",
        "fileName": "src/mapMarkdownParseSections.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/findCodestories.test.ts",
        "imports": []
      },
      {
        "name": "writeAllCodestoriesCli",
        "fileName": "src/cli/writeAllCodestories.cli.ts",
        "imports": []
      },
      {
        "name": "writeAllCodestories",
        "fileName": "src/writeAllCodestories.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "oneByOne from one-by-one",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "writeCodespanDetails",
        "fileName": "src/writeCodespanDetails.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "CodespanItemInfo",
        "fileName": "src/CodespanItemInfo.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof addCodestoryToSection>",
        "fileName": "src/addCodeStoryToSection.ts",
        "imports": [
          "findCodespans from marked-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findCodestories>",
        "fileName": "src/findCodestories.ts",
        "imports": [
          "getProjectRoot from get-path",
          "path from fs-util",
          "getFrontmattersMappedObject from explore-project",
          "getProjectRelativePaths from explore-project"
        ]
      },
      {
        "name": "NamedParameters<typeof makeCodespanMappedObject>",
        "fileName": "src/makeCodespanMappedObject.ts",
        "imports": [
          "db from database",
          "getSubsetFromObject from js-util",
          "mergeObjectsArray from js-util",
          "AugmentedAnyModelType from model-types",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof makeCodestory>",
        "fileName": "src/makeCodestory.ts",
        "imports": [
          "readMarkdownFile from read-markdown-file",
          "markdownParseToMarkdownString from markdown-parse-js",
          "markdownParseToMarkdownStringFromContent from markdown-parse-js",
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/findCodestories.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof writeAllCodestories>",
        "fileName": "src/writeAllCodestories.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "oneByOne from one-by-one",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof writeAllCodestoriesCli>",
        "fileName": "src/cli/writeAllCodestories.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof writeCodespanDetails>",
        "fileName": "src/writeCodespanDetails.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "make-codestory",
      "marked-util",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize",
      "asset-type",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "js-util",
      "get-path",
      "log",
      "try-parse-json",
      "k-explore",
      "sdk-operations",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "explore-project",
      "bundle-util",
      "bundle-types",
      "db-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "schema-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "fs-orm",
      "frontmatter-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "recursive-util",
      "nested-menu-types",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "webpage-types",
      "database",
      "model-types",
      "write-to-assets",
      "read-markdown-file",
      "markdown-parse-js",
      "markdown-types",
      "one-by-one",
      "read-json-file"
    ]
  },
  {
    "operationName": "markdown-parse-js",
    "totalInstancesCount": 37,
    "totalImportCount": 23,
    "totalDependencyCount": 7,
    "importDependencies": [
      "markdown-types",
      "js-util",
      "convert-case",
      "frontmatter-util",
      "make-test",
      "matter-types",
      "code-types"
    ],
    "packageJsonDependencies": [
      "code-types",
      "make-test",
      "matter-types",
      "js-util",
      "convert-case",
      "markdown-types",
      "frontmatter-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "chunkToStringRecursively",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "getChunkParagraphsRecursively",
        "fileName": "src/getChunkParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getImplicitId",
        "fileName": "src/getImplicitId.ts",
        "imports": [
          "slugify from convert-case"
        ]
      },
      {
        "name": "getMarkdownIntro",
        "fileName": "src/getMarkdownIntro.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "getMarkdownParseParagraphs",
        "fileName": "src/getMarkdownParseParagraphs.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "getMarkdownReferencePaths",
        "fileName": "src/getMarkdownReferencePaths.ts",
        "imports": []
      },
      {
        "name": "getMarkdownReferencesFromParagraph",
        "fileName": "src/getMarkdownReferencesFromParagraph.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "markdownParseToMarkdownStringFromContent",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "markdownParseToMarkdownString",
        "fileName": "src/markdownParseToMarkdownString.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "mdContentParseRecursively",
        "fileName": "src/mdContentParseRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "makeTest from make-test"
        ]
      },
      {
        "name": "mdToJsonParse",
        "fileName": "src/mdToJsonParse.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "parseFrontmatterMarkdownString",
        "fileName": "src/parseFrontmatterMarkdownString.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Frontmatter from matter-types",
          "mergeObjectsArray from js-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "parseMarkdownParagraph",
        "fileName": "src/parseMarkdownParagraph.ts",
        "imports": []
      },
      {
        "name": "parseMdToChunks",
        "fileName": "src/parseMdToChunks.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "makeTest from make-test"
        ]
      },
      {
        "name": "removeHeaderPrefix",
        "fileName": "src/removeHeaderPrefix.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "MarkdownChunk",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MarkdownCodeblock",
        "fileName": "src/MarkdownCodeblock.ts",
        "imports": []
      },
      {
        "name": "MarkdownParagraphChunk",
        "fileName": "src/MarkdownParagraphChunk.ts",
        "imports": []
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MarkdownParseConfig",
        "fileName": "src/types.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "MarkdownReference",
        "fileName": "src/MarkdownReference.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof chunkToStringRecursively>",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getChunkParagraphsRecursively>",
        "fileName": "src/getChunkParagraphsRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getImplicitId>",
        "fileName": "src/getImplicitId.ts",
        "imports": [
          "slugify from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownIntro>",
        "fileName": "src/getMarkdownIntro.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownParseParagraphs>",
        "fileName": "src/getMarkdownParseParagraphs.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownReferencePaths>",
        "fileName": "src/getMarkdownReferencePaths.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getMarkdownReferencesFromParagraph>",
        "fileName": "src/getMarkdownReferencesFromParagraph.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownParseToMarkdownString>",
        "fileName": "src/markdownParseToMarkdownString.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "makeTest from make-test",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownParseToMarkdownStringFromContent>",
        "fileName": "src/markdownParseToMarkdownStringFromContent.ts",
        "imports": [
          "frontmatterParseToString from frontmatter-util",
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof mdContentParseRecursively>",
        "fileName": "src/mdContentParseRecursively.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof mdToJsonParse>",
        "fileName": "src/mdToJsonParse.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parseFrontmatterMarkdownString>",
        "fileName": "src/parseFrontmatterMarkdownString.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Frontmatter from matter-types",
          "mergeObjectsArray from js-util",
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof parseMarkdownParagraph>",
        "fileName": "src/parseMarkdownParagraph.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof parseMdToChunks>",
        "fileName": "src/parseMdToChunks.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof removeHeaderPrefix>",
        "fileName": "src/removeHeaderPrefix.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/types.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-parse-js",
      "markdown-types",
      "model-types",
      "asset-type",
      "bundle-types",
      "js-util",
      "convert-case",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "matter-types",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "markdown-parsings",
    "totalInstancesCount": 107,
    "totalImportCount": 88,
    "totalDependencyCount": 21,
    "importDependencies": [
      "code-types",
      "find-all-dependency-operations",
      "markdown-types",
      "json-util",
      "markdown-parse-js",
      "bundle-types",
      "bundle-util",
      "js-util",
      "fs-util",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "recursive-types",
      "json-schema",
      "markdown-reader-functions",
      "log",
      "database",
      "schema-util",
      "filename-conventions",
      "convert-case"
    ],
    "packageJsonDependencies": [
      "get-path",
      "log",
      "database",
      "bundle-types",
      "js-util",
      "filename-conventions",
      "markdown-parse-js",
      "fs-util",
      "k-explore",
      "read-markdown-file",
      "convert-case",
      "code-types",
      "get-package-json",
      "read-json-file",
      "json-util",
      "bundle-util",
      "write-to-assets",
      "schema-util",
      "find-all-dependency-operations",
      "markdown-reader-functions",
      "fs-util-js",
      "nested-menu",
      "json-schema",
      "recursive-types",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addDependantCount",
        "fileName": "src/addDependantCount.ts",
        "imports": [
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "bundleFolderWithMarkdown",
        "fileName": "src/bundleFolderWithMarkdown.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Json from json-util",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "bundleToBookMarkdown",
        "fileName": "src/bundleToBookMarkdown.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getBundleSummary from bundle-util",
          "MarkdownParse from markdown-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "bundleToMarkdown",
        "fileName": "src/bundleToMarkdown.ts",
        "imports": []
      },
      {
        "name": "concatMarkdownFiles",
        "fileName": "src/concatMarkdownFiles.test.ts",
        "imports": [
          "fs from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "explore from k-explore",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "createMinimizedSectionMarkdown",
        "fileName": "src/createMinimisedSection.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "createMinimizedSection",
        "fileName": "src/createMinimisedSection.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "deployToVercel",
        "fileName": "src/expose/deployToVercel.ts",
        "imports": []
      },
      {
        "name": "emailMarkdownParse",
        "fileName": "src/expose/email.ts",
        "imports": []
      },
      {
        "name": "flattenNestedObject",
        "fileName": "src/flattenNestedObject.ts",
        "imports": [
          "NestedObject from recursive-types"
        ]
      },
      {
        "name": "generateStaticSite",
        "fileName": "src/expose/generateStaticSite.ts",
        "imports": []
      },
      {
        "name": "getJsonSchemaSummary",
        "fileName": "src/getJsonSchemaSummary.ts",
        "imports": [
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "getMarkdownContents",
        "fileName": "src/getMarkdownContents.ts",
        "imports": [
          "fs from fs-util",
          "makeRelative from fs-util-js",
          "getPublicMarkdownFilePaths from markdown-reader-functions"
        ]
      },
      {
        "name": "getMergedMarkdownOutlineUrl",
        "fileName": "src/getMergedMarkdownOutlineUrl.ts",
        "imports": [
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "getOperationSummary",
        "fileName": "src/getOperationSummary.ts",
        "imports": [
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "db from database",
          "noEmptyString from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "getOutline",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "getPublicMarkdownNestedPathObject",
        "fileName": "src/getPublicMarkdownNestedObject.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "getPublicMarkdownFilePaths from markdown-reader-functions",
          "removeExtensionsFromPath from markdown-reader-functions",
          "getFolderJs from fs-util-js",
          "NestedObject from recursive-types"
        ]
      },
      {
        "name": "getTitlesRecursively",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "getTypeDescriptorRecursive",
        "fileName": "src/getTypeDescriptorRecursive.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "getImplicitId from markdown-parse-js",
          "getProperties from schema-util",
          "getRefLink from schema-util",
          "getSchema from schema-util",
          "getSchemaItems from schema-util"
        ]
      },
      {
        "name": "isConventionFileStatement",
        "fileName": "src/isConventionFileStatement.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "hasSubExtension from filename-conventions",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "isUpperCase",
        "fileName": "src/tsFunctionToMarkdownString.ts",
        "imports": [
          "TsFunction from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "makeOutlineMarkdownString",
        "fileName": "src/makeOutlineMarkdownString.ts",
        "imports": []
      },
      {
        "name": "makePropertiesTable",
        "fileName": "src/util/makePropertiesTable.ts",
        "imports": [
          "SimplifiedSchemaProperty from code-types"
        ]
      },
      {
        "name": "markdownChunkToMarkdownStringRecursive",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "markdownChunksToMarkdownStringRecursive",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "markdownToSayable",
        "fileName": "src/parsing/markdownToSayable.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "mdToPdf",
        "fileName": "src/expose/pdf.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "mergeMarkdownParse",
        "fileName": "src/parsing/merge.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "humanCase from convert-case",
          "slugify from convert-case",
          "removeExtensionsFromPath from markdown-reader-functions",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "noNewlines",
        "fileName": "src/util/noNewlines.ts",
        "imports": []
      },
      {
        "name": "operationRadio",
        "fileName": "src/expose/radio.ts",
        "imports": []
      },
      {
        "name": "operationToMarkdown",
        "fileName": "src/operationToMarkdown.ts",
        "imports": [
          "notEmpty from js-util",
          "markdownParseToMarkdownString from markdown-parse-js",
          "mdToJsonParse from markdown-parse-js",
          "fs from fs-util",
          "path from fs-util",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "printNestedTitles",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "print",
        "fileName": "src/expose/print.ts",
        "imports": []
      },
      {
        "name": "projectToMarkdown",
        "fileName": "src/projectToMarkdown.ts",
        "imports": []
      },
      {
        "name": "propertyToTableRow",
        "fileName": "src/util/propertyToTableRow.ts",
        "imports": [
          "SimplifiedSchemaProperty from code-types"
        ]
      },
      {
        "name": "sayablesToMp3",
        "fileName": "src/expose/sayablesToMp3.ts",
        "imports": []
      },
      {
        "name": "selectRandomOperation",
        "fileName": "src/expose/radio.ts",
        "imports": []
      },
      {
        "name": "simplifiedSchemaToMarkdownString",
        "fileName": "src/simplifiedSchemaToMarkdownString.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "kebabCase from convert-case",
          "notEmpty from js-util",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "statementItemToMarkdown",
        "fileName": "src/statementItemToMarkdown.ts",
        "imports": []
      },
      {
        "name": "test",
        "fileName": "src/operationToMarkdown.test.ts",
        "imports": [
          "path from fs-util",
          "writeStringToFile from fs-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "tsFunctionToMarkdownString",
        "fileName": "src/tsFunctionToMarkdownString.ts",
        "imports": [
          "TsFunction from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "tsInterfaceToMarkdownString",
        "fileName": "src/tsInterfaceToMarkdownString.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "tsVariableToMarkdownString",
        "fileName": "src/tsVariableToMarkdownString.ts",
        "imports": [
          "TsVariable from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "upMarkdownChunkLevelRecursively",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "BundleConfig",
        "fileName": "src/bundleToBookMarkdown.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getBundleSummary from bundle-util",
          "MarkdownParse from markdown-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "DependantCountObject",
        "fileName": "src/DependantCountObject.ts",
        "imports": []
      },
      {
        "name": "FolderSummary",
        "fileName": "src/OperationSummary.ts",
        "imports": [
          "FolderSummary from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "Json",
        "fileName": "src/bundleFolderWithMarkdown.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Json from json-util",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "JsonPart",
        "fileName": "src/bundleFolderWithMarkdown.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Json from json-util",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "JSONSchema7",
        "fileName": "src/getTypeDescriptorRecursive.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "getImplicitId from markdown-parse-js",
          "getProperties from schema-util",
          "getRefLink from schema-util",
          "getSchema from schema-util",
          "getSchemaItems from schema-util"
        ]
      },
      {
        "name": "MarkdownChunk",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MergedMarkdownOutlineUrl",
        "fileName": "src/parsing/merge.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "humanCase from convert-case",
          "slugify from convert-case",
          "removeExtensionsFromPath from markdown-reader-functions",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof addDependantCount>",
        "fileName": "src/addDependantCount.ts",
        "imports": [
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof bundleFolderWithMarkdown>",
        "fileName": "src/bundleFolderWithMarkdown.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "Json from json-util",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof bundleToBookMarkdown>",
        "fileName": "src/bundleToBookMarkdown.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getBundleSummary from bundle-util",
          "MarkdownParse from markdown-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof bundleToMarkdown>",
        "fileName": "src/bundleToMarkdown.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof concatMarkdownFiles>",
        "fileName": "src/concatMarkdownFiles.test.ts",
        "imports": [
          "fs from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "explore from k-explore",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof createMinimizedSection>",
        "fileName": "src/createMinimisedSection.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof createMinimizedSectionMarkdown>",
        "fileName": "src/createMinimisedSection.ts",
        "imports": [
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof deployToVercel>",
        "fileName": "src/expose/deployToVercel.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof emailMarkdownParse>",
        "fileName": "src/expose/email.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateStaticSite>",
        "fileName": "src/expose/generateStaticSite.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getJsonSchemaSummary>",
        "fileName": "src/getJsonSchemaSummary.ts",
        "imports": [
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownContents>",
        "fileName": "src/getMarkdownContents.ts",
        "imports": [
          "fs from fs-util",
          "makeRelative from fs-util-js",
          "getPublicMarkdownFilePaths from markdown-reader-functions"
        ]
      },
      {
        "name": "NamedParameters<typeof getMergedMarkdownOutlineUrl>",
        "fileName": "src/getMergedMarkdownOutlineUrl.ts",
        "imports": [
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationSummary>",
        "fileName": "src/getOperationSummary.ts",
        "imports": [
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "db from database",
          "noEmptyString from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getOutline>",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicMarkdownNestedPathObject>",
        "fileName": "src/getPublicMarkdownNestedObject.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "getPublicMarkdownFilePaths from markdown-reader-functions",
          "removeExtensionsFromPath from markdown-reader-functions",
          "getFolderJs from fs-util-js",
          "NestedObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTitlesRecursively>",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTypeDescriptorRecursive>",
        "fileName": "src/getTypeDescriptorRecursive.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "getImplicitId from markdown-parse-js",
          "getProperties from schema-util",
          "getRefLink from schema-util",
          "getSchema from schema-util",
          "getSchemaItems from schema-util"
        ]
      },
      {
        "name": "NamedParameters<typeof isConventionFileStatement>",
        "fileName": "src/isConventionFileStatement.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "hasSubExtension from filename-conventions",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof isUpperCase>",
        "fileName": "src/tsFunctionToMarkdownString.ts",
        "imports": [
          "TsFunction from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof makeOutlineMarkdownString>",
        "fileName": "src/makeOutlineMarkdownString.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof makePropertiesTable>",
        "fileName": "src/util/makePropertiesTable.ts",
        "imports": [
          "SimplifiedSchemaProperty from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownChunksToMarkdownStringRecursive>",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownChunkToMarkdownStringRecursive>",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownToSayable>",
        "fileName": "src/parsing/markdownToSayable.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof mdToPdf>",
        "fileName": "src/expose/pdf.ts",
        "imports": [
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof mergeMarkdownParse>",
        "fileName": "src/parsing/merge.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "humanCase from convert-case",
          "slugify from convert-case",
          "removeExtensionsFromPath from markdown-reader-functions",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof noNewlines>",
        "fileName": "src/util/noNewlines.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof operationRadio>",
        "fileName": "src/expose/radio.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof operationToMarkdown>",
        "fileName": "src/operationToMarkdown.ts",
        "imports": [
          "notEmpty from js-util",
          "markdownParseToMarkdownString from markdown-parse-js",
          "mdToJsonParse from markdown-parse-js",
          "fs from fs-util",
          "path from fs-util",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof print>",
        "fileName": "src/expose/print.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof printNestedTitles>",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof projectToMarkdown>",
        "fileName": "src/projectToMarkdown.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof propertyToTableRow>",
        "fileName": "src/util/propertyToTableRow.ts",
        "imports": [
          "SimplifiedSchemaProperty from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof sayablesToMp3>",
        "fileName": "src/expose/sayablesToMp3.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof selectRandomOperation>",
        "fileName": "src/expose/radio.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof simplifiedSchemaToMarkdownString>",
        "fileName": "src/simplifiedSchemaToMarkdownString.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "kebabCase from convert-case",
          "notEmpty from js-util",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof statementItemToMarkdown>",
        "fileName": "src/statementItemToMarkdown.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/operationToMarkdown.test.ts",
        "imports": [
          "path from fs-util",
          "writeStringToFile from fs-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof tsFunctionToMarkdownString>",
        "fileName": "src/tsFunctionToMarkdownString.ts",
        "imports": [
          "TsFunction from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof tsInterfaceToMarkdownString>",
        "fileName": "src/tsInterfaceToMarkdownString.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof tsVariableToMarkdownString>",
        "fileName": "src/tsVariableToMarkdownString.ts",
        "imports": [
          "TsVariable from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof upMarkdownChunkLevelRecursively>",
        "fileName": "src/parsing/parsing.ts",
        "imports": [
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "NestedTitle",
        "fileName": "src/parsing/outline.ts",
        "imports": [
          "MarkdownChunk from markdown-types",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "OperationClassification",
        "fileName": "src/OperationSummary.ts",
        "imports": [
          "FolderSummary from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "OperationSummary",
        "fileName": "src/OperationSummary.ts",
        "imports": [
          "FolderSummary from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "Sayable",
        "fileName": "src/expose/sayablesToMp3.ts",
        "imports": []
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/simplifiedSchemaToMarkdownString.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "kebabCase from convert-case",
          "notEmpty from js-util",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "SimplifiedSchemaProperty",
        "fileName": "src/util/propertyToTableRow.ts",
        "imports": [
          "SimplifiedSchemaProperty from code-types"
        ]
      },
      {
        "name": "StatementItem",
        "fileName": "src/StatementItem.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/tsFunctionToMarkdownString.ts",
        "imports": [
          "TsFunction from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "TsImport",
        "fileName": "src/addDependantCount.ts",
        "imports": [
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/tsInterfaceToMarkdownString.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "TsVariable",
        "fileName": "src/tsVariableToMarkdownString.ts",
        "imports": [
          "TsVariable from code-types",
          "notEmpty from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-parsings",
      "code-types",
      "model-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "matter-types",
      "find-all-dependency-operations",
      "one-by-one",
      "all",
      "rebuild-operation",
      "read-json-file",
      "try-parse-json",
      "fs-orm",
      "frontmatter-util",
      "asset-type",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "sdk-operations",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "make-test",
      "markdown-types",
      "json-util",
      "markdown-parse-js",
      "bundle-types",
      "bundle-util",
      "db-util",
      "js-util",
      "fs-util",
      "graceful-fs",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "recursive-types",
      "json-schema",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "log",
      "database",
      "schema-util",
      "filename-conventions",
      "convert-case"
    ]
  },
  {
    "operationName": "marked-util",
    "totalInstancesCount": 10,
    "totalImportCount": 10,
    "totalDependencyCount": 4,
    "importDependencies": [
      "js-util",
      "markdown-types",
      "asset-functions-js",
      "marked"
    ],
    "packageJsonDependencies": [
      "js-util",
      "code-types",
      "asset-functions-js",
      "marked",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findCodespans",
        "fileName": "src/findCodespans.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "findEmbedsTest",
        "fileName": "src/findEmbeds.test.ts",
        "imports": []
      },
      {
        "name": "findEmbeds",
        "fileName": "src/findEmbeds.ts",
        "imports": [
          "notEmpty from js-util",
          "MarkdownEmbed from markdown-types",
          "getTypeFromUrlOrPath from asset-functions-js"
        ]
      },
      {
        "name": "findLinks",
        "fileName": "src/findLinks.ts",
        "imports": [
          "notEmpty from js-util",
          "MarkdownLink from markdown-types",
          "getTypeFromUrlOrPath from asset-functions-js"
        ]
      },
      {
        "name": "flattenMarkdownString",
        "fileName": "src/flattenMarkdownString.ts",
        "imports": [
          "marked from marked",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "flattenMarkedTokenRecursive",
        "fileName": "src/flattenMarkedTokenRecursive.ts",
        "imports": [
          "marked from marked"
        ]
      },
      {
        "name": "NamedParameters<typeof findCodespans>",
        "fileName": "src/findCodespans.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findEmbeds>",
        "fileName": "src/findEmbeds.ts",
        "imports": [
          "notEmpty from js-util",
          "MarkdownEmbed from markdown-types",
          "getTypeFromUrlOrPath from asset-functions-js"
        ]
      },
      {
        "name": "NamedParameters<typeof findEmbedsTest>",
        "fileName": "src/findEmbeds.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findLinks>",
        "fileName": "src/findLinks.ts",
        "imports": [
          "notEmpty from js-util",
          "MarkdownLink from markdown-types",
          "getTypeFromUrlOrPath from asset-functions-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "marked-util",
      "js-util",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "asset-functions-js",
      "name-conventions",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked"
    ]
  },
  {
    "operationName": "pdf-to-md1",
    "totalInstancesCount": 4,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "fs-util"
    ],
    "packageJsonDependencies": [
      "pdf-parse"
    ],
    "instancesAndTheirImports": [
      {
        "name": "convertPdfToMd",
        "fileName": "src/convertPdfToMd.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "main",
        "fileName": "src/convertPdfToMd.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof convertPdfToMd>",
        "fileName": "src/convertPdfToMd.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/convertPdfToMd.test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "pdf-to-md1",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions"
    ]
  },
  {
    "operationName": "short-markdown-parser-js",
    "totalInstancesCount": 7,
    "totalImportCount": 8,
    "totalDependencyCount": 6,
    "importDependencies": [
      "fs-util-js",
      "js-util",
      "marked-util",
      "short-markdown-types",
      "key-value-markdown-js",
      "markdown-types"
    ],
    "packageJsonDependencies": [
      "fs-util-js",
      "js-util",
      "marked-util",
      "short-markdown-types",
      "key-value-markdown-js",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findAudioWithViewsArray",
        "fileName": "src/findAudioWithViewsArray.ts",
        "imports": [
          "isPathRelative from fs-util-js",
          "notEmpty from js-util",
          "findEmbeds from marked-util",
          "AudioWithViews from short-markdown-types",
          "ViewEmbed from short-markdown-types"
        ]
      },
      {
        "name": "markdownParseToShortMarkdown",
        "fileName": "src/markdownParseToShortMarkdown.ts",
        "imports": [
          "flattenMarkdownChunks from key-value-markdown-js",
          "MarkdownParse from markdown-types",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "shortMarkdownToMarkdownParse",
        "fileName": "src/markdownParseToShortMarkdown.ts",
        "imports": [
          "flattenMarkdownChunks from key-value-markdown-js",
          "MarkdownParse from markdown-types",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/markdownParseToShortMarkdown.ts",
        "imports": [
          "flattenMarkdownChunks from key-value-markdown-js",
          "MarkdownParse from markdown-types",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof findAudioWithViewsArray>",
        "fileName": "src/findAudioWithViewsArray.ts",
        "imports": [
          "isPathRelative from fs-util-js",
          "notEmpty from js-util",
          "findEmbeds from marked-util",
          "AudioWithViews from short-markdown-types",
          "ViewEmbed from short-markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownParseToShortMarkdown>",
        "fileName": "src/markdownParseToShortMarkdown.ts",
        "imports": [
          "flattenMarkdownChunks from key-value-markdown-js",
          "MarkdownParse from markdown-types",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof shortMarkdownToMarkdownParse>",
        "fileName": "src/markdownParseToShortMarkdown.ts",
        "imports": [
          "flattenMarkdownChunks from key-value-markdown-js",
          "MarkdownParse from markdown-types",
          "ShortMarkdown from short-markdown-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "short-markdown-parser-js",
      "fs-util-js",
      "js-util",
      "marked-util",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize",
      "asset-type",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "model-types",
      "marked",
      "short-markdown-types",
      "key-value-markdown-js",
      "markdown-parse-js",
      "frontmatter-util",
      "markdown-types",
      "bundle-types"
    ]
  },
  {
    "operationName": "short-markdown-parser-node",
    "totalInstancesCount": 23,
    "totalImportCount": 23,
    "totalDependencyCount": 12,
    "importDependencies": [
      "fluent-ffmpeg",
      "short-markdown-types",
      "say",
      "fs-util",
      "get-path",
      "fs-util-js",
      "read-markdown-file",
      "short-markdown-parser-js",
      "read-json-file",
      "js-util",
      "try-parse-json",
      "one-by-one"
    ],
    "packageJsonDependencies": [
      "get-mp3-duration",
      "short-markdown-types",
      "say",
      "fs-util",
      "get-path",
      "read-markdown-file",
      "short-markdown-parser-js",
      "fluent-ffmpeg",
      "read-json-file",
      "js-util",
      "try-parse-json",
      "one-by-one",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "augmentShortMarkdown",
        "fileName": "src/augmentShortMarkdown.ts",
        "imports": [
          "ffprobe from fluent-ffmpeg",
          "AudioWithViews from short-markdown-types",
          "ShortMarkdown from short-markdown-types",
          "textToMp3 from say",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "fetchVoicesTest",
        "fileName": "src/fetchVoices.test.ts",
        "imports": []
      },
      {
        "name": "fetchVoices",
        "fileName": "src/fetchVoices.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "generateAugmentedShortMarkdownTest",
        "fileName": "src/generateAugmentedShortMarkdown.test.ts",
        "imports": []
      },
      {
        "name": "generateAugmentedShortMarkdown",
        "fileName": "src/generateAugmentedShortMarkdown.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "readMarkdownFile from read-markdown-file",
          "markdownParseToShortMarkdown from short-markdown-parser-js"
        ]
      },
      {
        "name": "getOrGenerateShortMarkdown",
        "fileName": "src/getOrGenerateShortMarkdown.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "parseDialogue",
        "fileName": "src/parseDialogue.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "uberduckGetPath",
        "fileName": "src/uberduckGetPath.ts",
        "imports": [
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "uberduckSpeak",
        "fileName": "src/uberduckSpeak.ts",
        "imports": [
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "voiceCloneDialogue",
        "fileName": "src/voiceCloneDialogue.ts",
        "imports": [
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "AudioWithViews",
        "fileName": "src/augmentShortMarkdown.ts",
        "imports": [
          "ffprobe from fluent-ffmpeg",
          "AudioWithViews from short-markdown-types",
          "ShortMarkdown from short-markdown-types",
          "textToMp3 from say",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "DialogueSentence",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof augmentShortMarkdown>",
        "fileName": "src/augmentShortMarkdown.ts",
        "imports": [
          "ffprobe from fluent-ffmpeg",
          "AudioWithViews from short-markdown-types",
          "ShortMarkdown from short-markdown-types",
          "textToMp3 from say",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof fetchVoices>",
        "fileName": "src/fetchVoices.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof fetchVoicesTest>",
        "fileName": "src/fetchVoices.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateAugmentedShortMarkdown>",
        "fileName": "src/generateAugmentedShortMarkdown.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "readMarkdownFile from read-markdown-file",
          "markdownParseToShortMarkdown from short-markdown-parser-js"
        ]
      },
      {
        "name": "NamedParameters<typeof generateAugmentedShortMarkdownTest>",
        "fileName": "src/generateAugmentedShortMarkdown.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getOrGenerateShortMarkdown>",
        "fileName": "src/getOrGenerateShortMarkdown.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parseDialogue>",
        "fileName": "src/parseDialogue.ts",
        "imports": [
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof uberduckGetPath>",
        "fileName": "src/uberduckGetPath.ts",
        "imports": [
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof uberduckSpeak>",
        "fileName": "src/uberduckSpeak.ts",
        "imports": [
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof voiceCloneDialogue>",
        "fileName": "src/voiceCloneDialogue.ts",
        "imports": [
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "ShortMarkdown",
        "fileName": "src/augmentShortMarkdown.ts",
        "imports": [
          "ffprobe from fluent-ffmpeg",
          "AudioWithViews from short-markdown-types",
          "ShortMarkdown from short-markdown-types",
          "textToMp3 from say",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "short-markdown-parser-node",
      "fluent-ffmpeg",
      "short-markdown-types",
      "say",
      "make-test",
      "ffmpeg-util",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "write-to-assets",
      "log",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "get-path",
      "sdk-operations",
      "fs-util-js",
      "read-markdown-file",
      "short-markdown-parser-js",
      "key-value-markdown-js",
      "read-json-file",
      "js-util",
      "try-parse-json",
      "one-by-one"
    ]
  },
  {
    "operationName": "short-markdown-studio-web",
    "totalInstancesCount": 6,
    "totalImportCount": 22,
    "totalDependencyCount": 19,
    "importDependencies": [
      "layout",
      "webpage-types",
      "recursive-util",
      "fs-util",
      "get-path",
      "fs-util-js",
      "explore-project",
      "next",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification",
      "authentication",
      "webpage-types",
      "recursive-util",
      "fs-util",
      "get-path",
      "fs-util-js",
      "explore-project",
      "file-tabs"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getShortMarkdownPaths",
        "fileName": "src/props.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "getSubExtension from fs-util-js",
          "getProjectRelativePaths from explore-project",
          "GetStaticProps from next"
        ]
      },
      {
        "name": "getShortMarkdownStaticProps",
        "fileName": "src/props.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "getSubExtension from fs-util-js",
          "getProjectRelativePaths from explore-project",
          "GetStaticProps from next"
        ]
      },
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "FileWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "FileWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "short-markdown-studio-web",
      "layout",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "menu",
      "fancy-loader",
      "file-search",
      "hotkeys",
      "augmented-word-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "fs-util",
      "graceful-fs",
      "get-path",
      "fs-util-js",
      "explore-project",
      "bundle-util",
      "db-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "next",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "next-paths",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication"
    ]
  },
  {
    "operationName": "short-markdown-types",
    "totalInstancesCount": 5,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "AudioTrackItem",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "AudioWithViews",
        "fileName": "src/AudioWithViews.ts",
        "imports": []
      },
      {
        "name": "ShortMarkdown",
        "fileName": "src/ShortMarkdown.ts",
        "imports": []
      },
      {
        "name": "ShortMarkdownSlide",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "ViewEmbed",
        "fileName": "src/AudioWithViews.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "short-markdown-types"
    ]
  },
  {
    "operationName": "parse-primitive",
    "totalInstancesCount": 10,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "code-types"
    ],
    "packageJsonDependencies": [
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "parsePrimitiveArray",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "parsePrimitiveBoolean",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "parsePrimitiveString",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "parsePrimitive",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parsePrimitive>",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parsePrimitiveArray>",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parsePrimitiveBoolean>",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parsePrimitiveString>",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "PrimitiveResult",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/parsePrimitive.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "parse-primitive",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types"
    ]
  },
  {
    "operationName": "read-csv-file",
    "totalInstancesCount": 5,
    "totalImportCount": 8,
    "totalDependencyCount": 4,
    "importDependencies": [
      "fs-util",
      "make-test",
      "csv-util",
      "csv-parse/sync"
    ],
    "packageJsonDependencies": [
      "csv-parse",
      "csv-util",
      "fs-util",
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "readCsvFileSync",
        "fileName": "src/readCsvFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "path from fs-util",
          "makeTest from make-test",
          "CsvItemType from csv-util",
          "parse from csv-parse/sync"
        ]
      },
      {
        "name": "readCsvFile",
        "fileName": "src/readCsvFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "path from fs-util",
          "makeTest from make-test",
          "CsvItemType from csv-util",
          "parse from csv-parse/sync"
        ]
      },
      {
        "name": "NamedParameters<typeof readCsvFile>",
        "fileName": "src/readCsvFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "path from fs-util",
          "makeTest from make-test",
          "CsvItemType from csv-util",
          "parse from csv-parse/sync"
        ]
      },
      {
        "name": "NamedParameters<typeof readCsvFileSync>",
        "fileName": "src/readCsvFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "path from fs-util",
          "makeTest from make-test",
          "CsvItemType from csv-util",
          "parse from csv-parse/sync"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/readCsvFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "path from fs-util",
          "makeTest from make-test",
          "CsvItemType from csv-util",
          "parse from csv-parse/sync"
        ]
      }
    ],
    "cumulativeDependencies": [
      "read-csv-file",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "make-test",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "csv-parse",
      "csv-parse/sync"
    ]
  },
  {
    "operationName": "read-json-file",
    "totalInstancesCount": 7,
    "totalImportCount": 7,
    "totalDependencyCount": 3,
    "importDependencies": [
      "fs-util",
      "try-parse-json",
      "get-path"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "try-parse-json",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "readJsonFileSync",
        "fileName": "src/readJsonFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "readJsonFile",
        "fileName": "src/readJsonFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "readProjectRelativeJsonFile",
        "fileName": "src/readProjectRelativeJsonFile.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof readJsonFile>",
        "fileName": "src/readJsonFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof readJsonFileSync>",
        "fileName": "src/readJsonFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof readProjectRelativeJsonFile>",
        "fileName": "src/readProjectRelativeJsonFile.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/readJsonFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "Path from fs-util",
          "canReadSync from fs-util",
          "tryParseJson from try-parse-json"
        ]
      }
    ],
    "cumulativeDependencies": [
      "read-json-file",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "try-parse-json",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "read-kvmd-file",
    "totalInstancesCount": 8,
    "totalImportCount": 15,
    "totalDependencyCount": 4,
    "importDependencies": [
      "model-types",
      "fs-util",
      "key-value-markdown-js",
      "read-json-file"
    ],
    "packageJsonDependencies": [
      "model-types",
      "fs-util",
      "key-value-markdown-js",
      "read-json-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "readKvmdFile",
        "fileName": "src/readKvmdFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownParse from model-types",
          "markdownStringToKvmdParse from key-value-markdown-js"
        ]
      },
      {
        "name": "test2",
        "fileName": "src/kvmdParseToMarkdownString.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "path from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "test",
        "fileName": "src/readKvmdFile.test.ts",
        "imports": [
          "path from fs-util",
          "writeJsonToFile from fs-util"
        ]
      },
      {
        "name": "DbFileLocation",
        "fileName": "src/readKvmdFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownParse from model-types",
          "markdownStringToKvmdParse from key-value-markdown-js"
        ]
      },
      {
        "name": "NamedParameters<typeof readKvmdFile>",
        "fileName": "src/readKvmdFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownParse from model-types",
          "markdownStringToKvmdParse from key-value-markdown-js"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/readKvmdFile.test.ts",
        "imports": [
          "path from fs-util",
          "writeJsonToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof test2>",
        "fileName": "src/kvmdParseToMarkdownString.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "path from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/readKvmdFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "ModelLocation from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownParse from model-types",
          "markdownStringToKvmdParse from key-value-markdown-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "read-kvmd-file",
      "model-types",
      "matter-types",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "key-value-markdown-js",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "make-test",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "convert-case",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations"
    ]
  },
  {
    "operationName": "read-markdown-file",
    "totalInstancesCount": 6,
    "totalImportCount": 24,
    "totalDependencyCount": 10,
    "importDependencies": [
      "fs-util",
      "markdown-types",
      "markdown-parse-js",
      "sdk-operations",
      "js-util",
      "get-path",
      "fs-util-js",
      "model-types",
      "frontmatter-util",
      "code-types"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "code-types",
      "markdown-parse-js",
      "get-path",
      "js-util",
      "model-types",
      "markdown-types",
      "frontmatter-util",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "readMarkdownFileToModel",
        "fileName": "src/readMarkdownFileToModel.ts",
        "imports": [
          "ExtendedMarkdownProperties from markdown-types",
          "MarkdownCallToAction from markdown-types",
          "PostableProperties from markdown-types",
          "WebMarkdownFile from markdown-types",
          "WebMarkdownProperties from markdown-types",
          "operations from sdk-operations",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "ModelLocation from model-types",
          "frontmatterToObject from frontmatter-util",
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "readMarkdownFile",
        "fileName": "src/readMarkdownFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "MarkdownCallToAction",
        "fileName": "src/readMarkdownFileToModel.ts",
        "imports": [
          "ExtendedMarkdownProperties from markdown-types",
          "MarkdownCallToAction from markdown-types",
          "PostableProperties from markdown-types",
          "WebMarkdownFile from markdown-types",
          "WebMarkdownProperties from markdown-types",
          "operations from sdk-operations",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "ModelLocation from model-types",
          "frontmatterToObject from frontmatter-util",
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof readMarkdownFile>",
        "fileName": "src/readMarkdownFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof readMarkdownFileToModel>",
        "fileName": "src/readMarkdownFileToModel.ts",
        "imports": [
          "ExtendedMarkdownProperties from markdown-types",
          "MarkdownCallToAction from markdown-types",
          "PostableProperties from markdown-types",
          "WebMarkdownFile from markdown-types",
          "WebMarkdownProperties from markdown-types",
          "operations from sdk-operations",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "notEmpty from js-util",
          "omitUndefinedValues from js-util",
          "sum from js-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "ModelLocation from model-types",
          "frontmatterToObject from frontmatter-util",
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/readMarkdownFile.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "MarkdownParse from markdown-types",
          "mdToJsonParse from markdown-parse-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "read-markdown-file",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "markdown-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "markdown-parse-js",
      "sdk-operations",
      "js-util",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "fs-util-js",
      "model-types",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "read-typescript-file",
    "totalInstancesCount": 11,
    "totalImportCount": 15,
    "totalDependencyCount": 7,
    "importDependencies": [
      "fs-util",
      "code-types",
      "database",
      "js-util",
      "get-path",
      "k-explore",
      "find-all-dependency-operations"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "code-types",
      "database",
      "js-util",
      "get-path",
      "k-explore",
      "find-all-dependency-operations"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getFolderTypescriptIndex",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "getOperationIndexModel",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "readTypescriptFile",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "uniqueNames",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "CommentType",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "IndexFilter",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderTypescriptIndex>",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationIndexModel>",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof readTypescriptFile>",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof uniqueNames>",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      },
      {
        "name": "Path",
        "fileName": "src/readTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Path from fs-util",
          "CommentType from code-types",
          "TypescriptIndex from code-types",
          "IndexModels from code-types",
          "db from database",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getProjectRoot from get-path",
          "exploreOperationFolders from k-explore",
          "findDependants from find-all-dependency-operations"
        ]
      }
    ],
    "cumulativeDependencies": [
      "read-typescript-file",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "sdk-operations",
      "js-util",
      "get-path",
      "k-explore",
      "write-to-assets",
      "find-all-dependency-operations",
      "one-by-one",
      "all",
      "markdown-parsings",
      "json-util",
      "bundle-util",
      "db-util",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key"
    ]
  },
  {
    "operationName": "try-parse-json",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "tryParseJson",
        "fileName": "src/tryParseJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof tryParseJson>",
        "fileName": "src/tryParseJson.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "try-parse-json"
    ]
  },
  {
    "operationName": "rest-util",
    "totalInstancesCount": 11,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "js-util"
    ],
    "packageJsonDependencies": [
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "bodyFromQueryString",
        "fileName": "src/bodyFromQueryString.ts",
        "imports": [
          "makeArray from js-util"
        ]
      },
      {
        "name": "getFirstQueryStrings",
        "fileName": "src/getFirstQueryStrings.ts",
        "imports": []
      },
      {
        "name": "getQueryPart",
        "fileName": "src/url-util.ts",
        "imports": []
      },
      {
        "name": "isValidEntry",
        "fileName": "src/isValidEntry.ts",
        "imports": []
      },
      {
        "name": "toQueryString",
        "fileName": "src/toQueryString.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof bodyFromQueryString>",
        "fileName": "src/bodyFromQueryString.ts",
        "imports": [
          "makeArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFirstQueryStrings>",
        "fileName": "src/getFirstQueryStrings.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getQueryPart>",
        "fileName": "src/url-util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isValidEntry>",
        "fileName": "src/isValidEntry.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof toQueryString>",
        "fileName": "src/toQueryString.ts",
        "imports": []
      },
      {
        "name": "QueryableObject",
        "fileName": "src/QueryableObject.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "rest-util",
      "js-util"
    ]
  },
  {
    "operationName": "database",
    "totalInstancesCount": 52,
    "totalImportCount": 32,
    "totalDependencyCount": 7,
    "importDependencies": [
      "sdk-db",
      "fs-orm",
      "model-types",
      "code-types",
      "measure-performance",
      "log",
      "js-util"
    ],
    "packageJsonDependencies": [
      "fs-orm",
      "js-util",
      "model-types",
      "code-types",
      "measure-performance",
      "log"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateCsvInstance",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "generateJsonSingleInstance",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "generateKvmdInstance",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "generateMarkdownInstance",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "generateSlugTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "getCli",
        "fileName": "src/cli/test-get.cli.ts",
        "imports": [
          "getObjectFromParamsString from js-util",
          "getSubsetFromObject from js-util"
        ]
      },
      {
        "name": "getMergedQueryConfig",
        "fileName": "src/db.ts",
        "imports": [
          "DbModels from sdk-db",
          "modelQueryConfig from sdk-db",
          "createDb from fs-orm",
          "CustomQueryConfig from fs-orm",
          "DbConfig from fs-orm",
          "mergeConfigs from fs-orm"
        ]
      },
      {
        "name": "getRanomAge",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "get",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "main",
        "fileName": "src/tsconfig.test.ts",
        "imports": [
          "TsConfig from code-types"
        ]
      },
      {
        "name": "migration",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "randomName",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "removeCli",
        "fileName": "src/cli/test-remove.cli.ts",
        "imports": []
      },
      {
        "name": "runModelEndToEndTest",
        "fileName": "src/test-e2e.ts",
        "imports": [
          "AnyModelType from model-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "set",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "testOperationModels",
        "fileName": "src/test-operation-models.ts",
        "imports": []
      },
      {
        "name": "testPerformance",
        "fileName": "src/testPerformance.test.ts",
        "imports": [
          "Include from fs-orm",
          "PerformanceItem from measure-performance",
          "cleanupTimer from measure-performance",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance",
          "log from log"
        ]
      },
      {
        "name": "test",
        "fileName": "src/updateSingleItem.test.ts",
        "imports": []
      },
      {
        "name": "updateCli",
        "fileName": "src/cli/test-update.cli.ts",
        "imports": []
      },
      {
        "name": "upsertCli",
        "fileName": "src/cli/test-upsert.cli.ts",
        "imports": [
          "getObjectFromParamsString from js-util"
        ]
      },
      {
        "name": "upsert",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "CsvModelType",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "CsvTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "DefaultTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "KvmdTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "MarkdownTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof generateCsvInstance>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof generateJsonSingleInstance>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof generateKvmdInstance>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof generateMarkdownInstance>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSlugTestModel>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof get>",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCli>",
        "fileName": "src/cli/test-get.cli.ts",
        "imports": [
          "getObjectFromParamsString from js-util",
          "getSubsetFromObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getRanomAge>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/tsconfig.test.ts",
        "imports": [
          "TsConfig from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof migration>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof randomName>",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "NamedParameters<typeof removeCli>",
        "fileName": "src/cli/test-remove.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof set>",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/updateSingleItem.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof testOperationModels>",
        "fileName": "src/test-operation-models.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof testPerformance>",
        "fileName": "src/testPerformance.test.ts",
        "imports": [
          "Include from fs-orm",
          "PerformanceItem from measure-performance",
          "cleanupTimer from measure-performance",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof updateCli>",
        "fileName": "src/cli/test-update.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof upsert>",
        "fileName": "src/setNestedFiles.test.ts",
        "imports": [
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof upsertCli>",
        "fileName": "src/cli/test-upsert.cli.ts",
        "imports": [
          "getObjectFromParamsString from js-util"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "SlugTestModel",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "TestModels",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      },
      {
        "name": "TsConfig",
        "fileName": "src/test-db.ts",
        "imports": [
          "TsConfig from code-types",
          "KeyValueMarkdownModelType from model-types",
          "SlugModelType from model-types",
          "CsvModelType from model-types",
          "MarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "generateId from model-types",
          "Creation from model-types",
          "createDb from fs-orm",
          "DbConfig from fs-orm"
        ]
      }
    ],
    "cumulativeDependencies": [
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "db-recipes",
    "totalInstancesCount": 34,
    "totalImportCount": 68,
    "totalDependencyCount": 22,
    "importDependencies": [
      "bundle-types",
      "database",
      "fs-orm",
      "sdk-db",
      "js-util",
      "code-types",
      "convert-case",
      "read-json-file",
      "sdk-interface-paths",
      "bundle-util",
      "db-util",
      "fs-util",
      "get-path",
      "k-explore",
      "sdk-operations",
      "webpage-types",
      "recursive-util",
      "model-types",
      "name-conventions",
      "asset-functions-node",
      "sdk-api",
      "log"
    ],
    "packageJsonDependencies": [
      "ajv",
      "asset-functions-node",
      "bundle-types",
      "bundle-util",
      "code-types",
      "convert-case",
      "database",
      "db-util",
      "fs-orm",
      "fs-util",
      "get-path",
      "js-util",
      "k-explore",
      "model-types",
      "name-conventions",
      "nested-menu",
      "read-json-file",
      "recursive-types",
      "recursive-util",
      "webpage-types",
      "log"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cacheLookup",
        "fileName": "src/cacheLookup.ts",
        "imports": []
      },
      {
        "name": "calculateOperatingSystemBundle",
        "fileName": "src/calculateOperatingSystemBundle.ts",
        "imports": [
          "BundleConfig from bundle-types"
        ]
      },
      {
        "name": "deleteDbModel",
        "fileName": "src/deleteDbModel.ts",
        "imports": [
          "db from database",
          "DbQueryResult from fs-orm",
          "DbModelEnum from sdk-db"
        ]
      },
      {
        "name": "getCachedFunctions",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "getDatabaseMenu",
        "fileName": "src/getDatabaseMenu.ts",
        "imports": [
          "notEmpty from js-util",
          "ModelInfo from code-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "getDbModelMetadata",
        "fileName": "src/getDbModelMetadata.ts",
        "imports": [
          "Dataset from code-types",
          "TsInterface from code-types",
          "db from database",
          "getMergedQueryConfig from database",
          "getDatabaseFiles from fs-orm",
          "MergedQueryConfig from fs-orm",
          "readProjectRelativeJsonFile from read-json-file",
          "DbModelEnum from sdk-db",
          "dbModelKeys from sdk-db",
          "sdkInterfacePaths from sdk-interface-paths"
        ]
      },
      {
        "name": "getDbModelNames",
        "fileName": "src/getDbModelNames.ts",
        "imports": [
          "getDbModelsForBundle from bundle-util",
          "TsInterface from code-types",
          "db from database",
          "getDbModelsFromOperations from db-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "exploreOperationFolders from k-explore",
          "dbModelKeys from sdk-db",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "getDbModel",
        "fileName": "src/getDbModel.ts",
        "imports": [
          "DatasetConfig from code-types",
          "DatasetItem from code-types",
          "db from database",
          "getSubsetFromObject from js-util",
          "hasAllLetters from js-util",
          "removeOptionalKeysFromObject from js-util",
          "removeOptionalKeysFromObjectStrings from js-util",
          "DbModelEnum from sdk-db",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "getFunctionIndex",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "getNestedDatabaseMenu",
        "fileName": "src/getNestedDatabaseMenu.ts",
        "imports": [
          "db from database",
          "operations from sdk-operations",
          "getFolder from fs-util",
          "destructureOptionalObject from js-util",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "getReferencableModelData",
        "fileName": "src/getReferencableModelData.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "hasDbRecipes",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "main",
        "fileName": "src/getDatabaseMenu.test.ts",
        "imports": []
      },
      {
        "name": "makeSrcRelativeFolder",
        "fileName": "src/makeSrcRelativeFolder.ts",
        "imports": []
      },
      {
        "name": "testFn",
        "fileName": "src/wrapFunction.test.ts",
        "imports": []
      },
      {
        "name": "tsInterfaceToDbMenu",
        "fileName": "src/tsInterfaceToDbMenu.ts",
        "imports": [
          "TsInterface from code-types"
        ]
      },
      {
        "name": "upsertDbModel",
        "fileName": "src/upsertDbModel.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "CustomQueryConfig from fs-orm",
          "DbQueryResult from fs-orm",
          "getAssetInputType from name-conventions",
          "makeArray from js-util",
          "notEmpty from js-util",
          "processItemAssets from asset-functions-node"
        ]
      },
      {
        "name": "validateInput",
        "fileName": "src/validateInput.ts",
        "imports": [
          "TsFunction from code-types",
          "sdk from sdk-api",
          "notEmpty from js-util",
          "log from log"
        ]
      },
      {
        "name": "validateResult",
        "fileName": "src/validateResult.ts",
        "imports": [
          "TsFunction from code-types",
          "sdk from sdk-api",
          "log from log"
        ]
      },
      {
        "name": "wrapFunction",
        "fileName": "src/wrapFunction.test.ts",
        "imports": []
      },
      {
        "name": "CacheLookupResult",
        "fileName": "src/cacheLookup.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof cacheLookup>",
        "fileName": "src/cacheLookup.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateOperatingSystemBundle>",
        "fileName": "src/calculateOperatingSystemBundle.ts",
        "imports": [
          "BundleConfig from bundle-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCachedFunctions>",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getDatabaseMenu>",
        "fileName": "src/getDatabaseMenu.ts",
        "imports": [
          "notEmpty from js-util",
          "ModelInfo from code-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbModelMetadata>",
        "fileName": "src/getDbModelMetadata.ts",
        "imports": [
          "Dataset from code-types",
          "TsInterface from code-types",
          "db from database",
          "getMergedQueryConfig from database",
          "getDatabaseFiles from fs-orm",
          "MergedQueryConfig from fs-orm",
          "readProjectRelativeJsonFile from read-json-file",
          "DbModelEnum from sdk-db",
          "dbModelKeys from sdk-db",
          "sdkInterfacePaths from sdk-interface-paths"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbModelNames>",
        "fileName": "src/getDbModelNames.ts",
        "imports": [
          "getDbModelsForBundle from bundle-util",
          "TsInterface from code-types",
          "db from database",
          "getDbModelsFromOperations from db-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "exploreOperationFolders from k-explore",
          "dbModelKeys from sdk-db",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "NamedParameters<typeof getFunctionIndex>",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getNestedDatabaseMenu>",
        "fileName": "src/getNestedDatabaseMenu.ts",
        "imports": [
          "db from database",
          "operations from sdk-operations",
          "getFolder from fs-util",
          "destructureOptionalObject from js-util",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "NamedParameters<typeof hasDbRecipes>",
        "fileName": "src/getFunctionIndex.ts",
        "imports": [
          "db from database",
          "TsFunction from code-types",
          "camelCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/getDatabaseMenu.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof makeSrcRelativeFolder>",
        "fileName": "src/makeSrcRelativeFolder.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof tsInterfaceToDbMenu>",
        "fileName": "src/tsInterfaceToDbMenu.ts",
        "imports": [
          "TsInterface from code-types"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/tsInterfaceToDbMenu.ts",
        "imports": [
          "TsInterface from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "db-recipes",
      "bundle-types",
      "database",
      "measure-performance",
      "fs-orm",
      "schema-util",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "fs-util-js",
      "pluralize",
      "sdk-db",
      "js-util",
      "code-types",
      "ts-json-schema-generator",
      "convert-case",
      "read-json-file",
      "try-parse-json",
      "sdk-interface-paths",
      "bundle-util",
      "db-util",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "model-types",
      "name-conventions",
      "asset-functions-node",
      "set-json-key",
      "function-context-type",
      "auth-types",
      "peer-types",
      "geo-types",
      "social-media-types",
      "server/typings/common",
      "ffmpeg-util",
      "one-by-one",
      "sdk-api",
      "log"
    ]
  },
  {
    "operationName": "db-web",
    "totalInstancesCount": 4,
    "totalImportCount": 22,
    "totalDependencyCount": 19,
    "importDependencies": [
      "api",
      "layout",
      "react-with-native-select",
      "js-util",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "db-crud",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "next/router",
      "react-with-native-ui",
      "react-with-native",
      "big-button",
      "authentication"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@tailwindcss/line-clamp",
      "@zeit/next-workers",
      "api",
      "api-store",
      "authentication",
      "clickable-icon",
      "db-crud",
      "db-recipes",
      "js-util",
      "layout",
      "nested-menu",
      "next",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "writer-input",
      "react-with-native-select",
      "react-with-native-ui",
      "big-button"
    ],
    "instancesAndTheirImports": [
      {
        "name": "DbAndUpsert",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "DbLayout",
        "fileName": "src/DbLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout",
          "useSelect from react-with-native-select",
          "destructureOptionalObject from js-util"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "NamedParameters<typeof DbLayout>",
        "fileName": "src/DbLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout",
          "useSelect from react-with-native-select",
          "destructureOptionalObject from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "db-web",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "layout",
      "menu",
      "fancy-loader",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "react-with-native-select",
      "js-util",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "db-crud",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "next/router",
      "react-with-native-ui",
      "react-with-native",
      "big-button",
      "authentication",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types"
    ]
  },
  {
    "operationName": "fs-orm",
    "totalInstancesCount": 108,
    "totalImportCount": 151,
    "totalDependencyCount": 22,
    "importDependencies": [
      "schema-util",
      "fs-util",
      "model-types",
      "log",
      "js-util",
      "measure-performance",
      "code-types",
      "matter-types",
      "frontmatter-util",
      "csv-util",
      "key-value-markdown-js",
      "read-csv-file",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "pluralize",
      "sdk-operations"
    ],
    "packageJsonDependencies": [
      "js-util",
      "fs-util",
      "model-types",
      "log",
      "code-types",
      "matter-types",
      "csv-util",
      "key-value-markdown-js",
      "read-json-file",
      "read-markdown-file",
      "convert-case",
      "get-path",
      "pluralize",
      "k-explore",
      "schema-util",
      "fs-util-js",
      "measure-performance",
      "markdown-types",
      "read-csv-file",
      "read-kvmd-file",
      "frontmatter-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addDefaultValues",
        "fileName": "src/convention/addDefaultValues.ts",
        "imports": [
          "Creation from model-types",
          "generateId from model-types",
          "AugmentedAnyModelType from model-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log"
        ]
      },
      {
        "name": "alterAny",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "alterCsv",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "alterJsonMultiple",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "alterJsonSingle",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "alterKeyValueMarkdown",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "alterMarkdown",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "augmentItemWithReferencedDataRecursively",
        "fileName": "src/util/augmentItemWithReferencedDataRecursively.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util"
        ]
      },
      {
        "name": "calculateOperationsObject",
        "fileName": "src/convention/calculateOperationsObject.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "makeRelative from fs-util-js",
          "mergeObjectsArray from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "createDb",
        "fileName": "src/createDb.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "fs from fs-util",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "Storing from model-types",
          "log from log",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "sum from js-util",
          "mapMany from js-util",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance",
          "cleanupTimer from measure-performance",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "findParent",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "getAugmentedData",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "getDatabaseFiles",
        "fileName": "src/convention/getDatabaseFiles.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "log from log",
          "DbFileLocation from model-types",
          "PerformanceItem from measure-performance",
          "cleanupTimer from measure-performance",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance"
        ]
      },
      {
        "name": "getDatabaseRootFolder",
        "fileName": "src/convention/getDatabaseRootFolder.ts",
        "imports": [
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log"
        ]
      },
      {
        "name": "getDbFileLocation",
        "fileName": "src/convention/getDbFileLocation.ts",
        "imports": [
          "makeRelative from fs-util-js",
          "path from fs-util",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "ModelLocation from model-types",
          "AugmentedAnyModelType from model-types",
          "log from log"
        ]
      },
      {
        "name": "getDbStorageMethodExtension",
        "fileName": "src/convention/getDbStorageMethodExtension.ts",
        "imports": [
          "DbStorageMethod from code-types"
        ]
      },
      {
        "name": "getDefaultLocationPattern",
        "fileName": "src/convention/getLocationPattern.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "dbStorageMethods from code-types",
          "kebabCase from convert-case",
          "pluralize from pluralize"
        ]
      },
      {
        "name": "getItemModelLocation",
        "fileName": "src/convention/storing-items.ts",
        "imports": [
          "notEmpty from js-util",
          "removeOptionalKeysFromObject from js-util",
          "AugmentedAnyModelType from model-types",
          "ModelLocation from model-types",
          "Storing from model-types",
          "getDataParameterNames from schema-util",
          "getReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "getLength",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "getLocationPattern",
        "fileName": "src/convention/getLocationPattern.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "dbStorageMethods from code-types",
          "kebabCase from convert-case",
          "pluralize from pluralize"
        ]
      },
      {
        "name": "getMergedConfigOperationPath",
        "fileName": "src/convention/getMergedOperationPath.ts",
        "imports": [
          "getOperationPath from get-path",
          "log from log"
        ]
      },
      {
        "name": "getParentSlug",
        "fileName": "src/convention/getParentSlug.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "getRootFolders",
        "fileName": "src/convention/getRootFolders.ts",
        "imports": [
          "path from fs-util",
          "notEmpty from js-util",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "getWildcardDbFileLocations__OLD",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "getWildcardDbFileLocations",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "groupByFile",
        "fileName": "src/util/groupByFile.ts",
        "imports": [
          "Creation from model-types",
          "DbFileLocation from model-types",
          "Storing from model-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "makeStoringItem",
        "fileName": "src/convention/storing-items.ts",
        "imports": [
          "notEmpty from js-util",
          "removeOptionalKeysFromObject from js-util",
          "AugmentedAnyModelType from model-types",
          "ModelLocation from model-types",
          "Storing from model-types",
          "getDataParameterNames from schema-util",
          "getReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "mergeConfigs",
        "fileName": "src/convention/mergeConfigs.ts",
        "imports": [
          "getProjectRoot from get-path",
          "mergeObjects from js-util"
        ]
      },
      {
        "name": "removeKeyValueMarkdown",
        "fileName": "src/alter/removeKeyValueMarkdown.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "removeMultiple",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/tests/upsertKeyValueMarkdown.test.ts",
        "imports": [
          "CategoryStack from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "humanCase from convert-case",
          "path from fs-util"
        ]
      },
      {
        "name": "upsertItems",
        "fileName": "src/alter/alter-functions.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "KeyValueMarkdownModelType from model-types",
          "KeyValueMarkdownParse from model-types",
          "MarkdownModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "markdownModelTypeToMarkdownString from frontmatter-util",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "canWriteSync from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "log from log",
          "readCsvFile from read-csv-file",
          "readJsonFile from read-json-file",
          "readKvmdFile from read-kvmd-file",
          "readMarkdownFile from read-markdown-file",
          "makeArray from js-util",
          "slugify from convert-case",
          "markdownParseToMarkdownModelType from markdown-types"
        ]
      },
      {
        "name": "upsertKeyValueMarkdown",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "upsert",
        "fileName": "src/alter/upsert.ts",
        "imports": [
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util",
          "notEmpty from js-util",
          "log from log",
          "Storing from model-types"
        ]
      },
      {
        "name": "waitForLockfile",
        "fileName": "src/waitForLockfile.ts",
        "imports": [
          "fs from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "AnyModelObject",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "AnyModelType",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "AnyModelObject",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "AnyModelType",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "AugmentedAnyModelType",
        "fileName": "src/util/augmentItemWithReferencedDataRecursively.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util"
        ]
      },
      {
        "name": "AugmentedAnyModelType",
        "fileName": "src/util/augmentItemWithReferencedDataRecursively.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "CustomQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "CustomQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "DbFileLocation",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "DbQueryResult",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "DbStorageMethod",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "DbFileLocation",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "DbQueryResult",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "DbStorageMethod",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "IncludeConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "IncludeDataObject",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "Include",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "IncludeConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "IncludeDataObject",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "MergedQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "MergedQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "ModelLocation",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "ModelLocation",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof augmentItemWithReferencedDataRecursively>",
        "fileName": "src/util/augmentItemWithReferencedDataRecursively.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findParent>",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAugmentedData>",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDatabaseFiles>",
        "fileName": "src/convention/getDatabaseFiles.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "log from log",
          "DbFileLocation from model-types",
          "PerformanceItem from measure-performance",
          "cleanupTimer from measure-performance",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance"
        ]
      },
      {
        "name": "NamedParameters<typeof getDatabaseRootFolder>",
        "fileName": "src/convention/getDatabaseRootFolder.ts",
        "imports": [
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbFileLocation>",
        "fileName": "src/convention/getDbFileLocation.ts",
        "imports": [
          "makeRelative from fs-util-js",
          "path from fs-util",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "ModelLocation from model-types",
          "AugmentedAnyModelType from model-types",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbStorageMethodExtension>",
        "fileName": "src/convention/getDbStorageMethodExtension.ts",
        "imports": [
          "DbStorageMethod from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getLocationPattern>",
        "fileName": "src/convention/getLocationPattern.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "dbStorageMethods from code-types",
          "kebabCase from convert-case",
          "pluralize from pluralize"
        ]
      },
      {
        "name": "NamedParameters<typeof getParentSlug>",
        "fileName": "src/convention/getParentSlug.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getWildcardDbFileLocations__OLD>",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getWildcardDbFileLocations>",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof removeKeyValueMarkdown>",
        "fileName": "src/alter/removeKeyValueMarkdown.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/tests/upsertKeyValueMarkdown.test.ts",
        "imports": [
          "CategoryStack from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "humanCase from convert-case",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof upsertKeyValueMarkdown>",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof upsert>",
        "fileName": "src/alter/upsert.ts",
        "imports": [
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util",
          "notEmpty from js-util",
          "log from log",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addDefaultValues>",
        "fileName": "src/convention/addDefaultValues.ts",
        "imports": [
          "Creation from model-types",
          "generateId from model-types",
          "AugmentedAnyModelType from model-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof augmentItemWithReferencedDataRecursively>",
        "fileName": "src/util/augmentItemWithReferencedDataRecursively.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof calculateOperationsObject>",
        "fileName": "src/convention/calculateOperationsObject.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "makeRelative from fs-util-js",
          "mergeObjectsArray from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof createDb>",
        "fileName": "src/createDb.ts",
        "imports": [
          "getReferenceParameterInfo from schema-util",
          "fs from fs-util",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "Storing from model-types",
          "log from log",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "sum from js-util",
          "mapMany from js-util",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance",
          "cleanupTimer from measure-performance",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "NamedParameters<typeof findParent>",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getAugmentedData>",
        "fileName": "src/util/getAugmentedData.ts",
        "imports": [
          "makeArray from js-util",
          "path from fs-util",
          "readJsonFile from read-json-file",
          "readCsvFile from read-csv-file",
          "readMarkdownFile from read-markdown-file",
          "markdownStringToKvmdParse from key-value-markdown-js",
          "DbFileLocation from model-types",
          "DbStorageMethod from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "log from log",
          "pluralize from pluralize",
          "makeRelative from fs-util-js",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDatabaseFiles>",
        "fileName": "src/convention/getDatabaseFiles.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "log from log",
          "DbFileLocation from model-types",
          "PerformanceItem from measure-performance",
          "cleanupTimer from measure-performance",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance"
        ]
      },
      {
        "name": "NamedParameters<typeof getDatabaseRootFolder>",
        "fileName": "src/convention/getDatabaseRootFolder.ts",
        "imports": [
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbFileLocation>",
        "fileName": "src/convention/getDbFileLocation.ts",
        "imports": [
          "makeRelative from fs-util-js",
          "path from fs-util",
          "Storing from model-types",
          "DbFileLocation from model-types",
          "ModelLocation from model-types",
          "AugmentedAnyModelType from model-types",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbStorageMethodExtension>",
        "fileName": "src/convention/getDbStorageMethodExtension.ts",
        "imports": [
          "DbStorageMethod from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getDefaultLocationPattern>",
        "fileName": "src/convention/getLocationPattern.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "dbStorageMethods from code-types",
          "kebabCase from convert-case",
          "pluralize from pluralize"
        ]
      },
      {
        "name": "NamedParameters<typeof getLocationPattern>",
        "fileName": "src/convention/getLocationPattern.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "dbStorageMethods from code-types",
          "kebabCase from convert-case",
          "pluralize from pluralize"
        ]
      },
      {
        "name": "NamedParameters<typeof getMergedConfigOperationPath>",
        "fileName": "src/convention/getMergedOperationPath.ts",
        "imports": [
          "getOperationPath from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getParentSlug>",
        "fileName": "src/convention/getParentSlug.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getRootFolders>",
        "fileName": "src/convention/getRootFolders.ts",
        "imports": [
          "path from fs-util",
          "notEmpty from js-util",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof getWildcardDbFileLocations__OLD>",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getWildcardDbFileLocations>",
        "fileName": "src/convention/getWildcardDbFileLocations.ts",
        "imports": [
          "fs from fs-util",
          "ParsedPath from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "DbFileLocation from model-types",
          "getExtension from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof removeKeyValueMarkdown>",
        "fileName": "src/alter/removeKeyValueMarkdown.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/tests/upsertKeyValueMarkdown.test.ts",
        "imports": [
          "CategoryStack from model-types",
          "DbFileLocation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "humanCase from convert-case",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof upsert>",
        "fileName": "src/alter/upsert.ts",
        "imports": [
          "AugmentedAnyModelType from model-types",
          "makeArray from js-util",
          "notEmpty from js-util",
          "log from log",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof upsertKeyValueMarkdown>",
        "fileName": "src/alter/upsertKeyValueMarkdown.ts",
        "imports": [
          "CategoryStack from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "log from log",
          "findLastIndex from js-util",
          "insertAt from js-util",
          "makeArray from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof waitForLockfile>",
        "fileName": "src/waitForLockfile.ts",
        "imports": [
          "fs from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "QueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "QueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "RootDbFolder",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "RootDbFolder",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "UpsertKeyValueMarkdownItem",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "UpsertQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "UpsertKeyValueMarkdownItem",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "UpsertQueryConfig",
        "fileName": "src/types.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "ModelLocation from model-types",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Storing from model-types",
          "Frontmatter from matter-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "model-types",
      "log",
      "js-util",
      "measure-performance",
      "code-types",
      "ts-json-schema-generator",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations"
    ]
  },
  {
    "operationName": "validate-model",
    "totalInstancesCount": 6,
    "totalImportCount": 5,
    "totalDependencyCount": 5,
    "importDependencies": [
      "database",
      "sdk-db",
      "log",
      "code-types",
      "model-types"
    ],
    "packageJsonDependencies": [
      "database",
      "log",
      "code-types",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "validateModel",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      },
      {
        "name": "validate",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      },
      {
        "name": "Json",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof validate>",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof validateModel>",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/validate-model.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "log from log",
          "SimplifiedSchema from code-types",
          "Json from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "validate-model",
      "database",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "js-util",
      "sdk-db",
      "log",
      "code-types",
      "ts-json-schema-generator",
      "model-types"
    ]
  },
  {
    "operationName": "function-functions-node",
    "totalInstancesCount": 11,
    "totalImportCount": 18,
    "totalDependencyCount": 12,
    "importDependencies": [
      "code-types",
      "database",
      "js-util",
      "sdk-operations",
      "webpage-types",
      "recursive-util",
      "fs-util",
      "function-types",
      "get-path",
      "read-json-file",
      "function-server-types",
      "fs-util-js"
    ],
    "packageJsonDependencies": [
      "database",
      "js-util",
      "code-types",
      "fs-util-js",
      "fs-util",
      "function-types",
      "get-path",
      "read-json-file",
      "webpage-types",
      "recursive-util",
      "function-server-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getFunctionExecutions",
        "fileName": "src/getFunctionExecutions.ts",
        "imports": [
          "FunctionExecution from code-types",
          "db from database",
          "omitUndefinedValues from js-util"
        ]
      },
      {
        "name": "getFunctionQueryPaths",
        "fileName": "src/getFunctionQueryPaths.ts",
        "imports": [
          "operations from sdk-operations",
          "db from database",
          "notEmpty from js-util",
          "TsFunction from code-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "getPublicBundleConfig",
        "fileName": "src/getPublicBundleConfig.ts",
        "imports": [
          "path from fs-util",
          "PublicBundleConfig from function-types",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "getSrcRelativeFolderPath",
        "fileName": "src/getSrcRelativeFolderPath.ts",
        "imports": [
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "getTsFunction",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "db from database",
          "FunctionData from function-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFunctionExecutions>",
        "fileName": "src/getFunctionExecutions.ts",
        "imports": [
          "FunctionExecution from code-types",
          "db from database",
          "omitUndefinedValues from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFunctionQueryPaths>",
        "fileName": "src/getFunctionQueryPaths.ts",
        "imports": [
          "operations from sdk-operations",
          "db from database",
          "notEmpty from js-util",
          "TsFunction from code-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicBundleConfig>",
        "fileName": "src/getPublicBundleConfig.ts",
        "imports": [
          "path from fs-util",
          "PublicBundleConfig from function-types",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSrcRelativeFolderPath>",
        "fileName": "src/getSrcRelativeFolderPath.ts",
        "imports": [
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsFunction>",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "db from database",
          "FunctionData from function-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/getFunctionQueryPaths.ts",
        "imports": [
          "operations from sdk-operations",
          "db from database",
          "notEmpty from js-util",
          "TsFunction from code-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getMenuPagesObject from recursive-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-functions-node",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "k-explore",
      "filename-conventions",
      "write-to-assets",
      "log",
      "js-util",
      "sdk-operations",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "fs-util",
      "graceful-fs",
      "function-types",
      "get-path",
      "try-parse-json",
      "read-json-file",
      "function-server-types",
      "fs-util-js"
    ]
  },
  {
    "operationName": "function-types",
    "totalInstancesCount": 3,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "bundle-types",
      "code-types"
    ],
    "packageJsonDependencies": [
      "bundle-types",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "FunctionData",
        "fileName": "src/types.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "PublicBundleConfig",
        "fileName": "src/types.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/types.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "TsFunction from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "function-web",
    "totalInstancesCount": 13,
    "totalImportCount": 68,
    "totalDependencyCount": 32,
    "importDependencies": [
      "api",
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "tabs",
      "react",
      "recursive-types",
      "reactflow",
      "cool-toast",
      "code-types",
      "function-form",
      "json-util",
      "markdown",
      "ui-util",
      "api-types",
      "react-with-native",
      "markdown-parse-js",
      "react-with-native-table",
      "js-util",
      "fancy-loader",
      "string-to-json",
      "clickable-icon",
      "react-with-native-router",
      "markdown-reader-functions-js",
      "react-with-native-alert",
      "big-button",
      "next/app",
      "react-query",
      "react-with-native-modal",
      "react-with-native-notification"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "db-recipes",
      "next",
      "next-pwa",
      "next-transpile-modules",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "reactflow",
      "rehype-highlight",
      "worker-loader",
      "api",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "tabs",
      "recursive-types",
      "markdown-parse-js",
      "code-types",
      "react-with-native-table",
      "js-util",
      "fancy-loader",
      "clickable-icon",
      "markdown-reader-functions-js",
      "function-form",
      "markdown",
      "react-with-native-notification",
      "cool-toast",
      "json-util",
      "ui-util",
      "api-types",
      "string-to-json",
      "big-button"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Flow",
        "fileName": "src/components/Flow.tsx",
        "imports": [
          "useCallback from react",
          "useState from react",
          "ChildObject from recursive-types",
          "addEdge from reactflow",
          "Node from reactflow",
          "applyNodeChanges from reactflow",
          "FitViewOptions from reactflow",
          "applyEdgeChanges from reactflow"
        ]
      },
      {
        "name": "FormTab",
        "fileName": "src/components/FormTab.tsx",
        "imports": [
          "successToast from cool-toast",
          "warningToast from cool-toast",
          "errorToast from cool-toast",
          "infoToast from cool-toast",
          "TsFunction from code-types",
          "FunctionForm from function-form",
          "Json from json-util",
          "renderMarkdownContent from markdown",
          "useState from react",
          "createCodeblockMarkdown from ui-util",
          "RealApiReturnType from api-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "FunctionExecutionTable",
        "fileName": "src/components/FunctionExecutionTable.tsx",
        "imports": [
          "Button from react-with-native",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useState from react",
          "mdToJsonParse from markdown-parse-js",
          "MarkdownView from writer-input",
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "Table from react-with-native-table",
          "notEmpty from js-util",
          "FancyLoader from fancy-loader",
          "api from api",
          "queries from api",
          "MarkdownCodeblock from markdown",
          "stringToJson from string-to-json"
        ]
      },
      {
        "name": "FunctionPage",
        "fileName": "src/components/FunctionPage.tsx",
        "imports": [
          "Div from react-with-native",
          "Li from react-with-native",
          "P from react-with-native",
          "Ul from react-with-native",
          "mdToJsonParse from markdown-parse-js",
          "Tabs from tabs",
          "api from api",
          "queries from api",
          "ClickableIcon from clickable-icon",
          "useRouter from react-with-native-router",
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownView from writer-input",
          "MarkdownCodeblock from markdown",
          "destructureOptionalObject from js-util",
          "makeArray from js-util",
          "FancyLoader from fancy-loader",
          "useAlert from react-with-native-alert",
          "BigButton from big-button",
          "errorToast from cool-toast"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "Test",
        "fileName": "src/components/Flow.tsx",
        "imports": [
          "useCallback from react",
          "useState from react",
          "ChildObject from recursive-types",
          "addEdge from reactflow",
          "Node from reactflow",
          "applyNodeChanges from reactflow",
          "FitViewOptions from reactflow",
          "applyEdgeChanges from reactflow"
        ]
      },
      {
        "name": "FunctionExecution",
        "fileName": "src/components/FunctionExecutionTable.tsx",
        "imports": [
          "Button from react-with-native",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useState from react",
          "mdToJsonParse from markdown-parse-js",
          "MarkdownView from writer-input",
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "Table from react-with-native-table",
          "notEmpty from js-util",
          "FancyLoader from fancy-loader",
          "api from api",
          "queries from api",
          "MarkdownCodeblock from markdown",
          "stringToJson from string-to-json"
        ]
      },
      {
        "name": "NamedParameters<typeof FormTab>",
        "fileName": "src/components/FormTab.tsx",
        "imports": [
          "successToast from cool-toast",
          "warningToast from cool-toast",
          "errorToast from cool-toast",
          "infoToast from cool-toast",
          "TsFunction from code-types",
          "FunctionForm from function-form",
          "Json from json-util",
          "renderMarkdownContent from markdown",
          "useState from react",
          "createCodeblockMarkdown from ui-util",
          "RealApiReturnType from api-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof FunctionExecutionTable>",
        "fileName": "src/components/FunctionExecutionTable.tsx",
        "imports": [
          "Button from react-with-native",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useState from react",
          "mdToJsonParse from markdown-parse-js",
          "MarkdownView from writer-input",
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "Table from react-with-native-table",
          "notEmpty from js-util",
          "FancyLoader from fancy-loader",
          "api from api",
          "queries from api",
          "MarkdownCodeblock from markdown",
          "stringToJson from string-to-json"
        ]
      },
      {
        "name": "NamedParameters<typeof FunctionPage>",
        "fileName": "src/components/FunctionPage.tsx",
        "imports": [
          "Div from react-with-native",
          "Li from react-with-native",
          "P from react-with-native",
          "Ul from react-with-native",
          "mdToJsonParse from markdown-parse-js",
          "Tabs from tabs",
          "api from api",
          "queries from api",
          "ClickableIcon from clickable-icon",
          "useRouter from react-with-native-router",
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownView from writer-input",
          "MarkdownCodeblock from markdown",
          "destructureOptionalObject from js-util",
          "makeArray from js-util",
          "FancyLoader from fancy-loader",
          "useAlert from react-with-native-alert",
          "BigButton from big-button",
          "errorToast from cool-toast"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/components/FunctionExecutionTable.tsx",
        "imports": [
          "Button from react-with-native",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useState from react",
          "mdToJsonParse from markdown-parse-js",
          "MarkdownView from writer-input",
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "Table from react-with-native-table",
          "notEmpty from js-util",
          "FancyLoader from fancy-loader",
          "api from api",
          "queries from api",
          "MarkdownCodeblock from markdown",
          "stringToJson from string-to-json"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-web",
      "api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "layout",
      "authentication",
      "next/router",
      "react-with-native-ui",
      "model-types",
      "matter-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "asset-type",
      "social-media-types",
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "fs-util-js",
      "text-or-binary",
      "simplified-schema-form",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "sdk-db",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "bundle-types",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "filename-conventions",
      "prompt-components",
      "ai-types",
      "function-server-types",
      "frontmatter-util",
      "marked-util",
      "markdown-types",
      "breadcrumbs",
      "key-value-markdown-js",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "try-parse-json",
      "tabs",
      "react",
      "recursive-types",
      "reactflow",
      "cool-toast",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "json-util",
      "markdown",
      "react-markdown",
      "tooltip",
      "@popperjs/core",
      "ui-util",
      "api-types",
      "sdk-api",
      "react-with-native",
      "markdown-parse-js",
      "react-with-native-table",
      "js-util",
      "fancy-loader",
      "string-to-json",
      "clickable-icon",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "markdown-reader-functions-js",
      "next-types",
      "react-with-native-alert",
      "@headlessui/react",
      "big-button",
      "next/app",
      "react-query",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "github-operation-sync",
    "totalInstancesCount": 29,
    "totalImportCount": 31,
    "totalDependencyCount": 9,
    "importDependencies": [
      "code-types",
      "database",
      "@octokit/rest",
      "simple-git",
      "sdk-operations",
      "get-path",
      "js-util",
      "code-types/build/OperationRepositoryInfo",
      "log"
    ],
    "packageJsonDependencies": [
      "@octokit/rest",
      "database",
      "dotenv",
      "moment",
      "simple-git",
      "code-types",
      "log",
      "js-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAllOperations",
        "fileName": "src/getAllOperations.ts",
        "imports": [
          "Operation from code-types",
          "db from database"
        ]
      },
      {
        "name": "getAllPackagesNames",
        "fileName": "src/getAllPackageNames.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getGithubPersonalAccessToken",
        "fileName": "src/getGithubPersonalAccessToken.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getGithubRepoLastCommitInfo",
        "fileName": "src/getGithubRepoLastCommitInfo.ts",
        "imports": [
          "Octokit from @octokit/rest",
          "CommitInfo from code-types"
        ]
      },
      {
        "name": "getRepoNameFromRepositoryUrl",
        "fileName": "src/getRepoNameFromRepositoryUrl.ts",
        "imports": []
      },
      {
        "name": "initializeGitOrUseExistingAndPull",
        "fileName": "src/initializeGitOrUseExistingAndPull.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git"
        ]
      },
      {
        "name": "initializeGitOrUseExistingAndPush",
        "fileName": "src/operationGithubPush.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "Octokit from @octokit/rest"
        ]
      },
      {
        "name": "operationGithubPull",
        "fileName": "src/operationGithubPull.ts",
        "imports": [
          "db from database",
          "operations from sdk-operations",
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path",
          "Octokit from @octokit/rest",
          "mergeNestedObject from js-util",
          "OperationRepositoryInfo from code-types/build/OperationRepositoryInfo"
        ]
      },
      {
        "name": "operationGithubPush",
        "fileName": "src/operationGithubPush.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "Octokit from @octokit/rest"
        ]
      },
      {
        "name": "pullMultipleOperations",
        "fileName": "src/pullMultipleOperations.ts",
        "imports": []
      },
      {
        "name": "pushMultipleOperations",
        "fileName": "src/pushMultipleOperations.ts",
        "imports": []
      },
      {
        "name": "readAndWriteToPackageJsonExample",
        "fileName": "src/readAndWriteToPackageJsonExample.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "updateAllOperationStatusTest",
        "fileName": "src/updateAllOperationStatus.test.ts",
        "imports": []
      },
      {
        "name": "updateAllOperationStatus",
        "fileName": "src/updateAllOperationStatus.ts",
        "imports": [
          "db from database",
          "log from log",
          "mapMany from js-util",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "OperationRepositoryInfo from code-types/build/OperationRepositoryInfo"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllOperations>",
        "fileName": "src/getAllOperations.ts",
        "imports": [
          "Operation from code-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllPackagesNames>",
        "fileName": "src/getAllPackageNames.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getGithubPersonalAccessToken>",
        "fileName": "src/getGithubPersonalAccessToken.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getGithubRepoLastCommitInfo>",
        "fileName": "src/getGithubRepoLastCommitInfo.ts",
        "imports": [
          "Octokit from @octokit/rest",
          "CommitInfo from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getRepoNameFromRepositoryUrl>",
        "fileName": "src/getRepoNameFromRepositoryUrl.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof initializeGitOrUseExistingAndPull>",
        "fileName": "src/initializeGitOrUseExistingAndPull.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git"
        ]
      },
      {
        "name": "NamedParameters<typeof initializeGitOrUseExistingAndPush>",
        "fileName": "src/operationGithubPush.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "Octokit from @octokit/rest"
        ]
      },
      {
        "name": "NamedParameters<typeof operationGithubPull>",
        "fileName": "src/operationGithubPull.ts",
        "imports": [
          "db from database",
          "operations from sdk-operations",
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "getProjectRoot from get-path",
          "getRootPath from get-path",
          "isBundle from get-path",
          "Octokit from @octokit/rest",
          "mergeNestedObject from js-util",
          "OperationRepositoryInfo from code-types/build/OperationRepositoryInfo"
        ]
      },
      {
        "name": "NamedParameters<typeof operationGithubPush>",
        "fileName": "src/operationGithubPush.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "Octokit from @octokit/rest"
        ]
      },
      {
        "name": "NamedParameters<typeof pullMultipleOperations>",
        "fileName": "src/pullMultipleOperations.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof pushMultipleOperations>",
        "fileName": "src/pushMultipleOperations.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof readAndWriteToPackageJsonExample>",
        "fileName": "src/readAndWriteToPackageJsonExample.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof updateAllOperationStatus>",
        "fileName": "src/updateAllOperationStatus.ts",
        "imports": [
          "db from database",
          "log from log",
          "mapMany from js-util",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "OperationRepositoryInfo from code-types/build/OperationRepositoryInfo"
        ]
      },
      {
        "name": "NamedParameters<typeof updateAllOperationStatusTest>",
        "fileName": "src/updateAllOperationStatus.test.ts",
        "imports": []
      },
      {
        "name": "PushOperationResult",
        "fileName": "src/operationGithubPush.ts",
        "imports": [
          "simpleGit from simple-git",
          "SimpleGit from simple-git",
          "SimpleGitOptions from simple-git",
          "Octokit from @octokit/rest"
        ]
      }
    ],
    "cumulativeDependencies": [
      "github-operation-sync",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "@octokit/rest",
      "simple-git",
      "sdk-operations",
      "get-path",
      "js-util",
      "code-types/build/OperationRepositoryInfo",
      "log"
    ]
  },
  {
    "operationName": "operation-web",
    "totalInstancesCount": 3,
    "totalImportCount": 19,
    "totalDependencyCount": 14,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "react",
      "api",
      "js-util",
      "cool-toast"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification",
      "api",
      "js-util",
      "cool-toast"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "operation-web",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "big-button",
      "model-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "asset-view",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "react",
      "api",
      "sdk-api-keys",
      "rest-util",
      "js-util",
      "cool-toast"
    ]
  },
  {
    "operationName": "project-size-web",
    "totalInstancesCount": 4,
    "totalImportCount": 11,
    "totalDependencyCount": 10,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "ShowSize",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "project-size-web",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "model-types",
      "js-util",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "asset-view",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "augmented-word-node",
    "totalInstancesCount": 6,
    "totalImportCount": 19,
    "totalDependencyCount": 10,
    "importDependencies": [
      "fs-util",
      "get-path",
      "fs-util-js",
      "database",
      "augmented-word-types",
      "js-util",
      "fs-orm",
      "markdown-parse-js",
      "sdk-db",
      "model-types"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path",
      "database",
      "js-util",
      "markdown-parse-js",
      "markdown-reader-types",
      "fs-orm",
      "model-types",
      "augmented-word-types",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAugmentedWordObject",
        "fileName": "src/getAugmentedWordsObject.ts",
        "imports": [
          "getProjectRoot from get-path",
          "createMappedObject from js-util",
          "MappedObject from js-util",
          "omitUndefinedValues from js-util",
          "AugmentedWord from augmented-word-types"
        ]
      },
      {
        "name": "getAugmentedWords",
        "fileName": "src/getAugmentedWords.ts",
        "imports": [
          "path from fs-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "makeRelative from fs-util-js",
          "db from database",
          "AugmentedWord from augmented-word-types",
          "notEmpty from js-util",
          "Include from fs-orm",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "getBundleAugmentedWords",
        "fileName": "src/getBundleAugmentedWords.ts",
        "imports": [
          "db from database",
          "AugmentedWord from augmented-word-types",
          "DbModels from sdk-db",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAugmentedWordObject>",
        "fileName": "src/getAugmentedWordsObject.ts",
        "imports": [
          "getProjectRoot from get-path",
          "createMappedObject from js-util",
          "MappedObject from js-util",
          "omitUndefinedValues from js-util",
          "AugmentedWord from augmented-word-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAugmentedWords>",
        "fileName": "src/getAugmentedWords.ts",
        "imports": [
          "path from fs-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "isBundle from get-path",
          "makeRelative from fs-util-js",
          "db from database",
          "AugmentedWord from augmented-word-types",
          "notEmpty from js-util",
          "Include from fs-orm",
          "getImplicitId from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getBundleAugmentedWords>",
        "fileName": "src/getBundleAugmentedWords.ts",
        "imports": [
          "db from database",
          "AugmentedWord from augmented-word-types",
          "DbModels from sdk-db",
          "AugmentedAnyModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "augmented-word-node",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "database",
      "augmented-word-types",
      "js-util",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-parse-js",
      "sdk-db",
      "model-types"
    ]
  },
  {
    "operationName": "augmented-word-types",
    "totalInstancesCount": 3,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "AugmentedWord",
        "fileName": "src/AugmentedWord.ts",
        "imports": []
      },
      {
        "name": "AugmentedWordObject",
        "fileName": "src/AugmentedWord.ts",
        "imports": []
      },
      {
        "name": "AugmentedWordTypeEnum",
        "fileName": "src/AugmentedWord.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "augmented-word-types"
    ]
  },
  {
    "operationName": "codestorys-node",
    "totalInstancesCount": 8,
    "totalImportCount": 15,
    "totalDependencyCount": 10,
    "importDependencies": [
      "explore-project",
      "get-path",
      "js-util",
      "fs-util",
      "webpage-types",
      "read-markdown-file",
      "markdown-types",
      "next-types",
      "markdown-reader-types",
      "markdown-reader-functions"
    ],
    "packageJsonDependencies": [
      "explore-project",
      "get-path",
      "js-util",
      "fs-util",
      "webpage-types",
      "read-markdown-file",
      "markdown-parse-js",
      "next-types",
      "markdown-reader-types",
      "markdown-reader-functions",
      "marked-util",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "codestoriesGetPages",
        "fileName": "src/codestoriesGetPages.ts",
        "imports": [
          "getProjectRelativePaths from explore-project",
          "getTodoPaths from explore-project",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "fs from fs-util",
          "path from fs-util",
          "ReaderWebPage from webpage-types",
          "readMarkdownFileToModel from read-markdown-file",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "codestoriesGetStaticPaths",
        "fileName": "src/codestoriesGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "codestoriesGetStaticProps",
        "fileName": "src/codestoriesGetStaticProps.ts",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types",
          "markdownReaderGetStaticPropsFromPages from markdown-reader-functions"
        ]
      },
      {
        "name": "GetStaticPathsContext",
        "fileName": "src/codestoriesGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "GetStaticPropsContext",
        "fileName": "src/codestoriesGetStaticProps.ts",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types",
          "markdownReaderGetStaticPropsFromPages from markdown-reader-functions"
        ]
      },
      {
        "name": "NamedParameters<typeof codestoriesGetPages>",
        "fileName": "src/codestoriesGetPages.ts",
        "imports": [
          "getProjectRelativePaths from explore-project",
          "getTodoPaths from explore-project",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "fs from fs-util",
          "path from fs-util",
          "ReaderWebPage from webpage-types",
          "readMarkdownFileToModel from read-markdown-file",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof codestoriesGetStaticPaths>",
        "fileName": "src/codestoriesGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof codestoriesGetStaticProps>",
        "fileName": "src/codestoriesGetStaticProps.ts",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types",
          "markdownReaderGetStaticPropsFromPages from markdown-reader-functions"
        ]
      }
    ],
    "cumulativeDependencies": [
      "codestorys-node",
      "explore-project",
      "k-explore",
      "markdown-parse-js",
      "frontmatter-util",
      "asset-type",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "matter-types",
      "bundle-util",
      "bundle-types",
      "db-util",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "json-schema",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-operations",
      "measure-performance",
      "log",
      "code-types",
      "ts-json-schema-generator",
      "filename-conventions",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "recursive-types",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "read-json-file",
      "try-parse-json",
      "write-to-assets",
      "fs-util-js",
      "convert-case",
      "recursive-util",
      "nested-menu-types",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "model-types",
      "get-path",
      "js-util",
      "fs-util",
      "graceful-fs",
      "webpage-types",
      "read-markdown-file",
      "markdown-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "markdown-reader-functions",
      "markdown-reader-functions-js",
      "augmented-word-node"
    ]
  },
  {
    "operationName": "codestorys-web",
    "totalInstancesCount": 5,
    "totalImportCount": 15,
    "totalDependencyCount": 10,
    "importDependencies": [
      "markdown-reader-types",
      "swipe-homepage",
      "asset-view",
      "server-api-url",
      "react-with-native",
      "next/app",
      "reader-ui",
      "react-query",
      "sdk-env-public",
      "codestorys-node"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@next/font",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "reader-ui",
      "next",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "rehype-highlight",
      "markdown-reader-types",
      "next-a-link",
      "asset-view",
      "swipe-homepage",
      "codestorys-node",
      "server-api-url"
    ],
    "instancesAndTheirImports": [
      {
        "name": "HomePage",
        "fileName": "src/HomePage.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "SwipeHomepage from swipe-homepage",
          "SwipeItem from swipe-homepage",
          "getSrc from asset-view",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "Layout",
        "fileName": "src/Layout.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      },
      {
        "name": "MarkdownReaderPageProps",
        "fileName": "src/HomePage.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "SwipeHomepage from swipe-homepage",
          "SwipeItem from swipe-homepage",
          "getSrc from asset-view",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof HomePage>",
        "fileName": "src/HomePage.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "SwipeHomepage from swipe-homepage",
          "SwipeItem from swipe-homepage",
          "getSrc from asset-view",
          "isDev from server-api-url"
        ]
      }
    ],
    "cumulativeDependencies": [
      "codestorys-web",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "swipe-homepage",
      "next-a-link",
      "next/link",
      "markdown",
      "asset-functions-js",
      "name-conventions",
      "api",
      "api-types",
      "sdk-api",
      "react-with-native-store",
      "sdk-api-keys",
      "rest-util",
      "text-or-binary",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "react",
      "clickable-icon",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "fs-util-js",
      "asset-view",
      "server-api-url",
      "port-conventions",
      "react-with-native",
      "next/app",
      "reader-ui",
      "nested-menu",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "next-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "react-with-native-ui",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "menu",
      "file-search",
      "hotkeys",
      "recursive-util",
      "share",
      "react-with-native-modal",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-query",
      "sdk-env-public",
      "codestorys-node",
      "explore-project",
      "bundle-util",
      "db-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "todo-types",
      "markdown-reader-functions",
      "augmented-word-node"
    ]
  },
  {
    "operationName": "markdown-reader-functions",
    "totalInstancesCount": 54,
    "totalImportCount": 100,
    "totalDependencyCount": 25,
    "importDependencies": [
      "fs-util",
      "get-path",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "write-to-assets",
      "sdk-operations",
      "k-explore",
      "read-json-file",
      "bundle-types",
      "read-markdown-file",
      "recursive-types",
      "recursive-util",
      "fs-orm",
      "convert-case",
      "sdk-db",
      "pluralize",
      "markdown-types",
      "database",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "matter-types"
    ],
    "packageJsonDependencies": [
      "@types/next",
      "bundle-types",
      "code-types",
      "convert-case",
      "fs-orm",
      "fs-util",
      "get-path",
      "js-util",
      "k-explore",
      "markdown-parse-js",
      "markdown-reader-functions-js",
      "markdown-reader-types",
      "matter-types",
      "nested-menu",
      "next",
      "pluralize",
      "read-json-file",
      "read-markdown-file",
      "write-to-assets",
      "next-types",
      "augmented-word-node",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "markdown-types",
      "database",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "copyStaticAssetsCli",
        "fileName": "src/cli/copyStaticAssets.cli.ts",
        "imports": []
      },
      {
        "name": "copyStaticAssets",
        "fileName": "src/copyStaticAssets.ts",
        "imports": [
          "copyAllRelativeFiles from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "removeAllExcept from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "getMarkdownReferencePaths from markdown-parse-js",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "docsGetPages",
        "fileName": "src/docsGetPages.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "docsGetStaticPaths",
        "fileName": "src/docsGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types",
          "GetStaticPathsResult from next-types"
        ]
      },
      {
        "name": "docsGetStaticProps",
        "fileName": "src/docsGetStaticProps.ts",
        "imports": [
          "getProjectRoot from get-path",
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types"
        ]
      },
      {
        "name": "getAllMarkdownReaderPages",
        "fileName": "src/getAllMarkdownReaderPages.ts",
        "imports": [
          "operations from sdk-operations",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "findAllDocsFolderPaths from k-explore",
          "readJsonFile from read-json-file",
          "BundleConfig from bundle-types",
          "PublicBundleConfig from bundle-types",
          "fs from fs-util",
          "path from fs-util",
          "CustomWebPage from webpage-types",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getChildren",
        "fileName": "src/getChildren.ts",
        "imports": [
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getFolderExplorationInfo",
        "fileName": "src/getFolderExplorationInfo.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getMarkdownIntro from markdown-parse-js",
          "readMarkdownFile from read-markdown-file",
          "NestedPathObject from recursive-types",
          "getKeysAtPathFromNestedObject from recursive-util",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getMarkdownModelPages",
        "fileName": "src/getMarkdownModelPages.ts",
        "imports": [
          "QueryConfig from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "kebabCase from convert-case",
          "getObjectKeysArray from js-util",
          "modelQueryConfig from sdk-db",
          "pluralize from pluralize",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "getMarkdownPageInfo",
        "fileName": "src/getMarkdownPageInfo.ts",
        "imports": [
          "getOneFolderUpPath from fs-util",
          "path from fs-util",
          "readMarkdownFileToModel from read-markdown-file",
          "MarkdownCallToAction from markdown-types",
          "WebMarkdownFile from markdown-types",
          "makeRelative from fs-util-js",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getMarkdownReaderPages",
        "fileName": "src/getMarkdownReaderPages.ts",
        "imports": [
          "makeRelative from fs-util-js",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "getMarkdownReaderQueryPaths",
        "fileName": "src/getMarkdownReaderQueryPaths.ts",
        "imports": [
          "getAllFoldersUntilFolder from fs-util",
          "onlyUnique2 from js-util",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "getOperationPages",
        "fileName": "src/getOperationPages.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "makeRelative from fs-util-js",
          "getPathsWithOperations from get-path",
          "isBundle from get-path",
          "operations from sdk-operations",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore",
          "BundleMarkdownReaderConfig from bundle-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "getPublicMarkdownFilePaths",
        "fileName": "src/getPublicMarkdownFilePaths.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "parseFrontmatterMarkdownString from markdown-parse-js"
        ]
      },
      {
        "name": "getReaderTodoPages",
        "fileName": "src/getReaderTodoPages.ts",
        "imports": [
          "findAllTodoFolderPaths from k-explore",
          "getRootPath from get-path",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "main",
        "fileName": "src/getMarkdownReaderQueryPaths.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "markdownReaderGetStaticPaths",
        "fileName": "src/markdownReaderGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "markdownReaderGetStaticPropsFromPages",
        "fileName": "src/markdownReaderGetStaticPropsFromPages.ts",
        "imports": [
          "GetStaticPropsContext from next-types",
          "MarkdownReaderPageProps from markdown-reader-types",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "db from database",
          "getQueryPath from markdown-reader-functions-js",
          "getAugmentedWordObject from augmented-word-node",
          "path from fs-util",
          "PublicBundleConfig from bundle-types",
          "getMenuPagesObject from recursive-util",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "markdownReaderGetStaticProps",
        "fileName": "src/markdownReaderGetStaticProps.ts",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types"
        ]
      },
      {
        "name": "putReadmeOnTop",
        "fileName": "src/putReadmeOnTop.ts",
        "imports": [
          "getFolder from fs-util",
          "putIndexAtIndex from js-util"
        ]
      },
      {
        "name": "removeExtensionsFromPath",
        "fileName": "src/removeExtensionsFromPath.ts",
        "imports": [
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "removeNumberPrefix",
        "fileName": "src/removeNumberPrefix.ts",
        "imports": []
      },
      {
        "name": "shouldExposeMarkdownFile",
        "fileName": "src/shouldExposeMarkdownFile.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "stripReadmeFromFolder",
        "fileName": "src/stripReadmeFromFolder.ts",
        "imports": []
      },
      {
        "name": "test",
        "fileName": "src/removeExtensionsFromPath.test.ts",
        "imports": []
      },
      {
        "name": "BundleMarkdownReaderConfig",
        "fileName": "src/getOperationPages.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "makeRelative from fs-util-js",
          "getPathsWithOperations from get-path",
          "isBundle from get-path",
          "operations from sdk-operations",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore",
          "BundleMarkdownReaderConfig from bundle-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/shouldExposeMarkdownFile.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "GetStaticPathsContext",
        "fileName": "src/markdownReaderGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "GetStaticPropsContext",
        "fileName": "src/markdownReaderGetStaticPropsFromPages.ts",
        "imports": [
          "GetStaticPropsContext from next-types",
          "MarkdownReaderPageProps from markdown-reader-types",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "db from database",
          "getQueryPath from markdown-reader-functions-js",
          "getAugmentedWordObject from augmented-word-node",
          "path from fs-util",
          "PublicBundleConfig from bundle-types",
          "getMenuPagesObject from recursive-util",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "MarkdownCallToAction",
        "fileName": "src/getMarkdownPageInfo.ts",
        "imports": [
          "getOneFolderUpPath from fs-util",
          "path from fs-util",
          "readMarkdownFileToModel from read-markdown-file",
          "MarkdownCallToAction from markdown-types",
          "WebMarkdownFile from markdown-types",
          "makeRelative from fs-util-js",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof copyStaticAssets>",
        "fileName": "src/copyStaticAssets.ts",
        "imports": [
          "copyAllRelativeFiles from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "removeAllExcept from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "getMarkdownReferencePaths from markdown-parse-js",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof copyStaticAssetsCli>",
        "fileName": "src/cli/copyStaticAssets.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof docsGetPages>",
        "fileName": "src/docsGetPages.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path",
          "isBundle from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof docsGetStaticPaths>",
        "fileName": "src/docsGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types",
          "GetStaticPathsResult from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof docsGetStaticProps>",
        "fileName": "src/docsGetStaticProps.ts",
        "imports": [
          "getProjectRoot from get-path",
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllMarkdownReaderPages>",
        "fileName": "src/getAllMarkdownReaderPages.ts",
        "imports": [
          "operations from sdk-operations",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "findAllDocsFolderPaths from k-explore",
          "readJsonFile from read-json-file",
          "BundleConfig from bundle-types",
          "PublicBundleConfig from bundle-types",
          "fs from fs-util",
          "path from fs-util",
          "CustomWebPage from webpage-types",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getChildren>",
        "fileName": "src/getChildren.ts",
        "imports": [
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFolderExplorationInfo>",
        "fileName": "src/getFolderExplorationInfo.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getMarkdownIntro from markdown-parse-js",
          "readMarkdownFile from read-markdown-file",
          "NestedPathObject from recursive-types",
          "getKeysAtPathFromNestedObject from recursive-util",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownModelPages>",
        "fileName": "src/getMarkdownModelPages.ts",
        "imports": [
          "QueryConfig from fs-orm",
          "fs from fs-util",
          "path from fs-util",
          "kebabCase from convert-case",
          "getObjectKeysArray from js-util",
          "modelQueryConfig from sdk-db",
          "pluralize from pluralize",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownPageInfo>",
        "fileName": "src/getMarkdownPageInfo.ts",
        "imports": [
          "getOneFolderUpPath from fs-util",
          "path from fs-util",
          "readMarkdownFileToModel from read-markdown-file",
          "MarkdownCallToAction from markdown-types",
          "WebMarkdownFile from markdown-types",
          "makeRelative from fs-util-js",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMarkdownReaderQueryPaths>",
        "fileName": "src/getMarkdownReaderQueryPaths.ts",
        "imports": [
          "getAllFoldersUntilFolder from fs-util",
          "onlyUnique2 from js-util",
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getOperationPages>",
        "fileName": "src/getOperationPages.ts",
        "imports": [
          "getLastFolder from fs-util",
          "path from fs-util",
          "makeRelative from fs-util-js",
          "getPathsWithOperations from get-path",
          "isBundle from get-path",
          "operations from sdk-operations",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "exploreOperationFolders from k-explore",
          "BundleMarkdownReaderConfig from bundle-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicMarkdownFilePaths>",
        "fileName": "src/getPublicMarkdownFilePaths.ts",
        "imports": [
          "fs from fs-util",
          "explore from k-explore",
          "parseFrontmatterMarkdownString from markdown-parse-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getReaderTodoPages>",
        "fileName": "src/getReaderTodoPages.ts",
        "imports": [
          "findAllTodoFolderPaths from k-explore",
          "getRootPath from get-path",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/getMarkdownReaderQueryPaths.test.ts",
        "imports": [
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownReaderGetStaticPaths>",
        "fileName": "src/markdownReaderGetStaticPaths.ts",
        "imports": [
          "GetStaticPaths from next-types",
          "GetStaticPathsContext from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownReaderGetStaticProps>",
        "fileName": "src/markdownReaderGetStaticProps.ts",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "GetStaticPropsContext from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownReaderGetStaticPropsFromPages>",
        "fileName": "src/markdownReaderGetStaticPropsFromPages.ts",
        "imports": [
          "GetStaticPropsContext from next-types",
          "MarkdownReaderPageProps from markdown-reader-types",
          "getProjectRoot from get-path",
          "readJsonFile from read-json-file",
          "db from database",
          "getQueryPath from markdown-reader-functions-js",
          "getAugmentedWordObject from augmented-word-node",
          "path from fs-util",
          "PublicBundleConfig from bundle-types",
          "getMenuPagesObject from recursive-util",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof removeExtensionsFromPath>",
        "fileName": "src/removeExtensionsFromPath.ts",
        "imports": [
          "trimSlashes from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof removeNumberPrefix>",
        "fileName": "src/removeNumberPrefix.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof shouldExposeMarkdownFile>",
        "fileName": "src/shouldExposeMarkdownFile.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof stripReadmeFromFolder>",
        "fileName": "src/stripReadmeFromFolder.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/removeExtensionsFromPath.test.ts",
        "imports": []
      },
      {
        "name": "ReaderWebPage",
        "fileName": "src/getMarkdownPageInfo.ts",
        "imports": [
          "getOneFolderUpPath from fs-util",
          "path from fs-util",
          "readMarkdownFileToModel from read-markdown-file",
          "MarkdownCallToAction from markdown-types",
          "WebMarkdownFile from markdown-types",
          "makeRelative from fs-util-js",
          "ReaderWebPage from webpage-types",
          "WebPage from webpage-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-reader-functions",
      "fs-util",
      "log",
      "graceful-fs",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "try-parse-json",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "asset-type",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "write-to-assets",
      "sdk-operations",
      "k-explore",
      "read-json-file",
      "bundle-types",
      "read-markdown-file",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "convert-case",
      "sdk-db",
      "pluralize",
      "markdown-types",
      "database",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "matter-types"
    ]
  },
  {
    "operationName": "markdown-reader-functions-js",
    "totalInstancesCount": 3,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "next-types"
    ],
    "packageJsonDependencies": [
      "next",
      "next-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getQueryPath",
        "fileName": "src/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getQueryPath>",
        "fileName": "src/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      },
      {
        "name": "ParsedUrlQuery",
        "fileName": "src/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-reader-functions-js",
      "next-types"
    ]
  },
  {
    "operationName": "markdown-reader-types",
    "totalInstancesCount": 6,
    "totalImportCount": 6,
    "totalDependencyCount": 5,
    "importDependencies": [
      "bundle-types",
      "webpage-types",
      "augmented-word-types",
      "js-util",
      "markdown-types"
    ],
    "packageJsonDependencies": [
      "code-types",
      "bundle-types",
      "js-util",
      "augmented-word-types",
      "webpage-types",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AugmentedWord",
        "fileName": "src/ReaderPageContentProps.ts",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "MarkdownReaderPageProps",
        "fileName": "src/MarkdownReaderPageProps.ts",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "NestedWebPage from webpage-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "NestedWebPage",
        "fileName": "src/MarkdownReaderPageProps.ts",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "NestedWebPage from webpage-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "PublicBundleConfig",
        "fileName": "src/MarkdownReaderPageProps.ts",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "NestedWebPage from webpage-types",
          "ReaderWebPage from webpage-types"
        ]
      },
      {
        "name": "ReaderPageContentProps",
        "fileName": "src/ReaderPageContentProps.ts",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "ReaderWebPage",
        "fileName": "src/MarkdownReaderPageProps.ts",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "NestedWebPage from webpage-types",
          "ReaderWebPage from webpage-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "markdown-reader-web",
    "totalInstancesCount": 1,
    "totalImportCount": 9,
    "totalDependencyCount": 6,
    "importDependencies": [
      "next/app",
      "markdown-reader-types",
      "reader-ui",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@next/font",
      "@tailwindcss/line-clamp",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "markdown-reader-types",
      "next",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "reader-ui",
      "rehype-highlight"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-reader-web",
      "next/app",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "reader-ui",
      "nested-menu",
      "nested-menu-types",
      "react-with-native-store",
      "clickable-icon",
      "fs-util-js",
      "markdown",
      "asset-functions-js",
      "name-conventions",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "text-or-binary",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "react-with-native",
      "server-api-url",
      "port-conventions",
      "markdown-reader-functions-js",
      "next-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "next-a-link",
      "next/link",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "fs-util",
      "graceful-fs",
      "frontmatter-util",
      "marked-util",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "react-with-native-ui",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "menu",
      "file-search",
      "hotkeys",
      "recursive-util",
      "share",
      "react-with-native-modal",
      "markdown-parse-js",
      "react",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "asset-view",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "augmented-word-node"
    ]
  },
  {
    "operationName": "next-types",
    "totalInstancesCount": 3,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "GetStaticPathsContext",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "ParsedUrlQuery",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "PreviewData",
        "fileName": "src/types.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "next-types"
    ]
  },
  {
    "operationName": "todo-types",
    "totalInstancesCount": 19,
    "totalImportCount": 19,
    "totalDependencyCount": 4,
    "importDependencies": [
      "asset-type",
      "model-types",
      "peer-types",
      "markdown-types"
    ],
    "packageJsonDependencies": [
      "asset-type",
      "model-types",
      "peer-types",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BackendAsset",
        "fileName": "src/TodoOffer.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Price from model-types"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/TodoFileProperties.ts",
        "imports": [
          "CategoryStack from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/SelfSprintReview.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/TodoOffer.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Price from model-types"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/SpecialKvmdModelType.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/TodoOffer.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Price from model-types"
        ]
      },
      {
        "name": "Person",
        "fileName": "src/SelfSprintReview.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "Price",
        "fileName": "src/TodoOffer.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Price from model-types"
        ]
      },
      {
        "name": "ReviewSummary",
        "fileName": "src/SelfSprintReview.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "SelfSprintReview",
        "fileName": "src/SelfSprintReview.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/TodoFileProperties.ts",
        "imports": [
          "CategoryStack from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "SpecialKvmdModelType",
        "fileName": "src/SpecialKvmdModelType.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Todo",
        "fileName": "src/Todo.ts",
        "imports": [
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "TodoFile",
        "fileName": "src/TodoFile.ts",
        "imports": [
          "ExtendedMarkdownProperties from markdown-types",
          "PostableProperties from markdown-types",
          "WebMarkdownProperties from markdown-types",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "TodoFileProperties",
        "fileName": "src/TodoFileProperties.ts",
        "imports": [
          "CategoryStack from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "TodoOffer",
        "fileName": "src/TodoOffer.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Price from model-types"
        ]
      },
      {
        "name": "TodoOfferStatus",
        "fileName": "src/TodoOfferStatus.ts",
        "imports": []
      },
      {
        "name": "TodoPagesConfig",
        "fileName": "src/TodoPagesConfig.ts",
        "imports": []
      },
      {
        "name": "TodoPriority",
        "fileName": "src/TodoPriority.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "todo-types",
      "asset-type",
      "model-types",
      "matter-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "markdown-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "todo-web",
    "totalInstancesCount": 6,
    "totalImportCount": 27,
    "totalDependencyCount": 20,
    "importDependencies": [
      "api",
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "todo-types",
      "convert-case",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-with-native-select",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication",
      "fancy-loader"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "api",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "todo-types",
      "convert-case",
      "react-with-native-form-inputs",
      "react-with-native-select",
      "react-with-native-notification",
      "authentication",
      "fancy-loader"
    ],
    "instancesAndTheirImports": [
      {
        "name": "FileWriterPage",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "TodoMenuHeader",
        "fileName": "src/TodoMenuHeader.tsx",
        "imports": [
          "queries from api",
          "humanCase from convert-case",
          "Div from react-with-native",
          "SelectInput from react-with-native-form-inputs",
          "ToggleInput from react-with-native-form-inputs",
          "Item from react-with-native-select",
          "TodoPagesConfig from todo-types",
          "todoPagesConfigRecencys from todo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof TodoMenuHeader>",
        "fileName": "src/TodoMenuHeader.tsx",
        "imports": [
          "queries from api",
          "humanCase from convert-case",
          "Div from react-with-native",
          "SelectInput from react-with-native-form-inputs",
          "ToggleInput from react-with-native-form-inputs",
          "Item from react-with-native-select",
          "TodoPagesConfig from todo-types",
          "todoPagesConfigRecencys from todo-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "todo-web",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "layout",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "react-with-native-form",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "make-test",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "next-paths",
      "db-crud",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "convert-case",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "fancy-loader"
    ]
  },
  {
    "operationName": "auth-types",
    "totalInstancesCount": 3,
    "totalImportCount": 3,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Authorization",
        "fileName": "src/Authorization.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "AuthorizationModel",
        "fileName": "src/AuthorizationModel.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/Authorization.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "auth-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "peer-functions",
    "totalInstancesCount": 48,
    "totalImportCount": 48,
    "totalDependencyCount": 15,
    "importDependencies": [
      "api",
      "database",
      "model-types",
      "peer-types",
      "port-conventions",
      "js-util",
      "fs-util",
      "get-path",
      "recursive-util",
      "k-explore",
      "fs-util-js",
      "recursive-types",
      "api-types",
      "one-by-one",
      "function-server-types"
    ],
    "packageJsonDependencies": [
      "api",
      "database",
      "port-conventions",
      "js-util",
      "fs-util",
      "get-path",
      "nested-menu",
      "k-explore",
      "one-by-one",
      "model-types",
      "peer-types",
      "api-types",
      "recursive-util",
      "recursive-types",
      "fs-util-js",
      "function-server-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addPeerMessage",
        "fileName": "src/addPeerMessage.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "addPeer",
        "fileName": "src/addPeer.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "Creation from model-types",
          "Device from peer-types",
          "ports from port-conventions"
        ]
      },
      {
        "name": "augmentDevice",
        "fileName": "src/augmentDevice.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "deviceGetAppsCalculated",
        "fileName": "src/deviceGetAppsCalculated.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "Device from peer-types",
          "ports from port-conventions"
        ]
      },
      {
        "name": "getAllAppOperations",
        "fileName": "src/getAllAppOperations.ts",
        "imports": [
          "db from database",
          "AppOperation from peer-types"
        ]
      },
      {
        "name": "getAugmentedPersons",
        "fileName": "src/getAugmentedPersons.ts",
        "imports": [
          "db from database",
          "destructureOptionalObject from js-util",
          "Device from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "getFirstEmoji",
        "fileName": "src/getFirstEmoji.ts",
        "imports": []
      },
      {
        "name": "getNestedPathObject",
        "fileName": "src/getNestedPathObject.ts",
        "imports": [
          "queryPathsArrayToNestedPathObject from recursive-util",
          "explore from k-explore",
          "makeRelative from fs-util-js",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "getPeerMessages",
        "fileName": "src/getPeerMesssages.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getPeerPeople",
        "fileName": "src/getPeerPeople.ts",
        "imports": [
          "db from database",
          "Person from peer-types"
        ]
      },
      {
        "name": "getPeersFromPeersRecursively",
        "fileName": "src/getPeersFromPeersRecursively.ts",
        "imports": []
      },
      {
        "name": "getPublicFolderNestedPathObjectFromPeer",
        "fileName": "src/getPublicFolderNestedPathObject.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getProjectRoot from get-path",
          "apiWithConfig from api",
          "ports from port-conventions",
          "RealApiReturnType from api-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "getPublicFolderNestedPathObject",
        "fileName": "src/getPublicFolderNestedPathObject.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getProjectRoot from get-path",
          "apiWithConfig from api",
          "ports from port-conventions",
          "RealApiReturnType from api-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "getPublicPeers",
        "fileName": "src/getPublicPeers.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "isPortUsed",
        "fileName": "src/isPortUsed.ts",
        "imports": []
      },
      {
        "name": "lateFetchPeerMessageSync",
        "fileName": "src/lateFetchPeerMessageSync.ts",
        "imports": [
          "db from database",
          "apiWithConfig from api",
          "PeerMessage from peer-types",
          "notEmpty from js-util",
          "ports from port-conventions",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "main",
        "fileName": "src/isPortUsed.test.ts",
        "imports": []
      },
      {
        "name": "ping",
        "fileName": "src/ping.ts",
        "imports": [
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "proactivePushAddPeerMessage",
        "fileName": "src/proactivePushAddPeerMessage.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "ports from port-conventions"
        ]
      },
      {
        "name": "removePeer",
        "fileName": "src/removePeer.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "sortDevices",
        "fileName": "src/sortDevice.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/getNestedPathObject.test.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "updatePeer",
        "fileName": "src/updatePeer.ts",
        "imports": [
          "db from database",
          "omitUndefinedValues from js-util"
        ]
      },
      {
        "name": "Device",
        "fileName": "src/sortDevice.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addPeer>",
        "fileName": "src/addPeer.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "Creation from model-types",
          "Device from peer-types",
          "ports from port-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof addPeerMessage>",
        "fileName": "src/addPeerMessage.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof augmentDevice>",
        "fileName": "src/augmentDevice.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof deviceGetAppsCalculated>",
        "fileName": "src/deviceGetAppsCalculated.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "Device from peer-types",
          "ports from port-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllAppOperations>",
        "fileName": "src/getAllAppOperations.ts",
        "imports": [
          "db from database",
          "AppOperation from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAugmentedPersons>",
        "fileName": "src/getAugmentedPersons.ts",
        "imports": [
          "db from database",
          "destructureOptionalObject from js-util",
          "Device from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFirstEmoji>",
        "fileName": "src/getFirstEmoji.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getNestedPathObject>",
        "fileName": "src/getNestedPathObject.ts",
        "imports": [
          "queryPathsArrayToNestedPathObject from recursive-util",
          "explore from k-explore",
          "makeRelative from fs-util-js",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPeerMessages>",
        "fileName": "src/getPeerMesssages.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getPeerPeople>",
        "fileName": "src/getPeerPeople.ts",
        "imports": [
          "db from database",
          "Person from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPeersFromPeersRecursively>",
        "fileName": "src/getPeersFromPeersRecursively.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getPublicFolderNestedPathObject>",
        "fileName": "src/getPublicFolderNestedPathObject.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getProjectRoot from get-path",
          "apiWithConfig from api",
          "ports from port-conventions",
          "RealApiReturnType from api-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicFolderNestedPathObjectFromPeer>",
        "fileName": "src/getPublicFolderNestedPathObject.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getProjectRoot from get-path",
          "apiWithConfig from api",
          "ports from port-conventions",
          "RealApiReturnType from api-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicPeers>",
        "fileName": "src/getPublicPeers.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof isPortUsed>",
        "fileName": "src/isPortUsed.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof lateFetchPeerMessageSync>",
        "fileName": "src/lateFetchPeerMessageSync.ts",
        "imports": [
          "db from database",
          "apiWithConfig from api",
          "PeerMessage from peer-types",
          "notEmpty from js-util",
          "ports from port-conventions",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/isPortUsed.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof ping>",
        "fileName": "src/ping.ts",
        "imports": [
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "NamedParameters<typeof proactivePushAddPeerMessage>",
        "fileName": "src/proactivePushAddPeerMessage.ts",
        "imports": [
          "apiWithConfig from api",
          "db from database",
          "ports from port-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof removePeer>",
        "fileName": "src/removePeer.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof sortDevices>",
        "fileName": "src/sortDevice.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/getNestedPathObject.test.ts",
        "imports": [
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof updatePeer>",
        "fileName": "src/updatePeer.ts",
        "imports": [
          "db from database",
          "omitUndefinedValues from js-util"
        ]
      },
      {
        "name": "Person",
        "fileName": "src/getAugmentedPersons.ts",
        "imports": [
          "db from database",
          "destructureOptionalObject from js-util",
          "Device from peer-types",
          "Person from peer-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "peer-functions",
      "api",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "model-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "port-conventions",
      "js-util",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "get-path",
      "recursive-util",
      "webpage-types",
      "nested-menu-types",
      "k-explore",
      "write-to-assets",
      "fs-util-js",
      "recursive-types",
      "api-types",
      "sdk-api",
      "one-by-one",
      "function-server-types"
    ]
  },
  {
    "operationName": "peer-types",
    "totalInstancesCount": 40,
    "totalImportCount": 37,
    "totalDependencyCount": 5,
    "importDependencies": [
      "model-types",
      "auth-types",
      "geo-types",
      "asset-type",
      "social-media-types"
    ],
    "packageJsonDependencies": [
      "model-types",
      "auth-types",
      "code-types",
      "geo-types",
      "asset-type",
      "social-media-types",
      "ua-parser-js",
      "server"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Achievement",
        "fileName": "src/Developer.ts",
        "imports": []
      },
      {
        "name": "AppOperation",
        "fileName": "src/AppOperation.ts",
        "imports": []
      },
      {
        "name": "AuthenticationMethod",
        "fileName": "src/AuthenticationMethjod.ts",
        "imports": []
      },
      {
        "name": "AuthenticationMethodMethod",
        "fileName": "src/AuthenticationMethjod.ts",
        "imports": []
      },
      {
        "name": "Authorization",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "AuthorizationModel",
        "fileName": "src/Group.ts",
        "imports": [
          "SlugModelType from model-types",
          "Authorization from auth-types",
          "AuthorizationModel from auth-types"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "Credit",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Developer",
        "fileName": "src/Developer.ts",
        "imports": []
      },
      {
        "name": "Device",
        "fileName": "src/Device.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "Group",
        "fileName": "src/Group.ts",
        "imports": [
          "SlugModelType from model-types",
          "Authorization from auth-types",
          "AuthorizationModel from auth-types"
        ]
      },
      {
        "name": "HandleObject",
        "fileName": "src/Platform.ts",
        "imports": [
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "IBrowser",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "ICPU",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "Id",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "IDevice",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "IEngine",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "Interest",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "IOS",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "IPInfo",
        "fileName": "src/IPInfo.ts",
        "imports": [
          "Position from geo-types"
        ]
      },
      {
        "name": "IResult",
        "fileName": "src/external/ua-parser-js.ts",
        "imports": []
      },
      {
        "name": "Language",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "MediaCredential",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "PageVisit",
        "fileName": "src/PageVisit.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "PeerMessage",
        "fileName": "src/old/PeerMessage.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Person",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Persona",
        "fileName": "src/Persona.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Location from geo-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Interest from social-media-types",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "PersonInformation",
        "fileName": "src/PersonInformation.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "PersonInformationValue",
        "fileName": "src/PersonInformationValue.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "PersonPlatformConnection",
        "fileName": "src/PersonPlatformConnection.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "PersonProfileDetails",
        "fileName": "src/PersonProfileDetails.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "PersonSocialMedia",
        "fileName": "src/PersonSocialMedia.ts",
        "imports": [
          "Slug from model-types"
        ]
      },
      {
        "name": "Platform",
        "fileName": "src/Platform.ts",
        "imports": [
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Position",
        "fileName": "src/IPInfo.ts",
        "imports": [
          "Position from geo-types"
        ]
      },
      {
        "name": "PublicPerson",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "PublicPersonKeys",
        "fileName": "src/Person.ts",
        "imports": [
          "Authorization from auth-types",
          "Credit from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/old/PeerMessage.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/Platform.ts",
        "imports": [
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "peer-types",
      "model-types",
      "matter-types",
      "auth-types",
      "geo-types",
      "asset-type",
      "social-media-types"
    ]
  },
  {
    "operationName": "peer-web",
    "totalInstancesCount": 17,
    "totalImportCount": 69,
    "totalDependencyCount": 24,
    "importDependencies": [
      "clickable-icon",
      "next/router",
      "react-query",
      "react-with-native",
      "api",
      "apps-menu",
      "peer-types",
      "writer-input",
      "react",
      "react-with-native-alert",
      "react-with-native-notification",
      "next-a-link",
      "convert-case",
      "nested-menu",
      "recursive-types",
      "port-conventions",
      "fancy-loader",
      "recursive-util",
      "next/app",
      "react-with-native-modal",
      "function-form",
      "authentication",
      "api-types",
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "emoji-regex",
      "next",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "clickable-icon",
      "api",
      "apps-menu",
      "peer-types",
      "writer-input",
      "react-with-native-notification",
      "next-a-link",
      "convert-case",
      "nested-menu",
      "port-conventions",
      "fancy-loader",
      "function-form",
      "api-types",
      "authentication",
      "recursive-types",
      "recursive-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AddPeer",
        "fileName": "src/pages/add-peer.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "useRouter from next/router",
          "toast from react-with-native-notification",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "Home",
        "fileName": "src/components/Home.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "useRouter from next/router",
          "useQuery from react-query",
          "Div from react-with-native",
          "P from react-with-native",
          "api from api",
          "AppsMenu from apps-menu"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "Page",
        "fileName": "src/pages/update-peer.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "FunctionForm from function-form",
          "useRouter from next/router",
          "FancyLoader from fancy-loader",
          "useQuery from react-query",
          "api from api",
          "toast from react-with-native-notification",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "PeerChat",
        "fileName": "src/components/PeerChat.tsx",
        "imports": [
          "useQuery from react-query",
          "api from api",
          "queries from api",
          "Div from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "PeerMessage from peer-types",
          "WriterInput from writer-input",
          "ClickableIcon from clickable-icon",
          "useEffect from react",
          "useState from react",
          "useAlert from react-with-native-alert",
          "toast from react-with-native-notification"
        ]
      },
      {
        "name": "PeerComponent",
        "fileName": "src/components/PeerComponent.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "useRouter from next/router",
          "Peer from peer-types",
          "Div from react-with-native",
          "P from react-with-native",
          "api from api",
          "ALink from next-a-link",
          "toast from react-with-native-notification",
          "slugify from convert-case"
        ]
      },
      {
        "name": "PeerMessageComponent",
        "fileName": "src/components/PeerChat.tsx",
        "imports": [
          "useQuery from react-query",
          "api from api",
          "queries from api",
          "Div from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "PeerMessage from peer-types",
          "WriterInput from writer-input",
          "ClickableIcon from clickable-icon",
          "useEffect from react",
          "useState from react",
          "useAlert from react-with-native-alert",
          "toast from react-with-native-notification"
        ]
      },
      {
        "name": "Peer",
        "fileName": "src/pages/peer.tsx",
        "imports": [
          "useRouter from next/router",
          "Div from react-with-native",
          "P from react-with-native",
          "useQuery from react-query",
          "api from api",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link"
        ]
      },
      {
        "name": "PublicMenu",
        "fileName": "src/components/PublicMenu.tsx",
        "imports": [
          "api from api",
          "NestedMenu from nested-menu",
          "NestedPathObject from recursive-types",
          "ports from port-conventions",
          "useEffect from react",
          "useState from react",
          "P from react-with-native",
          "FancyLoader from fancy-loader",
          "nestedPathObjectToNestedMenuRecursive from recursive-util"
        ]
      },
      {
        "name": "NamedParameters<typeof AddPeer>",
        "fileName": "src/pages/add-peer.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "useRouter from next/router",
          "toast from react-with-native-notification",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "NamedParameters<typeof Home>",
        "fileName": "src/components/Home.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "useRouter from next/router",
          "useQuery from react-query",
          "Div from react-with-native",
          "P from react-with-native",
          "api from api",
          "AppsMenu from apps-menu"
        ]
      },
      {
        "name": "NamedParameters<typeof Page>",
        "fileName": "src/pages/update-peer.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "FunctionForm from function-form",
          "useRouter from next/router",
          "FancyLoader from fancy-loader",
          "useQuery from react-query",
          "api from api",
          "toast from react-with-native-notification",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof Peer>",
        "fileName": "src/pages/peer.tsx",
        "imports": [
          "useRouter from next/router",
          "Div from react-with-native",
          "P from react-with-native",
          "useQuery from react-query",
          "api from api",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link"
        ]
      },
      {
        "name": "NamedParameters<typeof PeerChat>",
        "fileName": "src/components/PeerChat.tsx",
        "imports": [
          "useQuery from react-query",
          "api from api",
          "queries from api",
          "Div from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "PeerMessage from peer-types",
          "WriterInput from writer-input",
          "ClickableIcon from clickable-icon",
          "useEffect from react",
          "useState from react",
          "useAlert from react-with-native-alert",
          "toast from react-with-native-notification"
        ]
      },
      {
        "name": "NamedParameters<typeof PeerMessageComponent>",
        "fileName": "src/components/PeerChat.tsx",
        "imports": [
          "useQuery from react-query",
          "api from api",
          "queries from api",
          "Div from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "PeerMessage from peer-types",
          "WriterInput from writer-input",
          "ClickableIcon from clickable-icon",
          "useEffect from react",
          "useState from react",
          "useAlert from react-with-native-alert",
          "toast from react-with-native-notification"
        ]
      },
      {
        "name": "NamedParameters<typeof PublicMenu>",
        "fileName": "src/components/PublicMenu.tsx",
        "imports": [
          "api from api",
          "NestedMenu from nested-menu",
          "NestedPathObject from recursive-types",
          "ports from port-conventions",
          "useEffect from react",
          "useState from react",
          "P from react-with-native",
          "FancyLoader from fancy-loader",
          "nestedPathObjectToNestedMenuRecursive from recursive-util"
        ]
      },
      {
        "name": "PeerMessage",
        "fileName": "src/components/PeerChat.tsx",
        "imports": [
          "useQuery from react-query",
          "api from api",
          "queries from api",
          "Div from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "PeerMessage from peer-types",
          "WriterInput from writer-input",
          "ClickableIcon from clickable-icon",
          "useEffect from react",
          "useState from react",
          "useAlert from react-with-native-alert",
          "toast from react-with-native-notification"
        ]
      }
    ],
    "cumulativeDependencies": [
      "peer-web",
      "clickable-icon",
      "next/router",
      "react-query",
      "react-with-native",
      "api",
      "server-api-url",
      "sdk-env-public",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "apps-menu",
      "tooltip",
      "@popperjs/core",
      "markdown",
      "fs-util-js",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "make-test",
      "ui-util",
      "asset-view",
      "asset-type",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "writer-input",
      "cool-toast",
      "prompt-components",
      "react-with-native-select",
      "react-native",
      "react-with-native-ui",
      "sdk-db",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "breadcrumbs",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "share",
      "try-parse-json",
      "react",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "next-a-link",
      "next/link",
      "convert-case",
      "nested-menu",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "webpage-types",
      "nested-menu-types",
      "recursive-types",
      "port-conventions",
      "fancy-loader",
      "recursive-util",
      "next/app",
      "react-with-native-modal",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "authentication",
      "api-store",
      "api-types",
      "sdk-api",
      "react-with-native-store"
    ]
  },
  {
    "operationName": "persona-functions-node",
    "totalInstancesCount": 2,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "database"
    ],
    "packageJsonDependencies": [
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getPrimaryPersona",
        "fileName": "src/getPrimaryPersona.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getPrimaryPersona>",
        "fileName": "src/getPrimaryPersona.ts",
        "imports": [
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "persona-functions-node",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "play-import-node",
    "totalInstancesCount": 2,
    "totalImportCount": 8,
    "totalDependencyCount": 6,
    "importDependencies": [
      "youtube-controller",
      "model-types",
      "play-media-types",
      "database",
      "convert-case",
      "asset-functions-node"
    ],
    "packageJsonDependencies": [
      "youtube-controller",
      "model-types",
      "play-media-types",
      "database",
      "convert-case",
      "asset-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "youtubeToPlayItem",
        "fileName": "src/youtubeToPlayItem.ts",
        "imports": [
          "youtubeToMp3 from youtube-controller",
          "Creation from model-types",
          "generateId from model-types",
          "Artist from play-media-types",
          "PlayItem from play-media-types",
          "db from database",
          "slugify from convert-case",
          "processAsset from asset-functions-node"
        ]
      },
      {
        "name": "NamedParameters<typeof youtubeToPlayItem>",
        "fileName": "src/youtubeToPlayItem.ts",
        "imports": [
          "youtubeToMp3 from youtube-controller",
          "Creation from model-types",
          "generateId from model-types",
          "Artist from play-media-types",
          "PlayItem from play-media-types",
          "db from database",
          "slugify from convert-case",
          "processAsset from asset-functions-node"
        ]
      }
    ],
    "cumulativeDependencies": [
      "play-import-node",
      "youtube-controller",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "ffmpeg-util",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "one-by-one",
      "model-types",
      "play-media-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "asset-functions-node",
      "set-json-key",
      "function-context-type",
      "server/typings/common"
    ]
  },
  {
    "operationName": "play-import-web",
    "totalInstancesCount": 3,
    "totalImportCount": 12,
    "totalDependencyCount": 11,
    "importDependencies": [
      "layout",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "react-with-native-notification",
      "authentication"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout"
        ]
      }
    ],
    "cumulativeDependencies": [
      "play-import-web",
      "layout",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "menu",
      "fancy-loader",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types"
    ]
  },
  {
    "operationName": "play-media-types",
    "totalInstancesCount": 19,
    "totalImportCount": 23,
    "totalDependencyCount": 4,
    "importDependencies": [
      "model-types",
      "peer-types",
      "asset-type",
      "social-media-types"
    ],
    "packageJsonDependencies": [
      "model-types",
      "peer-types",
      "asset-type",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Artist_Person_Relation",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "Artist",
        "fileName": "src/Artist.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Slug from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/PlayItem.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/PlayItem.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "Interest",
        "fileName": "src/PlayItem.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/PlayItem.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "MusicNotes",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "Person",
        "fileName": "src/Artist.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Slug from model-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "PlayCategory_Person_Relation",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "PlayCategory",
        "fileName": "src/PlayCategory.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types"
        ]
      },
      {
        "name": "PlayItem_Person_Relation",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "PlayItem",
        "fileName": "src/PlayItem.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "PlayItemImport",
        "fileName": "src/PlayItemImport.ts",
        "imports": [
          "Id from model-types"
        ]
      },
      {
        "name": "PlayList_Person_Relation",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "PlayList",
        "fileName": "src/PlayList.ts",
        "imports": [
          "BackendAsset from asset-type",
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "Person from peer-types",
          "Interest from social-media-types"
        ]
      },
      {
        "name": "PlaySchedule",
        "fileName": "src/PlaySchedule.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "RelationModelType",
        "fileName": "src/music-person-relation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/Artist.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Slug from model-types",
          "Person from peer-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "play-media-types",
      "model-types",
      "matter-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "asset-type",
      "social-media-types"
    ]
  },
  {
    "operationName": "reminder-node",
    "totalInstancesCount": 5,
    "totalImportCount": 5,
    "totalDependencyCount": 4,
    "importDependencies": [
      "reminder-types",
      "database",
      "say",
      "one-by-one"
    ],
    "packageJsonDependencies": [
      "database",
      "reminder-types",
      "say",
      "one-by-one"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getDayNumber",
        "fileName": "src/getDayNumber.ts",
        "imports": [
          "Day from reminder-types"
        ]
      },
      {
        "name": "remindMe",
        "fileName": "src/remindMe.ts",
        "imports": [
          "db from database",
          "Day from reminder-types",
          "saySomething from say",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "Day",
        "fileName": "src/getDayNumber.ts",
        "imports": [
          "Day from reminder-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getDayNumber>",
        "fileName": "src/getDayNumber.ts",
        "imports": [
          "Day from reminder-types"
        ]
      },
      {
        "name": "NamedParameters<typeof remindMe>",
        "fileName": "src/remindMe.ts",
        "imports": [
          "db from database",
          "Day from reminder-types",
          "saySomething from say",
          "oneByOne from one-by-one"
        ]
      }
    ],
    "cumulativeDependencies": [
      "reminder-node",
      "reminder-types",
      "model-types",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "say",
      "ffmpeg-util",
      "one-by-one"
    ]
  },
  {
    "operationName": "reminder-types",
    "totalInstancesCount": 6,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "DateNumber",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Day",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "HourNumber",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "RecurringReminder",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/RecurringReminder.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "reminder-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "file-search",
    "totalInstancesCount": 5,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react-with-native",
      "next-a-link",
      "augmented-word-types"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "next-a-link",
      "augmented-word-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MatchingText",
        "fileName": "src/MatchingText.tsx",
        "imports": [
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "PathSearchResults",
        "fileName": "src/PathSearchResults.tsx",
        "imports": [
          "ALink from next-a-link",
          "Div from react-with-native",
          "AugmentedWord from augmented-word-types"
        ]
      },
      {
        "name": "AugmentedWord",
        "fileName": "src/PathSearchResults.tsx",
        "imports": [
          "ALink from next-a-link",
          "Div from react-with-native",
          "AugmentedWord from augmented-word-types"
        ]
      },
      {
        "name": "NamedParameters<typeof MatchingText>",
        "fileName": "src/MatchingText.tsx",
        "imports": [
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof PathSearchResults>",
        "fileName": "src/PathSearchResults.tsx",
        "imports": [
          "ALink from next-a-link",
          "Div from react-with-native",
          "AugmentedWord from augmented-word-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "file-search",
      "react-with-native",
      "next-a-link",
      "next/link",
      "augmented-word-types"
    ]
  },
  {
    "operationName": "search",
    "totalInstancesCount": 3,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "convert-case",
      "make-test"
    ],
    "packageJsonDependencies": [
      "convert-case",
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findSentenceMatches",
        "fileName": "src/general.ts",
        "imports": [
          "lowerCaseArray from convert-case"
        ]
      },
      {
        "name": "magicalRecursiveReducer",
        "fileName": "src/searchRecursiveObject.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "searchRecursiveObjectArray",
        "fileName": "src/searchRecursiveObject.ts",
        "imports": [
          "makeTest from make-test"
        ]
      }
    ],
    "cumulativeDependencies": [
      "search",
      "convert-case",
      "make-test"
    ]
  },
  {
    "operationName": "search-web",
    "totalInstancesCount": 16,
    "totalImportCount": 36,
    "totalDependencyCount": 24,
    "importDependencies": [
      "apps-menu",
      "js-util",
      "react",
      "react-with-native",
      "timeline",
      "share",
      "context-menu",
      "react-with-native-router",
      "next/app",
      "layout",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication",
      "next",
      "fs-util",
      "sdk-operations",
      "database",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "apps-menu",
      "database",
      "fs-util",
      "js-util",
      "next",
      "next-pwa",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "timeline",
      "tooltip",
      "layout",
      "react-with-native-notification",
      "authentication",
      "api-store",
      "nested-menu",
      "writer-input",
      "context-menu",
      "share",
      "file-tabs"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAllSearchResults",
        "fileName": "src/util/getAllSearchResults.ts",
        "imports": []
      },
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...query].tsx",
        "imports": []
      },
      {
        "name": "getTimelineItems",
        "fileName": "src/util/searchGetStaticProps.ts",
        "imports": [
          "GetStaticProps from next",
          "takeFirst from js-util",
          "fs from fs-util",
          "path from fs-util",
          "operations from sdk-operations",
          "db from database"
        ]
      },
      {
        "name": "HomePage",
        "fileName": "src/components/HomePage.tsx",
        "imports": [
          "AppsMenu from apps-menu",
          "pickRandomArrayItem from js-util",
          "useState from react",
          "Div from react-with-native",
          "Timeline from timeline",
          "Share from share",
          "useContextMenu from context-menu"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "AuthenticationLayout from layout",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "useRouter from react-with-native-router",
          "ToastContainer from react-with-native-notification",
          "MeAuthenticationInfo from authentication",
          "Div from react-with-native"
        ]
      },
      {
        "name": "SearchBar",
        "fileName": "src/components/SearchBar.tsx",
        "imports": [
          "Div from react-with-native",
          "Form from react-with-native",
          "Input from react-with-native",
          "useState from react",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "searchGetStaticProps",
        "fileName": "src/util/searchGetStaticProps.ts",
        "imports": [
          "GetStaticProps from next",
          "takeFirst from js-util",
          "fs from fs-util",
          "path from fs-util",
          "operations from sdk-operations",
          "db from database"
        ]
      },
      {
        "name": "SearchResultComponent",
        "fileName": "src/components/SearchResultComponent.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "SearchResultPage",
        "fileName": "src/components/SearchResultPage.tsx",
        "imports": [
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllSearchResults>",
        "fileName": "src/util/getAllSearchResults.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof HomePage>",
        "fileName": "src/components/HomePage.tsx",
        "imports": [
          "AppsMenu from apps-menu",
          "pickRandomArrayItem from js-util",
          "useState from react",
          "Div from react-with-native",
          "Timeline from timeline",
          "Share from share",
          "useContextMenu from context-menu"
        ]
      },
      {
        "name": "NamedParameters<typeof SearchBar>",
        "fileName": "src/components/SearchBar.tsx",
        "imports": [
          "Div from react-with-native",
          "Form from react-with-native",
          "Input from react-with-native",
          "useState from react",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof SearchResultComponent>",
        "fileName": "src/components/SearchResultComponent.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof SearchResultPage>",
        "fileName": "src/components/SearchResultPage.tsx",
        "imports": [
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "QueryPageProps",
        "fileName": "src/util/types.ts",
        "imports": []
      },
      {
        "name": "SearchResult",
        "fileName": "src/util/types.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "search-web",
      "apps-menu",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "tooltip",
      "@popperjs/core",
      "markdown",
      "fs-util-js",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "fancy-loader",
      "js-util",
      "react",
      "react-with-native",
      "timeline",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "vscode-open",
      "get-path",
      "log",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "share",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "cool-toast",
      "context-menu",
      "react-popper",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "next/app",
      "layout",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "next-a-link",
      "next/link",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "next",
      "fs-util",
      "graceful-fs",
      "sdk-operations",
      "database",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "next-paths"
    ]
  },
  {
    "operationName": "timeline",
    "totalInstancesCount": 1,
    "totalImportCount": 8,
    "totalDependencyCount": 8,
    "importDependencies": [
      "markdown",
      "api",
      "react-with-native",
      "markdown-types",
      "model-types",
      "peer-types",
      "social-media-types",
      "vscode-open"
    ],
    "packageJsonDependencies": [
      "js-util",
      "react-with-native",
      "markdown",
      "api",
      "model-types",
      "peer-types",
      "social-media-types",
      "vscode-open",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Timeline",
        "fileName": "src/Timeline.tsx",
        "imports": [
          "MarkdownCodeblock from markdown",
          "api from api",
          "Div from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "timeline",
      "markdown",
      "fs-util-js",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "port-conventions",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "convert-case",
      "make-test",
      "pluralize",
      "text-or-binary",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "react",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "augmented-word-types",
      "js-util",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "react-with-native",
      "markdown-types",
      "bundle-types",
      "model-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "vscode-open",
      "fs-util",
      "log",
      "graceful-fs",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "sdk-operations"
    ]
  },
  {
    "operationName": "social-media-functions",
    "totalInstancesCount": 2,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "code-types",
      "writer-functions"
    ],
    "packageJsonDependencies": [
      "code-types",
      "writer-functions"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getPostableFrontmatterSchema",
        "fileName": "src/getSocialMediaFrontmatterSchema.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "getFrontmatterSchema from writer-functions"
        ]
      },
      {
        "name": "NamedParameters<typeof getPostableFrontmatterSchema>",
        "fileName": "src/getSocialMediaFrontmatterSchema.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "getFrontmatterSchema from writer-functions"
        ]
      }
    ],
    "cumulativeDependencies": [
      "social-media-functions",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "writer-functions",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "sdk-db",
      "database",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "explore-project",
      "bundle-util",
      "bundle-types",
      "db-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "asset-type",
      "asset-functions-node",
      "function-context-type",
      "server/typings/common",
      "ffmpeg-util",
      "js-util",
      "markdown-types",
      "read-markdown-file",
      "markdown-parse-js"
    ]
  },
  {
    "operationName": "social-media-types",
    "totalInstancesCount": 12,
    "totalImportCount": 10,
    "totalDependencyCount": 3,
    "importDependencies": [
      "model-types",
      "geo-types",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "model-types",
      "geo-types",
      "asset-type",
      "code-types",
      "bundle-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BackendAsset",
        "fileName": "src/MediaPost.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/MediaChannel.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Interest",
        "fileName": "src/Interest.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Language",
        "fileName": "src/MediaChannel.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/MediaChannel.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "MediaChannel",
        "fileName": "src/MediaChannel.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "MediaCredential",
        "fileName": "src/MediaCredential.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "MediaPlatformEnum",
        "fileName": "src/MediaPlatformEnum.ts",
        "imports": []
      },
      {
        "name": "MediaPost",
        "fileName": "src/MediaPost.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/MediaChannel.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "SocialMediaPostTypeReturnType",
        "fileName": "src/SocialMediaPostReturnType.ts",
        "imports": []
      },
      {
        "name": "SocialMediaPostTypeReturnType",
        "fileName": "src/SocialMediaPostReturnType.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "social-media-types",
      "model-types",
      "matter-types",
      "geo-types",
      "asset-type"
    ]
  },
  {
    "operationName": "frontmatter-util",
    "totalInstancesCount": 20,
    "totalImportCount": 22,
    "totalDependencyCount": 9,
    "importDependencies": [
      "matter-types",
      "make-test",
      "js-util",
      "asset-type",
      "code-types",
      "name-conventions",
      "marked-util",
      "markdown-types",
      "model-types"
    ],
    "packageJsonDependencies": [
      "matter-types",
      "make-test",
      "js-util",
      "asset-type",
      "code-types",
      "name-conventions",
      "marked-util",
      "markdown-types",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "frontmatterParseToString",
        "fileName": "src/frontmatterParseToString.ts",
        "imports": [
          "Frontmatter from matter-types",
          "makeTest from make-test",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "frontmatterToObject",
        "fileName": "src/frontmatterToObject.ts",
        "imports": [
          "BackendAsset from asset-type",
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "findEmbeds from marked-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "tryParseDate from markdown-types"
        ]
      },
      {
        "name": "getFrontmatterValueString",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "markdownModelTypeToMarkdownString",
        "fileName": "src/markdownModelTypeToMarkdownString.ts",
        "imports": [
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "objectToFrontmatter",
        "fileName": "src/objectToFrontmatter.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "BackendAsset from asset-type",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "parseFrontmatterString",
        "fileName": "src/parseFrontmatterString.ts",
        "imports": []
      },
      {
        "name": "quotedOrNot",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "stringifyNewlines",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "Frontmatter",
        "fileName": "src/frontmatterToObject.ts",
        "imports": [
          "BackendAsset from asset-type",
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "findEmbeds from marked-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "tryParseDate from markdown-types"
        ]
      },
      {
        "name": "FrontmatterParse",
        "fileName": "src/objectToFrontmatter.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "BackendAsset from asset-type",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "FrontmatterValue",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof frontmatterParseToString>",
        "fileName": "src/frontmatterParseToString.ts",
        "imports": [
          "Frontmatter from matter-types",
          "makeTest from make-test",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof frontmatterToObject>",
        "fileName": "src/frontmatterToObject.ts",
        "imports": [
          "BackendAsset from asset-type",
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "findEmbeds from marked-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "tryParseDate from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFrontmatterValueString>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof markdownModelTypeToMarkdownString>",
        "fileName": "src/markdownModelTypeToMarkdownString.ts",
        "imports": [
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof objectToFrontmatter>",
        "fileName": "src/objectToFrontmatter.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "BackendAsset from asset-type",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof parseFrontmatterString>",
        "fileName": "src/parseFrontmatterString.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof quotedOrNot>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof stringifyNewlines>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/objectToFrontmatter.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "Frontmatter from matter-types",
          "FrontmatterParse from matter-types",
          "getAssetInputType from name-conventions",
          "BackendAsset from asset-type",
          "makeArray from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "frontmatter-util",
      "matter-types",
      "make-test",
      "js-util",
      "asset-type",
      "code-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "markdown-types",
      "bundle-types",
      "model-types"
    ]
  },
  {
    "operationName": "short-markdown-writer-input",
    "totalInstancesCount": 7,
    "totalImportCount": 21,
    "totalDependencyCount": 10,
    "importDependencies": [
      "asset-view",
      "js-util",
      "react",
      "react-with-native",
      "short-markdown-types",
      "server-api-url",
      "use-on-screen",
      "api",
      "fancy-loader",
      "sdk-db"
    ],
    "packageJsonDependencies": [
      "asset-view",
      "js-util",
      "react-with-native",
      "short-markdown-types",
      "server-api-url",
      "use-on-screen",
      "api",
      "fancy-loader",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ShortMarkdownPlayer",
        "fileName": "src/ShortMarkdownPlayer.tsx",
        "imports": [
          "getSrc from asset-view",
          "notEmpty from js-util",
          "useState from react",
          "useEffect from react",
          "Div from react-with-native",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "ShortMarkdownSlide",
        "fileName": "src/ShortMarkdownSlide.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "useRef from react",
          "useEffect from react",
          "useState from react",
          "ViewEmbed from short-markdown-types",
          "getSrc from asset-view",
          "isDev from server-api-url",
          "useOnScreen from use-on-screen"
        ]
      },
      {
        "name": "ShortStudio",
        "fileName": "src/ShortStudio.tsx",
        "imports": [
          "queries from api",
          "FancyLoader from fancy-loader",
          "Div from react-with-native",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "useMultiAudio",
        "fileName": "src/useMultiAudio.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "NamedParameters<typeof ShortMarkdownPlayer>",
        "fileName": "src/ShortMarkdownPlayer.tsx",
        "imports": [
          "getSrc from asset-view",
          "notEmpty from js-util",
          "useState from react",
          "useEffect from react",
          "Div from react-with-native",
          "ShortMarkdown from short-markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof useMultiAudio>",
        "fileName": "src/useMultiAudio.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "ShortMarkdown",
        "fileName": "src/ShortMarkdownPlayer.tsx",
        "imports": [
          "getSrc from asset-view",
          "notEmpty from js-util",
          "useState from react",
          "useEffect from react",
          "Div from react-with-native",
          "ShortMarkdown from short-markdown-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "short-markdown-writer-input",
      "asset-view",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "pluralize",
      "fs-util-js",
      "asset-type",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "clickable-icon",
      "model-types",
      "text-or-binary",
      "js-util",
      "react",
      "react-with-native",
      "short-markdown-types",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "port-conventions",
      "use-on-screen",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "fancy-loader",
      "sdk-db"
    ]
  },
  {
    "operationName": "writer-demo-web",
    "totalInstancesCount": 1,
    "totalImportCount": 11,
    "totalDependencyCount": 9,
    "importDependencies": [
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native",
      "react",
      "writer-input",
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "next-transpile-modules",
      "nightwind",
      "react",
      "next",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "react-with-native-alert",
      "react-with-native-modal",
      "writer-input"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "useRouter from react-with-native-router"
        ]
      }
    ],
    "cumulativeDependencies": [
      "writer-demo-web",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "react-with-native",
      "react",
      "writer-input",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "clickable-icon",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "react-with-native-select",
      "react-with-native-ui",
      "model-types",
      "sdk-db",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "asset-type",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "frontmatter-util",
      "marked-util",
      "js-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "matter-types",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "try-parse-json",
      "react-with-native-store"
    ]
  },
  {
    "operationName": "writer-functions",
    "totalInstancesCount": 28,
    "totalImportCount": 43,
    "totalDependencyCount": 15,
    "importDependencies": [
      "fs-util",
      "get-path",
      "sdk-db",
      "database",
      "code-types",
      "explore-project",
      "webpage-types",
      "recursive-util",
      "asset-type",
      "asset-functions-node",
      "js-util",
      "markdown-types",
      "matter-types",
      "read-markdown-file",
      "markdown-parse-js"
    ],
    "packageJsonDependencies": [
      "asset-functions-node",
      "asset-type",
      "code-types",
      "database",
      "explore-project",
      "fs-util",
      "get-path",
      "js-util",
      "recursive-util",
      "webpage-types",
      "markdown-types",
      "matter-types",
      "read-markdown-file",
      "markdown-parse-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "copyPath",
        "fileName": "src/copyPath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "deleteFileOrFolder",
        "fileName": "src/deleteFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getFileContents",
        "fileName": "src/getFileContents.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getFrontmatterSchema",
        "fileName": "src/getFrontmatterSchema.ts",
        "imports": [
          "DbModels from sdk-db",
          "db from database",
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "getWriterWebPagesMenu",
        "fileName": "src/getWriterWebPagesMenu.ts",
        "imports": [
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "getWriterWebPages",
        "fileName": "src/getWriterWebPages.ts",
        "imports": [
          "getProjectRelativePaths from explore-project",
          "WriterWebPage from webpage-types"
        ]
      },
      {
        "name": "movePath",
        "fileName": "src/movePath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "newFile",
        "fileName": "src/newFile.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "newFolder",
        "fileName": "src/newFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "processAssetUpload",
        "fileName": "src/processAssetUpload.ts",
        "imports": [
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "renameFileOrFolder",
        "fileName": "src/renameFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "saveFileContents",
        "fileName": "src/saveFileContents.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "trashFileOrFolder",
        "fileName": "src/trashFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "updateFrontmatter",
        "fileName": "src/updateFrontmatter.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "MarkdownParse from markdown-types",
          "Frontmatter from matter-types",
          "readMarkdownFile from read-markdown-file",
          "markdownParseToMarkdownString from markdown-parse-js"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/processAssetUpload.ts",
        "imports": [
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof copyPath>",
        "fileName": "src/copyPath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof deleteFileOrFolder>",
        "fileName": "src/deleteFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getFileContents>",
        "fileName": "src/getFileContents.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getWriterWebPages>",
        "fileName": "src/getWriterWebPages.ts",
        "imports": [
          "getProjectRelativePaths from explore-project",
          "WriterWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getWriterWebPagesMenu>",
        "fileName": "src/getWriterWebPagesMenu.ts",
        "imports": [
          "getMenuPagesObject from recursive-util"
        ]
      },
      {
        "name": "NamedParameters<typeof movePath>",
        "fileName": "src/movePath.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof newFile>",
        "fileName": "src/newFile.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof newFolder>",
        "fileName": "src/newFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof processAssetUpload>",
        "fileName": "src/processAssetUpload.ts",
        "imports": [
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof renameFileOrFolder>",
        "fileName": "src/renameFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof saveFileContents>",
        "fileName": "src/saveFileContents.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof trashFileOrFolder>",
        "fileName": "src/trashFileOrFolder.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof updateFrontmatter>",
        "fileName": "src/updateFrontmatter.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getProjectRoot from get-path",
          "MarkdownParse from markdown-types",
          "Frontmatter from matter-types",
          "readMarkdownFile from read-markdown-file",
          "markdownParseToMarkdownString from markdown-parse-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "writer-functions",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "sdk-db",
      "database",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "convert-case",
      "pluralize",
      "model-types",
      "measure-performance",
      "code-types",
      "ts-json-schema-generator",
      "explore-project",
      "bundle-util",
      "bundle-types",
      "db-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "asset-type",
      "asset-functions-node",
      "function-context-type",
      "server/typings/common",
      "ffmpeg-util",
      "js-util",
      "markdown-types",
      "matter-types",
      "read-markdown-file",
      "markdown-parse-js"
    ]
  },
  {
    "operationName": "writer-input",
    "totalInstancesCount": 60,
    "totalImportCount": 125,
    "totalDependencyCount": 34,
    "importDependencies": [
      "api",
      "clickable-icon",
      "cool-toast",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "react",
      "react-with-native",
      "sdk-db",
      "asset-functions-js",
      "asset-type",
      "code-types",
      "frontmatter-util",
      "js-util",
      "markdown-parse-js",
      "markdown-types",
      "matter-types",
      "simplified-schema-form",
      "server-api-url",
      "markdown",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "react-with-native-store",
      "writer-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "marked",
      "share",
      "react-with-native-alert",
      "try-parse-json"
    ],
    "packageJsonDependencies": [
      "api",
      "breadcrumbs",
      "clickable-icon",
      "fancy-loader",
      "filename-conventions",
      "fs-util-js",
      "hotkeys",
      "js-util",
      "key-value-markdown-js",
      "labeled-button",
      "markdown",
      "markdown-parse-js",
      "marked",
      "react-with-native",
      "react-with-native-store",
      "server-api-url",
      "simplified-schema-form",
      "try-parse-json",
      "code-types",
      "writer-types",
      "react",
      "augmented-word-types",
      "cool-toast",
      "asset-functions-js",
      "asset-type",
      "frontmatter-util",
      "markdown-types",
      "matter-types",
      "short-markdown-types",
      "asset-view",
      "use-on-screen",
      "ai-types",
      "react-with-native-alert",
      "react-with-native-select",
      "share",
      "db-crud",
      "context-menu",
      "react-native",
      "short-markdown-writer-input",
      "prompt-components"
    ],
    "instancesAndTheirImports": [
      {
        "name": "add",
        "fileName": "src/editors/Subword.tsx",
        "imports": [
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "Completion",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "ContentEditableDivInput",
        "fileName": "src/editors/ContentEditableDivInput.tsx",
        "imports": [
          "notEmpty from js-util",
          "useEffect from react",
          "useRef from react",
          "Div from react-with-native",
          "FinalDivType from react-with-native",
          "MarkdownParseRenderConfig from markdown",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "ContextTextArea",
        "fileName": "src/old/ContextTextArea.tsx",
        "imports": [
          "useLastSelection from share",
          "useAlert from react-with-native-alert",
          "useHotkeys from hotkeys",
          "queries from api",
          "getFileTypeFromPath from filename-conventions"
        ]
      },
      {
        "name": "DivContentEditable",
        "fileName": "src/old/DivContentEditable.tsx",
        "imports": [
          "useEffect from react",
          "useRef from react",
          "Div from react-with-native"
        ]
      },
      {
        "name": "editSubtextSubwordConfig",
        "fileName": "src/config/editSubtextSubwordConfig.ts",
        "imports": [
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "EditWriterInput",
        "fileName": "src/EditWriterInput.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "ClickableIcon from clickable-icon",
          "errorToast from cool-toast",
          "getFileTypeFromPath from filename-conventions",
          "getFileOrFolderName from fs-util-js",
          "FilePromptSelect from prompt-components",
          "useState from react",
          "Div from react-with-native",
          "DbModels from sdk-db"
        ]
      },
      {
        "name": "FrontmatterForm",
        "fileName": "src/FrontmatterForm.tsx",
        "imports": [
          "api from api",
          "findAssetParametersRecursively from asset-functions-js",
          "BackendAsset from asset-type",
          "SimplifiedSchema from code-types",
          "frontmatterToObject from frontmatter-util",
          "objectToFrontmatter from frontmatter-util",
          "makeArray from js-util",
          "takeFirst from js-util",
          "markdownParseToMarkdownString from markdown-parse-js",
          "MarkdownParse from markdown-types",
          "Frontmatter from matter-types",
          "useState from react",
          "SimplifiedSchemaForm from simplified-schema-form",
          "useReferencableModelData from simplified-schema-form"
        ]
      },
      {
        "name": "getContext",
        "fileName": "src/old/getContext.ts",
        "imports": []
      },
      {
        "name": "getSubtext",
        "fileName": "src/editors/getSubtext.tsx",
        "imports": [
          "SubtextConfig from writer-types"
        ]
      },
      {
        "name": "getTextSegments",
        "fileName": "src/editors/ContentEditableDivInput.tsx",
        "imports": [
          "notEmpty from js-util",
          "useEffect from react",
          "useRef from react",
          "Div from react-with-native",
          "FinalDivType from react-with-native",
          "MarkdownParseRenderConfig from markdown",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "getWriterTypeFromContent",
        "fileName": "src/util/getWriterTypeFromContent.ts",
        "imports": [
          "WriterType from filename-conventions",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "isAugmentedWordMatch",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "isTypescript",
        "fileName": "src/util/isTypescript.ts",
        "imports": []
      },
      {
        "name": "MarkdownCompletions",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "MarkdownParsePresentation",
        "fileName": "src/MarkdownParsePresentation.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url",
          "MarkdownParse from markdown-types",
          "MarkdownContent from markdown",
          "renderBreadCrumbs from breadcrumbs",
          "ClickableIcon from clickable-icon",
          "ClickableIconType from clickable-icon",
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "flattenMarkdownChunks from key-value-markdown-js",
          "useHotkey from hotkeys"
        ]
      },
      {
        "name": "MarkdownView",
        "fileName": "src/MarkdownView.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParseRenderConfig from markdown/build/esm",
          "renderMarkdownParse from markdown/build/esm",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MarkedParagraph",
        "fileName": "src/editors/MarkedParagraph.tsx",
        "imports": [
          "marked from marked"
        ]
      },
      {
        "name": "MarkedText",
        "fileName": "src/editors/MarkedText.tsx",
        "imports": [
          "marked from marked"
        ]
      },
      {
        "name": "MarkedToken",
        "fileName": "src/editors/MarkedToken.tsx",
        "imports": [
          "getRealSrc from markdown",
          "MarkdownParseRenderConfig from markdown",
          "marked from marked",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "omitSpecialCharactersFromStart",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "parseTextContentToHtmlString",
        "fileName": "src/editors/SmartContentEditableDivInput.tsx",
        "imports": [
          "useEffect from react",
          "Div from react-with-native",
          "marked from marked",
          "WriterType from filename-conventions",
          "MarkdownParseRenderConfig from markdown",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "SmartContentEditableDivInput",
        "fileName": "src/editors/SmartContentEditableDivInput.tsx",
        "imports": [
          "useEffect from react",
          "Div from react-with-native",
          "marked from marked",
          "WriterType from filename-conventions",
          "MarkdownParseRenderConfig from markdown",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "SpannedSentence",
        "fileName": "src/editors/SpannedSentence.tsx",
        "imports": []
      },
      {
        "name": "SubtextContainer",
        "fileName": "src/editors/SubtextContainer.tsx",
        "imports": [
          "SubtextConfig from writer-types"
        ]
      },
      {
        "name": "Subword",
        "fileName": "src/editors/Subword.tsx",
        "imports": [
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "testAllContentEditableRenderComponents",
        "fileName": "src/editors/testAllContentEditableRenderComponents.tsx",
        "imports": []
      },
      {
        "name": "testContentEditableRenderComponent",
        "fileName": "src/editors/testContentEditableRenderComponent.tsx",
        "imports": [
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types",
          "MarkdownParseRenderConfig from markdown",
          "marked from marked"
        ]
      },
      {
        "name": "TitleContainer",
        "fileName": "src/TitleContainer.tsx",
        "imports": [
          "LabeledButton from labeled-button",
          "LabeledButtonType from labeled-button",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "trimAround",
        "fileName": "src/util/word-trimming.ts",
        "imports": []
      },
      {
        "name": "trimLeft",
        "fileName": "src/util/word-trimming.ts",
        "imports": []
      },
      {
        "name": "TypescriptCompletions",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "WriterConfigForm",
        "fileName": "src/config/WriterConfigForm.tsx",
        "imports": [
          "Div from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "SimplifiedSchema from code-types",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "WriterInput",
        "fileName": "src/WriterInput.tsx",
        "imports": [
          "useEffect from react",
          "Div from react-with-native",
          "DbModels from sdk-db",
          "api from api",
          "queries from api",
          "AugmentedWord from augmented-word-types",
          "FancyLoader from fancy-loader",
          "getWriterType from filename-conventions",
          "WriterType from filename-conventions",
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownParseRenderConfig from markdown",
          "mdToJsonParse from markdown-parse-js",
          "isDev from server-api-url",
          "ShortStudio from short-markdown-writer-input",
          "WriterViewEnum from writer-types"
        ]
      },
      {
        "name": "AugmentedWord",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/MarkdownView.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParseRenderConfig from markdown/build/esm",
          "renderMarkdownParse from markdown/build/esm",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MarkdownParseRenderConfig",
        "fileName": "src/editors/MarkedToken.tsx",
        "imports": [
          "getRealSrc from markdown",
          "MarkdownParseRenderConfig from markdown",
          "marked from marked",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof Completion>",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof editSubtextSubwordConfig>",
        "fileName": "src/config/editSubtextSubwordConfig.ts",
        "imports": [
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getContext>",
        "fileName": "src/old/getContext.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSubtext>",
        "fileName": "src/editors/getSubtext.tsx",
        "imports": [
          "SubtextConfig from writer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getWriterTypeFromContent>",
        "fileName": "src/util/getWriterTypeFromContent.ts",
        "imports": [
          "WriterType from filename-conventions",
          "tryParseJson from try-parse-json"
        ]
      },
      {
        "name": "NamedParameters<typeof isAugmentedWordMatch>",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof isTypescript>",
        "fileName": "src/util/isTypescript.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof MarkdownCompletions>",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof MarkdownParsePresentation>",
        "fileName": "src/MarkdownParsePresentation.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url",
          "MarkdownParse from markdown-types",
          "MarkdownContent from markdown",
          "renderBreadCrumbs from breadcrumbs",
          "ClickableIcon from clickable-icon",
          "ClickableIconType from clickable-icon",
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "flattenMarkdownChunks from key-value-markdown-js",
          "useHotkey from hotkeys"
        ]
      },
      {
        "name": "NamedParameters<typeof MarkdownView>",
        "fileName": "src/MarkdownView.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParseRenderConfig from markdown/build/esm",
          "renderMarkdownParse from markdown/build/esm",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof MarkedToken>",
        "fileName": "src/editors/MarkedToken.tsx",
        "imports": [
          "getRealSrc from markdown",
          "MarkdownParseRenderConfig from markdown",
          "marked from marked",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof omitSpecialCharactersFromStart>",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof SpannedSentence>",
        "fileName": "src/editors/SpannedSentence.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof SubtextContainer>",
        "fileName": "src/editors/SubtextContainer.tsx",
        "imports": [
          "SubtextConfig from writer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof testAllContentEditableRenderComponents>",
        "fileName": "src/editors/testAllContentEditableRenderComponents.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof trimAround>",
        "fileName": "src/util/word-trimming.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof trimLeft>",
        "fileName": "src/util/word-trimming.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof TypescriptCompletions>",
        "fileName": "src/editors/autocomplete-components.tsx",
        "imports": [
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "MarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof WriterConfigForm>",
        "fileName": "src/config/WriterConfigForm.tsx",
        "imports": [
          "Div from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "SimplifiedSchema from code-types",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "SubtextConfig",
        "fileName": "src/editors/getSubtext.tsx",
        "imports": [
          "SubtextConfig from writer-types"
        ]
      },
      {
        "name": "SubwordConfig",
        "fileName": "src/editors/MarkedToken.tsx",
        "imports": [
          "getRealSrc from markdown",
          "MarkdownParseRenderConfig from markdown",
          "marked from marked",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      },
      {
        "name": "TextEditingContext",
        "fileName": "src/old/getContext.ts",
        "imports": []
      },
      {
        "name": "WriterConfigFormValue",
        "fileName": "src/config/WriterConfigForm.tsx",
        "imports": [
          "Div from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "SimplifiedSchema from code-types",
          "SubtextConfig from writer-types",
          "SubwordConfig from writer-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "writer-input",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "clickable-icon",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "react-with-native-select",
      "react-native",
      "react-with-native-ui",
      "model-types",
      "react",
      "react-with-native",
      "sdk-db",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "asset-type",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "frontmatter-util",
      "marked-util",
      "js-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "matter-types",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "react-with-native-store",
      "writer-types",
      "language-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "react-with-native-alert",
      "@headlessui/react",
      "try-parse-json"
    ]
  },
  {
    "operationName": "writer-types",
    "totalInstancesCount": 7,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "language-types",
      "model-types"
    ],
    "packageJsonDependencies": [
      "language-types",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Language",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "SubtextConfig",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "SubtextRelatedThing",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "SubwordConfig",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "SubwordViewMode",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "WordPriority",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      },
      {
        "name": "WriterViewEnum",
        "fileName": "src/types.ts",
        "imports": [
          "WordPriority from language-types",
          "Language from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "writer-types",
      "language-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "asset-type",
      "js-util",
      "model-types"
    ]
  },
  {
    "operationName": "writer-web",
    "totalInstancesCount": 3,
    "totalImportCount": 17,
    "totalDependencyCount": 14,
    "importDependencies": [
      "api",
      "layout",
      "react-with-native",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "api",
      "layout",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "react-with-native-notification",
      "clickable-icon",
      "db-crud"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "queries from api",
          "AuthenticationLayout from layout",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "writer-web",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "cool-toast",
      "big-button",
      "model-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "asset-view",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator",
      "menu",
      "file-search",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react",
      "react-with-native",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "next-paths",
      "db-crud",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "get-light",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getLight",
        "fileName": "src/getLight.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getLight>",
        "fileName": "src/getLight.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "get-light"
    ]
  },
  {
    "operationName": "get-location",
    "totalInstancesCount": 2,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "log",
      "child-process-helper"
    ],
    "packageJsonDependencies": [
      "log",
      "child-process-helper"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getLocation",
        "fileName": "src/getLocation.ts",
        "imports": [
          "log from log",
          "execAsync from child-process-helper"
        ]
      },
      {
        "name": "NamedParameters<typeof getLocation>",
        "fileName": "src/getLocation.ts",
        "imports": [
          "log from log",
          "execAsync from child-process-helper"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-location",
      "log",
      "child-process-helper"
    ]
  },
  {
    "operationName": "is-online",
    "totalInstancesCount": 6,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "fetchWithTimeout",
        "fileName": "src/isOnline.ts",
        "imports": []
      },
      {
        "name": "isOnline",
        "fileName": "src/isOnline.ts",
        "imports": []
      },
      {
        "name": "main",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof fetchWithTimeout>",
        "fileName": "src/isOnline.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isOnline>",
        "fileName": "src/isOnline.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "is-online"
    ]
  },
  {
    "operationName": "weather-sensor",
    "totalInstancesCount": 24,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "calculateBbqAbility",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateCloudyness",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateCodeFromNatureAbility",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateDresscode",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateKiteability",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateRainyness",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateSunnyness",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "calculateWindyness",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "fetchWeatherStormGlass",
        "fileName": "src/fetchStormGlass.ts",
        "imports": []
      },
      {
        "name": "fetchWeatherTommorowIOApi",
        "fileName": "src/fetchTomorrowIO.ts",
        "imports": []
      },
      {
        "name": "getCustomWeatherData",
        "fileName": "src/getCustomWeatherData.ts",
        "imports": []
      },
      {
        "name": "main",
        "fileName": "src/getCustomWeatherData.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateBbqAbility>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateCloudyness>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateCodeFromNatureAbility>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateDresscode>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateKiteability>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateRainyness>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateSunnyness>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof calculateWindyness>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof fetchWeatherStormGlass>",
        "fileName": "src/fetchStormGlass.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof fetchWeatherTommorowIOApi>",
        "fileName": "src/fetchTomorrowIO.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getCustomWeatherData>",
        "fileName": "src/getCustomWeatherData.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/getCustomWeatherData.test.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "weather-sensor"
    ]
  },
  {
    "operationName": "bundle-types",
    "totalInstancesCount": 20,
    "totalImportCount": 5,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AppShell",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "BundleConfig",
        "fileName": "src/BundleConfig.ts",
        "imports": [
          "SlugModelType from model-types",
          "Json from model-types"
        ]
      },
      {
        "name": "BundleMarkdownReaderConfig",
        "fileName": "src/BundleMarkdownReaderConfig.ts",
        "imports": [
          "Slug from model-types"
        ]
      },
      {
        "name": "CreateBundleConfig",
        "fileName": "src/CreateBundleConfig.ts",
        "imports": [
          "Slug from model-types"
        ]
      },
      {
        "name": "CustomisableBundleConfig",
        "fileName": "src/CustomisableBundleConfig.ts",
        "imports": []
      },
      {
        "name": "EnvironmentVariableObject",
        "fileName": "src/BundleConfig.ts",
        "imports": [
          "SlugModelType from model-types",
          "Json from model-types"
        ]
      },
      {
        "name": "FinalBundleConfig",
        "fileName": "src/FinalBundleConfig.ts",
        "imports": []
      },
      {
        "name": "FinalCreateBundleConfig",
        "fileName": "src/CreateBundleConfig.ts",
        "imports": [
          "Slug from model-types"
        ]
      },
      {
        "name": "FinalCustomisableBundleConfig",
        "fileName": "src/CustomisableBundleConfig.ts",
        "imports": []
      },
      {
        "name": "FrontBackBundle",
        "fileName": "src/FrontBackBundle.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "InformationStrategy",
        "fileName": "src/InformationStrategy.ts",
        "imports": []
      },
      {
        "name": "Json",
        "fileName": "src/BundleConfig.ts",
        "imports": [
          "SlugModelType from model-types",
          "Json from model-types"
        ]
      },
      {
        "name": "OperationName",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "OperationPrivacy",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "ProjectRelativeFilePath",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "ProjectRelativeFolderPath",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "PublicBundleConfig",
        "fileName": "src/PublicBundleConfig.ts",
        "imports": []
      },
      {
        "name": "ServerOperationName",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "Slug",
        "fileName": "src/CreateBundleConfig.ts",
        "imports": [
          "Slug from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/BundleConfig.ts",
        "imports": [
          "SlugModelType from model-types",
          "Json from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "bundle-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "code-types",
    "totalInstancesCount": 78,
    "totalImportCount": 36,
    "totalDependencyCount": 7,
    "importDependencies": [
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types"
    ],
    "packageJsonDependencies": [
      "pluralize",
      "convert-case",
      "model-types",
      "matter-types",
      "fs-util",
      "json-schema",
      "ts-json-schema-generator",
      "auth-types",
      "asset-type",
      "measure-performance"
    ],
    "instancesAndTheirImports": [
      {
        "name": "abc",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "getExamples",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "getFunctionExersize",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "AnyModelType",
        "fileName": "src/TsConfig.ts",
        "imports": [
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "CategorizedFilePaths",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "CommentType",
        "fileName": "src/TsComment.ts",
        "imports": [
          "Markdown from model-types",
          "TsIndexModelType from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "CommentTypeObject",
        "fileName": "src/TsComment.ts",
        "imports": [
          "Markdown from model-types",
          "TsIndexModelType from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "CommitInfo",
        "fileName": "src/CommitInfo.ts",
        "imports": []
      },
      {
        "name": "CompilerOptions",
        "fileName": "src/TsConfig.ts",
        "imports": [
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "ContributorPersonInfo",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Dataset",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetConfig",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetConfigKey",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetConfigShape",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetFilter",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetFilterOperator",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DatasetSort",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "DbStorageMethod",
        "fileName": "src/DbStorageMethod.ts",
        "imports": [
          "pluralize from pluralize",
          "kebabCase from convert-case"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "ExplorationDetails",
        "fileName": "src/FolderExploration.ts",
        "imports": []
      },
      {
        "name": "FileContentInfo",
        "fileName": "src/PathMetaData.ts",
        "imports": []
      },
      {
        "name": "FolderExploration",
        "fileName": "src/FolderExploration.ts",
        "imports": []
      },
      {
        "name": "FolderSummary",
        "fileName": "src/FolderSummary.ts",
        "imports": []
      },
      {
        "name": "Frontmatter",
        "fileName": "src/TsComment.ts",
        "imports": [
          "Markdown from model-types",
          "TsIndexModelType from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "FunctionClassification",
        "fileName": "src/FunctionClassification.ts",
        "imports": []
      },
      {
        "name": "FunctionExecution",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "FunctionParameter",
        "fileName": "src/FunctionParameter.ts",
        "imports": [
          "Schema from ts-json-schema-generator"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "ImportClassification",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "IndexModels",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "JSONSchema7Type",
        "fileName": "src/SimplifiedSchema.ts",
        "imports": [
          "JSONSchema7Type from json-schema"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/TsInterface.ts",
        "imports": [
          "Schema from ts-json-schema-generator",
          "Markdown from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "MaybeInteface",
        "fileName": "src/TsInterface.ts",
        "imports": [
          "Schema from ts-json-schema-generator",
          "Markdown from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "ModelInfo",
        "fileName": "src/Menu.ts",
        "imports": []
      },
      {
        "name": "ModelView",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "ModelViewEnum",
        "fileName": "src/Dataset.ts",
        "imports": [
          "DefaultModelType from model-types",
          "SlugModelType from model-types",
          "Price from model-types",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof abc>",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getExamples>",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "NamedParameters<typeof getFunctionExersize>",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "Operation",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "OperationClassification",
        "fileName": "src/OperationClassification.ts",
        "imports": []
      },
      {
        "name": "OperationPathParse",
        "fileName": "src/PathMetaData.ts",
        "imports": []
      },
      {
        "name": "OperationRepositoryInfo",
        "fileName": "src/OperationRepositoryInfo.ts",
        "imports": []
      },
      {
        "name": "PackageInfoObject",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "ParameterName",
        "fileName": "src/ParameterName.ts",
        "imports": []
      },
      {
        "name": "PathMetaData",
        "fileName": "src/PathMetaData.ts",
        "imports": []
      },
      {
        "name": "PathParse",
        "fileName": "src/PathMetaData.ts",
        "imports": []
      },
      {
        "name": "PathStats",
        "fileName": "src/PathMetaData.ts",
        "imports": []
      },
      {
        "name": "PerformanceItem",
        "fileName": "src/FunctionExecution.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Markdown from model-types",
          "PerformanceItem from measure-performance"
        ]
      },
      {
        "name": "Price",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "RunEveryPeriodEnum",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "Schema",
        "fileName": "src/TypeInfo.ts",
        "imports": [
          "Schema from ts-json-schema-generator"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/SimplifiedSchema.ts",
        "imports": [
          "JSONSchema7Type from json-schema"
        ]
      },
      {
        "name": "SimplifiedSchemaItem",
        "fileName": "src/SimplifiedSchema.ts",
        "imports": [
          "JSONSchema7Type from json-schema"
        ]
      },
      {
        "name": "SimplifiedSchemaProperty",
        "fileName": "src/SimplifiedSchema.ts",
        "imports": [
          "JSONSchema7Type from json-schema"
        ]
      },
      {
        "name": "SimplifiedSchemaType",
        "fileName": "src/SimplifiedSchema.ts",
        "imports": [
          "JSONSchema7Type from json-schema"
        ]
      },
      {
        "name": "SizeSummary",
        "fileName": "src/FolderSummary.ts",
        "imports": []
      },
      {
        "name": "SlugModelType",
        "fileName": "src/Operation.ts",
        "imports": [
          "Id from model-types",
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "TsBuildError",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsComment",
        "fileName": "src/TsComment.ts",
        "imports": [
          "Markdown from model-types",
          "TsIndexModelType from model-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "TsConfig",
        "fileName": "src/TsConfig.ts",
        "imports": [
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "TsExport",
        "fileName": "src/TsExport.ts",
        "imports": [
          "Creation from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsFunctionFrontmatterConfig",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsFunctionIndex",
        "fileName": "src/TsFunction.ts",
        "imports": [
          "Markdown from model-types",
          "Price from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsImport",
        "fileName": "src/TsImport.ts",
        "imports": [
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsIndexModelType",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/TsInterface.ts",
        "imports": [
          "Schema from ts-json-schema-generator",
          "Markdown from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsLintWarning",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TsVariable",
        "fileName": "src/TsVariable.ts",
        "imports": [
          "Creation from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TypeCoverage",
        "fileName": "src/TypeInfo.ts",
        "imports": [
          "Schema from ts-json-schema-generator"
        ]
      },
      {
        "name": "TypeInfo",
        "fileName": "src/TypeInfo.ts",
        "imports": [
          "Schema from ts-json-schema-generator"
        ]
      },
      {
        "name": "TypescriptFile",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "TypescriptIndex",
        "fileName": "src/TypescriptIndex.ts",
        "imports": [
          "kebabCase from convert-case",
          "DefaultModelType from model-types",
          "TsIndexModelType from model-types"
        ]
      },
      {
        "name": "TypescriptScopeContent",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "TypescriptScopeContext",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "TypescriptScopeStatementContext",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "TypescriptScopeTypeContext",
        "fileName": "src/ts/TypescriptFile.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types"
    ]
  },
  {
    "operationName": "geo-types",
    "totalInstancesCount": 14,
    "totalImportCount": 6,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types",
      "key-value-markdown-js",
      "fs-util",
      "read-json-file",
      "convert-case"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Address",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Area",
        "fileName": "src/Area.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Circle",
        "fileName": "src/Area.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "City",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Country",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "DistantObject",
        "fileName": "src/DistantObject.ts",
        "imports": []
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Polygon",
        "fileName": "src/Polygon.ts",
        "imports": []
      },
      {
        "name": "Position",
        "fileName": "src/Area.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/Location.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "CategoryModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "SpacePosition",
        "fileName": "src/DistantObject.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "geo-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "invoice-types",
    "totalInstancesCount": 7,
    "totalImportCount": 7,
    "totalDependencyCount": 4,
    "importDependencies": [
      "js-util",
      "model-types",
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "js-util",
      "model-types",
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createInvoiceContactMarkdown",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "createInvoiceMarkdown",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "createKeyValueMarkdown",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "money",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "newInvoice",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "parseDate",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "printDate",
        "fileName": "src/Invoice.ts",
        "imports": [
          "notEmpty from js-util",
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "fs from fs-util",
          "path from fs-util",
          "getRootPath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "invoice-types",
      "js-util",
      "model-types",
      "matter-types",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "language-types",
    "totalInstancesCount": 29,
    "totalImportCount": 23,
    "totalDependencyCount": 4,
    "importDependencies": [
      "model-types",
      "code-types",
      "asset-type",
      "js-util"
    ],
    "packageJsonDependencies": [
      "model-types",
      "code-types",
      "asset-type",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BackendAsset",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "CoreWordMatrixWord",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "KvmdWord",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Language",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "MappedWordMatrix",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "MarkdownWord",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "NepaliEnglishTranslationMatrix",
        "fileName": "src/Translation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Text from model-types"
        ]
      },
      {
        "name": "ParameterName",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Statement",
        "fileName": "src/Statement.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Text",
        "fileName": "src/Translation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Text from model-types"
        ]
      },
      {
        "name": "TokiPonaMatrix",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Translation",
        "fileName": "src/Translation.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Text from model-types"
        ]
      },
      {
        "name": "Word",
        "fileName": "src/Word.ts",
        "imports": [
          "ParameterName from code-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "MarkdownModelType from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordCategory",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordCombination",
        "fileName": "src/WordCombination.ts",
        "imports": [
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordConjucation",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordInfo",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordLanguageInfo",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordLanguageInfoObject",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordMatrix",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordPriority",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WordType",
        "fileName": "src/WordMatrix.ts",
        "imports": [
          "BackendAsset from asset-type",
          "MappedObject from js-util",
          "DefaultModelType from model-types",
          "Language from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "language-types",
      "model-types",
      "matter-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "asset-type",
      "js-util"
    ]
  },
  {
    "operationName": "markdown-types",
    "totalInstancesCount": 40,
    "totalImportCount": 28,
    "totalDependencyCount": 6,
    "importDependencies": [
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "bundle-types",
      "code-types"
    ],
    "packageJsonDependencies": [
      "model-types",
      "matter-types",
      "asset-type",
      "convert-case",
      "bundle-types",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "markdownParseToMarkdownModelType",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "parseMarkdownModelTimestamp",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "tryParseDate",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "AssetType",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/WebsiteHeader.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "BundleConfig",
        "fileName": "src/PostableProperties.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "Id from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type",
          "Operation from code-types",
          "TsFunction from code-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "CreatorMarkdownFile",
        "fileName": "src/WebMarkdownFile.ts",
        "imports": [
          "Markdown from model-types",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "CreatorMarkdownProperties",
        "fileName": "src/CreatorMarkdownProperties.ts",
        "imports": []
      },
      {
        "name": "ExtendedMarkdownProperties",
        "fileName": "src/ExtendedMarkdownProperties.ts",
        "imports": [
          "Language from model-types"
        ]
      },
      {
        "name": "FileContentInfo",
        "fileName": "src/TextJson.ts",
        "imports": [
          "FileContentInfo from code-types",
          "PathStats from code-types"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/WebMarkdownProperties.ts",
        "imports": [
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Language",
        "fileName": "src/ExtendedMarkdownProperties.ts",
        "imports": [
          "Language from model-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/WebMarkdownFile.ts",
        "imports": [
          "Markdown from model-types",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "MarkdownCallToAction",
        "fileName": "src/MarkdownCallToAction.ts",
        "imports": [
          "BackendAsset from asset-type",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "MarkdownChunk",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownContentLevel",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownEmbed",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownHeader",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownLink",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/WebMarkdownFile.ts",
        "imports": [
          "Markdown from model-types",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "MarkdownParagraph",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/MarkdownParse.ts",
        "imports": [
          "CategoryStack from model-types",
          "Frontmatter from matter-types",
          "AssetType from asset-type"
        ]
      },
      {
        "name": "NamedParameters<typeof markdownParseToMarkdownModelType>",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parseMarkdownModelTimestamp>",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof tryParseDate>",
        "fileName": "src/markdownParseToMarkdownModelType.ts",
        "imports": [
          "kebabCase from convert-case",
          "Frontmatter from matter-types",
          "generateId from model-types",
          "MarkdownModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "Operation",
        "fileName": "src/PostableProperties.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "Id from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type",
          "Operation from code-types",
          "TsFunction from code-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "PathStats",
        "fileName": "src/TextJson.ts",
        "imports": [
          "FileContentInfo from code-types",
          "PathStats from code-types"
        ]
      },
      {
        "name": "PostableProperties",
        "fileName": "src/PostableProperties.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "Id from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type",
          "Operation from code-types",
          "TsFunction from code-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "Price",
        "fileName": "src/WebMarkdownProperties.ts",
        "imports": [
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/WebsiteHeader.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/WebsiteHeader.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "TextJson",
        "fileName": "src/TextJson.ts",
        "imports": [
          "FileContentInfo from code-types",
          "PathStats from code-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/PostableProperties.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "Id from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type",
          "Operation from code-types",
          "TsFunction from code-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/PostableProperties.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "Id from model-types",
          "Slug from model-types",
          "BackendAsset from asset-type",
          "Operation from code-types",
          "TsFunction from code-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "WebMarkdownFile",
        "fileName": "src/WebMarkdownFile.ts",
        "imports": [
          "Markdown from model-types",
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "WebMarkdownProperties",
        "fileName": "src/WebMarkdownProperties.ts",
        "imports": [
          "Id from model-types",
          "Price from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "WebsiteHeader",
        "fileName": "src/WebsiteHeader.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "WebsiteHeaderProperties",
        "fileName": "src/WebsiteHeader.ts",
        "imports": [
          "BackendAsset from asset-type",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema"
    ]
  },
  {
    "operationName": "matter-types",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "make-test",
      "js-util",
      "log"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Frontmatter",
        "fileName": "src/Frontmatter.ts",
        "imports": []
      },
      {
        "name": "FrontmatterParse",
        "fileName": "src/FrontmatterParse.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "matter-types"
    ]
  },
  {
    "operationName": "model-types",
    "totalInstancesCount": 47,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "matter-types"
    ],
    "packageJsonDependencies": [
      "matter-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateId",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "generatePassword",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "generateRandomString",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "generateTime",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "isEmail",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "AnyModelType",
        "fileName": "src/any-model.ts",
        "imports": []
      },
      {
        "name": "AugmentedAnyModelType",
        "fileName": "src/any-model.ts",
        "imports": []
      },
      {
        "name": "CategoryModelType",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "CreatedAt",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "CreatedFirstAt",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "Credit",
        "fileName": "src/price.ts",
        "imports": []
      },
      {
        "name": "CsvModelType",
        "fileName": "src/modelTypes.ts",
        "imports": []
      },
      {
        "name": "DbFileLocation",
        "fileName": "src/any-model.ts",
        "imports": []
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/modelTypes.ts",
        "imports": []
      },
      {
        "name": "DeletedAt",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "Email",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "Euro",
        "fileName": "src/price.ts",
        "imports": []
      },
      {
        "name": "Frontmatter",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "Index",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "Json",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "KeyValueMarkdownParse",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "KvmdLine",
        "fileName": "src/keyValueMarkdown.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "Language",
        "fileName": "src/language.ts",
        "imports": []
      },
      {
        "name": "Markdown",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/MarkdownModelType.ts",
        "imports": [
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "ModelLocation",
        "fileName": "src/any-model.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateId>",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generatePassword>",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateRandomString>",
        "fileName": "src/id.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateTime>",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isEmail>",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "PhoneNumber",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "Price",
        "fileName": "src/price.ts",
        "imports": []
      },
      {
        "name": "RelationType",
        "fileName": "src/RelationType.ts",
        "imports": []
      },
      {
        "name": "ShouldNotBeStored",
        "fileName": "src/generics.ts",
        "imports": []
      },
      {
        "name": "Slug",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "SlugModelProperties",
        "fileName": "src/modelTypes.ts",
        "imports": []
      },
      {
        "name": "SlugModelType",
        "fileName": "src/modelTypes.ts",
        "imports": []
      },
      {
        "name": "Text",
        "fileName": "src/common.ts",
        "imports": []
      },
      {
        "name": "Time",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "TimeTypes",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "TsIndexModelType",
        "fileName": "src/TsIndexModelType.ts",
        "imports": []
      },
      {
        "name": "UpdatedAt",
        "fileName": "src/time.ts",
        "imports": []
      },
      {
        "name": "Url",
        "fileName": "src/common.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "os-types",
    "totalInstancesCount": 85,
    "totalImportCount": 50,
    "totalDependencyCount": 5,
    "importDependencies": [
      "model-types",
      "code-types",
      "social-media-types",
      "geo-types",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "model-types",
      "code-types",
      "geo-types",
      "social-media-types",
      "asset-type"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createUser",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "encryptPassword",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "getBacktickContents",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "isInPeriod",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "isOutOfStock",
        "fileName": "src/things/food/ShoppingList.ts",
        "imports": [
          "SlugModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "kvmdToCredential",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "upcomingOutgoingFlights",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "whereShouldIgo",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "Answer",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "AppDeveloper",
        "fileName": "src/unstructured/AppDeveloper.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Assignment",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Bag",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Batch",
        "fileName": "src/things/food/Deliverable.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Calendar",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "CarbonFootprintRemedy",
        "fileName": "src/PersonalCarbonFootprintProfile.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "CarbonFootprintSource",
        "fileName": "src/PersonalCarbonFootprintProfile.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "CategoryModelType",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "CsvModelType",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "CurrencyString",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "Deadline",
        "fileName": "src/things/food/Deliverable.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "Deliverable",
        "fileName": "src/things/food/Deliverable.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Delivery",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "DeliveryPlatform",
        "fileName": "src/things/food/Deliverable.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Diary",
        "fileName": "src/Diary.ts",
        "imports": [
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "DigitalAsset",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "DIY",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "Feeling",
        "fileName": "src/health/Trackable.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "FeelingLog",
        "fileName": "src/health/Trackable.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Flight",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "Folder",
        "fileName": "src/structure/Folder.ts",
        "imports": [
          "Markdown from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Host",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/structure/Label.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Ikigai",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Image",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "IndexedJsonValue",
        "fileName": "src/IndexationJson.ts",
        "imports": [
          "CommentTypeObject from code-types"
        ]
      },
      {
        "name": "Inventory",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "Item",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "ItemCategory",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/things/food/ShoppingList.ts",
        "imports": [
          "SlugModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "KvmdShortcut",
        "fileName": "src/KvmdShortcut.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Label",
        "fileName": "src/structure/Label.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Light",
        "fileName": "src/sensor/Light.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "Listing",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "ListingType",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "LoginCredential",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "MarkdownModelType",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Material",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "MessagePreset",
        "fileName": "src/MessagePreset.ts",
        "imports": [
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof createUser>",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof encryptPassword>",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getBacktickContents>",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof isInPeriod>",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isOutOfStock>",
        "fileName": "src/things/food/ShoppingList.ts",
        "imports": [
          "SlugModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof kvmdToCredential>",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof upcomingOutgoingFlights>",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof whereShouldIgo>",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "OperatingSystemEnum",
        "fileName": "src/Shortcut.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "PersonalCarbonFootprintProfile",
        "fileName": "src/PersonalCarbonFootprintProfile.ts",
        "imports": [
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "PhysicalInstance",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "PhysicalObject",
        "fileName": "src/things/physical/PhysicalObject.ts",
        "imports": []
      },
      {
        "name": "PlannedFlight",
        "fileName": "src/travel/Flight.ts",
        "imports": []
      },
      {
        "name": "Price",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      },
      {
        "name": "ProgramEnum",
        "fileName": "src/Shortcut.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "ProgressReport",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Question",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Reservation",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Resource",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Shit",
        "fileName": "src/health/Trackable.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "ShitLog",
        "fileName": "src/health/Trackable.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "ShoppingList",
        "fileName": "src/things/food/ShoppingList.ts",
        "imports": [
          "SlugModelType from model-types",
          "KeyValueMarkdownModelType from model-types"
        ]
      },
      {
        "name": "Shortcut",
        "fileName": "src/Shortcut.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "SkillEnum",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Student",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Student2",
        "fileName": "src/course/course.ts",
        "imports": [
          "WebMarkdownFile from code-types",
          "MarkdownModelType from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "TaskError",
        "fileName": "src/operation/TaskError.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "Text",
        "fileName": "src/things/physical/Bag.ts",
        "imports": [
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Text from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "Trackable",
        "fileName": "src/health/Trackable.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types"
        ]
      },
      {
        "name": "User",
        "fileName": "src/course/Miora.ts",
        "imports": [
          "Creation from model-types",
          "DefaultModelType from model-types",
          "Id from model-types",
          "SlugModelType from model-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "UserCredential",
        "fileName": "src/LoginCredential.ts",
        "imports": [
          "KeyValueMarkdownModelType from model-types",
          "DefaultModelType from model-types",
          "CsvModelType from model-types",
          "Id from model-types",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "Webshop",
        "fileName": "src/things/Item.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Location from geo-types",
          "CategoryModelType from model-types",
          "Image from asset-type"
        ]
      }
    ],
    "cumulativeDependencies": [
      "os-types",
      "model-types",
      "matter-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "social-media-types",
      "geo-types",
      "asset-type"
    ]
  },
  {
    "operationName": "recursive-types",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "recursive-types"
    ]
  },
  {
    "operationName": "webpage-types",
    "totalInstancesCount": 12,
    "totalImportCount": 3,
    "totalDependencyCount": 3,
    "importDependencies": [
      "convert-case",
      "js-util",
      "recursive-types"
    ],
    "packageJsonDependencies": [
      "recursive-types",
      "convert-case",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "crudPageToWebPages",
        "fileName": "src/to-webpage-conversors.ts",
        "imports": [
          "humanCase from convert-case",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "functionFormPageToWebPage",
        "fileName": "src/to-webpage-conversors.ts",
        "imports": [
          "humanCase from convert-case",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "CrudPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "CustomWebPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "FilePage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "FileWebPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "FunctionFormPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof crudPageToWebPages>",
        "fileName": "src/to-webpage-conversors.ts",
        "imports": [
          "humanCase from convert-case",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof functionFormPageToWebPage>",
        "fileName": "src/to-webpage-conversors.ts",
        "imports": [
          "humanCase from convert-case",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NestedWebPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "ReaderWebPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "WriterWebPage",
        "fileName": "src/types.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "webpage-types",
      "convert-case",
      "make-test",
      "js-util",
      "recursive-types"
    ]
  },
  {
    "operationName": "cleanup-typescript-database",
    "totalInstancesCount": 14,
    "totalImportCount": 13,
    "totalDependencyCount": 4,
    "importDependencies": [
      "get-package-source-paths",
      "database",
      "get-path",
      "code-types"
    ],
    "packageJsonDependencies": [
      "get-package-source-paths",
      "database",
      "get-path",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cleanupTsDatabase",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "shouldDeleteTsModel",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/cleanupTsDatabase.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof cleanupTsDatabase>",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof shouldDeleteTsModel>",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/cleanupTsDatabase.test.ts",
        "imports": []
      },
      {
        "name": "TsBuildError",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsComment",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsExport",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsImport",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsLintWarning",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      },
      {
        "name": "TsVariable",
        "fileName": "src/cleanupTsDatabase.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "db from database",
          "getOperationPath from get-path",
          "getOperationRelativePath from get-path",
          "TsBuildError from code-types",
          "TsComment from code-types",
          "TsExport from code-types",
          "TsFunction from code-types",
          "TsImport from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "TsVariable from code-types",
          "typescriptIndexModels from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "cleanup-typescript-database",
      "get-package-source-paths",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "json-schema",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "sdk-operations",
      "measure-performance",
      "get-path",
      "code-types",
      "ts-json-schema-generator"
    ]
  },
  {
    "operationName": "comment-util",
    "totalInstancesCount": 14,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "js-util"
    ],
    "packageJsonDependencies": [
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "stripCommentEnd",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "stripCommentStart",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "stripComment",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "stripSlashes",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "stripStar",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "trimSurroundingNewlines",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "trim",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stripComment>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stripCommentEnd>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stripCommentStart>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stripSlashes>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof stripStar>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof trim>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof trimSurroundingNewlines>",
        "fileName": "src/general.ts",
        "imports": [
          "apply from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "comment-util",
      "js-util"
    ]
  },
  {
    "operationName": "compile-typescript",
    "totalInstancesCount": 7,
    "totalImportCount": 26,
    "totalDependencyCount": 10,
    "importDependencies": [
      "log",
      "get-package-json",
      "get-ts-config",
      "code-types",
      "database",
      "js-util",
      "get-package-source-paths",
      "model-types",
      "fs-util",
      "get-path"
    ],
    "packageJsonDependencies": [
      "log",
      "get-package-json",
      "get-ts-config",
      "code-types",
      "database",
      "js-util",
      "get-package-source-paths",
      "model-types",
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getCompileErrors",
        "fileName": "src/getCompileErrors.ts",
        "imports": [
          "log from log",
          "getOperationPackageName from get-package-json",
          "getPackageJson from get-package-json",
          "getTsConfig from get-ts-config",
          "TsBuildError from code-types",
          "db from database",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "getPackageSourcePaths from get-package-source-paths",
          "Creation from model-types"
        ]
      },
      {
        "name": "getTypescriptErrorsFromFiles",
        "fileName": "src/getTypescriptErrorsFromFiles.ts",
        "imports": [
          "log from log",
          "getLastFolder from fs-util",
          "path from fs-util",
          "TsConfig from code-types",
          "TsBuildError from code-types",
          "Operation from code-types",
          "Creation from model-types",
          "generateId from model-types",
          "findOperationBasePath from get-path",
          "getOperationPathParse from get-path",
          "getPathParse from get-path",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "writeBuildErrors",
        "fileName": "src/writeBuildErrors.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathParse from get-path",
          "getProjectRoot from get-path",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getCompileErrors>",
        "fileName": "src/getCompileErrors.ts",
        "imports": [
          "log from log",
          "getOperationPackageName from get-package-json",
          "getPackageJson from get-package-json",
          "getTsConfig from get-ts-config",
          "TsBuildError from code-types",
          "db from database",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "getPackageSourcePaths from get-package-source-paths",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTypescriptErrorsFromFiles>",
        "fileName": "src/getTypescriptErrorsFromFiles.ts",
        "imports": [
          "log from log",
          "getLastFolder from fs-util",
          "path from fs-util",
          "TsConfig from code-types",
          "TsBuildError from code-types",
          "Operation from code-types",
          "Creation from model-types",
          "generateId from model-types",
          "findOperationBasePath from get-path",
          "getOperationPathParse from get-path",
          "getPathParse from get-path",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof writeBuildErrors>",
        "fileName": "src/writeBuildErrors.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPathParse from get-path",
          "getProjectRoot from get-path",
          "db from database"
        ]
      },
      {
        "name": "PackageJson",
        "fileName": "src/getTypescriptErrorsFromFiles.ts",
        "imports": [
          "log from log",
          "getLastFolder from fs-util",
          "path from fs-util",
          "TsConfig from code-types",
          "TsBuildError from code-types",
          "Operation from code-types",
          "Creation from model-types",
          "generateId from model-types",
          "findOperationBasePath from get-path",
          "getOperationPathParse from get-path",
          "getPathParse from get-path",
          "notEmpty from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "compile-typescript",
      "log",
      "get-package-json",
      "read-json-file",
      "try-parse-json",
      "get-ts-config",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "filename-conventions",
      "write-to-assets",
      "sdk-operations",
      "js-util",
      "get-package-source-paths",
      "model-types",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "get-path"
    ]
  },
  {
    "operationName": "find-all-dependency-operations",
    "totalInstancesCount": 24,
    "totalImportCount": 14,
    "totalDependencyCount": 7,
    "importDependencies": [
      "js-util",
      "database",
      "k-explore",
      "fs-util",
      "code-types",
      "one-by-one",
      "all"
    ],
    "packageJsonDependencies": [
      "js-util",
      "database",
      "k-explore",
      "fs-util",
      "code-types",
      "all",
      "one-by-one"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findAllDependencyOperations",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "findDependantsRecursivelyTest",
        "fileName": "src/test.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "findDependantsRecursively",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "findDependants",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "findDependenciesRecursively",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "findMonorepoExports",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "findMonorepoImports",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "findMonorepoModules",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getDependencyObject",
        "fileName": "src/findAllDependencyOperations.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "onlyUnique2 from js-util",
          "db from database",
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "path from fs-util",
          "Operation from code-types",
          "TsImport from code-types",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getDependencyTree",
        "fileName": "src/getOldDependencyTree.test.ts",
        "imports": []
      },
      {
        "name": "getOperationDependencyReasons",
        "fileName": "src/getOperationDependencyReasons.ts",
        "imports": []
      },
      {
        "name": "test2",
        "fileName": "src/test.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "test",
        "fileName": "src/getDependencyTree.test.ts",
        "imports": []
      },
      {
        "name": "DependencyTree",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "DependencyTreeChildObject",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findDependantsRecursivelyTest>",
        "fileName": "src/test.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof findMonorepoExports>",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof findMonorepoImports>",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getDependencyTree>",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getOperationDependencyReasons>",
        "fileName": "src/getOperationDependencyReasons.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/getDependencyTree.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof test2>",
        "fileName": "src/test.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "TsExport",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      },
      {
        "name": "TsImport",
        "fileName": "src/getDependencyTree.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "find-all-dependency-operations",
      "js-util",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "filename-conventions",
      "fs-util-js",
      "pluralize",
      "sdk-operations",
      "model-types",
      "measure-performance",
      "log",
      "k-explore",
      "write-to-assets",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "code-types",
      "ts-json-schema-generator",
      "one-by-one",
      "all",
      "markdown-parsings",
      "json-util",
      "bundle-util",
      "db-util",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key"
    ]
  },
  {
    "operationName": "generate-bun-monopackage",
    "totalInstancesCount": 13,
    "totalImportCount": 30,
    "totalDependencyCount": 8,
    "importDependencies": [
      "code-types",
      "database",
      "get-path",
      "js-util",
      "fs-util-js",
      "fs-util",
      "write-to-assets",
      "sdk-operations"
    ],
    "packageJsonDependencies": [
      "database",
      "fs-util-js",
      "get-path",
      "js-util",
      "fs-util",
      "code-types",
      "write-to-assets"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateBunFile",
        "fileName": "src/generateBunFile.ts",
        "imports": [
          "TsFunction from code-types",
          "db from database",
          "getProjectRoot from get-path",
          "getOperationClassificationObject from get-path",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "generateBunMonopackage",
        "fileName": "src/generateBunMonopackage.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "db from database",
          "withoutExtension from fs-util-js",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "generateBunTypes",
        "fileName": "src/generateBunTypes.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "generateBunVariables",
        "fileName": "src/generateBunVariables.ts",
        "imports": [
          "TsVariable from code-types",
          "db from database",
          "onlyUnique2 from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "getItemNewPath",
        "fileName": "src/getItemNewPath.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "getExtension from fs-util-js",
          "operations from sdk-operations",
          "getSrcRelativeFileId from get-path",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBunFile>",
        "fileName": "src/generateBunFile.ts",
        "imports": [
          "TsFunction from code-types",
          "db from database",
          "getProjectRoot from get-path",
          "getOperationClassificationObject from get-path",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBunMonopackage>",
        "fileName": "src/generateBunMonopackage.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "db from database",
          "withoutExtension from fs-util-js",
          "getProjectRoot from get-path",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBunTypes>",
        "fileName": "src/generateBunTypes.ts",
        "imports": [
          "TsInterface from code-types",
          "db from database",
          "onlyUnique2 from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof generateBunVariables>",
        "fileName": "src/generateBunVariables.ts",
        "imports": [
          "TsVariable from code-types",
          "db from database",
          "onlyUnique2 from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "NamedParameters<typeof getItemNewPath>",
        "fileName": "src/getItemNewPath.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "getExtension from fs-util-js",
          "operations from sdk-operations",
          "getSrcRelativeFileId from get-path",
          "path from fs-util"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/getItemNewPath.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "getExtension from fs-util-js",
          "operations from sdk-operations",
          "getSrcRelativeFileId from get-path",
          "path from fs-util"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/getItemNewPath.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "getExtension from fs-util-js",
          "operations from sdk-operations",
          "getSrcRelativeFileId from get-path",
          "path from fs-util"
        ]
      },
      {
        "name": "TsVariable",
        "fileName": "src/getItemNewPath.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "getExtension from fs-util-js",
          "operations from sdk-operations",
          "getSrcRelativeFileId from get-path",
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generate-bun-monopackage",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "k-explore",
      "filename-conventions",
      "log",
      "get-path",
      "js-util",
      "fs-util-js",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "write-to-assets",
      "sdk-operations"
    ]
  },
  {
    "operationName": "generate-index",
    "totalInstancesCount": 12,
    "totalImportCount": 21,
    "totalDependencyCount": 10,
    "importDependencies": [
      "fs-util",
      "log",
      "convert-case",
      "js-util",
      "get-path",
      "database",
      "fs-util-js",
      "get-package-source-paths",
      "filename-conventions",
      "code-types"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "log",
      "convert-case",
      "js-util",
      "get-path",
      "database",
      "get-package-source-paths",
      "code-types",
      "path-util",
      "filename-conventions",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateNamedIndex",
        "fileName": "src/generateNamedIndex.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "lowerCaseArray from convert-case",
          "notEmpty from js-util",
          "getOperationPath from get-path",
          "db from database"
        ]
      },
      {
        "name": "generateSimpleIndex",
        "fileName": "src/generateSimpleIndex.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "getOperationClassification from get-path",
          "getOperationPath from get-path",
          "getSrcRelativeFileId from get-path",
          "makeRelative from fs-util-js",
          "getPackageSourcePaths from get-package-source-paths",
          "isIndexableFileId from filename-conventions"
        ]
      },
      {
        "name": "isTestFn",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "mapToImportStatement",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "ImportStatement",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateNamedIndex>",
        "fileName": "src/generateNamedIndex.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "lowerCaseArray from convert-case",
          "notEmpty from js-util",
          "getOperationPath from get-path",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSimpleIndex>",
        "fileName": "src/generateSimpleIndex.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "log from log",
          "getOperationClassification from get-path",
          "getOperationPath from get-path",
          "getSrcRelativeFileId from get-path",
          "makeRelative from fs-util-js",
          "getPackageSourcePaths from get-package-source-paths",
          "isIndexableFileId from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof isTestFn>",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof mapToImportStatement>",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "TsVariable",
        "fileName": "src/util.ts",
        "imports": [
          "TsFunction from code-types",
          "TsInterface from code-types",
          "TsVariable from code-types",
          "lowerCaseArray from convert-case",
          "getSrcRelativeFileId from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generate-index",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log",
      "convert-case",
      "make-test",
      "js-util",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "json-schema",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "measure-performance",
      "fs-util-js",
      "get-package-source-paths",
      "filename-conventions",
      "code-types",
      "ts-json-schema-generator"
    ]
  },
  {
    "operationName": "generate-sdk-operations",
    "totalInstancesCount": 60,
    "totalImportCount": 69,
    "totalDependencyCount": 16,
    "importDependencies": [
      "js-util",
      "new-template",
      "rebuild-operation",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "fs-util",
      "k-explore",
      "watch-types",
      "code-types",
      "database",
      "get-package-json",
      "log",
      "find-all-dependency-operations",
      "filename-conventions",
      "all"
    ],
    "packageJsonDependencies": [
      "database",
      "js-util",
      "find-all-dependency-operations",
      "code-types",
      "bundle-types",
      "get-path",
      "fs-util",
      "k-explore",
      "log",
      "filename-conventions",
      "new-template",
      "get-package-json",
      "rebuild-operation",
      "all",
      "watch-types",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "generateDbSdkCli",
        "fileName": "src/cli/generateDbSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateDbSdk",
        "fileName": "src/generateDbSdk.ts",
        "imports": [
          "notEmpty from js-util",
          "newOperationWithFiles from new-template",
          "getAllDbModels from rebuild-operation"
        ]
      },
      {
        "name": "generateEnvSdksCli",
        "fileName": "src/cli/generateEnvSdks.cli.ts",
        "imports": [
          "db from database",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateEnvSdks",
        "fileName": "src/generateEnvSdks.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "generateFunctionPathsSdk",
        "fileName": "src/path-sdks.ts",
        "imports": [
          "getProjectRoot from get-path",
          "fs from fs-util",
          "path from fs-util",
          "newOperationWithFiles from new-template",
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "generateFunctionSdksCli",
        "fileName": "src/cli/generateFunctionSdks.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateFunctionSdks",
        "fileName": "src/generateFunctionSdks.ts",
        "imports": []
      },
      {
        "name": "generateInterfacePathsSdkCli",
        "fileName": "src/cli/generateInterfacePathsSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateInterfacePathsSdk",
        "fileName": "src/path-sdks.ts",
        "imports": [
          "getProjectRoot from get-path",
          "fs from fs-util",
          "path from fs-util",
          "newOperationWithFiles from new-template",
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "generateOperationsSdkCli",
        "fileName": "src/cli/generateOperationsSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateOperationsSdk",
        "fileName": "src/generateOperationsSdk.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "getLastFolder from fs-util",
          "exploreOperationFolders from k-explore",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "generateSdkApiCli",
        "fileName": "src/cli/generateSdkApi.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateSdkApiWatcher",
        "fileName": "src/generateSdkApiWatcher.ts",
        "imports": [
          "ProjectWatcher from watch-types"
        ]
      },
      {
        "name": "generateSdkApi",
        "fileName": "src/generateSdkApi.ts",
        "imports": []
      },
      {
        "name": "generateSdkOperationsCli",
        "fileName": "src/cli/generateSdkOperations.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "generateSdkOperations",
        "fileName": "src/generateSdkOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getFunctionSdksContent",
        "fileName": "src/getFunctionSdksContent.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      },
      {
        "name": "getSdkDescription",
        "fileName": "src/getSdkDescription.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "getSdkFunctionsPerClassification",
        "fileName": "src/getSdkFunctionsPerClassification.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "db from database",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getPackageJson from get-package-json",
          "log from log",
          "getProjectRoot from get-path",
          "operationClassificationConst from code-types",
          "findDependantsRecursively from find-all-dependency-operations",
          "getOperationClassificationObject from get-path",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "isNonUiOperationBuild",
        "fileName": "src/isNonUiOperationBuild.ts",
        "imports": [
          "getExtension from fs-util-js",
          "findOperationBasePath from get-path",
          "getOperationClassification from get-path",
          "WatchEventType from watch-types"
        ]
      },
      {
        "name": "newEnvSdk",
        "fileName": "src/generateEnvSdks.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "newFunctionKeysSdkOperation",
        "fileName": "src/newFunctionKeysSdkOperation.ts",
        "imports": [
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "newFunctionSdkOperation",
        "fileName": "src/newFunctionSdkOperation.ts",
        "imports": [
          "TsFunction from code-types",
          "log from log",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "tsFunctionIsIndexable",
        "fileName": "src/tsFunctionIsIndexable.ts",
        "imports": [
          "TsFunction from code-types",
          "isIndexableFileId from filename-conventions",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "tsFunctionIsSdkable",
        "fileName": "src/tsFunctionIsSdkable.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "OperationClassificationObject from get-path"
        ]
      },
      {
        "name": "updateClassifications",
        "fileName": "src/updateClassifications.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util",
          "getOperationClassification from get-path",
          "getPathsWithOperations from get-path",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "BundleConfig",
        "fileName": "src/generateSdkOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "FunctionsPerClassification",
        "fileName": "src/getSdkFunctionsPerClassification.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "db from database",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getPackageJson from get-package-json",
          "log from log",
          "getProjectRoot from get-path",
          "operationClassificationConst from code-types",
          "findDependantsRecursively from find-all-dependency-operations",
          "getOperationClassificationObject from get-path",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof generateDbSdk>",
        "fileName": "src/generateDbSdk.ts",
        "imports": [
          "notEmpty from js-util",
          "newOperationWithFiles from new-template",
          "getAllDbModels from rebuild-operation"
        ]
      },
      {
        "name": "NamedParameters<typeof generateDbSdkCli>",
        "fileName": "src/cli/generateDbSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateEnvSdks>",
        "fileName": "src/generateEnvSdks.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "NamedParameters<typeof generateEnvSdksCli>",
        "fileName": "src/cli/generateEnvSdks.cli.ts",
        "imports": [
          "db from database",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateFunctionPathsSdk>",
        "fileName": "src/path-sdks.ts",
        "imports": [
          "getProjectRoot from get-path",
          "fs from fs-util",
          "path from fs-util",
          "newOperationWithFiles from new-template",
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateFunctionSdks>",
        "fileName": "src/generateFunctionSdks.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateFunctionSdksCli>",
        "fileName": "src/cli/generateFunctionSdks.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateInterfacePathsSdk>",
        "fileName": "src/path-sdks.ts",
        "imports": [
          "getProjectRoot from get-path",
          "fs from fs-util",
          "path from fs-util",
          "newOperationWithFiles from new-template",
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof generateInterfacePathsSdkCli>",
        "fileName": "src/cli/generateInterfacePathsSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateOperationsSdk>",
        "fileName": "src/generateOperationsSdk.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "makeRelative from fs-util-js",
          "getLastFolder from fs-util",
          "exploreOperationFolders from k-explore",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "NamedParameters<typeof generateOperationsSdkCli>",
        "fileName": "src/cli/generateOperationsSdk.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSdkApi>",
        "fileName": "src/generateSdkApi.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateSdkApiCli>",
        "fileName": "src/cli/generateSdkApi.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSdkApiWatcher>",
        "fileName": "src/generateSdkApiWatcher.ts",
        "imports": [
          "ProjectWatcher from watch-types"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSdkOperations>",
        "fileName": "src/generateSdkOperations.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSdkOperationsCli>",
        "fileName": "src/cli/generateSdkOperations.cli.ts",
        "imports": [
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getFunctionSdksContent>",
        "fileName": "src/getFunctionSdksContent.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSdkDescription>",
        "fileName": "src/getSdkDescription.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getSdkFunctionsPerClassification>",
        "fileName": "src/getSdkFunctionsPerClassification.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "db from database",
          "getLastFolder from fs-util",
          "path from fs-util",
          "getPackageJson from get-package-json",
          "log from log",
          "getProjectRoot from get-path",
          "operationClassificationConst from code-types",
          "findDependantsRecursively from find-all-dependency-operations",
          "getOperationClassificationObject from get-path",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "exploreOperationFolders from k-explore"
        ]
      },
      {
        "name": "NamedParameters<typeof isNonUiOperationBuild>",
        "fileName": "src/isNonUiOperationBuild.ts",
        "imports": [
          "getExtension from fs-util-js",
          "findOperationBasePath from get-path",
          "getOperationClassification from get-path",
          "WatchEventType from watch-types"
        ]
      },
      {
        "name": "NamedParameters<typeof newEnvSdk>",
        "fileName": "src/generateEnvSdks.ts",
        "imports": [
          "BundleConfig from bundle-types",
          "getProjectRoot from get-path",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "NamedParameters<typeof newFunctionKeysSdkOperation>",
        "fileName": "src/newFunctionKeysSdkOperation.ts",
        "imports": [
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "NamedParameters<typeof newFunctionSdkOperation>",
        "fileName": "src/newFunctionSdkOperation.ts",
        "imports": [
          "TsFunction from code-types",
          "log from log",
          "newOperationWithFiles from new-template"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof tsFunctionIsIndexable>",
        "fileName": "src/tsFunctionIsIndexable.ts",
        "imports": [
          "TsFunction from code-types",
          "isIndexableFileId from filename-conventions",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof tsFunctionIsSdkable>",
        "fileName": "src/tsFunctionIsSdkable.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "OperationClassificationObject from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof updateClassifications>",
        "fileName": "src/updateClassifications.ts",
        "imports": [
          "forAllFolders from all",
          "db from database",
          "getLastFolder from fs-util",
          "getOperationClassification from get-path",
          "getPathsWithOperations from get-path",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "OperationClassification",
        "fileName": "src/tsFunctionIsSdkable.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "OperationClassificationObject from get-path"
        ]
      },
      {
        "name": "OperationClassificationObject",
        "fileName": "src/tsFunctionIsSdkable.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "OperationClassificationObject from get-path"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/tsFunctionIsSdkable.ts",
        "imports": [
          "OperationClassification from code-types",
          "TsFunction from code-types",
          "OperationClassificationObject from get-path"
        ]
      },
      {
        "name": "WatchEventType",
        "fileName": "src/isNonUiOperationBuild.ts",
        "imports": [
          "getExtension from fs-util-js",
          "findOperationBasePath from get-path",
          "getOperationClassification from get-path",
          "WatchEventType from watch-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "generate-sdk-operations",
      "js-util",
      "new-template",
      "set-json-key",
      "rename-template-files",
      "one-by-one",
      "make-test",
      "convert-case",
      "rebuild-operation",
      "pluralize",
      "read-json-file",
      "try-parse-json",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "model-types",
      "measure-performance",
      "matter-types",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "sdk-operations",
      "json-schema",
      "run-child-process",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "ts-json-schema-generator",
      "comment-util",
      "lodash",
      "get-imports-exports",
      "typescript",
      "markdown-parsings",
      "json-util",
      "bundle-util",
      "db-util",
      "write-to-assets",
      "recursive-types",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "fs-util",
      "graceful-fs",
      "k-explore",
      "watch-types",
      "code-types",
      "database",
      "get-package-json",
      "log",
      "find-all-dependency-operations",
      "filename-conventions",
      "all"
    ]
  },
  {
    "operationName": "get-imported-dependencies",
    "totalInstancesCount": 6,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "ts-morph",
      "ts-morph-util"
    ],
    "packageJsonDependencies": [
      "ts-morph",
      "ts-morph-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getImportedDependencies",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      },
      {
        "name": "getPackage",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      },
      {
        "name": "isAbsoluteImport",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getImportedDependencies>",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getPackage>",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      },
      {
        "name": "NamedParameters<typeof isAbsoluteImport>",
        "fileName": "src/general.ts",
        "imports": [
          "ImportDeclaration from ts-morph",
          "Project from ts-morph",
          "getTsMorphProject from ts-morph-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-imported-dependencies",
      "ts-morph",
      "ts-morph-util",
      "get-package-source-paths",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "log",
      "fs-util",
      "graceful-fs",
      "recursive-types"
    ]
  },
  {
    "operationName": "get-imports-exports",
    "totalInstancesCount": 29,
    "totalImportCount": 56,
    "totalDependencyCount": 18,
    "importDependencies": [
      "js-util",
      "code-types",
      "model-types",
      "get-path",
      "filename-conventions",
      "log",
      "database",
      "ts-morph-util",
      "fs-util",
      "ts-morph",
      "convert-case",
      "k-explore",
      "one-by-one",
      "read-json-file",
      "fs-util-js",
      "get-package-source-paths",
      "make-test",
      "typescript"
    ],
    "packageJsonDependencies": [
      "ts-morph",
      "js-util",
      "code-types",
      "model-types",
      "get-path",
      "log",
      "database",
      "ts-morph-util",
      "fs-util",
      "convert-case",
      "k-explore",
      "read-json-file",
      "get-package-source-paths",
      "make-test",
      "typescript",
      "path-util",
      "filename-conventions",
      "one-by-one",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "calculatePackageJsonDependencies",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "findAndWriteImportsExports",
        "fileName": "src/findAndWriteImportsExports.ts",
        "imports": [
          "log from log",
          "db from database",
          "getAllTsMorphSourceFiles from ts-morph-util",
          "getLastFolder from fs-util",
          "Operation from code-types"
        ]
      },
      {
        "name": "getDefaultSymbolType",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getExportSpecifierNames",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getExportSymbolTypeRecursive",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getImportSpecifiersWithNames",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getImportsExportsTest",
        "fileName": "src/test.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "getOperationPath from get-path",
          "getTsMorphProject from ts-morph-util",
          "log from log",
          "makeTest from make-test"
        ]
      },
      {
        "name": "getImportsExports",
        "fileName": "src/getImportsExports.ts",
        "imports": [
          "SourceFile from ts-morph",
          "ImportDeclaration from ts-morph",
          "Symbol from ts-morph",
          "kebabCase from convert-case",
          "exploreOperationFolders from k-explore",
          "log from log",
          "oneByOne from one-by-one",
          "TsExport from code-types",
          "TsImport from code-types",
          "ImportClassification from code-types",
          "Operation from code-types",
          "Creation from model-types",
          "readJsonFile from read-json-file",
          "path from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mapMany from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getPackageNameFromAbsoluteImport",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "getSymbolDeclarationsOfKind",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getSymbolTypeDeclarations",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "getTypeFromImportSpecifierRecursive",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "isAbsoluteImportBuiltin",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "isAbsoluteImport",
        "fileName": "src/util.ts",
        "imports": [
          "SourceFile from ts-morph",
          "Symbol from ts-morph",
          "TypeAliasDeclaration from ts-morph",
          "InterfaceDeclaration from ts-morph",
          "ImportSpecifier from ts-morph",
          "log from log",
          "TsExport from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "SyntaxKind from typescript",
          "notEmpty from js-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "isImportFromOptionalFile",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "isImportGenerated",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "test",
        "fileName": "src/findAndWriteImportsExports.test.ts",
        "imports": [
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "writeResult",
        "fileName": "src/writeResult.ts",
        "imports": [
          "db from database",
          "log from log",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof calculatePackageJsonDependencies>",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof findAndWriteImportsExports>",
        "fileName": "src/findAndWriteImportsExports.ts",
        "imports": [
          "log from log",
          "db from database",
          "getAllTsMorphSourceFiles from ts-morph-util",
          "getLastFolder from fs-util",
          "Operation from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getImportsExportsTest>",
        "fileName": "src/test.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "getOperationPath from get-path",
          "getTsMorphProject from ts-morph-util",
          "log from log",
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof getPackageNameFromAbsoluteImport>",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof isAbsoluteImportBuiltin>",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof isImportFromOptionalFile>",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof isImportGenerated>",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/findAndWriteImportsExports.test.ts",
        "imports": [
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof writeResult>",
        "fileName": "src/writeResult.ts",
        "imports": [
          "db from database",
          "log from log",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "Operation",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      },
      {
        "name": "PackageInfoObject",
        "fileName": "src/calculatePackageJsonDependencies.ts",
        "imports": [
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Operation from code-types",
          "PackageInfoObject from code-types",
          "TsImport from code-types",
          "Creation from model-types",
          "getSrcRelativeFileId from get-path",
          "frontendOptionalFileSubExtensions from filename-conventions",
          "hasSubExtension from filename-conventions",
          "isGeneratedOperationName from filename-conventions"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-imports-exports",
      "js-util",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "model-types",
      "get-path",
      "try-parse-json",
      "sdk-operations",
      "filename-conventions",
      "log",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "ts-morph-util",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "ts-morph",
      "convert-case",
      "k-explore",
      "write-to-assets",
      "one-by-one",
      "read-json-file",
      "fs-util-js",
      "get-package-source-paths",
      "make-test",
      "typescript"
    ]
  },
  {
    "operationName": "get-missing-dependencies",
    "totalInstancesCount": 2,
    "totalImportCount": 7,
    "totalDependencyCount": 6,
    "importDependencies": [
      "get-package-json",
      "get-imported-dependencies",
      "get-path",
      "k-explore",
      "fs-util",
      "make-test"
    ],
    "packageJsonDependencies": [
      "get-package-json",
      "get-imported-dependencies",
      "get-path",
      "k-explore",
      "fs-util",
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getMissingDependencies",
        "fileName": "src/getMissingDependencies.ts",
        "imports": [
          "getPackageJson from get-package-json",
          "getImportedDependencies from get-imported-dependencies",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getMissingDependencies>",
        "fileName": "src/getMissingDependencies.ts",
        "imports": [
          "getPackageJson from get-package-json",
          "getImportedDependencies from get-imported-dependencies",
          "findOperationBasePath from get-path"
        ]
      }
    ],
    "cumulativeDependencies": [
      "get-missing-dependencies",
      "get-package-json",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "get-imported-dependencies",
      "ts-morph",
      "ts-morph-util",
      "get-package-source-paths",
      "log",
      "get-path",
      "js-util",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "make-test"
    ]
  },
  {
    "operationName": "index-typescript",
    "totalInstancesCount": 69,
    "totalImportCount": 156,
    "totalDependencyCount": 26,
    "importDependencies": [
      "fs-util",
      "get-path",
      "ts-morph",
      "database",
      "get-imported-dependencies",
      "js-util",
      "model-types",
      "code-types",
      "ts-morph-util",
      "ts-json-schema-generator",
      "log",
      "fs-util-js",
      "convert-case",
      "matter-types",
      "schema-util",
      "json-schema",
      "path-util",
      "comment-util",
      "markdown-parse-js",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "read-json-file",
      "one-by-one",
      "markdown-types",
      "cleanup-typescript-database"
    ],
    "packageJsonDependencies": [
      "auth-types",
      "code-types",
      "comment-util",
      "convert-case",
      "database",
      "fs-util",
      "get-imported-dependencies",
      "get-path",
      "js-util",
      "json-schema",
      "lodash",
      "log",
      "markdown-parse-js",
      "matter-types",
      "model-types",
      "one-by-one",
      "operation-util",
      "path-util",
      "read-json-file",
      "reflect-metadata",
      "schema-util",
      "ts-json-schema-generator",
      "ts-morph",
      "ts-morph-util",
      "fs-util-js",
      "watch-types",
      "get-imports-exports",
      "cleanup-typescript-database",
      "markdown-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cli",
        "fileName": "src/findAndUpsertTsInterfaces.cli.ts",
        "imports": [
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "findAndUpsertTsInterfaces",
        "fileName": "src/findAndUpsertTsInterfaces.ts",
        "imports": [
          "SourceFile from ts-morph",
          "db from database",
          "isAbsoluteImport from get-imported-dependencies",
          "notEmpty from js-util",
          "Creation from model-types",
          "TsInterface from code-types",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path",
          "getTsMorphProject from ts-morph-util",
          "getHasGeneric from ts-morph-util"
        ]
      },
      {
        "name": "findCommentTypes",
        "fileName": "src/findCommentTypes.ts",
        "imports": [
          "CommentType from code-types",
          "commentTypes from code-types"
        ]
      },
      {
        "name": "generateSchema",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "getAllComments",
        "fileName": "src/getAllComments.ts",
        "imports": [
          "TsComment from code-types",
          "Creation from model-types",
          "Expression from ts-morph",
          "Statement from ts-morph",
          "SyntaxKind from ts-morph",
          "VariableDeclaration from ts-morph"
        ]
      },
      {
        "name": "getDbStorageMethod",
        "fileName": "src/getDbStorageMethod.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "lowerCaseArray from convert-case",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "getFrontmatterDbStorageMethod",
        "fileName": "src/getFrontmatterDbStorageMethod.ts",
        "imports": [
          "dbStorageMethods from code-types",
          "DbStorageMethod from code-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "getFrontmatterFunctionParameters",
        "fileName": "src/getTsStatements.ts",
        "imports": [
          "SourceFile from ts-morph",
          "SyntaxKind from ts-morph",
          "ts from ts-morph",
          "TypeFormatFlags from ts-morph",
          "VariableDeclaration from ts-morph",
          "notEmpty from js-util",
          "kebabCase from convert-case",
          "TsVariable from code-types",
          "TsFunction from code-types",
          "TsComment from code-types",
          "TsInterface from code-types",
          "RunEveryPeriodEnum from code-types",
          "runEveryPeriodStringArray from code-types",
          "Creation from model-types",
          "log from log",
          "stripComment from comment-util",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "Frontmatter from matter-types",
          "xor from lodash"
        ]
      },
      {
        "name": "getIndexId",
        "fileName": "src/getIndexId.ts",
        "imports": [
          "generateId from model-types",
          "TsIndexModelType from model-types",
          "kebabCase from convert-case",
          "findOperationBasePath from get-path",
          "getOperationPathParse from get-path"
        ]
      },
      {
        "name": "getMaxIndentationDepth",
        "fileName": "src/getMaxIndexationDepth.ts",
        "imports": []
      },
      {
        "name": "getMinMaxValidation",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "getNumberOfLines",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "getObjectSchema",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "getParamSchema",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "getParametersFromInterfaces",
        "fileName": "src/getParametersFromInterface.ts",
        "imports": [
          "FunctionParameter from code-types",
          "TsInterface from code-types",
          "notEmpty from js-util",
          "Creation from model-types",
          "getSchema from schema-util",
          "simplifySchema from schema-util"
        ]
      },
      {
        "name": "getPossibleRefs",
        "fileName": "src/getPossibleRefs.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util",
          "JSONSchema7 from json-schema",
          "Creation from model-types"
        ]
      },
      {
        "name": "getSizeSummary",
        "fileName": "src/getSizeSummary.ts",
        "imports": [
          "SizeSummary from code-types",
          "byteCount from path-util"
        ]
      },
      {
        "name": "getSpecialExtensionDbStorageMethod",
        "fileName": "src/getSpecialExtensionDbStorageMethod.ts",
        "imports": [
          "DbStorageMethod from code-types"
        ]
      },
      {
        "name": "getTsStatements",
        "fileName": "src/getTsStatements.ts",
        "imports": [
          "SourceFile from ts-morph",
          "SyntaxKind from ts-morph",
          "ts from ts-morph",
          "TypeFormatFlags from ts-morph",
          "VariableDeclaration from ts-morph",
          "notEmpty from js-util",
          "kebabCase from convert-case",
          "TsVariable from code-types",
          "TsFunction from code-types",
          "TsComment from code-types",
          "TsInterface from code-types",
          "RunEveryPeriodEnum from code-types",
          "runEveryPeriodStringArray from code-types",
          "Creation from model-types",
          "log from log",
          "stripComment from comment-util",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "Frontmatter from matter-types",
          "xor from lodash"
        ]
      },
      {
        "name": "getTypeInfo",
        "fileName": "src/getTypeInfo.ts",
        "imports": [
          "TypeInfo from code-types",
          "log from log",
          "simplifySchema from schema-util",
          "Schema from ts-json-schema-generator",
          "Type from ts-morph"
        ]
      },
      {
        "name": "getValidatedOperationPathParse",
        "fileName": "src/getValidatedOperationPathParse.ts",
        "imports": [
          "OperationPathParse from code-types",
          "fs from fs-util",
          "path from fs-util",
          "getOperationPathParse from get-path",
          "log from log"
        ]
      },
      {
        "name": "handleExplicitValidation",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "hasDefinition",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "hasTypescriptFileChanged",
        "fileName": "src/hasTypescriptFileChanged.ts",
        "imports": [
          "getExtension from fs-util-js",
          "WatchEventType from watch-types"
        ]
      },
      {
        "name": "indexImportsExportsForFilePath",
        "fileName": "src/indexImportsExportsForFilePath.ts",
        "imports": [
          "ProjectWatcher from watch-types",
          "findAndWriteImportsExports from get-imports-exports",
          "path from fs-util",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "indexTypescriptFilePath",
        "fileName": "src/indexTypescriptFilePath.ts",
        "imports": [
          "ProjectWatcher from watch-types",
          "path from fs-util"
        ]
      },
      {
        "name": "indexTypescriptFile",
        "fileName": "src/indexTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "Project from ts-morph",
          "db from database",
          "TsComment from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "log from log",
          "calculatePathMetaData from path-util",
          "Creation from model-types",
          "mergeNestedObject from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "indexTypescript",
        "fileName": "src/indexTypescript.ts",
        "imports": [
          "getFolder from fs-util",
          "path from fs-util",
          "getTsMorphProject from ts-morph-util",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "readJsonFile from read-json-file",
          "oneByOne from one-by-one",
          "Operation from code-types",
          "db from database"
        ]
      },
      {
        "name": "isPrimitive",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "makeTsComment",
        "fileName": "src/makeTsComment.ts",
        "imports": [
          "TsComment from code-types",
          "stripComment from comment-util",
          "Creation from model-types",
          "TsIndexModelType from model-types",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "CommentRange from ts-morph",
          "kebabCase from convert-case",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "removeTypescriptIndex",
        "fileName": "src/removeTypescriptIndex.ts",
        "imports": [
          "getExtension from fs-util-js",
          "ProjectWatcher from watch-types",
          "cleanupTsDatabase from cleanup-typescript-database",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "schemaToTsInterface",
        "fileName": "src/schemaToTsInterface.ts",
        "imports": [
          "getSchema from schema-util",
          "simplifySchema from schema-util",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "notEmpty from js-util",
          "stripComment from comment-util",
          "Creation from model-types",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path"
        ]
      },
      {
        "name": "test",
        "fileName": "src/indexTypescript2.test.ts",
        "imports": [
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "toSnack",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "tryCreateSchema",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "typeToSchema",
        "fileName": "src/typeToSchema.ts",
        "imports": [
          "last from lodash",
          "merge from lodash",
          "set from lodash",
          "Decorator from ts-morph",
          "Type from ts-morph",
          "Symbol from ts-morph",
          "SymbolFlags from ts-morph"
        ]
      },
      {
        "name": "CommentRange",
        "fileName": "src/makeTsComment.ts",
        "imports": [
          "TsComment from code-types",
          "stripComment from comment-util",
          "Creation from model-types",
          "TsIndexModelType from model-types",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "CommentRange from ts-morph",
          "kebabCase from convert-case",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "CompleteOperationPathParse",
        "fileName": "src/getValidatedOperationPathParse.ts",
        "imports": [
          "OperationPathParse from code-types",
          "fs from fs-util",
          "path from fs-util",
          "getOperationPathParse from get-path",
          "log from log"
        ]
      },
      {
        "name": "Config",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/getFrontmatterDbStorageMethod.ts",
        "imports": [
          "dbStorageMethods from code-types",
          "DbStorageMethod from code-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "JSONSchema7",
        "fileName": "src/getPossibleRefs.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util",
          "JSONSchema7 from json-schema",
          "Creation from model-types"
        ]
      },
      {
        "name": "MaybeInteface",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "MorphInterfaceInfo",
        "fileName": "src/MorphInterfaceInfo.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof cli>",
        "fileName": "src/findAndUpsertTsInterfaces.cli.ts",
        "imports": [
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof findCommentTypes>",
        "fileName": "src/findCommentTypes.ts",
        "imports": [
          "CommentType from code-types",
          "commentTypes from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof generateSchema>",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbStorageMethod>",
        "fileName": "src/getDbStorageMethod.ts",
        "imports": [
          "DbStorageMethod from code-types",
          "lowerCaseArray from convert-case",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFrontmatterDbStorageMethod>",
        "fileName": "src/getFrontmatterDbStorageMethod.ts",
        "imports": [
          "dbStorageMethods from code-types",
          "DbStorageMethod from code-types",
          "Frontmatter from matter-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getIndexId>",
        "fileName": "src/getIndexId.ts",
        "imports": [
          "generateId from model-types",
          "TsIndexModelType from model-types",
          "kebabCase from convert-case",
          "findOperationBasePath from get-path",
          "getOperationPathParse from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getMaxIndentationDepth>",
        "fileName": "src/getMaxIndexationDepth.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getNumberOfLines>",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getParametersFromInterfaces>",
        "fileName": "src/getParametersFromInterface.ts",
        "imports": [
          "FunctionParameter from code-types",
          "TsInterface from code-types",
          "notEmpty from js-util",
          "Creation from model-types",
          "getSchema from schema-util",
          "simplifySchema from schema-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getPossibleRefs>",
        "fileName": "src/getPossibleRefs.ts",
        "imports": [
          "TsInterface from code-types",
          "notEmpty from js-util",
          "JSONSchema7 from json-schema",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSizeSummary>",
        "fileName": "src/getSizeSummary.ts",
        "imports": [
          "SizeSummary from code-types",
          "byteCount from path-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getSpecialExtensionDbStorageMethod>",
        "fileName": "src/getSpecialExtensionDbStorageMethod.ts",
        "imports": [
          "DbStorageMethod from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getValidatedOperationPathParse>",
        "fileName": "src/getValidatedOperationPathParse.ts",
        "imports": [
          "OperationPathParse from code-types",
          "fs from fs-util",
          "path from fs-util",
          "getOperationPathParse from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof hasDefinition>",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof hasTypescriptFileChanged>",
        "fileName": "src/hasTypescriptFileChanged.ts",
        "imports": [
          "getExtension from fs-util-js",
          "WatchEventType from watch-types"
        ]
      },
      {
        "name": "NamedParameters<typeof indexTypescript>",
        "fileName": "src/indexTypescript.ts",
        "imports": [
          "getFolder from fs-util",
          "path from fs-util",
          "getTsMorphProject from ts-morph-util",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "findOperationBasePath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "readJsonFile from read-json-file",
          "oneByOne from one-by-one",
          "Operation from code-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof indexTypescriptFile>",
        "fileName": "src/indexTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "Project from ts-morph",
          "db from database",
          "TsComment from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "log from log",
          "calculatePathMetaData from path-util",
          "Creation from model-types",
          "mergeNestedObject from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof makeTsComment>",
        "fileName": "src/makeTsComment.ts",
        "imports": [
          "TsComment from code-types",
          "stripComment from comment-util",
          "Creation from model-types",
          "TsIndexModelType from model-types",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "CommentRange from ts-morph",
          "kebabCase from convert-case",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof schemaToTsInterface>",
        "fileName": "src/schemaToTsInterface.ts",
        "imports": [
          "getSchema from schema-util",
          "simplifySchema from schema-util",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "notEmpty from js-util",
          "stripComment from comment-util",
          "Creation from model-types",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/indexTypescript2.test.ts",
        "imports": [
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof tryCreateSchema>",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "OperationPathParse",
        "fileName": "src/getValidatedOperationPathParse.ts",
        "imports": [
          "OperationPathParse from code-types",
          "fs from fs-util",
          "path from fs-util",
          "getOperationPathParse from get-path",
          "log from log"
        ]
      },
      {
        "name": "Project",
        "fileName": "src/indexTypescriptFile.ts",
        "imports": [
          "fs from fs-util",
          "Project from ts-morph",
          "db from database",
          "TsComment from code-types",
          "TsInterface from code-types",
          "TsLintWarning from code-types",
          "log from log",
          "calculatePathMetaData from path-util",
          "Creation from model-types",
          "mergeNestedObject from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "Schema",
        "fileName": "src/schemaToTsInterface.ts",
        "imports": [
          "getSchema from schema-util",
          "simplifySchema from schema-util",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "kebabCase from convert-case",
          "slugify from convert-case",
          "parseFrontmatterMarkdownString from markdown-parse-js",
          "notEmpty from js-util",
          "stripComment from comment-util",
          "Creation from model-types",
          "findOperationBasePath from get-path",
          "getOperationRelativePath from get-path"
        ]
      },
      {
        "name": "TsInterface",
        "fileName": "src/generateSchema.ts",
        "imports": [
          "Config from ts-json-schema-generator",
          "createGenerator from ts-json-schema-generator",
          "Schema from ts-json-schema-generator",
          "TsInterface from code-types",
          "MaybeInteface from code-types",
          "log from log",
          "path from fs-util",
          "fs from fs-util",
          "getFolder from fs-util",
          "getLastFolder from fs-util",
          "findOperationBasePath from get-path",
          "makeRelative from fs-util-js",
          "mergeNestedObject from js-util",
          "notEmpty from js-util",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "WatchEventType",
        "fileName": "src/hasTypescriptFileChanged.ts",
        "imports": [
          "getExtension from fs-util-js",
          "WatchEventType from watch-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "index-typescript",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "try-parse-json",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "ts-morph",
      "database",
      "sdk-db",
      "fs-orm",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "pluralize",
      "measure-performance",
      "get-imported-dependencies",
      "js-util",
      "model-types",
      "code-types",
      "ts-morph-util",
      "get-package-source-paths",
      "ts-json-schema-generator",
      "log",
      "fs-util-js",
      "convert-case",
      "matter-types",
      "schema-util",
      "json-schema",
      "path-util",
      "comment-util",
      "markdown-parse-js",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "read-json-file",
      "one-by-one",
      "markdown-types",
      "bundle-types",
      "cleanup-typescript-database"
    ]
  },
  {
    "operationName": "lint",
    "totalInstancesCount": 2,
    "totalImportCount": 3,
    "totalDependencyCount": 3,
    "importDependencies": [
      "fs-util",
      "get-package-json",
      "get-ts-config"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-package-json",
      "get-ts-config"
    ],
    "instancesAndTheirImports": [
      {
        "name": "preIndexLint",
        "fileName": "src/general.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPackageJson from get-package-json",
          "getTsConfig from get-ts-config"
        ]
      },
      {
        "name": "NamedParameters<typeof preIndexLint>",
        "fileName": "src/general.ts",
        "imports": [
          "getLastFolder from fs-util",
          "getPackageJson from get-package-json",
          "getTsConfig from get-ts-config"
        ]
      }
    ],
    "cumulativeDependencies": [
      "lint",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-package-json",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "get-ts-config"
    ]
  },
  {
    "operationName": "minify-build",
    "totalInstancesCount": 2,
    "totalImportCount": 7,
    "totalDependencyCount": 6,
    "importDependencies": [
      "get-path",
      "log",
      "fs-util",
      "k-explore",
      "terser",
      "fs-util-js"
    ],
    "packageJsonDependencies": [
      "terser",
      "get-path",
      "log",
      "fs-util",
      "k-explore",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "minifyBuild",
        "fileName": "src/general.ts",
        "imports": [
          "getOperationPath from get-path",
          "log from log",
          "fs from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "minify from terser",
          "makeRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof minifyBuild>",
        "fileName": "src/general.ts",
        "imports": [
          "getOperationPath from get-path",
          "log from log",
          "fs from fs-util",
          "path from fs-util",
          "explore from k-explore",
          "minify from terser",
          "makeRelative from fs-util-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "minify-build",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "sdk-operations",
      "filename-conventions",
      "log",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "terser",
      "fs-util-js"
    ]
  },
  {
    "operationName": "new-template",
    "totalInstancesCount": 15,
    "totalImportCount": 32,
    "totalDependencyCount": 10,
    "importDependencies": [
      "fs-util",
      "get-path",
      "code-types",
      "set-json-key",
      "rename-template-files",
      "convert-case",
      "log",
      "js-util",
      "rebuild-operation",
      "filename-conventions"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path",
      "code-types",
      "model-types",
      "database",
      "set-json-key",
      "rename-template-files",
      "convert-case",
      "log",
      "js-util",
      "rebuild-operation",
      "filename-conventions"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAvailableOperationName",
        "fileName": "src/getAvailableOperationName.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "main",
        "fileName": "src/newOperationWithFiles.test.ts",
        "imports": []
      },
      {
        "name": "newOperationCli",
        "fileName": "src/cli/newOperation.cli.ts",
        "imports": [
          "OperationClassification from code-types",
          "operationClassificationConst from code-types",
          "log from log"
        ]
      },
      {
        "name": "newOperationWithFiles",
        "fileName": "src/newOperationWithFiles.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util",
          "getProjectRoot from get-path",
          "getSrcRelativeFileId from get-path",
          "isBundle from get-path",
          "objectMapAsync from js-util",
          "yarnBuild from rebuild-operation",
          "setJsonKey from set-json-key",
          "projectRelativeGeneratedOperationsFolder from filename-conventions",
          "log from log"
        ]
      },
      {
        "name": "newOperation",
        "fileName": "src/newOperation.ts",
        "imports": [
          "operationClassificationConst from code-types",
          "canRead from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "setJsonKey from set-json-key",
          "renameTemplateFiles from rename-template-files",
          "kebabCase from convert-case",
          "log from log",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "newTemplateCli",
        "fileName": "src/cli/newTemplate.cli.ts",
        "imports": []
      },
      {
        "name": "newTemplate",
        "fileName": "src/newTemplate.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "renameTemplateFiles from rename-template-files",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getAvailableOperationName>",
        "fileName": "src/getAvailableOperationName.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/newOperationWithFiles.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof newOperation>",
        "fileName": "src/newOperation.ts",
        "imports": [
          "operationClassificationConst from code-types",
          "canRead from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "setJsonKey from set-json-key",
          "renameTemplateFiles from rename-template-files",
          "kebabCase from convert-case",
          "log from log",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof newOperationCli>",
        "fileName": "src/cli/newOperation.cli.ts",
        "imports": [
          "OperationClassification from code-types",
          "operationClassificationConst from code-types",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof newOperationWithFiles>",
        "fileName": "src/newOperationWithFiles.ts",
        "imports": [
          "canRead from fs-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util",
          "getProjectRoot from get-path",
          "getSrcRelativeFileId from get-path",
          "isBundle from get-path",
          "objectMapAsync from js-util",
          "yarnBuild from rebuild-operation",
          "setJsonKey from set-json-key",
          "projectRelativeGeneratedOperationsFolder from filename-conventions",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof newTemplate>",
        "fileName": "src/newTemplate.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "renameTemplateFiles from rename-template-files",
          "log from log",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof newTemplateCli>",
        "fileName": "src/cli/newTemplate.cli.ts",
        "imports": []
      },
      {
        "name": "OperationClassification",
        "fileName": "src/newOperation.ts",
        "imports": [
          "operationClassificationConst from code-types",
          "canRead from fs-util",
          "path from fs-util",
          "fs from fs-util",
          "setJsonKey from set-json-key",
          "renameTemplateFiles from rename-template-files",
          "kebabCase from convert-case",
          "log from log",
          "OperationClassification from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "new-template",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "set-json-key",
      "rename-template-files",
      "one-by-one",
      "convert-case",
      "log",
      "js-util",
      "rebuild-operation",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "all",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "markdown-parsings",
      "find-all-dependency-operations",
      "json-util",
      "bundle-util",
      "db-util",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "filename-conventions"
    ]
  },
  {
    "operationName": "package-scripts",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "buildPackage",
        "fileName": "src/buildPackage.ts",
        "imports": []
      },
      {
        "name": "installMissingMonorepoDependencies",
        "fileName": "src/installMissingMonorepoDependencies.ts",
        "imports": []
      },
      {
        "name": "obfucsate",
        "fileName": "src/obfuscate.ts",
        "imports": []
      },
      {
        "name": "testPackage",
        "fileName": "src/testPackage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof buildPackage>",
        "fileName": "src/buildPackage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof installMissingMonorepoDependencies>",
        "fileName": "src/installMissingMonorepoDependencies.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof obfucsate>",
        "fileName": "src/obfuscate.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof testPackage>",
        "fileName": "src/testPackage.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "package-scripts"
    ]
  },
  {
    "operationName": "prettier-operation",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "prettierOperation",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof prettierOperation>",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "prettier-operation"
    ]
  },
  {
    "operationName": "rebuild-operation",
    "totalInstancesCount": 33,
    "totalImportCount": 75,
    "totalDependencyCount": 27,
    "importDependencies": [
      "database",
      "code-types",
      "js-util",
      "log",
      "convert-case",
      "pluralize",
      "read-json-file",
      "fs-orm",
      "json-schema",
      "fs-util",
      "get-path",
      "fs-util-js",
      "k-explore",
      "filename-conventions",
      "all",
      "run-child-process",
      "set-json-key",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "markdown-parsings",
      "one-by-one",
      "get-package-source-paths",
      "lint",
      "folder-get-updated-at",
      "minify-build"
    ],
    "packageJsonDependencies": [
      "database",
      "code-types",
      "get-path",
      "log",
      "one-by-one",
      "js-util",
      "fs-util",
      "k-explore",
      "filename-conventions",
      "run-child-process",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "markdown-parsings",
      "get-package-source-paths",
      "lint",
      "get-imports-exports",
      "folder-get-updated-at",
      "minify-build",
      "rebuild-operation",
      "all",
      "read-json-file",
      "convert-case",
      "pluralize",
      "fs-orm",
      "fs-util-js",
      "get-package-json",
      "set-json-key",
      "json-schema"
    ],
    "instancesAndTheirImports": [
      {
        "name": "clearTsDatabase",
        "fileName": "src/clearTsDatabase.ts",
        "imports": [
          "db from database",
          "typescriptIndexModels from code-types",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "executeCommandQuietUnlessFail",
        "fileName": "src/executeCommandQuietUnlessFail.ts",
        "imports": []
      },
      {
        "name": "exitIfProcessDependenciesChanged",
        "fileName": "src/exitIfProcessDependenciesChange.ts",
        "imports": [
          "TsImport from code-types",
          "db from database",
          "onlyUnique from js-util",
          "log from log"
        ]
      },
      {
        "name": "generateJsonSchemas",
        "fileName": "src/generateJsonSchemas.ts",
        "imports": [
          "kebabCase from convert-case",
          "pluralize from pluralize",
          "readJsonFile from read-json-file",
          "db from database",
          "getDefaultLocationPattern from fs-orm",
          "JSONSchema7 from json-schema",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "getAllDbModels",
        "fileName": "src/getAllDbModels.ts",
        "imports": [
          "db from database",
          "onlyUnique2 from js-util",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "getFileIds",
        "fileName": "src/getFileIds.ts",
        "imports": [
          "path from fs-util",
          "withoutExtension from fs-util-js",
          "explore from k-explore",
          "SearchableExtension from filename-conventions"
        ]
      },
      {
        "name": "getIndexFileIds",
        "fileName": "src/getIndexFileIds.ts",
        "imports": [
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "getSrcIds",
        "fileName": "src/getSrcIds.ts",
        "imports": []
      },
      {
        "name": "isOperationBuildNeeded",
        "fileName": "src/isOperationBuildNeeded.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "getOperationClassification from get-path"
        ]
      },
      {
        "name": "isSdkOperation",
        "fileName": "src/isSdkOperation.ts",
        "imports": [
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "rebuildAllOperations",
        "fileName": "src/rebuildAllOperations.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "forAllFolders from all",
          "log from log",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "rebuildOperationCli",
        "fileName": "src/cli/rebuildOperation.cli.ts",
        "imports": [
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "rebuildOperation",
        "fileName": "src/rebuildOperation.ts",
        "imports": [
          "runChildProcess from run-child-process",
          "log from log",
          "setKeyAtLocation from set-json-key",
          "getPackageJson from get-package-json",
          "cleanupTsDatabase from cleanup-typescript-database",
          "db from database",
          "generateSimpleIndex from generate-index",
          "isAllTrue from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "recalculateOperationIndexJson from operation-util",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "oneByOne from one-by-one",
          "getPackageSourcePaths from get-package-source-paths",
          "preIndexLint from lint",
          "getOperationPath from get-path",
          "getLastFolder from fs-util",
          "isGeneratedOperation from filename-conventions"
        ]
      },
      {
        "name": "shouldSkip",
        "fileName": "src/shouldSkip.ts",
        "imports": [
          "db from database",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "folderGetUpdatedAt from folder-get-updated-at",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "yarnBuild",
        "fileName": "src/yarnBuild.ts",
        "imports": [
          "buildFolderName from filename-conventions",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "log from log",
          "minifyBuild from minify-build"
        ]
      },
      {
        "name": "NamedParameters<typeof clearTsDatabase>",
        "fileName": "src/clearTsDatabase.ts",
        "imports": [
          "db from database",
          "typescriptIndexModels from code-types",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof executeCommandQuietUnlessFail>",
        "fileName": "src/executeCommandQuietUnlessFail.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof exitIfProcessDependenciesChanged>",
        "fileName": "src/exitIfProcessDependenciesChange.ts",
        "imports": [
          "TsImport from code-types",
          "db from database",
          "onlyUnique from js-util",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof generateJsonSchemas>",
        "fileName": "src/generateJsonSchemas.ts",
        "imports": [
          "kebabCase from convert-case",
          "pluralize from pluralize",
          "readJsonFile from read-json-file",
          "db from database",
          "getDefaultLocationPattern from fs-orm",
          "JSONSchema7 from json-schema",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getProjectRoot from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllDbModels>",
        "fileName": "src/getAllDbModels.ts",
        "imports": [
          "db from database",
          "onlyUnique2 from js-util",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFileIds>",
        "fileName": "src/getFileIds.ts",
        "imports": [
          "path from fs-util",
          "withoutExtension from fs-util-js",
          "explore from k-explore",
          "SearchableExtension from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getIndexFileIds>",
        "fileName": "src/getIndexFileIds.ts",
        "imports": [
          "databaseFolderName from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof getSrcIds>",
        "fileName": "src/getSrcIds.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isOperationBuildNeeded>",
        "fileName": "src/isOperationBuildNeeded.ts",
        "imports": [
          "OperationClassification from code-types",
          "getLastFolder from fs-util",
          "getOperationClassification from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof isSdkOperation>",
        "fileName": "src/isSdkOperation.ts",
        "imports": [
          "getLastFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof rebuildAllOperations>",
        "fileName": "src/rebuildAllOperations.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "forAllFolders from all",
          "log from log",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof rebuildOperation>",
        "fileName": "src/rebuildOperation.ts",
        "imports": [
          "runChildProcess from run-child-process",
          "log from log",
          "setKeyAtLocation from set-json-key",
          "getPackageJson from get-package-json",
          "cleanupTsDatabase from cleanup-typescript-database",
          "db from database",
          "generateSimpleIndex from generate-index",
          "isAllTrue from js-util",
          "notEmpty from js-util",
          "onlyUnique from js-util",
          "recalculateOperationIndexJson from operation-util",
          "getOperationSummary from markdown-parsings",
          "operationToMarkdown from markdown-parsings",
          "oneByOne from one-by-one",
          "getPackageSourcePaths from get-package-source-paths",
          "preIndexLint from lint",
          "getOperationPath from get-path",
          "getLastFolder from fs-util",
          "isGeneratedOperation from filename-conventions"
        ]
      },
      {
        "name": "NamedParameters<typeof rebuildOperationCli>",
        "fileName": "src/cli/rebuildOperation.cli.ts",
        "imports": [
          "path from fs-util",
          "getOperationPath from get-path",
          "getProjectRoot from get-path",
          "log from log",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof shouldSkip>",
        "fileName": "src/shouldSkip.ts",
        "imports": [
          "db from database",
          "buildFolderName from filename-conventions",
          "databaseFolderName from filename-conventions",
          "folderGetUpdatedAt from folder-get-updated-at",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof yarnBuild>",
        "fileName": "src/yarnBuild.ts",
        "imports": [
          "buildFolderName from filename-conventions",
          "fs from fs-util",
          "getLastFolder from fs-util",
          "path from fs-util",
          "log from log",
          "minifyBuild from minify-build"
        ]
      },
      {
        "name": "SearchableExtension",
        "fileName": "src/getFileIds.ts",
        "imports": [
          "path from fs-util",
          "withoutExtension from fs-util-js",
          "explore from k-explore",
          "SearchableExtension from filename-conventions"
        ]
      }
    ],
    "cumulativeDependencies": [
      "rebuild-operation",
      "database",
      "sdk-db",
      "model-types",
      "matter-types",
      "measure-performance",
      "code-types",
      "ts-json-schema-generator",
      "js-util",
      "log",
      "convert-case",
      "make-test",
      "pluralize",
      "read-json-file",
      "try-parse-json",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "sdk-operations",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "filename-conventions",
      "all",
      "run-child-process",
      "set-json-key",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "markdown-parsings",
      "find-all-dependency-operations",
      "json-util",
      "bundle-util",
      "db-util",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "one-by-one",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser"
    ]
  },
  {
    "operationName": "rename-operation",
    "totalInstancesCount": 2,
    "totalImportCount": 6,
    "totalDependencyCount": 4,
    "importDependencies": [
      "get-package-json",
      "get-path",
      "fs-util",
      "convert-case"
    ],
    "packageJsonDependencies": [
      "get-package-json",
      "get-path",
      "fs-util",
      "convert-case"
    ],
    "instancesAndTheirImports": [
      {
        "name": "renameOperation",
        "fileName": "src/renameOperation.ts",
        "imports": [
          "getPackageJson from get-package-json",
          "findOperationBasePath from get-path",
          "path from fs-util",
          "camelCase from convert-case",
          "kebabCase from convert-case",
          "fs from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof renameOperation>",
        "fileName": "src/renameOperation.ts",
        "imports": [
          "getPackageJson from get-package-json",
          "findOperationBasePath from get-path",
          "path from fs-util",
          "camelCase from convert-case",
          "kebabCase from convert-case",
          "fs from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "rename-operation",
      "get-package-json",
      "code-types",
      "model-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "get-path",
      "log",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "convert-case"
    ]
  },
  {
    "operationName": "schema-util",
    "totalInstancesCount": 30,
    "totalImportCount": 28,
    "totalDependencyCount": 8,
    "importDependencies": [
      "code-types",
      "js-util",
      "model-types",
      "name-conventions",
      "convert-case",
      "pluralize",
      "json-schema",
      "log"
    ],
    "packageJsonDependencies": [
      "code-types",
      "convert-case",
      "pluralize",
      "js-util",
      "log",
      "json-schema",
      "name-conventions",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "findFirstCommentTypes",
        "fileName": "src/findFirstCommentTypes.ts",
        "imports": [
          "CommentTypeObject from code-types",
          "commentTypes from code-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getDataParameterNames",
        "fileName": "src/getDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "getPossibleReferenceParameterNames",
        "fileName": "src/getReferenceParameterInfo.ts",
        "imports": [
          "referenceParameterNames from name-conventions",
          "referencePluralParameterNames from name-conventions",
          "camelCase from convert-case",
          "lowerCaseArray from convert-case",
          "pascalCase from convert-case",
          "capitaliseFirstLetter from convert-case",
          "isPlural from pluralize",
          "singularize from pluralize",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "getProperties",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "getRefLink",
        "fileName": "src/getRefLink.ts",
        "imports": []
      },
      {
        "name": "getReferencableModels",
        "fileName": "src/getRecerencableModels.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "getReferenceParameterInfo",
        "fileName": "src/getReferenceParameterInfo.ts",
        "imports": [
          "referenceParameterNames from name-conventions",
          "referencePluralParameterNames from name-conventions",
          "camelCase from convert-case",
          "lowerCaseArray from convert-case",
          "pascalCase from convert-case",
          "capitaliseFirstLetter from convert-case",
          "isPlural from pluralize",
          "singularize from pluralize",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "getSchemaItems",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "getSchema",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "simplifiedSchemaToTypeDefinitionString",
        "fileName": "src/simplifiedSchemaToTypeDefinitionString.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "simplifySchema",
        "fileName": "src/simplifySchema.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "log from log",
          "notEmpty from js-util",
          "SimplifiedSchema from code-types",
          "SimplifiedSchemaProperty from code-types",
          "SimplifiedSchemaItem from code-types"
        ]
      },
      {
        "name": "AugmentedAnyModelType",
        "fileName": "src/getDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "JSONSchema7",
        "fileName": "src/simplifySchema.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "log from log",
          "notEmpty from js-util",
          "SimplifiedSchema from code-types",
          "SimplifiedSchemaProperty from code-types",
          "SimplifiedSchemaItem from code-types"
        ]
      },
      {
        "name": "JSONSchema7Definition",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "NamedParameters<typeof findFirstCommentTypes>",
        "fileName": "src/findFirstCommentTypes.ts",
        "imports": [
          "CommentTypeObject from code-types",
          "commentTypes from code-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDataParameterNames>",
        "fileName": "src/getDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPossibleReferenceParameterNames>",
        "fileName": "src/getReferenceParameterInfo.ts",
        "imports": [
          "referenceParameterNames from name-conventions",
          "referencePluralParameterNames from name-conventions",
          "camelCase from convert-case",
          "lowerCaseArray from convert-case",
          "pascalCase from convert-case",
          "capitaliseFirstLetter from convert-case",
          "isPlural from pluralize",
          "singularize from pluralize",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getProperties>",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "NamedParameters<typeof getReferencableModels>",
        "fileName": "src/getRecerencableModels.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getReferenceParameterInfo>",
        "fileName": "src/getReferenceParameterInfo.ts",
        "imports": [
          "referenceParameterNames from name-conventions",
          "referencePluralParameterNames from name-conventions",
          "camelCase from convert-case",
          "lowerCaseArray from convert-case",
          "pascalCase from convert-case",
          "capitaliseFirstLetter from convert-case",
          "isPlural from pluralize",
          "singularize from pluralize",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getRefLink>",
        "fileName": "src/getRefLink.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSchema>",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "NamedParameters<typeof getSchemaItems>",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "NamedParameters<typeof simplifiedSchemaToTypeDefinitionString>",
        "fileName": "src/simplifiedSchemaToTypeDefinitionString.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof simplifySchema>",
        "fileName": "src/simplifySchema.ts",
        "imports": [
          "JSONSchema7 from json-schema",
          "log from log",
          "notEmpty from js-util",
          "SimplifiedSchema from code-types",
          "SimplifiedSchemaProperty from code-types",
          "SimplifiedSchemaItem from code-types"
        ]
      },
      {
        "name": "ReferenceParameterInfo",
        "fileName": "src/getReferenceParameterInfo.ts",
        "imports": [
          "referenceParameterNames from name-conventions",
          "referencePluralParameterNames from name-conventions",
          "camelCase from convert-case",
          "lowerCaseArray from convert-case",
          "pascalCase from convert-case",
          "capitaliseFirstLetter from convert-case",
          "isPlural from pluralize",
          "singularize from pluralize",
          "replaceLastOccurence from js-util"
        ]
      },
      {
        "name": "Schema",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "SchemaItem",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "SchemaProperty",
        "fileName": "src/schema-util.ts",
        "imports": [
          "makeArray from js-util",
          "notEmpty from js-util",
          "TsInterface from code-types",
          "JSONSchema7Definition from json-schema",
          "JSONSchema7 from json-schema"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/simplifiedSchemaToTypeDefinitionString.ts",
        "imports": [
          "SimplifiedSchema from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "schema-util",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "matter-types",
      "js-util",
      "model-types",
      "name-conventions",
      "convert-case",
      "make-test",
      "pluralize",
      "json-schema",
      "log"
    ]
  },
  {
    "operationName": "simple-typescript-js",
    "totalInstancesCount": 3,
    "totalImportCount": 11,
    "totalDependencyCount": 5,
    "importDependencies": [
      "convert-case",
      "js-util",
      "model-types",
      "pluralize",
      "simple-typescript-types"
    ],
    "packageJsonDependencies": [
      "convert-case",
      "pluralize",
      "simple-typescript-types",
      "js-util",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getSimpleTypescriptFileString",
        "fileName": "src/getSimpleTypescriptFileString.ts",
        "imports": [
          "camelCase from convert-case",
          "pascalCase from convert-case",
          "slugify from convert-case",
          "notEmpty from js-util",
          "Json from model-types",
          "isPlural from pluralize",
          "pluralize from pluralize",
          "singularize from pluralize",
          "SimpleTypescriptFile from simple-typescript-types"
        ]
      },
      {
        "name": "jsonToString",
        "fileName": "src/getSimpleTypescriptFileString.ts",
        "imports": [
          "camelCase from convert-case",
          "pascalCase from convert-case",
          "slugify from convert-case",
          "notEmpty from js-util",
          "Json from model-types",
          "isPlural from pluralize",
          "pluralize from pluralize",
          "singularize from pluralize",
          "SimpleTypescriptFile from simple-typescript-types"
        ]
      },
      {
        "name": "parseRawSimpleTypescriptFile",
        "fileName": "src/parseRawSimpleTypescriptFile.ts",
        "imports": [
          "SimpleTypescriptFile from simple-typescript-types",
          "createMappedObject from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "simple-typescript-js",
      "convert-case",
      "make-test",
      "js-util",
      "model-types",
      "matter-types",
      "pluralize",
      "simple-typescript-types"
    ]
  },
  {
    "operationName": "simple-typescript-node",
    "totalInstancesCount": 5,
    "totalImportCount": 15,
    "totalDependencyCount": 12,
    "importDependencies": [
      "simple-typescript-js",
      "rebuild-operation",
      "fs-util",
      "get-path",
      "sdk-operations",
      "convert-case",
      "simple-typescript-types",
      "new-template",
      "generate-index",
      "js-util",
      "code-types",
      "database"
    ],
    "packageJsonDependencies": [
      "simple-typescript-js",
      "js-util",
      "convert-case",
      "simple-typescript-types",
      "rebuild-operation",
      "fs-util",
      "get-path",
      "new-template",
      "generate-index",
      "code-types",
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "createOperationsSdkCli",
        "fileName": "src/cli/createOperationsSdk.cli.ts",
        "imports": [
          "Operation from code-types",
          "db from database",
          "getFolder from fs-util"
        ]
      },
      {
        "name": "createSimpleTypescriptFile",
        "fileName": "src/createSimpleTypescriptFile.ts",
        "imports": [
          "getSimpleTypescriptFileString from simple-typescript-js",
          "parseRawSimpleTypescriptFile from simple-typescript-js",
          "yarnBuild from rebuild-operation",
          "path from fs-util",
          "fs from fs-util",
          "getProjectRoot from get-path",
          "operations from sdk-operations",
          "slugify from convert-case",
          "SimpleTypescriptFile from simple-typescript-types",
          "newOperationWithFiles from new-template",
          "generateSimpleIndex from generate-index",
          "destructureOptionalObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof createOperationsSdkCli>",
        "fileName": "src/cli/createOperationsSdk.cli.ts",
        "imports": [
          "Operation from code-types",
          "db from database",
          "getFolder from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof createSimpleTypescriptFile>",
        "fileName": "src/createSimpleTypescriptFile.ts",
        "imports": [
          "getSimpleTypescriptFileString from simple-typescript-js",
          "parseRawSimpleTypescriptFile from simple-typescript-js",
          "yarnBuild from rebuild-operation",
          "path from fs-util",
          "fs from fs-util",
          "getProjectRoot from get-path",
          "operations from sdk-operations",
          "slugify from convert-case",
          "SimpleTypescriptFile from simple-typescript-types",
          "newOperationWithFiles from new-template",
          "generateSimpleIndex from generate-index",
          "destructureOptionalObject from js-util"
        ]
      },
      {
        "name": "SimpleTypescriptFile",
        "fileName": "src/createSimpleTypescriptFile.ts",
        "imports": [
          "getSimpleTypescriptFileString from simple-typescript-js",
          "parseRawSimpleTypescriptFile from simple-typescript-js",
          "yarnBuild from rebuild-operation",
          "path from fs-util",
          "fs from fs-util",
          "getProjectRoot from get-path",
          "operations from sdk-operations",
          "slugify from convert-case",
          "SimpleTypescriptFile from simple-typescript-types",
          "newOperationWithFiles from new-template",
          "generateSimpleIndex from generate-index",
          "destructureOptionalObject from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "simple-typescript-node",
      "simple-typescript-js",
      "model-types",
      "matter-types",
      "pluralize",
      "rebuild-operation",
      "log",
      "read-json-file",
      "try-parse-json",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "measure-performance",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "json-schema",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "filename-conventions",
      "all",
      "run-child-process",
      "set-json-key",
      "get-package-json",
      "cleanup-typescript-database",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "ts-json-schema-generator",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "markdown-parsings",
      "find-all-dependency-operations",
      "json-util",
      "bundle-util",
      "db-util",
      "recursive-types",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "one-by-one",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "fs-util",
      "graceful-fs",
      "get-path",
      "sdk-operations",
      "convert-case",
      "simple-typescript-types",
      "new-template",
      "rename-template-files",
      "generate-index",
      "js-util",
      "code-types",
      "database"
    ]
  },
  {
    "operationName": "simple-typescript-types",
    "totalInstancesCount": 0,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "simple-typescript-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "k-test",
    "totalInstancesCount": 5,
    "totalImportCount": 7,
    "totalDependencyCount": 5,
    "importDependencies": [
      "make-test",
      "js-util",
      "get-path",
      "fs-util",
      "log"
    ],
    "packageJsonDependencies": [
      "make-test",
      "js-util",
      "get-path",
      "fs-util",
      "log"
    ],
    "instancesAndTheirImports": [
      {
        "name": "runTestsForOperation",
        "fileName": "src/runTestsForOperation.ts",
        "imports": [
          "getOperationPath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "runTests",
        "fileName": "src/runTests.ts",
        "imports": [
          "isAllTrue from js-util",
          "makeArray from js-util"
        ]
      },
      {
        "name": "sum",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof runTestsForOperation>",
        "fileName": "src/runTestsForOperation.ts",
        "imports": [
          "getOperationPath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof sum>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      }
    ],
    "cumulativeDependencies": [
      "k-test",
      "make-test",
      "js-util",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log"
    ]
  },
  {
    "operationName": "make-test",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "isResultOfInterface",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "makeTest",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "make-test"
    ]
  },
  {
    "operationName": "ts-morph-util",
    "totalInstancesCount": 5,
    "totalImportCount": 8,
    "totalDependencyCount": 4,
    "importDependencies": [
      "get-package-source-paths",
      "log",
      "ts-morph",
      "fs-util"
    ],
    "packageJsonDependencies": [
      "ts-morph",
      "get-package-source-paths",
      "log",
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAllTsMorphSourceFiles",
        "fileName": "src/getAllTsMorphSourceFiles.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "log from log"
        ]
      },
      {
        "name": "getHasGeneric",
        "fileName": "src/getHasGeneric.ts",
        "imports": [
          "InterfaceDeclaration from ts-morph",
          "TypeAliasDeclaration from ts-morph"
        ]
      },
      {
        "name": "getTsMorphProject",
        "fileName": "src/getTsMorphProject.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "Project from ts-morph"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllTsMorphSourceFiles>",
        "fileName": "src/getAllTsMorphSourceFiles.ts",
        "imports": [
          "getPackageSourcePaths from get-package-source-paths",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsMorphProject>",
        "fileName": "src/getTsMorphProject.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "Project from ts-morph"
        ]
      }
    ],
    "cumulativeDependencies": [
      "ts-morph-util",
      "get-package-source-paths",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "log",
      "ts-morph",
      "fs-util",
      "graceful-fs",
      "recursive-types"
    ]
  },
  {
    "operationName": "api",
    "totalInstancesCount": 11,
    "totalImportCount": 17,
    "totalDependencyCount": 8,
    "importDependencies": [
      "api-types",
      "server-api-url",
      "react-with-native-store",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "react-query"
    ],
    "packageJsonDependencies": [
      "js-util",
      "server-api-url",
      "react-with-native-store",
      "api-types",
      "convert-case",
      "rest-util",
      "react-query"
    ],
    "instancesAndTheirImports": [
      {
        "name": "fn1",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "fn2",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "fn3",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "getGetApiUrl",
        "fileName": "src/getGetApiUrl.ts",
        "imports": [
          "apiConventions from api-types",
          "toQueryString from rest-util"
        ]
      },
      {
        "name": "untypedApiFunction",
        "fileName": "src/api.ts",
        "imports": [
          "ApiConfig from api-types",
          "ApiTypeWithoutConfig from api-types",
          "ApiTypeWithConfig from api-types",
          "RealApiReturnType from api-types",
          "QueryType from api-types",
          "apiUrl from server-api-url",
          "getItem from react-with-native-store",
          "setItem from react-with-native-store",
          "mergeObjectsArray from js-util",
          "functionApiKeys from sdk-api-keys"
        ]
      },
      {
        "name": "ApiConfig",
        "fileName": "src/api.ts",
        "imports": [
          "ApiConfig from api-types",
          "ApiTypeWithoutConfig from api-types",
          "ApiTypeWithConfig from api-types",
          "RealApiReturnType from api-types",
          "QueryType from api-types",
          "apiUrl from server-api-url",
          "getItem from react-with-native-store",
          "setItem from react-with-native-store",
          "mergeObjectsArray from js-util",
          "functionApiKeys from sdk-api-keys"
        ]
      },
      {
        "name": "NamedParameters<typeof fn1>",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof fn2>",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof fn3>",
        "fileName": "src/sdkExample.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getGetApiUrl>",
        "fileName": "src/getGetApiUrl.ts",
        "imports": [
          "apiConventions from api-types",
          "toQueryString from rest-util"
        ]
      },
      {
        "name": "NamedParameters<typeof untypedApiFunction>",
        "fileName": "src/api.ts",
        "imports": [
          "ApiConfig from api-types",
          "ApiTypeWithoutConfig from api-types",
          "ApiTypeWithConfig from api-types",
          "RealApiReturnType from api-types",
          "QueryType from api-types",
          "apiUrl from server-api-url",
          "getItem from react-with-native-store",
          "setItem from react-with-native-store",
          "mergeObjectsArray from js-util",
          "functionApiKeys from sdk-api-keys"
        ]
      }
    ],
    "cumulativeDependencies": [
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query"
    ]
  },
  {
    "operationName": "api-store",
    "totalInstancesCount": 1,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "react-with-native-store"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ApiStoreType",
        "fileName": "src/store.ts",
        "imports": [
          "createStore from react-with-native-store"
        ]
      }
    ],
    "cumulativeDependencies": [
      "api-store",
      "react-with-native-store",
      "react"
    ]
  },
  {
    "operationName": "api-types",
    "totalInstancesCount": 0,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "sdk-api",
      "react-query"
    ],
    "packageJsonDependencies": [
      "js-util",
      "react-query"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "api-types",
      "sdk-api",
      "react-query"
    ]
  },
  {
    "operationName": "endpoint-util",
    "totalInstancesCount": 2,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "server/typings/common",
      "js-util",
      "string-to-json"
    ],
    "packageJsonDependencies": [
      "js-util",
      "string-to-json",
      "server"
    ],
    "instancesAndTheirImports": [
      {
        "name": "makeArraysGetEndpoint",
        "fileName": "src/endpointCreationUtil.ts",
        "imports": [
          "Context from server/typings/common",
          "makeArray from js-util",
          "objectMapSync from js-util",
          "takeFirst from js-util",
          "parsePrimitiveJson from string-to-json"
        ]
      },
      {
        "name": "makeGetEndpoint",
        "fileName": "src/endpointCreationUtil.ts",
        "imports": [
          "Context from server/typings/common",
          "makeArray from js-util",
          "objectMapSync from js-util",
          "takeFirst from js-util",
          "parsePrimitiveJson from string-to-json"
        ]
      }
    ],
    "cumulativeDependencies": [
      "endpoint-util",
      "server/typings/common",
      "js-util",
      "string-to-json"
    ]
  },
  {
    "operationName": "encrypt-password",
    "totalInstancesCount": 4,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "bcrypt"
    ],
    "packageJsonDependencies": [
      "bcrypt"
    ],
    "instancesAndTheirImports": [
      {
        "name": "comparePassword",
        "fileName": "src/comparePassword.ts",
        "imports": [
          "compareSync from bcrypt"
        ]
      },
      {
        "name": "encryptPassword",
        "fileName": "src/encryptPassword.ts",
        "imports": [
          "hashSync from bcrypt"
        ]
      },
      {
        "name": "NamedParameters<typeof comparePassword>",
        "fileName": "src/comparePassword.ts",
        "imports": [
          "compareSync from bcrypt"
        ]
      },
      {
        "name": "NamedParameters<typeof encryptPassword>",
        "fileName": "src/encryptPassword.ts",
        "imports": [
          "hashSync from bcrypt"
        ]
      }
    ],
    "cumulativeDependencies": [
      "encrypt-password",
      "bcrypt"
    ]
  },
  {
    "operationName": "function-context-type",
    "totalInstancesCount": 5,
    "totalImportCount": 6,
    "totalDependencyCount": 5,
    "importDependencies": [
      "auth-types",
      "code-types",
      "model-types",
      "peer-types",
      "server/typings/common"
    ],
    "packageJsonDependencies": [
      "auth-types",
      "code-types",
      "peer-types",
      "server",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Authorization",
        "fileName": "src/FunctionContext.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "Storing from model-types",
          "Group from peer-types",
          "Device from peer-types",
          "Context from server/typings/common"
        ]
      },
      {
        "name": "Device",
        "fileName": "src/FunctionContext.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "Storing from model-types",
          "Group from peer-types",
          "Device from peer-types",
          "Context from server/typings/common"
        ]
      },
      {
        "name": "FunctionContext",
        "fileName": "src/FunctionContext.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "Storing from model-types",
          "Group from peer-types",
          "Device from peer-types",
          "Context from server/typings/common"
        ]
      },
      {
        "name": "Group",
        "fileName": "src/FunctionContext.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "Storing from model-types",
          "Group from peer-types",
          "Device from peer-types",
          "Context from server/typings/common"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/FunctionContext.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "Storing from model-types",
          "Group from peer-types",
          "Device from peer-types",
          "Context from server/typings/common"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-context-type",
      "auth-types",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "model-types",
      "peer-types",
      "geo-types",
      "asset-type",
      "social-media-types",
      "server/typings/common"
    ]
  },
  {
    "operationName": "function-recipes",
    "totalInstancesCount": 2,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "database"
    ],
    "packageJsonDependencies": [
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getTsFunction",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsFunction>",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-recipes",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "function-server",
    "totalInstancesCount": 16,
    "totalImportCount": 21,
    "totalDependencyCount": 18,
    "importDependencies": [
      "fs-util",
      "function-server-endpoints",
      "get-path",
      "port-conventions",
      "server/typings/common",
      "server/typings/options",
      "watch-all",
      "nodemon",
      "one-by-one",
      "log",
      "sdk-api",
      "node-cron",
      "code-types",
      "js-util",
      "database",
      "child-process-helper",
      "pm2-util",
      "sdk-operations"
    ],
    "packageJsonDependencies": [
      "child-process-helper",
      "code-types",
      "cors",
      "database",
      "dotenv",
      "fs-util",
      "function-server-endpoints",
      "get-path",
      "js-util",
      "localtunnel",
      "log",
      "md5",
      "multer",
      "node-cron",
      "nodemon",
      "one-by-one",
      "pm2-util",
      "port-conventions",
      "reflect-metadata",
      "sensible-core",
      "sensible-server",
      "sequelize",
      "sequelize-typescript",
      "server",
      "typescript",
      "watch-all"
    ],
    "instancesAndTheirImports": [
      {
        "name": "executeCronFunction",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      },
      {
        "name": "runFunctionServerCli",
        "fileName": "src/cli/runFunctionServer.cli.ts",
        "imports": []
      },
      {
        "name": "runFunctionServerDevCli",
        "fileName": "src/cli/runFunctionServerDev.cli.ts",
        "imports": []
      },
      {
        "name": "runFunctionServerDev",
        "fileName": "src/runFunctionServerDev.ts",
        "imports": [
          "nodemon from nodemon"
        ]
      },
      {
        "name": "runFunctionServer",
        "fileName": "src/runFunctionServer.ts",
        "imports": [
          "path from fs-util",
          "functionGetEndpoints from function-server-endpoints",
          "functionPostEndpoints from function-server-endpoints",
          "getProjectRoot from get-path",
          "ports from port-conventions",
          "Context from server/typings/common",
          "Options from server/typings/options",
          "watchAll from watch-all"
        ]
      },
      {
        "name": "scheduleCronJobs",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      },
      {
        "name": "startSearchWebIfAvailable",
        "fileName": "src/startSearchWebIfAvailable.ts",
        "imports": [
          "execSync from child-process-helper",
          "log from log",
          "startApp from pm2-util",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "NamedParameters<typeof executeCronFunction>",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof runFunctionServer>",
        "fileName": "src/runFunctionServer.ts",
        "imports": [
          "path from fs-util",
          "functionGetEndpoints from function-server-endpoints",
          "functionPostEndpoints from function-server-endpoints",
          "getProjectRoot from get-path",
          "ports from port-conventions",
          "Context from server/typings/common",
          "Options from server/typings/options",
          "watchAll from watch-all"
        ]
      },
      {
        "name": "NamedParameters<typeof runFunctionServerCli>",
        "fileName": "src/cli/runFunctionServer.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof runFunctionServerDev>",
        "fileName": "src/runFunctionServerDev.ts",
        "imports": [
          "nodemon from nodemon"
        ]
      },
      {
        "name": "NamedParameters<typeof runFunctionServerDevCli>",
        "fileName": "src/cli/runFunctionServerDev.cli.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof scheduleCronJobs>",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof startSearchWebIfAvailable>",
        "fileName": "src/startSearchWebIfAvailable.ts",
        "imports": [
          "execSync from child-process-helper",
          "log from log",
          "startApp from pm2-util",
          "operations from sdk-operations"
        ]
      },
      {
        "name": "RunEveryPeriodEnum",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/scheduleCronJobs.ts",
        "imports": [
          "oneByOne from one-by-one",
          "log from log",
          "sdk from sdk-api",
          "schedule from node-cron",
          "RunEveryPeriodEnum from code-types",
          "TsFunction from code-types",
          "getObjectKeysArray from js-util",
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-server",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "function-server-endpoints",
      "convert-case",
      "make-test",
      "model-types",
      "matter-types",
      "peer-types",
      "asset-type",
      "social-media-types",
      "sdk-env-private",
      "function-functions-node",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react",
      "function-types",
      "bundle-types",
      "function-server-types",
      "fs-util-js",
      "db-recipes",
      "sdk-db",
      "sdk-interface-paths",
      "bundle-util",
      "db-util",
      "k-explore",
      "markdown-types",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "name-conventions",
      "pluralize",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "measure-performance",
      "api-types",
      "function-context-type",
      "sdk-api-keys",
      "rest-util",
      "auth-types",
      "sdk-function-paths",
      "read-json-file",
      "try-parse-json",
      "fs-orm",
      "schema-util",
      "json-schema",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "geo-types",
      "get-path",
      "port-conventions",
      "server/typings/common",
      "server/typings/options",
      "watch-all",
      "chokidar",
      "watch-types",
      "nodemon",
      "one-by-one",
      "log",
      "sdk-api",
      "node-cron",
      "code-types",
      "ts-json-schema-generator",
      "js-util",
      "database",
      "child-process-helper",
      "pm2-util",
      "pm2",
      "get-package-json",
      "peer-functions",
      "sdk-operations"
    ]
  },
  {
    "operationName": "function-server-endpoints",
    "totalInstancesCount": 23,
    "totalImportCount": 67,
    "totalDependencyCount": 23,
    "importDependencies": [
      "convert-case",
      "model-types",
      "peer-types",
      "server/typings/common",
      "sdk-api",
      "sdk-env-private",
      "js-util",
      "function-functions-node",
      "db-recipes",
      "measure-performance",
      "api-types",
      "function-context-type",
      "sdk-api-keys",
      "rest-util",
      "auth-types",
      "code-types",
      "sdk-function-paths",
      "get-path",
      "fs-util",
      "read-json-file",
      "database",
      "fs-orm",
      "geo-types"
    ],
    "packageJsonDependencies": [
      "db-recipes",
      "js-util",
      "model-types",
      "ua-parser-js",
      "convert-case",
      "get-path",
      "fs-util",
      "read-json-file",
      "database",
      "peer-types",
      "api-types",
      "code-types",
      "auth-types",
      "geo-types",
      "fs-orm",
      "server",
      "function-context-type",
      "rest-util",
      "measure-performance",
      "function-functions-node"
    ],
    "instancesAndTheirImports": [
      {
        "name": "calculateDeviceName",
        "fileName": "src/calculateDeviceName.ts",
        "imports": [
          "slugify from convert-case",
          "generateRandomString from model-types",
          "IPInfo from peer-types",
          "IResult from peer-types"
        ]
      },
      {
        "name": "executeFunctionWithParameters",
        "fileName": "src/executeFunctionWithParameters.ts",
        "imports": [
          "Context from server/typings/common",
          "sdk from sdk-api",
          "privateEnvironmentVariables from sdk-env-private",
          "privateLocalEnvironmentVariables from sdk-env-private",
          "notEmpty from js-util",
          "getPublicBundleConfig from function-functions-node",
          "cacheLookup from db-recipes",
          "validateInput from db-recipes",
          "validateResult from db-recipes",
          "generateId from model-types",
          "PerformanceItem from measure-performance",
          "apiConventions from api-types",
          "RealApiReturnType from api-types",
          "cleanupTimer from measure-performance",
          "getNewPerformance from measure-performance",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "getAuthorizationInfo",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "getTsFunction",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "TsFunction from code-types",
          "sdkFunctionPaths from sdk-function-paths",
          "getProjectRoot from get-path",
          "path from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "isGetEndpoint",
        "fileName": "src/isGetEndpoint.ts",
        "imports": [
          "apiConventions from api-types"
        ]
      },
      {
        "name": "savePageVisit",
        "fileName": "src/savePageVisit.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "Id from model-types",
          "IPInfo from peer-types",
          "PageVisit from peer-types"
        ]
      },
      {
        "name": "storeFunctionExecution",
        "fileName": "src/storeFunctionExecution.ts",
        "imports": [
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "PerformanceItem from measure-performance",
          "db from database",
          "Creation from model-types"
        ]
      },
      {
        "name": "upsertDevice",
        "fileName": "src/upsertDevice.ts",
        "imports": [
          "Context from server/typings/common",
          "Include from fs-orm",
          "Position from geo-types",
          "Storing from model-types",
          "Device from peer-types",
          "IPInfo from peer-types",
          "IResult from peer-types",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "getRootPath from get-path",
          "generateUniqueId from measure-performance",
          "getNewPerformance from measure-performance",
          "PerformanceItem from measure-performance",
          "readJsonFile from read-json-file",
          "db from database"
        ]
      },
      {
        "name": "Authorization",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "AuthorizationInfo",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "Device",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "Group",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/savePageVisit.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "Id from model-types",
          "IPInfo from peer-types",
          "PageVisit from peer-types"
        ]
      },
      {
        "name": "IPInfo",
        "fileName": "src/savePageVisit.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "Id from model-types",
          "IPInfo from peer-types",
          "PageVisit from peer-types"
        ]
      },
      {
        "name": "IResult",
        "fileName": "src/calculateDeviceName.ts",
        "imports": [
          "slugify from convert-case",
          "generateRandomString from model-types",
          "IPInfo from peer-types",
          "IResult from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof calculateDeviceName>",
        "fileName": "src/calculateDeviceName.ts",
        "imports": [
          "slugify from convert-case",
          "generateRandomString from model-types",
          "IPInfo from peer-types",
          "IResult from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAuthorizationInfo>",
        "fileName": "src/getAuthorizationInfo.ts",
        "imports": [
          "Authorization from auth-types",
          "TsFunction from code-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getTsFunction>",
        "fileName": "src/getTsFunction.ts",
        "imports": [
          "TsFunction from code-types",
          "sdkFunctionPaths from sdk-function-paths",
          "getProjectRoot from get-path",
          "path from fs-util",
          "readJsonFile from read-json-file"
        ]
      },
      {
        "name": "NamedParameters<typeof isGetEndpoint>",
        "fileName": "src/isGetEndpoint.ts",
        "imports": [
          "apiConventions from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof savePageVisit>",
        "fileName": "src/savePageVisit.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "Id from model-types",
          "IPInfo from peer-types",
          "PageVisit from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof storeFunctionExecution>",
        "fileName": "src/storeFunctionExecution.ts",
        "imports": [
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "PerformanceItem from measure-performance",
          "db from database",
          "Creation from model-types"
        ]
      },
      {
        "name": "PerformanceItem",
        "fileName": "src/storeFunctionExecution.ts",
        "imports": [
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "PerformanceItem from measure-performance",
          "db from database",
          "Creation from model-types"
        ]
      },
      {
        "name": "TsFunction",
        "fileName": "src/storeFunctionExecution.ts",
        "imports": [
          "FunctionExecution from code-types",
          "TsFunction from code-types",
          "PerformanceItem from measure-performance",
          "db from database",
          "Creation from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-server-endpoints",
      "convert-case",
      "make-test",
      "model-types",
      "matter-types",
      "peer-types",
      "asset-type",
      "social-media-types",
      "server/typings/common",
      "sdk-api",
      "sdk-env-private",
      "js-util",
      "function-functions-node",
      "sdk-operations",
      "webpage-types",
      "recursive-types",
      "recursive-util",
      "nested-menu-types",
      "react",
      "function-types",
      "bundle-types",
      "function-server-types",
      "fs-util-js",
      "db-recipes",
      "sdk-db",
      "sdk-interface-paths",
      "bundle-util",
      "db-util",
      "k-explore",
      "markdown-types",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react-query",
      "text-or-binary",
      "marked",
      "filename-conventions",
      "write-to-assets",
      "name-conventions",
      "pluralize",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "log",
      "measure-performance",
      "api-types",
      "function-context-type",
      "sdk-api-keys",
      "rest-util",
      "auth-types",
      "code-types",
      "ts-json-schema-generator",
      "json-schema",
      "sdk-function-paths",
      "get-path",
      "try-parse-json",
      "fs-util",
      "graceful-fs",
      "read-json-file",
      "database",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "geo-types"
    ]
  },
  {
    "operationName": "function-server-types",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "ApiFunction",
        "fileName": "src/ApiFunction.ts",
        "imports": []
      },
      {
        "name": "ApiFunctionParameters",
        "fileName": "src/ApiFunction.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "function-server-types"
    ]
  },
  {
    "operationName": "server-api-url",
    "totalInstancesCount": 0,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "sdk-env-public",
      "react-with-native-store",
      "port-conventions"
    ],
    "packageJsonDependencies": [
      "port-conventions",
      "react-with-native-store"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "react",
      "port-conventions"
    ]
  },
  {
    "operationName": "server-login",
    "totalInstancesCount": 50,
    "totalImportCount": 75,
    "totalDependencyCount": 16,
    "importDependencies": [
      "database",
      "model-types",
      "peer-types",
      "sms",
      "mail",
      "encrypt-password",
      "function-context-type",
      "js-util",
      "fs-util",
      "get-path",
      "auth-types",
      "function-server-types",
      "fs-orm",
      "convert-case",
      "asset-type",
      "asset-functions-node"
    ],
    "packageJsonDependencies": [
      "bcrypt",
      "database",
      "model-types",
      "peer-types",
      "sms",
      "mail",
      "server",
      "function-context-type",
      "encrypt-password",
      "convert-case",
      "js-util",
      "asset-functions-node",
      "asset-type",
      "function-server-types",
      "fs-orm",
      "auth-types",
      "fs-util",
      "get-path"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addAuthenticationMethod",
        "fileName": "src/addAuthenticationMethod.ts",
        "imports": [
          "db from database",
          "isEmail from model-types",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "Device from peer-types",
          "sendSms from sms",
          "sendMail from mail",
          "encryptPassword from encrypt-password"
        ]
      },
      {
        "name": "addDeviceAuthenticationMethodConfirm",
        "fileName": "src/confirmAuthenticationMethod.ts",
        "imports": [
          "db from database",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "addDeviceAuthenticationMethodWithContext",
        "fileName": "src/addDeviceAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "FunctionContext from function-context-type",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "addPersonAuthenticationMethodWithContext",
        "fileName": "src/addPersonAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "isEmail from model-types",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "Device from peer-types",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "findAuthenticatedPersonWithHandle",
        "fileName": "src/findAuthenticatedPersonWithHandle.ts",
        "imports": [
          "db from database",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "findLoggedinPersonsWithContext",
        "fileName": "src/findLoggedInPersonsWithContext.ts",
        "imports": [
          "db from database",
          "comparePassword from encrypt-password",
          "FunctionContext from function-context-type",
          "Device from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "getMeWithContext",
        "fileName": "src/getMeWithContext.ts",
        "imports": [
          "Authorization from auth-types",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "getPublicPerson",
        "fileName": "src/getPublicPerson.ts",
        "imports": [
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "getPublicPersons",
        "fileName": "src/getPublicPersons.ts",
        "imports": [
          "db from database",
          "getSubsetFromObject from js-util",
          "publicPersonKeys from peer-types",
          "PublicPerson from peer-types"
        ]
      },
      {
        "name": "isPhoneNumber",
        "fileName": "src/validation/isPhoneNumber.ts",
        "imports": []
      },
      {
        "name": "isValidPassword",
        "fileName": "src/validation/isValidPassword.ts",
        "imports": []
      },
      {
        "name": "loginWithContext",
        "fileName": "src/loginWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "loginWithPasswordWithContext",
        "fileName": "src/loginWithPasswordWithContext.ts",
        "imports": [
          "ApiFunction from function-server-types",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "logoutWithContext",
        "fileName": "src/logoutWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "removeDeviceAuthenticationMethodWithContext",
        "fileName": "src/removeDeviceAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "removePersonAuthenticationMethodWithContext",
        "fileName": "src/removePersonAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "signupWithContext",
        "fileName": "src/signupWithContext.ts",
        "imports": [
          "db from database",
          "upsert from fs-orm",
          "FunctionContext from function-context-type",
          "Creation from model-types",
          "generateId from model-types",
          "englishMethod from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "signupWithPasswordWithContext",
        "fileName": "src/signupWithPasswordWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types",
          "slugify from convert-case",
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "switchCurrentPersonWithContext",
        "fileName": "src/switchCurrentPerson.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "updateMeWithContext",
        "fileName": "src/updateMeWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "PersonProfileDetails from peer-types",
          "processAsset from asset-functions-node"
        ]
      },
      {
        "name": "AuthenticationMethod",
        "fileName": "src/addPersonAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "isEmail from model-types",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "Device from peer-types",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "AuthenticationMethodMethod",
        "fileName": "src/signupWithPasswordWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types",
          "slugify from convert-case",
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "Authorization",
        "fileName": "src/getMeWithContext.ts",
        "imports": [
          "Authorization from auth-types",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/signupWithPasswordWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types",
          "slugify from convert-case",
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "Device",
        "fileName": "src/getMeWithContext.ts",
        "imports": [
          "Authorization from auth-types",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "FunctionContext",
        "fileName": "src/updateMeWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "PersonProfileDetails from peer-types",
          "processAsset from asset-functions-node"
        ]
      },
      {
        "name": "Group",
        "fileName": "src/getMeWithContext.ts",
        "imports": [
          "Authorization from auth-types",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addAuthenticationMethod>",
        "fileName": "src/addAuthenticationMethod.ts",
        "imports": [
          "db from database",
          "isEmail from model-types",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "Device from peer-types",
          "sendSms from sms",
          "sendMail from mail",
          "encryptPassword from encrypt-password"
        ]
      },
      {
        "name": "NamedParameters<typeof addDeviceAuthenticationMethodConfirm>",
        "fileName": "src/confirmAuthenticationMethod.ts",
        "imports": [
          "db from database",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "getRootPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof addDeviceAuthenticationMethodWithContext>",
        "fileName": "src/addDeviceAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "FunctionContext from function-context-type",
          "mergeNestedObject from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof addPersonAuthenticationMethodWithContext>",
        "fileName": "src/addPersonAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "isEmail from model-types",
          "AuthenticationMethod from peer-types",
          "AuthenticationMethodMethod from peer-types",
          "Device from peer-types",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof findAuthenticatedPersonWithHandle>",
        "fileName": "src/findAuthenticatedPersonWithHandle.ts",
        "imports": [
          "db from database",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof findLoggedinPersonsWithContext>",
        "fileName": "src/findLoggedInPersonsWithContext.ts",
        "imports": [
          "db from database",
          "comparePassword from encrypt-password",
          "FunctionContext from function-context-type",
          "Device from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMeWithContext>",
        "fileName": "src/getMeWithContext.ts",
        "imports": [
          "Authorization from auth-types",
          "FunctionContext from function-context-type",
          "ApiFunction from function-server-types",
          "Storing from model-types",
          "Device from peer-types",
          "Group from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicPerson>",
        "fileName": "src/getPublicPerson.ts",
        "imports": [
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicPersons>",
        "fileName": "src/getPublicPersons.ts",
        "imports": [
          "db from database",
          "getSubsetFromObject from js-util",
          "publicPersonKeys from peer-types",
          "PublicPerson from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof isPhoneNumber>",
        "fileName": "src/validation/isPhoneNumber.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isValidPassword>",
        "fileName": "src/validation/isValidPassword.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof loginWithContext>",
        "fileName": "src/loginWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof loginWithPasswordWithContext>",
        "fileName": "src/loginWithPasswordWithContext.ts",
        "imports": [
          "ApiFunction from function-server-types",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof logoutWithContext>",
        "fileName": "src/logoutWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof removeDeviceAuthenticationMethodWithContext>",
        "fileName": "src/removeDeviceAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof removePersonAuthenticationMethodWithContext>",
        "fileName": "src/removePersonAuthenticationMethodWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof signupWithContext>",
        "fileName": "src/signupWithContext.ts",
        "imports": [
          "db from database",
          "upsert from fs-orm",
          "FunctionContext from function-context-type",
          "Creation from model-types",
          "generateId from model-types",
          "englishMethod from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof signupWithPasswordWithContext>",
        "fileName": "src/signupWithPasswordWithContext.ts",
        "imports": [
          "FunctionContext from function-context-type",
          "AuthenticationMethodMethod from peer-types",
          "slugify from convert-case",
          "BackendAsset from asset-type",
          "processAsset from asset-functions-node",
          "ApiFunction from function-server-types"
        ]
      },
      {
        "name": "NamedParameters<typeof switchCurrentPersonWithContext>",
        "fileName": "src/switchCurrentPerson.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type"
        ]
      },
      {
        "name": "NamedParameters<typeof updateMeWithContext>",
        "fileName": "src/updateMeWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "PersonProfileDetails from peer-types",
          "processAsset from asset-functions-node"
        ]
      },
      {
        "name": "Person",
        "fileName": "src/signupWithContext.ts",
        "imports": [
          "db from database",
          "upsert from fs-orm",
          "FunctionContext from function-context-type",
          "Creation from model-types",
          "generateId from model-types",
          "englishMethod from peer-types",
          "Person from peer-types"
        ]
      },
      {
        "name": "PersonProfileDetails",
        "fileName": "src/updateMeWithContext.ts",
        "imports": [
          "db from database",
          "FunctionContext from function-context-type",
          "PersonProfileDetails from peer-types",
          "processAsset from asset-functions-node"
        ]
      },
      {
        "name": "SignupPersonData",
        "fileName": "src/signupWithContext.ts",
        "imports": [
          "db from database",
          "upsert from fs-orm",
          "FunctionContext from function-context-type",
          "Creation from model-types",
          "generateId from model-types",
          "englishMethod from peer-types",
          "Person from peer-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "server-login",
      "database",
      "sdk-db",
      "code-types",
      "pluralize",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "measure-performance",
      "log",
      "model-types",
      "peer-types",
      "geo-types",
      "social-media-types",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "mail",
      "@sendgrid/mail",
      "encrypt-password",
      "bcrypt",
      "function-context-type",
      "server/typings/common",
      "js-util",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "auth-types",
      "function-server-types",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "asset-type",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one"
    ]
  },
  {
    "operationName": "say",
    "totalInstancesCount": 14,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "make-test",
      "fs-util",
      "ffmpeg-util"
    ],
    "packageJsonDependencies": [
      "make-test",
      "fs-util",
      "ffmpeg-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "main",
        "fileName": "src/cli/textToMp3.cli.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "sayDutch",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "sayLanguage",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "sayNepali",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "saySomething",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "textToMp3",
        "fileName": "src/textToMp3.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "convertToMp3 from ffmpeg-util"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/cli/textToMp3.cli.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof sayDutch>",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof sayLanguage>",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof sayNepali>",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof saySomething>",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof textToMp3>",
        "fileName": "src/textToMp3.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "convertToMp3 from ffmpeg-util"
        ]
      },
      {
        "name": "SayLanguageEnum",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "SayOptions",
        "fileName": "src/saySomething.ts",
        "imports": [
          "makeTest from make-test"
        ]
      }
    ],
    "cumulativeDependencies": [
      "say",
      "make-test",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "ffmpeg-util",
      "k-explore",
      "read-json-file",
      "try-parse-json",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "fs-util-js",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "get-path",
      "sdk-operations",
      "write-to-assets",
      "one-by-one"
    ]
  },
  {
    "operationName": "ask",
    "totalInstancesCount": 6,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "askOk",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "ask",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getArgumentOrAsk",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof ask>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof askOk>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getArgumentOrAsk>",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "ask"
    ]
  },
  {
    "operationName": "cli-version-updates",
    "totalInstancesCount": 10,
    "totalImportCount": 5,
    "totalDependencyCount": 4,
    "importDependencies": [
      "fs-util",
      "log",
      "ask",
      "execute-command"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "log",
      "ask",
      "execute-command"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cliVersionUpdates",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "getPackageVersions",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "getUpdateSeverity",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "getVersionParts",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "handleVersionUpdates",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "NamedParameters<typeof cliVersionUpdates>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "NamedParameters<typeof getPackageVersions>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "NamedParameters<typeof getUpdateSeverity>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "NamedParameters<typeof getVersionParts>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      },
      {
        "name": "NamedParameters<typeof handleVersionUpdates>",
        "fileName": "src/general.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "log from log",
          "askOk from ask",
          "executeCommand from execute-command"
        ]
      }
    ],
    "cumulativeDependencies": [
      "cli-version-updates",
      "fs-util",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "log",
      "ask",
      "execute-command"
    ]
  },
  {
    "operationName": "function-util",
    "totalInstancesCount": 25,
    "totalImportCount": 21,
    "totalDependencyCount": 12,
    "importDependencies": [
      "convert-case",
      "log",
      "ask",
      "code-types",
      "search",
      "one-by-one",
      "sdk-api",
      "database",
      "k-explore",
      "fs-util",
      "get-path",
      "js-util"
    ],
    "packageJsonDependencies": [
      "convert-case",
      "log",
      "ask",
      "search",
      "one-by-one",
      "database",
      "k-explore",
      "fs-util",
      "get-path",
      "js-util",
      "code-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "chat",
        "fileName": "src/converse-extra.test.ts",
        "imports": []
      },
      {
        "name": "converse",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "doCli",
        "fileName": "src/cli/do.cli.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getOperationPath from get-path",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "executeSdkFunction",
        "fileName": "src/executeSdkFunction.ts",
        "imports": [
          "log from log",
          "sdk from sdk-api"
        ]
      },
      {
        "name": "getCachedExportedFunctions",
        "fileName": "src/getCachedExportedFunctions.ts",
        "imports": [
          "db from database",
          "TsExport from code-types",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "getMenu",
        "fileName": "src/getMenu.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "mergeObjectsArray from js-util"
        ]
      },
      {
        "name": "getParametersAndExecute",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getParameters",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "getSdkFunctionPaths",
        "fileName": "src/getSdkFunctionPaths.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      },
      {
        "name": "listen",
        "fileName": "src/converse-extra.test.ts",
        "imports": []
      },
      {
        "name": "main",
        "fileName": "src/cli/please.cli.ts",
        "imports": []
      },
      {
        "name": "FnMatch",
        "fileName": "src/getSdkFunctionPaths.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      },
      {
        "name": "FunctionParameter",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof chat>",
        "fileName": "src/converse-extra.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof converse>",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof doCli>",
        "fileName": "src/cli/do.cli.ts",
        "imports": [
          "db from database",
          "path from fs-util",
          "getOperationPath from get-path",
          "getSrcRelativeFileId from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof executeSdkFunction>",
        "fileName": "src/executeSdkFunction.ts",
        "imports": [
          "log from log",
          "sdk from sdk-api"
        ]
      },
      {
        "name": "NamedParameters<typeof getCachedExportedFunctions>",
        "fileName": "src/getCachedExportedFunctions.ts",
        "imports": [
          "db from database",
          "TsExport from code-types",
          "TsFunction from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMenu>",
        "fileName": "src/getMenu.ts",
        "imports": [
          "exploreOperationFolders from k-explore",
          "getLastFolder from fs-util",
          "getPathsWithOperations from get-path",
          "getProjectRoot from get-path",
          "mergeObjectsArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getParameters>",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof getParametersAndExecute>",
        "fileName": "src/converse.ts",
        "imports": [
          "humanCase from convert-case",
          "log from log",
          "ask from ask",
          "FunctionParameter from code-types",
          "findSentenceMatches from search",
          "oneByOne from one-by-one"
        ]
      },
      {
        "name": "NamedParameters<typeof getSdkFunctionPaths>",
        "fileName": "src/getSdkFunctionPaths.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof listen>",
        "fileName": "src/converse-extra.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/cli/please.cli.ts",
        "imports": []
      },
      {
        "name": "TsFunction",
        "fileName": "src/getSdkFunctionPaths.ts",
        "imports": [
          "TsFunction from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-util",
      "convert-case",
      "make-test",
      "log",
      "ask",
      "code-types",
      "model-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "search",
      "one-by-one",
      "sdk-api",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "sdk-operations",
      "k-explore",
      "filename-conventions",
      "write-to-assets",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "get-path",
      "js-util"
    ]
  },
  {
    "operationName": "string-to-json",
    "totalInstancesCount": 9,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "js-util"
    ],
    "packageJsonDependencies": [
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "objectStringToJson",
        "fileName": "src/objectStringToJson.ts",
        "imports": [
          "mergeObjectsArray from js-util"
        ]
      },
      {
        "name": "parseIfJson",
        "fileName": "src/parseIfJson.ts",
        "imports": []
      },
      {
        "name": "parsePrimitiveJson",
        "fileName": "src/stringToJson.ts",
        "imports": []
      },
      {
        "name": "stringToJson",
        "fileName": "src/stringToJson.ts",
        "imports": []
      },
      {
        "name": "JSONValue",
        "fileName": "src/types.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof objectStringToJson>",
        "fileName": "src/objectStringToJson.ts",
        "imports": [
          "mergeObjectsArray from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof parseIfJson>",
        "fileName": "src/parseIfJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof parsePrimitiveJson>",
        "fileName": "src/stringToJson.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof stringToJson>",
        "fileName": "src/stringToJson.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "string-to-json",
      "js-util"
    ]
  },
  {
    "operationName": "big-button",
    "totalInstancesCount": 1,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react-with-native",
      "fancy-loader",
      "react"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "fancy-loader",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BigButton",
        "fileName": "src/BigButton.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Svg from react-with-native",
          "FancyLoader from fancy-loader",
          "useState from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "big-button",
      "react-with-native",
      "fancy-loader",
      "react"
    ]
  },
  {
    "operationName": "breadcrumbs",
    "totalInstancesCount": 4,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native"
    ],
    "packageJsonDependencies": [
      "react-with-native"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BreadCrumbs",
        "fileName": "src/BreadCrumbs.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderBreadCrumbs",
        "fileName": "src/BreadCrumbs.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof BreadCrumbs>",
        "fileName": "src/BreadCrumbs.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof renderBreadCrumbs>",
        "fileName": "src/BreadCrumbs.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "breadcrumbs",
      "react-with-native"
    ]
  },
  {
    "operationName": "clickable-icon",
    "totalInstancesCount": 1,
    "totalImportCount": 3,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native"
    ],
    "packageJsonDependencies": [
      "react-with-native"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ClickableIcon",
        "fileName": "src/ClickableIcon.tsx",
        "imports": [
          "Button from react-with-native",
          "P from react-with-native",
          "Svg from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "clickable-icon",
      "react-with-native"
    ]
  },
  {
    "operationName": "context-menu",
    "totalInstancesCount": 4,
    "totalImportCount": 13,
    "totalDependencyCount": 4,
    "importDependencies": [
      "react",
      "react-with-native",
      "fancy-loader",
      "react-popper"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "react",
      "react-popper",
      "fancy-loader"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ContextMenuItemComponent",
        "fileName": "src/ContextMenuItemComponent.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "FancyLoader from fancy-loader"
        ]
      },
      {
        "name": "useContextMenu",
        "fileName": "src/useContextMenu.tsx",
        "imports": [
          "Div from react-with-native",
          "useMemo from react"
        ]
      },
      {
        "name": "useContextPopper",
        "fileName": "src/useContextPopper.tsx",
        "imports": [
          "usePopper from react-popper",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react"
        ]
      },
      {
        "name": "useContext",
        "fileName": "src/useContext.ts",
        "imports": [
          "useState from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "context-menu",
      "react",
      "react-with-native",
      "fancy-loader",
      "react-popper"
    ]
  },
  {
    "operationName": "cool-toast",
    "totalInstancesCount": 11,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "react-with-native-notification",
      "api-types"
    ],
    "packageJsonDependencies": [
      "react-with-native-notification",
      "api-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "errorToast",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "infoToast",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "showStandardResponse",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "successToast",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "warningToast",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof errorToast>",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof infoToast>",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof showStandardResponse>",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof successToast>",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof warningToast>",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      },
      {
        "name": "StandardizedApiReturnType",
        "fileName": "src/cool-toast.ts",
        "imports": [
          "toast from react-with-native-notification",
          "StandardizedApiReturnType from api-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "api-types",
      "sdk-api",
      "react-query"
    ]
  },
  {
    "operationName": "fancy-loader",
    "totalInstancesCount": 2,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native"
    ],
    "packageJsonDependencies": [
      "react-with-native"
    ],
    "instancesAndTheirImports": [
      {
        "name": "FancyLoader",
        "fileName": "src/FancyLoader.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof FancyLoader>",
        "fileName": "src/FancyLoader.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "fancy-loader",
      "react-with-native"
    ]
  },
  {
    "operationName": "file-icons",
    "totalInstancesCount": 3,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getFileType",
        "fileName": "src/getFileType.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getFileType>",
        "fileName": "src/getFileType.ts",
        "imports": []
      },
      {
        "name": "TypeIconEnum",
        "fileName": "src/typeIcons.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "file-icons"
    ]
  },
  {
    "operationName": "hotkeys",
    "totalInstancesCount": 10,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react"
    ],
    "packageJsonDependencies": [
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "isAltB",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isAltN",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isAltO",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isAltW",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isCtrlBacktick",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isCtrlP",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isCtrlS",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "isCtrlSpace",
        "fileName": "src/util.ts",
        "imports": []
      },
      {
        "name": "useHotkey",
        "fileName": "src/useHotkey.ts",
        "imports": []
      },
      {
        "name": "useHotkeys",
        "fileName": "src/useHotkeys.ts",
        "imports": [
          "useEffect from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "hotkeys",
      "react"
    ]
  },
  {
    "operationName": "labeled-button",
    "totalInstancesCount": 1,
    "totalImportCount": 4,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native"
    ],
    "packageJsonDependencies": [
      "react-with-native"
    ],
    "instancesAndTheirImports": [
      {
        "name": "LabeledButton",
        "fileName": "src/LabeledButton.tsx",
        "imports": [
          "Button from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Svg from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "labeled-button",
      "react-with-native"
    ]
  },
  {
    "operationName": "next-paths",
    "totalInstancesCount": 6,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-with-native-router"
    ],
    "packageJsonDependencies": [
      "react-with-native-router"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getFullPath",
        "fileName": "src/getFullPath.ts",
        "imports": []
      },
      {
        "name": "getLastPathsChunk",
        "fileName": "src/getLastPathsChunk.ts",
        "imports": []
      },
      {
        "name": "usePath",
        "fileName": "src/usePath.ts",
        "imports": [
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof getFullPath>",
        "fileName": "src/getFullPath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getLastPathsChunk>",
        "fileName": "src/getLastPathsChunk.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof usePath>",
        "fileName": "src/usePath.ts",
        "imports": [
          "useRouter from react-with-native-router"
        ]
      }
    ],
    "cumulativeDependencies": [
      "next-paths",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ]
  },
  {
    "operationName": "react-with-native-store",
    "totalInstancesCount": 13,
    "totalImportCount": 2,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react"
    ],
    "packageJsonDependencies": [
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "contextKey",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "createStoreProvider",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "createStore",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "createUseStore",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "getContext",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "getItemSync",
        "fileName": "src/storage.ts",
        "imports": []
      },
      {
        "name": "getItem",
        "fileName": "src/storage.ts",
        "imports": []
      },
      {
        "name": "getKey",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "setItem",
        "fileName": "src/storage.ts",
        "imports": []
      },
      {
        "name": "StoreContextProvider",
        "fileName": "src/general.tsx",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "NamedParameters<typeof getItem>",
        "fileName": "src/storage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getItemSync>",
        "fileName": "src/storage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof setItem>",
        "fileName": "src/storage.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-store",
      "react"
    ]
  },
  {
    "operationName": "swipe-homepage",
    "totalInstancesCount": 3,
    "totalImportCount": 4,
    "totalDependencyCount": 4,
    "importDependencies": [
      "react-with-native",
      "next-a-link",
      "markdown",
      "fs-util-js"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "next-a-link",
      "markdown",
      "fs-util-js"
    ],
    "instancesAndTheirImports": [
      {
        "name": "SwipeHomepage",
        "fileName": "src/SwipeHomepage.tsx",
        "imports": [
          "Div from react-with-native",
          "ALink from next-a-link",
          "renderMarkdownContent from markdown",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof SwipeHomepage>",
        "fileName": "src/SwipeHomepage.tsx",
        "imports": [
          "Div from react-with-native",
          "ALink from next-a-link",
          "renderMarkdownContent from markdown",
          "getFolderJs from fs-util-js"
        ]
      },
      {
        "name": "SwipeItem",
        "fileName": "src/SwipeHomepage.tsx",
        "imports": [
          "Div from react-with-native",
          "ALink from next-a-link",
          "renderMarkdownContent from markdown",
          "getFolderJs from fs-util-js"
        ]
      }
    ],
    "cumulativeDependencies": [
      "swipe-homepage",
      "react-with-native",
      "next-a-link",
      "next/link",
      "markdown",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "port-conventions",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "convert-case",
      "make-test",
      "pluralize",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "react",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "js-util",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "fs-util-js"
    ]
  },
  {
    "operationName": "tabs",
    "totalInstancesCount": 1,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react-with-native-store",
      "react-with-native",
      "labeled-button"
    ],
    "packageJsonDependencies": [
      "react-with-native-store",
      "react-with-native",
      "labeled-button"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Tabs",
        "fileName": "src/Tabs.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "LabeledButton from labeled-button",
          "LabeledButtonType from labeled-button"
        ]
      }
    ],
    "cumulativeDependencies": [
      "tabs",
      "react-with-native-store",
      "react",
      "react-with-native",
      "labeled-button"
    ]
  },
  {
    "operationName": "tooltip",
    "totalInstancesCount": 1,
    "totalImportCount": 4,
    "totalDependencyCount": 2,
    "importDependencies": [
      "react",
      "@popperjs/core"
    ],
    "packageJsonDependencies": [
      "@popperjs/core",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Tooltip",
        "fileName": "src/Tooltip.tsx",
        "imports": [
          "useState from react",
          "createRef from react",
          "createPopper from @popperjs/core",
          "Placement from @popperjs/core"
        ]
      }
    ],
    "cumulativeDependencies": [
      "tooltip",
      "react",
      "@popperjs/core"
    ]
  },
  {
    "operationName": "tree1",
    "totalInstancesCount": 3,
    "totalImportCount": 4,
    "totalDependencyCount": 2,
    "importDependencies": [
      "react",
      "react-d3-tree/lib/types/types/common"
    ],
    "packageJsonDependencies": [
      "react-d3-tree"
    ],
    "instancesAndTheirImports": [
      {
        "name": "renderForeignObjectNode",
        "fileName": "src/Tree.tsx",
        "imports": [
          "CustomNodeElementProps from react-d3-tree/lib/types/types/common",
          "RawNodeDatum from react-d3-tree/lib/types/types/common"
        ]
      },
      {
        "name": "Tree",
        "fileName": "src/Tree.tsx",
        "imports": [
          "CustomNodeElementProps from react-d3-tree/lib/types/types/common",
          "RawNodeDatum from react-d3-tree/lib/types/types/common"
        ]
      },
      {
        "name": "useCenteredTree",
        "fileName": "src/helpers.ts",
        "imports": [
          "useCallback from react",
          "useState from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "tree1",
      "react",
      "react-d3-tree/lib/types/types/common"
    ]
  },
  {
    "operationName": "ui-util",
    "totalInstancesCount": 2,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "createCodeblockMarkdown",
        "fileName": "src/createCodeblockMarkdown.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof createCodeblockMarkdown>",
        "fileName": "src/createCodeblockMarkdown.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "ui-util"
    ]
  },
  {
    "operationName": "use-on-screen",
    "totalInstancesCount": 1,
    "totalImportCount": 3,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react"
    ],
    "packageJsonDependencies": [
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "useOnScreen",
        "fileName": "src/useOnScreen.ts",
        "imports": [
          "useState from react",
          "useEffect from react",
          "RefObject from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "use-on-screen",
      "react"
    ]
  },
  {
    "operationName": "use-url-store",
    "totalInstancesCount": 3,
    "totalImportCount": 4,
    "totalDependencyCount": 4,
    "importDependencies": [
      "js-util",
      "react-with-native-router",
      "string-to-json",
      "rest-util"
    ],
    "packageJsonDependencies": [
      "js-util",
      "react-with-native-router",
      "string-to-json",
      "rest-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "useCustomUrlStore",
        "fileName": "src/use-url-store.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router",
          "parsePrimitiveJson from string-to-json",
          "getQueryPart from rest-util"
        ]
      },
      {
        "name": "CustomUrlStoreConfig",
        "fileName": "src/use-url-store.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router",
          "parsePrimitiveJson from string-to-json",
          "getQueryPart from rest-util"
        ]
      },
      {
        "name": "NamedParameters<typeof useCustomUrlStore>",
        "fileName": "src/use-url-store.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router",
          "parsePrimitiveJson from string-to-json",
          "getQueryPart from rest-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "use-url-store",
      "js-util",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "string-to-json",
      "rest-util"
    ]
  },
  {
    "operationName": "next-a-link",
    "totalInstancesCount": 1,
    "totalImportCount": 6,
    "totalDependencyCount": 2,
    "importDependencies": [
      "react-with-native",
      "next/link"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "next"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ALink",
        "fileName": "src/ALink.tsx",
        "imports": [
          "LinkProps from next/link",
          "A from react-with-native",
          "AType from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "next-a-link",
      "react-with-native",
      "next/link"
    ]
  },
  {
    "operationName": "react-with-native",
    "totalInstancesCount": 37,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [
      "@types/react-native",
      "react",
      "react-native",
      "next"
    ],
    "instancesAndTheirImports": [
      {
        "name": "A",
        "fileName": "src/html/A/A.tsx",
        "imports": []
      },
      {
        "name": "ActivityIndicator",
        "fileName": "src/react-native/ActivityIndicator/ActivityIndicator.tsx",
        "imports": []
      },
      {
        "name": "Aside",
        "fileName": "src/html/Aside/Aside.native.tsx",
        "imports": []
      },
      {
        "name": "Button",
        "fileName": "src/html/Button/Button.tsx",
        "imports": []
      },
      {
        "name": "Form",
        "fileName": "src/html/Form/Form.tsx",
        "imports": []
      },
      {
        "name": "getTailwindModules",
        "fileName": "src/util/getTailwindModules.ts",
        "imports": []
      },
      {
        "name": "H2",
        "fileName": "src/html/H2/H2.tsx",
        "imports": []
      },
      {
        "name": "I",
        "fileName": "src/html/I/I.tsx",
        "imports": []
      },
      {
        "name": "Image",
        "fileName": "src/html/Img/Img.tsx",
        "imports": []
      },
      {
        "name": "Input",
        "fileName": "src/html/Input/Input.tsx",
        "imports": []
      },
      {
        "name": "joinClassNames",
        "fileName": "src/util/util.tsx",
        "imports": []
      },
      {
        "name": "Label",
        "fileName": "src/html/Label/Label.tsx",
        "imports": []
      },
      {
        "name": "Li",
        "fileName": "src/html/Li/Li.tsx",
        "imports": []
      },
      {
        "name": "Nav",
        "fileName": "src/html/Nav/Nav.native.tsx",
        "imports": []
      },
      {
        "name": "Ol",
        "fileName": "src/html/Ol/Ol.tsx",
        "imports": []
      },
      {
        "name": "P",
        "fileName": "src/html/P/P.tsx",
        "imports": []
      },
      {
        "name": "Pressable",
        "fileName": "src/react-native/Pressable/Pressable.tsx",
        "imports": []
      },
      {
        "name": "PureAside",
        "fileName": "src/html/Aside/Aside.tsx",
        "imports": []
      },
      {
        "name": "PureDiv",
        "fileName": "src/html/Div/Div.tsx",
        "imports": []
      },
      {
        "name": "PureNav",
        "fileName": "src/html/Nav/Nav.tsx",
        "imports": []
      },
      {
        "name": "Select",
        "fileName": "src/html/Select/Select.tsx",
        "imports": []
      },
      {
        "name": "Span",
        "fileName": "src/html/Span/Span.tsx",
        "imports": []
      },
      {
        "name": "Strong",
        "fileName": "src/html/Strong/Strong.tsx",
        "imports": []
      },
      {
        "name": "Svg",
        "fileName": "src/html/Svg/Svg.tsx",
        "imports": []
      },
      {
        "name": "TextArea",
        "fileName": "src/html/TextArea/TextArea.tsx",
        "imports": []
      },
      {
        "name": "Text",
        "fileName": "src/react-native/Text/Text.tsx",
        "imports": []
      },
      {
        "name": "Toggle",
        "fileName": "src/components/Toggle/Toggle.tsx",
        "imports": []
      },
      {
        "name": "TouchableOpacity",
        "fileName": "src/react-native/TouchableOpacity/TouchableOpacity.tsx",
        "imports": []
      },
      {
        "name": "trimClassName",
        "fileName": "src/util/trimClassName.ts",
        "imports": []
      },
      {
        "name": "Ul",
        "fileName": "src/html/Ul/Ul.tsx",
        "imports": []
      },
      {
        "name": "wrapInTextIfNeeded",
        "fileName": "src/util/util.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getTailwindModules>",
        "fileName": "src/util/getTailwindModules.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof joinClassNames>",
        "fileName": "src/util/util.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof Svg>",
        "fileName": "src/html/Svg/Svg.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof trimClassName>",
        "fileName": "src/util/trimClassName.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof wrapInTextIfNeeded>",
        "fileName": "src/util/util.tsx",
        "imports": []
      },
      {
        "name": "SvgType",
        "fileName": "src/html/Svg/Svg.type.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "react-with-native"
    ]
  },
  {
    "operationName": "react-with-native-alert",
    "totalInstancesCount": 4,
    "totalImportCount": 16,
    "totalDependencyCount": 4,
    "importDependencies": [
      "react-native",
      "react",
      "@headlessui/react",
      "react-with-native"
    ],
    "packageJsonDependencies": [
      "@types/react-native",
      "react-with-native",
      "@headlessui/react",
      "react-native",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AlertProvider",
        "fileName": "src/AlertProvider.tsx",
        "imports": [
          "useState from react",
          "Dialog from @headlessui/react",
          "Transition from @headlessui/react",
          "Fragment from react",
          "Div from react-with-native",
          "P from react-with-native",
          "AlertButton from react-native",
          "AlertOptions from react-native"
        ]
      },
      {
        "name": "useAlert",
        "fileName": "src/Alert.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof AlertProvider>",
        "fileName": "src/AlertProvider.tsx",
        "imports": [
          "useState from react",
          "Dialog from @headlessui/react",
          "Transition from @headlessui/react",
          "Fragment from react",
          "Div from react-with-native",
          "P from react-with-native",
          "AlertButton from react-native",
          "AlertOptions from react-native"
        ]
      },
      {
        "name": "NamedParameters<typeof useAlert>",
        "fileName": "src/Alert.tsx",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-alert",
      "react-native",
      "react",
      "@headlessui/react",
      "react-with-native"
    ]
  },
  {
    "operationName": "react-with-native-form",
    "totalInstancesCount": 11,
    "totalImportCount": 14,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react",
      "react-with-native",
      "react-with-native-ui"
    ],
    "packageJsonDependencies": [
      "fast-deep-equal",
      "react-with-native-ui",
      "react-with-native",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "DataForm",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "DefaultInputContainer",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "DefaultTitle",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "errorOnField",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "getPlugin",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "Input",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "isObject",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "makeInputField",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "notEmpty",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "sameFieldArray",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      },
      {
        "name": "setConfig",
        "fileName": "src/general.tsx",
        "imports": [
          "useState from react",
          "RefObject from react",
          "createRef from react",
          "useEffect from react",
          "ActivityIndicator from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "Strong from react-with-native",
          "Form from react-with-native",
          "P from react-with-native",
          "H2 from react-with-native",
          "Button from react-with-native",
          "inputClass from react-with-native-ui",
          "bareInputClass from react-with-native-ui"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-form",
      "react",
      "react-with-native",
      "react-with-native-ui"
    ]
  },
  {
    "operationName": "react-with-native-form-asset-input",
    "totalInstancesCount": 3,
    "totalImportCount": 5,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react-with-native-form",
      "asset-input",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "react-with-native-form",
      "asset-input",
      "asset-type"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AssetInput",
        "fileName": "src/AssetInput.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "AssetInput from asset-input"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/AssetInputType.tsx",
        "imports": [
          "PluginInputType from react-with-native-form",
          "BackendAsset from asset-type",
          "NewAssetType from asset-type"
        ]
      },
      {
        "name": "NewAssetType",
        "fileName": "src/AssetInputType.tsx",
        "imports": [
          "PluginInputType from react-with-native-form",
          "BackendAsset from asset-type",
          "NewAssetType from asset-type"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-form-asset-input",
      "react-with-native-form",
      "react",
      "react-with-native",
      "react-with-native-ui",
      "asset-input",
      "react-with-native-store",
      "clickable-icon",
      "api",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "js-util",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "marked",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "asset-functions-js",
      "model-types",
      "api-types",
      "sdk-api",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type"
    ]
  },
  {
    "operationName": "react-with-native-form-inputs",
    "totalInstancesCount": 21,
    "totalImportCount": 82,
    "totalDependencyCount": 8,
    "importDependencies": [
      "react-with-native",
      "react-with-native-form",
      "react-with-native-ui",
      "react-native",
      "react",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select"
    ],
    "packageJsonDependencies": [
      "react-with-native-ui",
      "react-with-native",
      "react-with-native-select",
      "react-dropzone",
      "react-with-native-form",
      "react-map-gl",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "castToNumber",
        "fileName": "src/number/number.tsx",
        "imports": [
          "useState from react",
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "DateInput",
        "fileName": "src/date/DateInput.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "DatetimeInput",
        "fileName": "src/datetime/Datetime.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "useState from react",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "FileInput",
        "fileName": "src/file/FileInput.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "PluginInputType from react-with-native-form",
          "useEffect from react",
          "FileWithPath from react-dropzone",
          "useDropzone from react-dropzone",
          "Li from react-with-native",
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Input from react-with-native",
          "Aside from react-with-native",
          "Ul from react-with-native"
        ]
      },
      {
        "name": "isNumber",
        "fileName": "src/number/number.tsx",
        "imports": [
          "useState from react",
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "LabelsInput",
        "fileName": "src/labels/labels.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "PluginInputType from react-with-native-form",
          "UI from react-with-native-ui",
          "Button from react-with-native",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "useState from react"
        ]
      },
      {
        "name": "MapInput",
        "fileName": "src/map/MapInput.tsx",
        "imports": [
          "Marker from react-map-gl",
          "MapRef from react-map-gl",
          "useState from react",
          "useRef from react",
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "NumberInput",
        "fileName": "src/number/number.tsx",
        "imports": [
          "useState from react",
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "PasswordInput",
        "fileName": "src/password/password.tsx",
        "imports": [
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "PhoneInput",
        "fileName": "src/phone/phone.tsx",
        "imports": [
          "PluginComponent from react-with-native-form"
        ]
      },
      {
        "name": "SelectInput",
        "fileName": "src/select/select.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "PluginInputType from react-with-native-form",
          "Select from react-with-native-select",
          "Item from react-with-native-select",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "SelectMultipleInput",
        "fileName": "src/selectMultiple/selectMultiple.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "PluginInputType from react-with-native-form",
          "UI from react-with-native-ui",
          "Select from react-with-native-select",
          "Item from react-with-native-select",
          "Button from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "StarsInput",
        "fileName": "src/stars/StarsInput.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "PluginInputType from react-with-native-form"
        ]
      },
      {
        "name": "TextAreaInput",
        "fileName": "src/textarea/textArea.tsx",
        "imports": [
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form",
          "TextArea from react-with-native",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "TextInput",
        "fileName": "src/text/text.tsx",
        "imports": [
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form",
          "UI from react-with-native-ui",
          "Input from react-with-native"
        ]
      },
      {
        "name": "TimeInput",
        "fileName": "src/time/TimeInput.tsx",
        "imports": [
          "PluginComponent from react-with-native-form",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "ToggleInput",
        "fileName": "src/toggle/toggle.tsx",
        "imports": [
          "PluginInputType from react-with-native-form",
          "PluginComponent from react-with-native-form",
          "Toggle from react-with-native",
          "Label from react-with-native",
          "Div from react-with-native"
        ]
      },
      {
        "name": "MapLocation",
        "fileName": "src/map/types.ts",
        "imports": [
          "PluginInputType from react-with-native-form"
        ]
      },
      {
        "name": "PluginInputType",
        "fileName": "src/map/types.ts",
        "imports": [
          "PluginInputType from react-with-native-form"
        ]
      },
      {
        "name": "Suggestion",
        "fileName": "src/map/types.ts",
        "imports": [
          "PluginInputType from react-with-native-form"
        ]
      },
      {
        "name": "ViewPort",
        "fileName": "src/map/types.ts",
        "imports": [
          "PluginInputType from react-with-native-form"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-form-inputs",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-ui",
      "react-native",
      "react",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select"
    ]
  },
  {
    "operationName": "react-with-native-modal",
    "totalInstancesCount": 8,
    "totalImportCount": 12,
    "totalDependencyCount": 3,
    "importDependencies": [
      "react",
      "react-with-native",
      "react-native"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ModalProvider",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "Modal",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "useModalState",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "useModal",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof Modal>",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof ModalProvider>",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof useModal>",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof useModalState>",
        "fileName": "src/Modal.tsx",
        "imports": [
          "useState from react",
          "useContext from react",
          "Div from react-with-native",
          "Button from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-modal",
      "react",
      "react-with-native",
      "react-native"
    ]
  },
  {
    "operationName": "react-with-native-notification",
    "totalInstancesCount": 2,
    "totalImportCount": 4,
    "totalDependencyCount": 1,
    "importDependencies": [
      "react-toastify"
    ],
    "packageJsonDependencies": [
      "react",
      "@types/react-toastify",
      "react-toastify"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ToastContainer",
        "fileName": "src/Notification.native.tsx",
        "imports": [
          "ToastOptions from react-toastify"
        ]
      },
      {
        "name": "toast",
        "fileName": "src/Notification.tsx",
        "imports": [
          "toast from react-toastify",
          "ToastOptions from react-toastify",
          "ToastContainer from react-toastify"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-notification",
      "react-toastify"
    ]
  },
  {
    "operationName": "react-with-native-router",
    "totalInstancesCount": 4,
    "totalImportCount": 9,
    "totalDependencyCount": 5,
    "importDependencies": [
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ],
    "packageJsonDependencies": [
      "next"
    ],
    "instancesAndTheirImports": [
      {
        "name": "useNavigation",
        "fileName": "src/useNavigation.ts",
        "imports": [
          "useRouter from next/router"
        ]
      },
      {
        "name": "useRouter",
        "fileName": "src/useRouter.native.ts",
        "imports": [
          "useNavigation from @react-navigation/native",
          "NextURL from next/dist/server/web/next-url",
          "MittEmitter from next/dist/shared/lib/mitt",
          "PrefetchOptions from next/dist/shared/lib/router/router",
          "NextRouter from next/router",
          "RouterEvent from next/router"
        ]
      },
      {
        "name": "NamedParameters<typeof useNavigation>",
        "fileName": "src/useNavigation.ts",
        "imports": [
          "useRouter from next/router"
        ]
      },
      {
        "name": "NamedParameters<typeof useRouter>",
        "fileName": "src/useRouter.native.ts",
        "imports": [
          "useNavigation from @react-navigation/native",
          "NextURL from next/dist/server/web/next-url",
          "MittEmitter from next/dist/shared/lib/mitt",
          "PrefetchOptions from next/dist/shared/lib/router/router",
          "NextRouter from next/router",
          "RouterEvent from next/router"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ]
  },
  {
    "operationName": "react-with-native-select",
    "totalInstancesCount": 6,
    "totalImportCount": 20,
    "totalDependencyCount": 4,
    "importDependencies": [
      "react-with-native",
      "react-native",
      "react",
      "react-with-native-ui"
    ],
    "packageJsonDependencies": [
      "react",
      "react-native",
      "react-with-native-ui",
      "react-with-native"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getRealValue",
        "fileName": "src/util.tsx",
        "imports": []
      },
      {
        "name": "SelectMultipleInput",
        "fileName": "src/SelectMultiple.tsx",
        "imports": [
          "UI from react-with-native-ui",
          "Button from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "Select",
        "fileName": "src/Select.tsx",
        "imports": [
          "ChangeEvent from react",
          "ChangeEventHandler from react",
          "useState from react"
        ]
      },
      {
        "name": "useSelectMultiple",
        "fileName": "src/useSelectMultiple.tsx",
        "imports": [
          "useState from react"
        ]
      },
      {
        "name": "useSelect",
        "fileName": "src/useSelect.tsx",
        "imports": [
          "useState from react"
        ]
      },
      {
        "name": "ID",
        "fileName": "src/types.ts",
        "imports": [
          "MouseEvent from react",
          "ActionSheetIOSOptions from react-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-select",
      "react-with-native",
      "react-native",
      "react",
      "react-with-native-ui"
    ]
  },
  {
    "operationName": "react-with-native-table",
    "totalInstancesCount": 7,
    "totalImportCount": 13,
    "totalDependencyCount": 9,
    "importDependencies": [
      "react-with-native",
      "code-types",
      "convert-case",
      "js-util",
      "schema-util",
      "asset-view",
      "react",
      "model-types",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "react",
      "react-with-native",
      "convert-case",
      "js-util",
      "schema-util",
      "code-types",
      "asset-view",
      "model-types",
      "asset-type"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getColumns",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "renderColumn",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Skeleton",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "TableHeadItem",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "TableRow",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Table",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "useIsInViewport",
        "fileName": "src/Table.tsx",
        "imports": [
          "Div from react-with-native",
          "TsInterface from code-types",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "ModelItemAssetView from asset-view",
          "useEffect from react",
          "useMemo from react",
          "useRef from react",
          "useState from react",
          "AugmentedAnyModelType from model-types",
          "BackendAsset from asset-type"
        ]
      }
    ],
    "cumulativeDependencies": [
      "react-with-native-table",
      "react-with-native",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "convert-case",
      "make-test",
      "js-util",
      "schema-util",
      "name-conventions",
      "log",
      "asset-view",
      "asset-functions-js",
      "fs-util-js",
      "api",
      "api-types",
      "sdk-api",
      "react-with-native-store",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "clickable-icon",
      "text-or-binary",
      "react",
      "model-types",
      "asset-type"
    ]
  },
  {
    "operationName": "react-with-native-ui",
    "totalInstancesCount": 0,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "react-with-native-ui"
    ]
  },
  {
    "operationName": "file-tabs",
    "totalInstancesCount": 5,
    "totalImportCount": 24,
    "totalDependencyCount": 12,
    "importDependencies": [
      "react-with-native",
      "model-types",
      "react",
      "js-util",
      "react-with-native-alert",
      "react-with-native-router",
      "hotkeys",
      "file-icons",
      "next-a-link",
      "next-paths",
      "rest-util",
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "react-contextmenu",
      "react-with-native",
      "model-types",
      "js-util",
      "react-with-native-alert",
      "react-with-native-router",
      "hotkeys",
      "file-icons",
      "next-a-link",
      "next-paths",
      "rest-util",
      "react-with-native-store",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "FileTabs",
        "fileName": "src/FileTabs.tsx",
        "imports": [
          "P from react-with-native",
          "generateId from model-types",
          "useState from react",
          "notEmpty from js-util",
          "Div from react-with-native",
          "useAlert from react-with-native-alert",
          "useRouter from react-with-native-router",
          "useHotkey from hotkeys",
          "useHotkeys from hotkeys",
          "isAltN from hotkeys",
          "isAltO from hotkeys",
          "isAltW from hotkeys",
          "typeIcons from file-icons",
          "getFileType from file-icons",
          "ALink from next-a-link",
          "getFullPath from next-paths",
          "getLastPathsChunk from next-paths",
          "usePath from next-paths"
        ]
      },
      {
        "name": "getActivePage",
        "fileName": "src/getActivePage.ts",
        "imports": []
      },
      {
        "name": "getOpenPageUrl",
        "fileName": "src/getOpenPageUrl.ts",
        "imports": [
          "getFullPath from next-paths",
          "toQueryString from rest-util"
        ]
      },
      {
        "name": "renderIcon",
        "fileName": "src/renderIcon.tsx",
        "imports": [
          "Button from react-with-native",
          "Svg from react-with-native"
        ]
      },
      {
        "name": "FileTabsStoreType",
        "fileName": "src/store.ts",
        "imports": [
          "createUseStore from react-with-native-store"
        ]
      }
    ],
    "cumulativeDependencies": [
      "file-tabs",
      "react-with-native",
      "model-types",
      "matter-types",
      "react",
      "js-util",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "hotkeys",
      "file-icons",
      "next-a-link",
      "next/link",
      "next-paths",
      "rest-util",
      "react-with-native-store"
    ]
  },
  {
    "operationName": "markdown",
    "totalInstancesCount": 35,
    "totalImportCount": 42,
    "totalDependencyCount": 17,
    "importDependencies": [
      "fs-util-js",
      "server-api-url",
      "asset-functions-js",
      "react-markdown",
      "markdown-parse-js",
      "react-with-native",
      "ui-util",
      "react",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "tooltip",
      "matter-types",
      "markdown-types",
      "augmented-word-types",
      "js-util",
      "ai-types"
    ],
    "packageJsonDependencies": [
      "@popperjs/core",
      "asset-functions-js",
      "augmented-word-types",
      "clickable-icon",
      "code-types",
      "fs-util-js",
      "js-util",
      "markdown-parse-js",
      "matter-types",
      "react",
      "react-markdown",
      "react-with-native",
      "rehype-raw",
      "rehype-highlight",
      "remark-gfm",
      "server-api-url",
      "tooltip",
      "ui-util",
      "asset-view",
      "asset-type",
      "markdown-types",
      "prompt-components",
      "share",
      "ai-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getRealSrc",
        "fileName": "src/util/getRealSrc.ts",
        "imports": [
          "isPathRelative from fs-util-js"
        ]
      },
      {
        "name": "getUrlFromRelativeUrl",
        "fileName": "src/getUrlFromRelativeUrl.ts",
        "imports": [
          "path from fs-util-js",
          "apiUrl from server-api-url",
          "getReferencedAssetApiUrl from asset-functions-js"
        ]
      },
      {
        "name": "getYoutubeId",
        "fileName": "src/getYoutubeId.ts",
        "imports": []
      },
      {
        "name": "HtmlHeader",
        "fileName": "src/HtmlHeader.tsx",
        "imports": [
          "Components from react-markdown",
          "getImplicitId from markdown-parse-js",
          "Div from react-with-native"
        ]
      },
      {
        "name": "MarkdownCodeblock",
        "fileName": "src/MarkdownCodeblock.tsx",
        "imports": [
          "createCodeblockMarkdown from ui-util",
          "Div from react-with-native",
          "useState from react",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "MarkdownContentRender",
        "fileName": "src/MarkdownContentRender.tsx",
        "imports": [
          "AssetView from asset-view",
          "Asset from asset-type",
          "isPathRelative from fs-util-js",
          "Div from react-with-native",
          "P from react-with-native",
          "Tooltip from tooltip"
        ]
      },
      {
        "name": "MarkdownContent",
        "fileName": "src/MarkdownContent.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "Parameter",
        "fileName": "src/Parameter.tsx",
        "imports": [
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderFrontmatter",
        "fileName": "src/renderFrontMatter.tsx",
        "imports": [
          "Frontmatter from matter-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "renderMarkdownChunk",
        "fileName": "src/renderMarkdownChunk.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "renderMarkdownContent",
        "fileName": "src/renderMarkdownContent.tsx",
        "imports": [
          "AssetView from asset-view",
          "AugmentedWord from augmented-word-types",
          "Asset from asset-type",
          "getFolderJs from fs-util-js",
          "isPathRelative from fs-util-js",
          "Div from react-with-native",
          "P from react-with-native",
          "Tooltip from tooltip",
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "renderMarkdownParse",
        "fileName": "src/renderMarkdownParse.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "renderMarkdownTitle",
        "fileName": "src/renderMarkdownTitle.tsx",
        "imports": [
          "getImplicitId from markdown-parse-js",
          "P from react-with-native"
        ]
      },
      {
        "name": "useOpenHashDetails",
        "fileName": "src/useOpenHashDetails.ts",
        "imports": []
      },
      {
        "name": "AugmentedWord",
        "fileName": "src/types.ts",
        "imports": [
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "CodeblockMode",
        "fileName": "src/MarkdownCodeblock.tsx",
        "imports": [
          "createCodeblockMarkdown from ui-util",
          "Div from react-with-native",
          "useState from react",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "ContextualPrompt",
        "fileName": "src/types.ts",
        "imports": [
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "ContextualPromptResult",
        "fileName": "src/types.ts",
        "imports": [
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "Frontmatter",
        "fileName": "src/renderFrontMatter.tsx",
        "imports": [
          "Frontmatter from matter-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "MarkdownChunk",
        "fileName": "src/renderMarkdownChunk.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "MarkdownParse",
        "fileName": "src/renderMarkdownParse.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "MarkdownParseRenderConfig",
        "fileName": "src/types.ts",
        "imports": [
          "MappedObject from js-util",
          "AugmentedWord from augmented-word-types",
          "ContextualPrompt from ai-types",
          "ContextualPromptResult from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getRealSrc>",
        "fileName": "src/util/getRealSrc.ts",
        "imports": [
          "isPathRelative from fs-util-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getUrlFromRelativeUrl>",
        "fileName": "src/getUrlFromRelativeUrl.ts",
        "imports": [
          "path from fs-util-js",
          "apiUrl from server-api-url",
          "getReferencedAssetApiUrl from asset-functions-js"
        ]
      },
      {
        "name": "NamedParameters<typeof getYoutubeId>",
        "fileName": "src/getYoutubeId.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof MarkdownCodeblock>",
        "fileName": "src/MarkdownCodeblock.tsx",
        "imports": [
          "createCodeblockMarkdown from ui-util",
          "Div from react-with-native",
          "useState from react",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "NamedParameters<typeof MarkdownContent>",
        "fileName": "src/MarkdownContent.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof MarkdownContentRender>",
        "fileName": "src/MarkdownContentRender.tsx",
        "imports": [
          "AssetView from asset-view",
          "Asset from asset-type",
          "isPathRelative from fs-util-js",
          "Div from react-with-native",
          "P from react-with-native",
          "Tooltip from tooltip"
        ]
      },
      {
        "name": "NamedParameters<typeof Parameter>",
        "fileName": "src/Parameter.tsx",
        "imports": [
          "Span from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof renderFrontmatter>",
        "fileName": "src/renderFrontMatter.tsx",
        "imports": [
          "Frontmatter from matter-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof renderMarkdownChunk>",
        "fileName": "src/renderMarkdownChunk.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownChunk from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof renderMarkdownContent>",
        "fileName": "src/renderMarkdownContent.tsx",
        "imports": [
          "AssetView from asset-view",
          "AugmentedWord from augmented-word-types",
          "Asset from asset-type",
          "getFolderJs from fs-util-js",
          "isPathRelative from fs-util-js",
          "Div from react-with-native",
          "P from react-with-native",
          "Tooltip from tooltip",
          "makeArray from js-util",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof renderMarkdownParse>",
        "fileName": "src/renderMarkdownParse.tsx",
        "imports": [
          "Div from react-with-native",
          "MarkdownParse from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof renderMarkdownTitle>",
        "fileName": "src/renderMarkdownTitle.tsx",
        "imports": [
          "getImplicitId from markdown-parse-js",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof useOpenHashDetails>",
        "fileName": "src/useOpenHashDetails.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "markdown",
      "fs-util-js",
      "server-api-url",
      "sdk-env-public",
      "react-with-native-store",
      "port-conventions",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "convert-case",
      "make-test",
      "pluralize",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "react-with-native",
      "ui-util",
      "react",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "js-util",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types"
    ]
  },
  {
    "operationName": "nested-menu",
    "totalInstancesCount": 7,
    "totalImportCount": 19,
    "totalDependencyCount": 9,
    "importDependencies": [
      "react",
      "react-with-native",
      "js-util",
      "react-with-native-router",
      "webpage-types",
      "nested-menu-types",
      "next-a-link",
      "fs-util-js",
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "react",
      "react-with-native",
      "next-a-link",
      "js-util",
      "clickable-icon",
      "react-with-native-store",
      "react-with-native-router",
      "webpage-types",
      "fs-util-js",
      "recursive-types",
      "nested-menu-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getRealItemRecursive",
        "fileName": "src/NestedMenuItem.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "useRouter from react-with-native-router",
          "MenuItemType from nested-menu-types",
          "MouseEventCallbacks from nested-menu-types",
          "ALink from next-a-link",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getFileOrFolderName from fs-util-js"
        ]
      },
      {
        "name": "getTitle",
        "fileName": "src/NestedMenuItem.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "useRouter from react-with-native-router",
          "MenuItemType from nested-menu-types",
          "MouseEventCallbacks from nested-menu-types",
          "ALink from next-a-link",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getFileOrFolderName from fs-util-js"
        ]
      },
      {
        "name": "NestedMenuItem",
        "fileName": "src/NestedMenuItem.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "useRouter from react-with-native-router",
          "MenuItemType from nested-menu-types",
          "MouseEventCallbacks from nested-menu-types",
          "ALink from next-a-link",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "getFileOrFolderName from fs-util-js"
        ]
      },
      {
        "name": "NestedMenu",
        "fileName": "src/NestedMenu.tsx",
        "imports": [
          "useEffect from react",
          "Div from react-with-native",
          "trimSlashes from js-util",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "useRouter from react-with-native-router",
          "NestedWebPage from webpage-types",
          "MenuItemType from nested-menu-types",
          "MouseEventCallbacks from nested-menu-types"
        ]
      },
      {
        "name": "useExpanded",
        "fileName": "src/useExpanded.ts",
        "imports": []
      },
      {
        "name": "ExpandedObject",
        "fileName": "src/store.ts",
        "imports": [
          "createStore from react-with-native-store"
        ]
      },
      {
        "name": "NamedParameters<typeof useExpanded>",
        "fileName": "src/useExpanded.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "nested-menu",
      "react",
      "react-with-native",
      "js-util",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "nested-menu-types",
      "next-a-link",
      "next/link",
      "fs-util-js",
      "react-with-native-store"
    ]
  },
  {
    "operationName": "nested-menu-types",
    "totalInstancesCount": 0,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "react",
      "webpage-types"
    ],
    "packageJsonDependencies": [
      "webpage-types",
      "react"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "nested-menu-types",
      "react",
      "webpage-types",
      "convert-case",
      "make-test",
      "js-util",
      "recursive-types"
    ]
  },
  {
    "operationName": "recursive-util",
    "totalInstancesCount": 13,
    "totalImportCount": 14,
    "totalDependencyCount": 3,
    "importDependencies": [
      "recursive-types",
      "webpage-types",
      "nested-menu-types"
    ],
    "packageJsonDependencies": [
      "recursive-types",
      "webpage-types",
      "nested-menu-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getKeysAtPathFromNestedObject",
        "fileName": "src/getKeysAtPathFromNestedObject.ts",
        "imports": []
      },
      {
        "name": "getMenuPagesObject",
        "fileName": "src/getMenuPagesObject.ts",
        "imports": [
          "NestedObject from recursive-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "MenuObjectType from webpage-types"
        ]
      },
      {
        "name": "makeNestedObjectFromQueryPathObject",
        "fileName": "src/makeNestedObjectFromQueryPathObject.ts",
        "imports": [
          "NestedObject from recursive-types"
        ]
      },
      {
        "name": "mapChildObjectRecursive",
        "fileName": "src/mapChildObjectRecursive.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "nestedObjectToChildObject",
        "fileName": "src/nestedObjectToChildObject.ts",
        "imports": [
          "ChildObject from recursive-types",
          "NestedObject from recursive-types"
        ]
      },
      {
        "name": "nestedPathObjectToNestedMenuRecursive",
        "fileName": "src/nestedPathObjectToNestedMenu.ts",
        "imports": [
          "MenuItemType from nested-menu-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "nestifyQueryPathObjectRecursive",
        "fileName": "src/nestifyQueryPathObjectRecursive.ts",
        "imports": [
          "ChildObject from recursive-types"
        ]
      },
      {
        "name": "queryPathsArrayToNestedPathObject",
        "fileName": "src/queryPathsArrayToNestedPathObject.ts",
        "imports": [
          "NestedObject from recursive-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "reduceQueryPathsRecursively",
        "fileName": "src/reduceQueryPathsRecursively.ts",
        "imports": [
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMenuPagesObject>",
        "fileName": "src/getMenuPagesObject.ts",
        "imports": [
          "NestedObject from recursive-types",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "MenuObjectType from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof queryPathsArrayToNestedPathObject>",
        "fileName": "src/queryPathsArrayToNestedPathObject.ts",
        "imports": [
          "NestedObject from recursive-types",
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NamedParameters<typeof reduceQueryPathsRecursively>",
        "fileName": "src/reduceQueryPathsRecursively.ts",
        "imports": [
          "NestedPathObject from recursive-types"
        ]
      },
      {
        "name": "NestedPathObject",
        "fileName": "src/reduceQueryPathsRecursively.ts",
        "imports": [
          "NestedPathObject from recursive-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "recursive-util",
      "recursive-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "js-util",
      "nested-menu-types",
      "react"
    ]
  },
  {
    "operationName": "apps-menu",
    "totalInstancesCount": 2,
    "totalImportCount": 9,
    "totalDependencyCount": 7,
    "importDependencies": [
      "react",
      "react-with-native",
      "api",
      "tooltip",
      "markdown",
      "react-with-native-alert",
      "fancy-loader"
    ],
    "packageJsonDependencies": [
      "@popperjs/core",
      "api",
      "react-with-native",
      "tooltip",
      "markdown",
      "react-query",
      "react-with-native-alert",
      "fancy-loader",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AppsMenu",
        "fileName": "src/AppsMenu.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "queries from api",
          "api from api",
          "Tooltip from tooltip",
          "renderMarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "FancyLoader from fancy-loader"
        ]
      },
      {
        "name": "NamedParameters<typeof AppsMenu>",
        "fileName": "src/AppsMenu.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "queries from api",
          "api from api",
          "Tooltip from tooltip",
          "renderMarkdownContent from markdown",
          "useAlert from react-with-native-alert",
          "FancyLoader from fancy-loader"
        ]
      }
    ],
    "cumulativeDependencies": [
      "apps-menu",
      "react",
      "react-with-native",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "tooltip",
      "@popperjs/core",
      "markdown",
      "fs-util-js",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "ui-util",
      "clickable-icon",
      "asset-view",
      "asset-type",
      "matter-types",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "fancy-loader"
    ]
  },
  {
    "operationName": "authentication",
    "totalInstancesCount": 23,
    "totalImportCount": 68,
    "totalDependencyCount": 22,
    "importDependencies": [
      "react-with-native",
      "function-form",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "api",
      "cool-toast",
      "next-a-link",
      "big-button",
      "model-types",
      "react",
      "js-util",
      "peer-types",
      "react-with-native-alert",
      "react-with-native-notification",
      "asset-view",
      "react-with-native-router",
      "fancy-loader",
      "react-with-native-store",
      "api-store",
      "simplified-schema-form",
      "code-types"
    ],
    "packageJsonDependencies": [
      "asset-type",
      "server-api-url",
      "function-form",
      "react-with-native-notification",
      "react-with-native",
      "api-types",
      "model-types",
      "api",
      "js-util",
      "peer-types",
      "react-with-native-alert",
      "react-with-native-store",
      "api-store",
      "next",
      "react",
      "next-a-link",
      "react-with-native-router",
      "fancy-loader",
      "asset-functions-js",
      "cool-toast",
      "asset-view",
      "simplified-schema-form",
      "code-types",
      "react-with-native-ui",
      "big-button"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AuthenticationMethodsCrud",
        "fileName": "src/AuthenticationMethodsCrud.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "LoginForm",
        "fileName": "src/LoginForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "useRouter from next/router",
          "UI from react-with-native-ui",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "queries from api",
          "showStandardResponse from cool-toast",
          "successToast from cool-toast",
          "ALink from next-a-link",
          "BigButton from big-button"
        ]
      },
      {
        "name": "LoginWrapper",
        "fileName": "src/LoginWrapper.tsx",
        "imports": [
          "generateId from model-types",
          "useEffect from react"
        ]
      },
      {
        "name": "MeAuthenticationInfo",
        "fileName": "src/MeAuthenticationInfo.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "destructureOptionalObject from js-util",
          "Person from peer-types",
          "useAlert from react-with-native-alert",
          "useRouter from next/router",
          "toast from react-with-native-notification",
          "successToast from cool-toast",
          "itemGetBackendAssetUrl from asset-view"
        ]
      },
      {
        "name": "PersonProfileDetailsForm",
        "fileName": "src/UpdateMeForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "P from react-with-native",
          "PersonProfileDetails from peer-types",
          "api from api",
          "queries from api",
          "showStandardResponse from cool-toast",
          "FormContainer from simplified-schema-form",
          "useTsInterfaceForm from simplified-schema-form",
          "Storing from model-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "PictureWithInfoDropdown",
        "fileName": "src/PictureWithInfoDropdown.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Image from react-with-native",
          "useRouter from react-with-native-router",
          "useState from react",
          "FancyLoader from fancy-loader"
        ]
      },
      {
        "name": "PublicPersonComponent",
        "fileName": "src/PublicPersonComponent.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "queries from api",
          "takeFirst from js-util",
          "FancyLoader from fancy-loader",
          "Person from peer-types",
          "PublicPerson from peer-types",
          "ModelItemAssetView from asset-view"
        ]
      },
      {
        "name": "PublicProfile",
        "fileName": "src/PublicProfile.tsx",
        "imports": [
          "queries from api",
          "FancyLoader from fancy-loader",
          "takeFirst from js-util",
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "SignupForm",
        "fileName": "src/SignupForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "useRouter from next/router",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "queries from api",
          "api from api",
          "showStandardResponse from cool-toast",
          "successToast from cool-toast"
        ]
      },
      {
        "name": "UpdateMeForm",
        "fileName": "src/UpdateMeForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "P from react-with-native",
          "PersonProfileDetails from peer-types",
          "api from api",
          "queries from api",
          "showStandardResponse from cool-toast",
          "FormContainer from simplified-schema-form",
          "useTsInterfaceForm from simplified-schema-form",
          "Storing from model-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "Device",
        "fileName": "src/PersonInfo.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "NamedParameters<typeof AuthenticationMethodsCrud>",
        "fileName": "src/AuthenticationMethodsCrud.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof LoginForm>",
        "fileName": "src/LoginForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "useRouter from next/router",
          "UI from react-with-native-ui",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "queries from api",
          "showStandardResponse from cool-toast",
          "successToast from cool-toast",
          "ALink from next-a-link",
          "BigButton from big-button"
        ]
      },
      {
        "name": "NamedParameters<typeof LoginWrapper>",
        "fileName": "src/LoginWrapper.tsx",
        "imports": [
          "generateId from model-types",
          "useEffect from react"
        ]
      },
      {
        "name": "NamedParameters<typeof MeAuthenticationInfo>",
        "fileName": "src/MeAuthenticationInfo.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "destructureOptionalObject from js-util",
          "Person from peer-types",
          "useAlert from react-with-native-alert",
          "useRouter from next/router",
          "toast from react-with-native-notification",
          "successToast from cool-toast",
          "itemGetBackendAssetUrl from asset-view"
        ]
      },
      {
        "name": "NamedParameters<typeof PersonProfileDetailsForm>",
        "fileName": "src/UpdateMeForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "P from react-with-native",
          "PersonProfileDetails from peer-types",
          "api from api",
          "queries from api",
          "showStandardResponse from cool-toast",
          "FormContainer from simplified-schema-form",
          "useTsInterfaceForm from simplified-schema-form",
          "Storing from model-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof PublicPersonComponent>",
        "fileName": "src/PublicPersonComponent.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "queries from api",
          "takeFirst from js-util",
          "FancyLoader from fancy-loader",
          "Person from peer-types",
          "PublicPerson from peer-types",
          "ModelItemAssetView from asset-view"
        ]
      },
      {
        "name": "NamedParameters<typeof PublicProfile>",
        "fileName": "src/PublicProfile.tsx",
        "imports": [
          "queries from api",
          "FancyLoader from fancy-loader",
          "takeFirst from js-util",
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof SignupForm>",
        "fileName": "src/SignupForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "useRouter from next/router",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "queries from api",
          "api from api",
          "showStandardResponse from cool-toast",
          "successToast from cool-toast"
        ]
      },
      {
        "name": "NamedParameters<typeof UpdateMeForm>",
        "fileName": "src/UpdateMeForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "P from react-with-native",
          "PersonProfileDetails from peer-types",
          "api from api",
          "queries from api",
          "showStandardResponse from cool-toast",
          "FormContainer from simplified-schema-form",
          "useTsInterfaceForm from simplified-schema-form",
          "Storing from model-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "PersonInfo",
        "fileName": "src/PersonInfo.ts",
        "imports": [
          "Device from peer-types"
        ]
      },
      {
        "name": "PersonProfileDetails",
        "fileName": "src/UpdateMeForm.tsx",
        "imports": [
          "FunctionForm from function-form",
          "Div from react-with-native",
          "P from react-with-native",
          "PersonProfileDetails from peer-types",
          "api from api",
          "queries from api",
          "showStandardResponse from cool-toast",
          "FormContainer from simplified-schema-form",
          "useTsInterfaceForm from simplified-schema-form",
          "Storing from model-types",
          "TsInterface from code-types"
        ]
      },
      {
        "name": "PublicPerson",
        "fileName": "src/PublicPersonComponent.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "queries from api",
          "takeFirst from js-util",
          "FancyLoader from fancy-loader",
          "Person from peer-types",
          "PublicPerson from peer-types",
          "ModelItemAssetView from asset-view"
        ]
      }
    ],
    "cumulativeDependencies": [
      "authentication",
      "react-with-native",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "react-query",
      "api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "sdk-api-keys",
      "rest-util",
      "cool-toast",
      "next-a-link",
      "next/link",
      "big-button",
      "model-types",
      "react",
      "js-util",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "clickable-icon",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "fancy-loader",
      "react-with-native-store",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "share",
      "react-with-native-modal",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator"
    ]
  },
  {
    "operationName": "db-crud",
    "totalInstancesCount": 39,
    "totalImportCount": 129,
    "totalDependencyCount": 29,
    "importDependencies": [
      "js-util",
      "model-types",
      "react-with-native",
      "react-with-native-router",
      "labeled-button",
      "rest-util",
      "react",
      "code-types",
      "ui-util",
      "markdown",
      "react-with-native-store",
      "simplified-schema-form",
      "clickable-icon",
      "sdk-db",
      "react-with-native-alert",
      "api",
      "convert-case",
      "fancy-loader",
      "schema-util",
      "use-url-store",
      "next-a-link",
      "asset-view",
      "name-conventions",
      "react-with-native-table",
      "cool-toast",
      "fs-util-js",
      "sdk-env-public",
      "react-with-native-select",
      "react-query"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "labeled-button",
      "react-with-native-router",
      "react-with-native-table",
      "js-util",
      "convert-case",
      "schema-util",
      "react-with-native-alert",
      "fancy-loader",
      "api",
      "name-conventions",
      "code-types",
      "ui-util",
      "markdown",
      "simplified-schema-form",
      "model-types",
      "clickable-icon",
      "use-url-store",
      "react",
      "react-query",
      "fs-util-js",
      "rest-util",
      "react-with-native-store",
      "next-a-link",
      "asset-view",
      "cool-toast",
      "react-with-native-select"
    ],
    "instancesAndTheirImports": [
      {
        "name": "CrudGrid",
        "fileName": "src/crud/CrudGrid.tsx",
        "imports": [
          "itemGetBackendAssetUrl from asset-view",
          "Div from react-with-native"
        ]
      },
      {
        "name": "CrudTable",
        "fileName": "src/crud/CrudTable.tsx",
        "imports": [
          "api from api",
          "humanCase from convert-case",
          "notEmpty from js-util",
          "LabeledButton from labeled-button",
          "getAssetInputType from name-conventions",
          "Div from react-with-native",
          "useAlert from react-with-native-alert",
          "ColumnType from react-with-native-table",
          "Table from react-with-native-table",
          "getProperties from schema-util",
          "getReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "CrudTimeline",
        "fileName": "src/crud/CrudTimeline.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "CrudTree",
        "fileName": "src/crud/CrudTree.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "DatasetForm",
        "fileName": "src/crud/DatasetForm.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "ClickableIcon from clickable-icon",
          "Dataset from code-types",
          "TsInterface from code-types",
          "successToast from cool-toast",
          "destructureOptionalObject from js-util",
          "Creation from model-types",
          "Storing from model-types",
          "Div from react-with-native",
          "P from react-with-native",
          "getProperties from schema-util",
          "DbModelEnum from sdk-db",
          "useTsInterfaceForm from simplified-schema-form"
        ]
      },
      {
        "name": "DbPage",
        "fileName": "src/DbPage.tsx",
        "imports": [
          "makeArray from js-util",
          "AugmentedAnyModelType from model-types",
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "getPropertiesDataParameterNames",
        "fileName": "src/crud/getPropertiesDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "SchemaProperty from schema-util"
        ]
      },
      {
        "name": "IndexInstanceContainer",
        "fileName": "src/IndexInstanceContainer.tsx",
        "imports": [
          "LabeledButton from labeled-button",
          "LabeledButtonType from labeled-button",
          "Button from react-with-native",
          "Div from react-with-native",
          "P from react-with-native",
          "Svg from react-with-native"
        ]
      },
      {
        "name": "ModelComponent",
        "fileName": "src/crud/ModelComponent.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "Dataset from code-types",
          "DatasetSort from code-types",
          "modelViews from code-types",
          "FancyLoader from fancy-loader",
          "successToast from cool-toast",
          "getFolderJs from fs-util-js",
          "destructureOptionalObject from js-util",
          "notEmpty from js-util",
          "LabeledButton from labeled-button",
          "MarkdownContent from markdown",
          "renderMarkdownContent from markdown",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "useEffect from react",
          "useState from react",
          "publicEnvironmentVariables from sdk-env-public",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "useRouter from react-with-native-router",
          "Item from react-with-native-select",
          "useSelect from react-with-native-select",
          "useSelectMultiple from react-with-native-select",
          "getProperties from schema-util",
          "DbModelEnum from sdk-db",
          "DbModels from sdk-db",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "openWhatsapp",
        "fileName": "src/openWhatsapp.tsx",
        "imports": [
          "toQueryString from rest-util"
        ]
      },
      {
        "name": "SearchBar",
        "fileName": "src/crud/SearchBar.tsx",
        "imports": [
          "Div from react-with-native",
          "Form from react-with-native",
          "Input from react-with-native",
          "useState from react",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "shimmer",
        "fileName": "src/card/shimmer.ts",
        "imports": []
      },
      {
        "name": "SimplifiedSchemaFormDebug",
        "fileName": "src/SimplifiedSchemaFormDebug.tsx",
        "imports": [
          "useState from react",
          "FunctionParameter from code-types",
          "Div from react-with-native",
          "P from react-with-native",
          "createCodeblockMarkdown from ui-util",
          "MarkdownContent from markdown"
        ]
      },
      {
        "name": "sortToItem",
        "fileName": "src/crud/sortToItem.ts",
        "imports": [
          "DatasetSort from code-types",
          "humanCase from convert-case",
          "Item from react-with-native-select"
        ]
      },
      {
        "name": "SpaceCard",
        "fileName": "src/card/SpaceCard.tsx",
        "imports": [
          "useState from react",
          "ALink from next-a-link"
        ]
      },
      {
        "name": "toBase64",
        "fileName": "src/card/toBase64.ts",
        "imports": []
      },
      {
        "name": "UpsertForm",
        "fileName": "src/UpsertForm.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "FormContainer from simplified-schema-form",
          "RenderableFunctionParameter from simplified-schema-form",
          "useReferencableModelData from simplified-schema-form",
          "useRouter from react-with-native-router",
          "SimplifiedSchema from code-types",
          "generateId from model-types",
          "ClickableIcon from clickable-icon",
          "DbModelEnum from sdk-db",
          "useAlert from react-with-native-alert",
          "api from api",
          "queries from api",
          "humanCase from convert-case",
          "LabeledButtonType from labeled-button"
        ]
      },
      {
        "name": "UpsertPage",
        "fileName": "src/UpsertPage.tsx",
        "imports": [
          "queries from api",
          "FancyLoader from fancy-loader",
          "destructureOptionalObject from js-util",
          "mapValuesSync from js-util",
          "notEmpty from js-util",
          "takeFirst from js-util",
          "AugmentedAnyModelType from model-types",
          "Div from react-with-native",
          "useRouter from react-with-native-router",
          "getReferencableModels from schema-util",
          "DbModelEnum from sdk-db"
        ]
      },
      {
        "name": "useInfiniteGetDbModel",
        "fileName": "src/crud/useInfiniteGetDbModel.ts",
        "imports": [
          "api from api",
          "useInfiniteQuery from react-query"
        ]
      },
      {
        "name": "useModelFromUrl",
        "fileName": "src/useModelFromUrl.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "useUrl",
        "fileName": "src/useUrl.ts",
        "imports": [
          "useCustomUrlStore from use-url-store"
        ]
      },
      {
        "name": "DatasetSort",
        "fileName": "src/crud/sortToItem.ts",
        "imports": [
          "DatasetSort from code-types",
          "humanCase from convert-case",
          "Item from react-with-native-select"
        ]
      },
      {
        "name": "DbCrudStore",
        "fileName": "src/store.ts",
        "imports": [
          "Dataset from code-types",
          "DatasetConfig from code-types",
          "Storing from model-types",
          "createStore from react-with-native-store"
        ]
      },
      {
        "name": "FunctionParameter",
        "fileName": "src/SimplifiedSchemaFormDebug.tsx",
        "imports": [
          "useState from react",
          "FunctionParameter from code-types",
          "Div from react-with-native",
          "P from react-with-native",
          "createCodeblockMarkdown from ui-util",
          "MarkdownContent from markdown"
        ]
      },
      {
        "name": "NamedParameters<typeof DatasetForm>",
        "fileName": "src/crud/DatasetForm.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "ClickableIcon from clickable-icon",
          "Dataset from code-types",
          "TsInterface from code-types",
          "successToast from cool-toast",
          "destructureOptionalObject from js-util",
          "Creation from model-types",
          "Storing from model-types",
          "Div from react-with-native",
          "P from react-with-native",
          "getProperties from schema-util",
          "DbModelEnum from sdk-db",
          "useTsInterfaceForm from simplified-schema-form"
        ]
      },
      {
        "name": "NamedParameters<typeof getPropertiesDataParameterNames>",
        "fileName": "src/crud/getPropertiesDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "SchemaProperty from schema-util"
        ]
      },
      {
        "name": "NamedParameters<typeof ModelComponent>",
        "fileName": "src/crud/ModelComponent.tsx",
        "imports": [
          "api from api",
          "queries from api",
          "Dataset from code-types",
          "DatasetSort from code-types",
          "modelViews from code-types",
          "FancyLoader from fancy-loader",
          "successToast from cool-toast",
          "getFolderJs from fs-util-js",
          "destructureOptionalObject from js-util",
          "notEmpty from js-util",
          "LabeledButton from labeled-button",
          "MarkdownContent from markdown",
          "renderMarkdownContent from markdown",
          "AugmentedAnyModelType from model-types",
          "Creation from model-types",
          "useEffect from react",
          "useState from react",
          "publicEnvironmentVariables from sdk-env-public",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "useRouter from react-with-native-router",
          "Item from react-with-native-select",
          "useSelect from react-with-native-select",
          "useSelectMultiple from react-with-native-select",
          "getProperties from schema-util",
          "DbModelEnum from sdk-db",
          "DbModels from sdk-db",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "NamedParameters<typeof openWhatsapp>",
        "fileName": "src/openWhatsapp.tsx",
        "imports": [
          "toQueryString from rest-util"
        ]
      },
      {
        "name": "NamedParameters<typeof SearchBar>",
        "fileName": "src/crud/SearchBar.tsx",
        "imports": [
          "Div from react-with-native",
          "Form from react-with-native",
          "Input from react-with-native",
          "useState from react",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof shimmer>",
        "fileName": "src/card/shimmer.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof SimplifiedSchemaFormDebug>",
        "fileName": "src/SimplifiedSchemaFormDebug.tsx",
        "imports": [
          "useState from react",
          "FunctionParameter from code-types",
          "Div from react-with-native",
          "P from react-with-native",
          "createCodeblockMarkdown from ui-util",
          "MarkdownContent from markdown"
        ]
      },
      {
        "name": "NamedParameters<typeof sortToItem>",
        "fileName": "src/crud/sortToItem.ts",
        "imports": [
          "DatasetSort from code-types",
          "humanCase from convert-case",
          "Item from react-with-native-select"
        ]
      },
      {
        "name": "NamedParameters<typeof toBase64>",
        "fileName": "src/card/toBase64.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof UpsertForm>",
        "fileName": "src/UpsertForm.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "FormContainer from simplified-schema-form",
          "RenderableFunctionParameter from simplified-schema-form",
          "useReferencableModelData from simplified-schema-form",
          "useRouter from react-with-native-router",
          "SimplifiedSchema from code-types",
          "generateId from model-types",
          "ClickableIcon from clickable-icon",
          "DbModelEnum from sdk-db",
          "useAlert from react-with-native-alert",
          "api from api",
          "queries from api",
          "humanCase from convert-case",
          "LabeledButtonType from labeled-button"
        ]
      },
      {
        "name": "NamedParameters<typeof UpsertPage>",
        "fileName": "src/UpsertPage.tsx",
        "imports": [
          "queries from api",
          "FancyLoader from fancy-loader",
          "destructureOptionalObject from js-util",
          "mapValuesSync from js-util",
          "notEmpty from js-util",
          "takeFirst from js-util",
          "AugmentedAnyModelType from model-types",
          "Div from react-with-native",
          "useRouter from react-with-native-router",
          "getReferencableModels from schema-util",
          "DbModelEnum from sdk-db"
        ]
      },
      {
        "name": "NamedParameters<typeof useInfiniteGetDbModel>",
        "fileName": "src/crud/useInfiniteGetDbModel.ts",
        "imports": [
          "api from api",
          "useInfiniteQuery from react-query"
        ]
      },
      {
        "name": "NamedParameters<typeof useModelFromUrl>",
        "fileName": "src/useModelFromUrl.ts",
        "imports": [
          "makeArray from js-util",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "SchemaProperty",
        "fileName": "src/crud/getPropertiesDataParameterNames.ts",
        "imports": [
          "notEmpty from js-util",
          "getReferenceParameterInfo from schema-util",
          "SchemaProperty from schema-util"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/UpsertForm.tsx",
        "imports": [
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "FormContainer from simplified-schema-form",
          "RenderableFunctionParameter from simplified-schema-form",
          "useReferencableModelData from simplified-schema-form",
          "useRouter from react-with-native-router",
          "SimplifiedSchema from code-types",
          "generateId from model-types",
          "ClickableIcon from clickable-icon",
          "DbModelEnum from sdk-db",
          "useAlert from react-with-native-alert",
          "api from api",
          "queries from api",
          "humanCase from convert-case",
          "LabeledButtonType from labeled-button"
        ]
      }
    ],
    "cumulativeDependencies": [
      "db-crud",
      "js-util",
      "model-types",
      "matter-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "labeled-button",
      "rest-util",
      "react",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "ui-util",
      "markdown",
      "server-api-url",
      "port-conventions",
      "asset-functions-js",
      "text-or-binary",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "make-test",
      "asset-type",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "bundle-types",
      "augmented-word-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "react-with-native-store",
      "simplified-schema-form",
      "big-button",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "share",
      "react-with-native-modal",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "api-types",
      "sdk-api",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "clickable-icon",
      "sdk-db",
      "react-with-native-alert",
      "@headlessui/react",
      "api",
      "sdk-api-keys",
      "convert-case",
      "fancy-loader",
      "schema-util",
      "use-url-store",
      "string-to-json",
      "next-a-link",
      "next/link",
      "asset-view",
      "name-conventions",
      "react-with-native-table",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "fs-util-js",
      "sdk-env-public",
      "react-with-native-select",
      "react-query"
    ]
  },
  {
    "operationName": "file-writer",
    "totalInstancesCount": 5,
    "totalImportCount": 8,
    "totalDependencyCount": 6,
    "importDependencies": [
      "file-tabs",
      "react-with-native-store",
      "writer-input",
      "react-with-native",
      "breadcrumbs",
      "next-paths"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "api",
      "writer-input",
      "react-with-native-notification",
      "next-paths",
      "hotkeys",
      "file-tabs",
      "react-with-native-store",
      "js-util",
      "augmented-word-types",
      "breadcrumbs",
      "writer-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "OpenFileWriterPages",
        "fileName": "src/OpenFileWriterPages.tsx",
        "imports": [
          "FileTabs from file-tabs",
          "PagesObjectShape from file-tabs"
        ]
      },
      {
        "name": "useFileWriter",
        "fileName": "src/useFileWriter.tsx",
        "imports": []
      },
      {
        "name": "WriterLayout",
        "fileName": "src/WriterLayout.tsx",
        "imports": [
          "Div from react-with-native",
          "BreadCrumbs from breadcrumbs",
          "usePath from next-paths"
        ]
      },
      {
        "name": "NamedParameters<typeof OpenFileWriterPages>",
        "fileName": "src/OpenFileWriterPages.tsx",
        "imports": [
          "FileTabs from file-tabs",
          "PagesObjectShape from file-tabs"
        ]
      },
      {
        "name": "PagesObjectShape",
        "fileName": "src/OpenFileWriterPages.tsx",
        "imports": [
          "FileTabs from file-tabs",
          "PagesObjectShape from file-tabs"
        ]
      }
    ],
    "cumulativeDependencies": [
      "file-writer",
      "file-tabs",
      "model-types",
      "matter-types",
      "react",
      "js-util",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "hotkeys",
      "file-icons",
      "next-a-link",
      "next/link",
      "rest-util",
      "react-with-native-store",
      "writer-input",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "convert-case",
      "make-test",
      "react-query",
      "clickable-icon",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "react-with-native-select",
      "react-with-native-ui",
      "sdk-db",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "asset-type",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "log",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-form-asset-input",
      "asset-input",
      "asset-view",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "key-value-markdown-js",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "try-parse-json",
      "react-with-native",
      "breadcrumbs",
      "next-paths"
    ]
  },
  {
    "operationName": "function-form",
    "totalInstancesCount": 1,
    "totalImportCount": 13,
    "totalDependencyCount": 8,
    "importDependencies": [
      "api",
      "react-with-native",
      "simplified-schema-form",
      "react",
      "api-types",
      "code-types",
      "cool-toast",
      "database"
    ],
    "packageJsonDependencies": [
      "api",
      "react-with-native",
      "simplified-schema-form",
      "api-types",
      "code-types",
      "react",
      "cool-toast",
      "database"
    ],
    "instancesAndTheirImports": [
      {
        "name": "FunctionForm",
        "fileName": "src/FunctionForm.tsx",
        "imports": [
          "api from api",
          "Div from react-with-native",
          "P from react-with-native",
          "SimplifiedSchemaForm from simplified-schema-form",
          "FormContainer from simplified-schema-form",
          "ReferencableItem from simplified-schema-form",
          "ReferencableModelData from simplified-schema-form",
          "useState from react",
          "RealApiReturnType from api-types",
          "WithoutPromise from api-types",
          "TsFunction from code-types",
          "showStandardResponse from cool-toast",
          "db from database"
        ]
      }
    ],
    "cumulativeDependencies": [
      "function-form",
      "api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "react-with-native",
      "simplified-schema-form",
      "clickable-icon",
      "big-button",
      "model-types",
      "matter-types",
      "schema-util",
      "json-schema",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "writer-input",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "asset-functions-js",
      "text-or-binary",
      "asset-type",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "react-with-native-alert",
      "@headlessui/react",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "react",
      "api-types",
      "sdk-api",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations"
    ]
  },
  {
    "operationName": "layout",
    "totalInstancesCount": 7,
    "totalImportCount": 32,
    "totalDependencyCount": 12,
    "importDependencies": [
      "authentication",
      "api",
      "menu",
      "react-with-native",
      "react-with-native-router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "share",
      "react",
      "react-with-native-store",
      "nested-menu"
    ],
    "packageJsonDependencies": [
      "react-with-native",
      "menu",
      "next-a-link",
      "bundle-types",
      "authentication",
      "react-with-native-router",
      "augmented-word-types",
      "api",
      "clickable-icon",
      "nested-menu",
      "react-with-native-store",
      "share",
      "react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AuthenticationLayout",
        "fileName": "src/AuthenticationLayout.tsx",
        "imports": [
          "LoginForm from authentication",
          "LoginWrapper from authentication",
          "SignupForm from authentication",
          "UpdateMeForm from authentication",
          "PublicProfile from authentication",
          "AuthenticationMethodsCrud from authentication",
          "queries from api",
          "MenuProps from menu",
          "Div from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "Header",
        "fileName": "src/Header.tsx",
        "imports": [
          "MeAuthenticationInfo from authentication",
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "Share from share",
          "useEffect from react",
          "useState from react",
          "API_NO_RESPONSE_TIME_KEY from api",
          "getItem from react-with-native-store"
        ]
      },
      {
        "name": "LayoutGrid",
        "fileName": "src/LayoutGrid.tsx",
        "imports": [
          "Menu from menu",
          "MenuProps from menu",
          "Div from react-with-native"
        ]
      },
      {
        "name": "PingApi",
        "fileName": "src/PingApi.tsx",
        "imports": [
          "API_NO_RESPONSE_TIME_KEY from api",
          "ALink from next-a-link",
          "useEffect from react",
          "useState from react",
          "Div from react-with-native",
          "getItem from react-with-native-store"
        ]
      },
      {
        "name": "NamedParameters<typeof Header>",
        "fileName": "src/Header.tsx",
        "imports": [
          "MeAuthenticationInfo from authentication",
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "Share from share",
          "useEffect from react",
          "useState from react",
          "API_NO_RESPONSE_TIME_KEY from api",
          "getItem from react-with-native-store"
        ]
      },
      {
        "name": "NamedParameters<typeof PingApi>",
        "fileName": "src/PingApi.tsx",
        "imports": [
          "API_NO_RESPONSE_TIME_KEY from api",
          "ALink from next-a-link",
          "useEffect from react",
          "useState from react",
          "Div from react-with-native",
          "getItem from react-with-native-store"
        ]
      },
      {
        "name": "PublicBundleConfig",
        "fileName": "src/Header.tsx",
        "imports": [
          "MeAuthenticationInfo from authentication",
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "Share from share",
          "useEffect from react",
          "useState from react",
          "API_NO_RESPONSE_TIME_KEY from api",
          "getItem from react-with-native-store"
        ]
      }
    ],
    "cumulativeDependencies": [
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "measure-performance",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "react-query",
      "cool-toast",
      "big-button",
      "model-types",
      "js-util",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "augmented-word-types",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "code-types",
      "ts-json-schema-generator",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "webpage-types",
      "recursive-util",
      "nested-menu-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-modal",
      "react",
      "react-with-native-store",
      "nested-menu"
    ]
  },
  {
    "operationName": "menu",
    "totalInstancesCount": 2,
    "totalImportCount": 20,
    "totalDependencyCount": 11,
    "importDependencies": [
      "fancy-loader",
      "nested-menu",
      "react",
      "react-with-native",
      "file-search",
      "clickable-icon",
      "hotkeys",
      "webpage-types",
      "recursive-util",
      "augmented-word-types",
      "react-with-native-store"
    ],
    "packageJsonDependencies": [
      "fancy-loader",
      "nested-menu",
      "api",
      "react-with-native",
      "file-search",
      "react",
      "augmented-word-types",
      "js-util",
      "react-with-native-store",
      "clickable-icon",
      "hotkeys",
      "webpage-types",
      "recursive-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getLegacyMenu",
        "fileName": "src/Menu.tsx",
        "imports": [
          "FancyLoader from fancy-loader",
          "NestedMenu from nested-menu",
          "useState from react",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "PathSearchResults from file-search",
          "ClickableIcon from clickable-icon",
          "isAltB from hotkeys",
          "useHotkey from hotkeys",
          "isCtrlP from hotkeys",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "nestedPathObjectToNestedMenuRecursive from recursive-util",
          "queryPathsArrayToNestedPathObject from recursive-util"
        ]
      },
      {
        "name": "Menu",
        "fileName": "src/Menu.tsx",
        "imports": [
          "FancyLoader from fancy-loader",
          "NestedMenu from nested-menu",
          "useState from react",
          "Div from react-with-native",
          "Input from react-with-native",
          "P from react-with-native",
          "PathSearchResults from file-search",
          "ClickableIcon from clickable-icon",
          "isAltB from hotkeys",
          "useHotkey from hotkeys",
          "isCtrlP from hotkeys",
          "NestedWebPage from webpage-types",
          "WebPage from webpage-types",
          "nestedPathObjectToNestedMenuRecursive from recursive-util",
          "queryPathsArrayToNestedPathObject from recursive-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "menu",
      "fancy-loader",
      "nested-menu",
      "js-util",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "nested-menu-types",
      "next-a-link",
      "next/link",
      "fs-util-js",
      "react",
      "react-with-native",
      "file-search",
      "clickable-icon",
      "hotkeys",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "recursive-util",
      "augmented-word-types",
      "react-with-native-store"
    ]
  },
  {
    "operationName": "reader-ui",
    "totalInstancesCount": 20,
    "totalImportCount": 48,
    "totalDependencyCount": 23,
    "importDependencies": [
      "nested-menu",
      "react-with-native-store",
      "clickable-icon",
      "fs-util-js",
      "js-util",
      "markdown",
      "augmented-word-types",
      "react-with-native",
      "server-api-url",
      "markdown-reader-functions-js",
      "markdown-reader-types",
      "react-with-native-router",
      "bundle-types",
      "next-a-link",
      "sdk-env-public",
      "layout",
      "webpage-types",
      "convert-case",
      "markdown-parse-js",
      "markdown-types",
      "react",
      "writer-input",
      "asset-view"
    ],
    "packageJsonDependencies": [
      "nested-menu",
      "react-with-native-store",
      "clickable-icon",
      "fs-util-js",
      "js-util",
      "markdown",
      "augmented-word-types",
      "react-with-native",
      "server-api-url",
      "bundle-types",
      "next-a-link",
      "layout",
      "markdown-reader-types",
      "webpage-types",
      "convert-case",
      "markdown-parse-js",
      "markdown-reader-functions-js",
      "react-with-native-router",
      "writer-input",
      "react",
      "markdown-types",
      "asset-view"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AugmentedWordComponent",
        "fileName": "src/components/Dictionary.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "renderMarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "Dictionary",
        "fileName": "src/components/Dictionary.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "renderMarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "DocsReaderLayout",
        "fileName": "src/components/DocsReaderLayout.tsx",
        "imports": [
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownReaderPageProps from markdown-reader-types",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "Header",
        "fileName": "src/components/Header.tsx",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      },
      {
        "name": "Layout",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "LayoutGrid from layout",
          "MarkdownReaderPageProps from markdown-reader-types",
          "MenuObjectType from webpage-types",
          "FilePage from webpage-types"
        ]
      },
      {
        "name": "ReaderPageContent",
        "fileName": "src/components/ReaderPageContent.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "humanCase from convert-case",
          "getFolderJs from fs-util-js",
          "renderMarkdownContent from markdown",
          "mdToJsonParse from markdown-parse-js",
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownParse from markdown-types",
          "ALink from next-a-link",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "isDev from server-api-url",
          "MarkdownView from writer-input",
          "ReaderPageContentProps from markdown-reader-types"
        ]
      },
      {
        "name": "ReaderPageHeader",
        "fileName": "src/components/ReaderPageHeader.tsx",
        "imports": [
          "useAsset from asset-view",
          "destructureOptionalObject from js-util",
          "WebMarkdownFile from markdown-types",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "AugmentedWord",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "LayoutGrid from layout",
          "MarkdownReaderPageProps from markdown-reader-types",
          "MenuObjectType from webpage-types",
          "FilePage from webpage-types"
        ]
      },
      {
        "name": "FilePage",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "LayoutGrid from layout",
          "MarkdownReaderPageProps from markdown-reader-types",
          "MenuObjectType from webpage-types",
          "FilePage from webpage-types"
        ]
      },
      {
        "name": "MarkdownReaderPageProps",
        "fileName": "src/components/DocsReaderLayout.tsx",
        "imports": [
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownReaderPageProps from markdown-reader-types",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof AugmentedWordComponent>",
        "fileName": "src/components/Dictionary.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "renderMarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof Dictionary>",
        "fileName": "src/components/Dictionary.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "getFolderJs from fs-util-js",
          "MappedObject from js-util",
          "renderMarkdownContent from markdown",
          "AugmentedWord from augmented-word-types",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "NamedParameters<typeof DocsReaderLayout>",
        "fileName": "src/components/DocsReaderLayout.tsx",
        "imports": [
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownReaderPageProps from markdown-reader-types",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof Header>",
        "fileName": "src/components/Header.tsx",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      },
      {
        "name": "NamedParameters<typeof Layout>",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "AugmentedWord from augmented-word-types",
          "MappedObject from js-util",
          "LayoutGrid from layout",
          "MarkdownReaderPageProps from markdown-reader-types",
          "MenuObjectType from webpage-types",
          "FilePage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof ReaderPageContent>",
        "fileName": "src/components/ReaderPageContent.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "humanCase from convert-case",
          "getFolderJs from fs-util-js",
          "renderMarkdownContent from markdown",
          "mdToJsonParse from markdown-parse-js",
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownParse from markdown-types",
          "ALink from next-a-link",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "isDev from server-api-url",
          "MarkdownView from writer-input",
          "ReaderPageContentProps from markdown-reader-types"
        ]
      },
      {
        "name": "NamedParameters<typeof ReaderPageHeader>",
        "fileName": "src/components/ReaderPageHeader.tsx",
        "imports": [
          "useAsset from asset-view",
          "destructureOptionalObject from js-util",
          "WebMarkdownFile from markdown-types",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      },
      {
        "name": "PublicBundleConfig",
        "fileName": "src/components/Header.tsx",
        "imports": [
          "PublicBundleConfig from bundle-types",
          "ClickableIcon from clickable-icon",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      },
      {
        "name": "ReaderPageContentProps",
        "fileName": "src/components/ReaderPageContent.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "humanCase from convert-case",
          "getFolderJs from fs-util-js",
          "renderMarkdownContent from markdown",
          "mdToJsonParse from markdown-parse-js",
          "getQueryPath from markdown-reader-functions-js",
          "MarkdownParse from markdown-types",
          "ALink from next-a-link",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native",
          "useRouter from react-with-native-router",
          "isDev from server-api-url",
          "MarkdownView from writer-input",
          "ReaderPageContentProps from markdown-reader-types"
        ]
      },
      {
        "name": "WebMarkdownFile",
        "fileName": "src/components/ReaderPageHeader.tsx",
        "imports": [
          "useAsset from asset-view",
          "destructureOptionalObject from js-util",
          "WebMarkdownFile from markdown-types",
          "ALink from next-a-link",
          "Div from react-with-native",
          "P from react-with-native",
          "isDev from server-api-url"
        ]
      }
    ],
    "cumulativeDependencies": [
      "reader-ui",
      "nested-menu",
      "nested-menu-types",
      "react-with-native-store",
      "clickable-icon",
      "fs-util-js",
      "js-util",
      "markdown",
      "asset-functions-js",
      "name-conventions",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "pluralize",
      "api",
      "api-types",
      "sdk-api",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "model-types",
      "react-markdown",
      "ui-util",
      "asset-type",
      "tooltip",
      "@popperjs/core",
      "matter-types",
      "ai-types",
      "recursive-types",
      "filename-conventions",
      "function-server-types",
      "augmented-word-types",
      "react-with-native",
      "server-api-url",
      "port-conventions",
      "markdown-reader-functions-js",
      "next-types",
      "markdown-reader-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "next-a-link",
      "next/link",
      "sdk-env-public",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "fs-util",
      "graceful-fs",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "react-with-native-ui",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "menu",
      "file-search",
      "hotkeys",
      "recursive-util",
      "share",
      "react-with-native-modal",
      "webpage-types",
      "convert-case",
      "markdown-parse-js",
      "markdown-types",
      "react",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "asset-view"
    ]
  },
  {
    "operationName": "share",
    "totalInstancesCount": 9,
    "totalImportCount": 16,
    "totalDependencyCount": 9,
    "importDependencies": [
      "api",
      "clickable-icon",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-modal",
      "function-form",
      "cool-toast",
      "api-types",
      "react"
    ],
    "packageJsonDependencies": [
      "api",
      "api-types",
      "clickable-icon",
      "cool-toast",
      "function-form",
      "html2canvas",
      "react",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-modal",
      "use-react-screenshot"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Share",
        "fileName": "src/Share.tsx",
        "imports": [
          "queries from api",
          "ClickableIcon from clickable-icon",
          "Div from react-with-native",
          "useAlert from react-with-native-alert",
          "useModal from react-with-native-modal",
          "FunctionForm from function-form",
          "errorToast from cool-toast",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "Shareable",
        "fileName": "src/Shareable.tsx",
        "imports": [
          "useEffect from react",
          "ClickableIcon from clickable-icon",
          "api from api"
        ]
      },
      {
        "name": "useAllText",
        "fileName": "src/useAllText.ts",
        "imports": []
      },
      {
        "name": "useLastSelection",
        "fileName": "src/useLastSelection.ts",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "useProjectRelativeScreenshot",
        "fileName": "src/useProjectRelativeScreenshot.ts",
        "imports": [
          "useEffect from react",
          "useRef from react",
          "useState from react"
        ]
      },
      {
        "name": "NamedParameters<typeof Share>",
        "fileName": "src/Share.tsx",
        "imports": [
          "queries from api",
          "ClickableIcon from clickable-icon",
          "Div from react-with-native",
          "useAlert from react-with-native-alert",
          "useModal from react-with-native-modal",
          "FunctionForm from function-form",
          "errorToast from cool-toast",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "NamedParameters<typeof useAllText>",
        "fileName": "src/useAllText.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof useLastSelection>",
        "fileName": "src/useLastSelection.ts",
        "imports": [
          "useEffect from react",
          "useState from react"
        ]
      },
      {
        "name": "NamedParameters<typeof useProjectRelativeScreenshot>",
        "fileName": "src/useProjectRelativeScreenshot.ts",
        "imports": [
          "useEffect from react",
          "useRef from react",
          "useState from react"
        ]
      }
    ],
    "cumulativeDependencies": [
      "share",
      "api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "js-util",
      "sdk-api-keys",
      "rest-util",
      "convert-case",
      "make-test",
      "react-query",
      "clickable-icon",
      "react-with-native",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-modal",
      "function-form",
      "simplified-schema-form",
      "big-button",
      "model-types",
      "matter-types",
      "schema-util",
      "json-schema",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "writer-input",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "asset-functions-js",
      "text-or-binary",
      "asset-type",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "api-types",
      "sdk-api",
      "react"
    ]
  },
  {
    "operationName": "simplified-schema-form",
    "totalInstancesCount": 17,
    "totalImportCount": 66,
    "totalDependencyCount": 19,
    "importDependencies": [
      "code-types",
      "react-with-native",
      "convert-case",
      "clickable-icon",
      "js-util",
      "big-button",
      "react",
      "model-types",
      "schema-util",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "writer-input",
      "react-with-native-form-asset-input",
      "react-with-native-ui",
      "sdk-db",
      "api"
    ],
    "packageJsonDependencies": [
      "react",
      "schema-util",
      "react-with-native",
      "convert-case",
      "name-conventions",
      "js-util",
      "react-with-native-form-inputs",
      "clickable-icon",
      "fancy-loader",
      "pluralize",
      "writer-input",
      "react-with-native-form-asset-input",
      "react-with-native-ui",
      "api",
      "code-types",
      "big-button",
      "model-types",
      "react-with-native-select"
    ],
    "instancesAndTheirImports": [
      {
        "name": "ArrayForm",
        "fileName": "src/ArrayForm.tsx",
        "imports": [
          "FunctionParameter from code-types",
          "SimplifiedSchema from code-types",
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "humanCase from convert-case",
          "ClickableIcon from clickable-icon",
          "insertAt from js-util",
          "removeIndexFromArray from js-util"
        ]
      },
      {
        "name": "FormContainer",
        "fileName": "src/FormContainer.tsx",
        "imports": [
          "P from react-with-native",
          "BigButton from big-button",
          "useEffect from react"
        ]
      },
      {
        "name": "getReferencedModelDataItem",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "ObjectForm",
        "fileName": "src/ObjectForm.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "mergeObjectsArray from js-util",
          "useState from react",
          "ClickableIcon from clickable-icon"
        ]
      },
      {
        "name": "ReferenceInput",
        "fileName": "src/ReferenceInput.tsx",
        "imports": [
          "ClickableIcon from clickable-icon",
          "FunctionParameter from code-types",
          "Div from react-with-native",
          "FancyLoader from fancy-loader",
          "SelectInput from react-with-native-form-inputs",
          "SelectMultipleInput from react-with-native-form-inputs",
          "Item from react-with-native-select",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "renderParameterTitle",
        "fileName": "src/renderParameterTitle.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "humanCase from convert-case",
          "getReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "SimplifiedSchemaForm",
        "fileName": "src/SimplifiedSchemaForm.tsx",
        "imports": [
          "useEffect from react",
          "isCalculatedParameter from name-conventions",
          "markdownTextParameterNames from name-conventions",
          "passwordTextParameterNames from name-conventions",
          "lowerCaseArray from convert-case",
          "singularize from pluralize",
          "WriterInput from writer-input",
          "Div from react-with-native",
          "humanCase from convert-case",
          "makeArray from js-util",
          "notEmpty from js-util",
          "TextInput from react-with-native-form-inputs",
          "ToggleInput from react-with-native-form-inputs",
          "NumberInput from react-with-native-form-inputs",
          "SelectInput from react-with-native-form-inputs",
          "PasswordInput from react-with-native-form-inputs",
          "AssetInputType from react-with-native-form-asset-input",
          "getPossibleReferenceParameterNames from schema-util",
          "getAssetInputType from name-conventions",
          "UI from react-with-native-ui"
        ]
      },
      {
        "name": "useReferencableModelData",
        "fileName": "src/useReferencableModelData.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "getReferencableModels from schema-util",
          "DbModels from sdk-db",
          "queries from api"
        ]
      },
      {
        "name": "useTsInterfaceForm",
        "fileName": "src/useTsInterfaceForm.tsx",
        "imports": [
          "TsInterface from code-types",
          "useState from react",
          "AnyModelType from model-types",
          "AugmentedAnyModelType from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "CategoryStack",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getReferencedModelDataItem>",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "NamedParameters<typeof useReferencableModelData>",
        "fileName": "src/useReferencableModelData.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "getReferencableModels from schema-util",
          "DbModels from sdk-db",
          "queries from api"
        ]
      },
      {
        "name": "ReferencedModelDataItem",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "ReferenceItem",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "ReferenceItemsObject",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "ReferenceParameterInfo",
        "fileName": "src/getReferencedModelDataItem.tsx",
        "imports": [
          "CategoryStack from model-types",
          "getReferenceParameterInfo from schema-util",
          "ReferenceParameterInfo from schema-util"
        ]
      },
      {
        "name": "SimplifiedSchema",
        "fileName": "src/useReferencableModelData.ts",
        "imports": [
          "SimplifiedSchema from code-types",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "getReferencableModels from schema-util",
          "DbModels from sdk-db",
          "queries from api"
        ]
      }
    ],
    "cumulativeDependencies": [
      "simplified-schema-form",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "react-with-native",
      "convert-case",
      "make-test",
      "clickable-icon",
      "js-util",
      "big-button",
      "react",
      "model-types",
      "schema-util",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "pluralize",
      "writer-input",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "api-types",
      "sdk-api",
      "react-query",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "asset-functions-js",
      "text-or-binary",
      "asset-type",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "react-with-native-store",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "react-with-native-alert",
      "@headlessui/react",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "api",
      "sdk-api-keys",
      "rest-util"
    ]
  },
  {
    "operationName": "ui-generation",
    "totalInstancesCount": 0,
    "totalImportCount": 4,
    "totalDependencyCount": 4,
    "importDependencies": [
      "code-types",
      "himalayajeep-types",
      "sdk-db",
      "database"
    ],
    "packageJsonDependencies": [
      "code-types",
      "himalayajeep-types",
      "database"
    ],
    "instancesAndTheirImports": [],
    "cumulativeDependencies": [
      "ui-generation",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "himalayajeep-types",
      "asset-type",
      "sdk-db",
      "database",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "child-process-helper",
    "totalInstancesCount": 5,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "execAsync",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "spawnAsync",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof execAsync>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof spawnAsync>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "SpawnOptionsWithoutStdio",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "child-process-helper"
    ]
  },
  {
    "operationName": "cloc",
    "totalInstancesCount": 2,
    "totalImportCount": 4,
    "totalDependencyCount": 2,
    "importDependencies": [
      "database",
      "js-util"
    ],
    "packageJsonDependencies": [
      "database",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cloc",
        "fileName": "src/cloc.test.ts",
        "imports": [
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "sum from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof cloc>",
        "fileName": "src/cloc.test.ts",
        "imports": [
          "db from database",
          "mergeObjectsArray from js-util",
          "notEmpty from js-util",
          "sum from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "cloc",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util"
    ]
  },
  {
    "operationName": "convert-case",
    "totalInstancesCount": 27,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "make-test"
    ],
    "packageJsonDependencies": [
      "make-test"
    ],
    "instancesAndTheirImports": [
      {
        "name": "camelCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "capitalCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "capitaliseFirstLetter",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "convertCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "convertToTargetCasing",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "getDelimiter",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "humanCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "kebabCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "lowerCaseArray",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "pascalCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "slugify",
        "fileName": "src/slugify.ts",
        "imports": []
      },
      {
        "name": "snakeCase",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "splitCasingDelimiters",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "Casing",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof camelCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof capitalCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof capitaliseFirstLetter>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof convertCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof convertToTargetCasing>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof getDelimiter>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof humanCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof kebabCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof lowerCaseArray>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof pascalCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof slugify>",
        "fileName": "src/slugify.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof snakeCase>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      },
      {
        "name": "NamedParameters<typeof splitCasingDelimiters>",
        "fileName": "src/general.ts",
        "imports": [
          "makeTest from make-test"
        ]
      }
    ],
    "cumulativeDependencies": [
      "convert-case",
      "make-test"
    ]
  },
  {
    "operationName": "execute-command",
    "totalInstancesCount": 9,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "log"
    ],
    "packageJsonDependencies": [
      "log"
    ],
    "instancesAndTheirImports": [
      {
        "name": "executeCommand",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "getCommand",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "isCommandPerOs",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "Command",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "CommandPerOs",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof executeCommand>",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof getCommand>",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof isCommandPerOs>",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      },
      {
        "name": "OSOrDefault",
        "fileName": "src/general.ts",
        "imports": [
          "log from log"
        ]
      }
    ],
    "cumulativeDependencies": [
      "execute-command",
      "log"
    ]
  },
  {
    "operationName": "geo-parse",
    "totalInstancesCount": 12,
    "totalImportCount": 28,
    "totalDependencyCount": 8,
    "importDependencies": [
      "fs-util",
      "convert-case",
      "database",
      "geo-types",
      "key-value-markdown-js",
      "model-types",
      "read-json-file",
      "js-util"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "convert-case",
      "database",
      "geo-types",
      "key-value-markdown-js",
      "model-types",
      "read-json-file",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getDbPath",
        "fileName": "src/getDbPath.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "makeKvmdLocationsFile",
        "fileName": "src/makeKvmdLocationsFile.test.ts",
        "imports": [
          "kebabCase from convert-case",
          "db from database",
          "writeStringToFile from fs-util",
          "Location from geo-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "parseCountries",
        "fileName": "src/parseLocations.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "readJsonFile from read-json-file",
          "kebabCase from convert-case",
          "Location from geo-types"
        ]
      },
      {
        "name": "parseToMarkdown",
        "fileName": "src/parseLocations.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "readJsonFile from read-json-file",
          "kebabCase from convert-case",
          "Location from geo-types"
        ]
      },
      {
        "name": "parse",
        "fileName": "src/parseCountries.test.ts",
        "imports": [
          "db from database",
          "Country from geo-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "rawPolygonToPolygon",
        "fileName": "src/rawPolygonToPolygon.ts",
        "imports": [
          "Polygon from geo-types",
          "Position from geo-types",
          "isAllTrue from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getDbPath>",
        "fileName": "src/getDbPath.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof makeKvmdLocationsFile>",
        "fileName": "src/makeKvmdLocationsFile.test.ts",
        "imports": [
          "kebabCase from convert-case",
          "db from database",
          "writeStringToFile from fs-util",
          "Location from geo-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parse>",
        "fileName": "src/parseCountries.test.ts",
        "imports": [
          "db from database",
          "Country from geo-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parseCountries>",
        "fileName": "src/parseLocations.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "readJsonFile from read-json-file",
          "kebabCase from convert-case",
          "Location from geo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof parseToMarkdown>",
        "fileName": "src/parseLocations.test.ts",
        "imports": [
          "KeyValueMarkdownParse from model-types",
          "Storing from model-types",
          "kvmdParseToMarkdownString from key-value-markdown-js",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "writeStringToFile from fs-util",
          "readJsonFile from read-json-file",
          "kebabCase from convert-case",
          "Location from geo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof rawPolygonToPolygon>",
        "fileName": "src/rawPolygonToPolygon.ts",
        "imports": [
          "Polygon from geo-types",
          "Position from geo-types",
          "isAllTrue from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "geo-parse",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "convert-case",
      "make-test",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "get-path",
      "try-parse-json",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "geo-types",
      "key-value-markdown-js",
      "model-types",
      "read-json-file",
      "js-util"
    ]
  },
  {
    "operationName": "js-util",
    "totalInstancesCount": 59,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "apply",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "arrayGenerator",
        "fileName": "src/mapMany.ts",
        "imports": []
      },
      {
        "name": "concatenate",
        "fileName": "src/mapMany.test.ts",
        "imports": []
      },
      {
        "name": "createEnum",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "createMappedObject",
        "fileName": "src/createMappedObject.ts",
        "imports": []
      },
      {
        "name": "destructureOptionalObject",
        "fileName": "src/destructureOptionalObject.ts",
        "imports": []
      },
      {
        "name": "findLastIndex",
        "fileName": "src/array-modifications.ts",
        "imports": []
      },
      {
        "name": "getObjectFromParamsString",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "getObjectKeysArray",
        "fileName": "src/getObjectKeysArray.ts",
        "imports": []
      },
      {
        "name": "getParameterAtLocation",
        "fileName": "src/getParameterAtLocation.ts",
        "imports": []
      },
      {
        "name": "getSubsetFromObject",
        "fileName": "src/getSubsetFromObject.ts",
        "imports": []
      },
      {
        "name": "groupByKey",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "hasAllLetters",
        "fileName": "src/hasAllLetters.ts",
        "imports": []
      },
      {
        "name": "insertAt",
        "fileName": "src/array-modifications.ts",
        "imports": []
      },
      {
        "name": "isAllTrue",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "isArrayEqual",
        "fileName": "src/isArrayEqual.ts",
        "imports": []
      },
      {
        "name": "main",
        "fileName": "src/mapMany.test.ts",
        "imports": []
      },
      {
        "name": "makeArray",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "mapAsync",
        "fileName": "src/mapAsync.ts",
        "imports": []
      },
      {
        "name": "mapItem",
        "fileName": "src/mapMany.ts",
        "imports": []
      },
      {
        "name": "mapKeys",
        "fileName": "src/object-maps.ts",
        "imports": []
      },
      {
        "name": "mapMany",
        "fileName": "src/mapMany.ts",
        "imports": []
      },
      {
        "name": "mapValuesSync",
        "fileName": "src/object-maps.ts",
        "imports": []
      },
      {
        "name": "mergeNestedObjectTest",
        "fileName": "src/mergeNestedObject.test.ts",
        "imports": []
      },
      {
        "name": "mergeNestedObject",
        "fileName": "src/mergeNestedObject.ts",
        "imports": []
      },
      {
        "name": "mergeObjectParameters",
        "fileName": "src/object-merge.ts",
        "imports": []
      },
      {
        "name": "mergeObjectsArray",
        "fileName": "src/mergeObjectsArray.ts",
        "imports": []
      },
      {
        "name": "mergeObjects",
        "fileName": "src/object-merge.ts",
        "imports": []
      },
      {
        "name": "noEmptyString",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "notEmpty",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "objectMapAsync",
        "fileName": "src/object-maps.ts",
        "imports": []
      },
      {
        "name": "objectMapSync",
        "fileName": "src/object-maps.ts",
        "imports": []
      },
      {
        "name": "objectValuesMap",
        "fileName": "src/object-maps.ts",
        "imports": []
      },
      {
        "name": "omitUndefinedValues",
        "fileName": "src/omitUndefinedValues.ts",
        "imports": []
      },
      {
        "name": "onlyUnique2",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "onlyUnique",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "pickRandomArrayItem",
        "fileName": "src/pickRandomArrayItem.ts",
        "imports": []
      },
      {
        "name": "putIndexAtIndex",
        "fileName": "src/array-modifications.ts",
        "imports": []
      },
      {
        "name": "removeIndexFromArray",
        "fileName": "src/array-modifications.ts",
        "imports": []
      },
      {
        "name": "removeOptionalKeysFromObjectStrings",
        "fileName": "src/removeOptionalKeysFromObject.ts",
        "imports": []
      },
      {
        "name": "removeOptionalKeysFromObject",
        "fileName": "src/removeOptionalKeysFromObject.ts",
        "imports": []
      },
      {
        "name": "replaceLastOccurence",
        "fileName": "src/replaceLastOccurence.ts",
        "imports": []
      },
      {
        "name": "reverseString",
        "fileName": "src/replaceLastOccurence.ts",
        "imports": []
      },
      {
        "name": "sumAllKeys",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "sumObjectParameters",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "sum",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "takeFirst",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "trimSlashes",
        "fileName": "src/trimSlashes.ts",
        "imports": []
      },
      {
        "name": "worker",
        "fileName": "src/mapMany.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof concatenate>",
        "fileName": "src/mapMany.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getParameterAtLocation>",
        "fileName": "src/getParameterAtLocation.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof hasAllLetters>",
        "fileName": "src/hasAllLetters.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isArrayEqual>",
        "fileName": "src/isArrayEqual.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/mapMany.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof mergeNestedObjectTest>",
        "fileName": "src/mergeNestedObject.test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof replaceLastOccurence>",
        "fileName": "src/replaceLastOccurence.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof reverseString>",
        "fileName": "src/replaceLastOccurence.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof trimSlashes>",
        "fileName": "src/trimSlashes.ts",
        "imports": []
      },
      {
        "name": "O",
        "fileName": "src/NestedPartial.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "js-util"
    ]
  },
  {
    "operationName": "k-dev",
    "totalInstancesCount": 4,
    "totalImportCount": 3,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "nodemon"
    ],
    "packageJsonDependencies": [
      "nodemon",
      "fs-util",
      "read-json-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "devCli",
        "fileName": "src/cli/dev.cli.ts",
        "imports": [
          "path from fs-util"
        ]
      },
      {
        "name": "dev",
        "fileName": "src/dev.ts",
        "imports": [
          "fs from fs-util",
          "nodemon from nodemon"
        ]
      },
      {
        "name": "NamedParameters<typeof dev>",
        "fileName": "src/dev.ts",
        "imports": [
          "fs from fs-util",
          "nodemon from nodemon"
        ]
      },
      {
        "name": "NamedParameters<typeof devCli>",
        "fileName": "src/cli/dev.cli.ts",
        "imports": [
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "k-dev",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "nodemon",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js"
    ]
  },
  {
    "operationName": "log",
    "totalInstancesCount": 11,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "getCallerFileName",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "log",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "parseTitle",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "GlobalLogConfig",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "LogConfig",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "LogType",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getCallerFileName>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof log>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof parseTitle>",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "OperationLogConfig",
        "fileName": "src/general.ts",
        "imports": []
      },
      {
        "name": "ProjectLogConfig",
        "fileName": "src/general.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "log"
    ]
  },
  {
    "operationName": "measure-performance",
    "totalInstancesCount": 7,
    "totalImportCount": 1,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "code-types",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "cleanupTimer",
        "fileName": "src/measure-performance.ts",
        "imports": []
      },
      {
        "name": "generateUniqueId",
        "fileName": "src/generateUniqueId.ts",
        "imports": [
          "generateId from model-types"
        ]
      },
      {
        "name": "getNewPerformance",
        "fileName": "src/measure-performance.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof cleanupTimer>",
        "fileName": "src/measure-performance.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof generateUniqueId>",
        "fileName": "src/generateUniqueId.ts",
        "imports": [
          "generateId from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getNewPerformance>",
        "fileName": "src/measure-performance.ts",
        "imports": []
      },
      {
        "name": "PerformanceItem",
        "fileName": "src/PerformanceItem.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "measure-performance",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "nodemon",
    "totalInstancesCount": 2,
    "totalImportCount": 4,
    "totalDependencyCount": 3,
    "importDependencies": [
      "fs-util",
      "get-path",
      "log"
    ],
    "packageJsonDependencies": [
      "get-path",
      "log",
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "nodemon",
        "fileName": "src/nodemon.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof nodemon>",
        "fileName": "src/nodemon.ts",
        "imports": [
          "fs from fs-util",
          "path from fs-util",
          "getOperationPath from get-path",
          "log from log"
        ]
      }
    ],
    "cumulativeDependencies": [
      "nodemon",
      "fs-util",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "log"
    ]
  },
  {
    "operationName": "one-by-one",
    "totalInstancesCount": 1,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "oneByOne",
        "fileName": "src/oneByOne.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "one-by-one"
    ]
  },
  {
    "operationName": "pluralize",
    "totalInstancesCount": 8,
    "totalImportCount": 0,
    "totalDependencyCount": 0,
    "importDependencies": [],
    "packageJsonDependencies": [],
    "instancesAndTheirImports": [
      {
        "name": "isPlural",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "isSingular",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "pluralize",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "singularize",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isPlural>",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof isSingular>",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof pluralize>",
        "fileName": "src/pluralize.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof singularize>",
        "fileName": "src/pluralize.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "pluralize"
    ]
  },
  {
    "operationName": "run-child-process",
    "totalInstancesCount": 4,
    "totalImportCount": 6,
    "totalDependencyCount": 4,
    "importDependencies": [
      "fs-util",
      "get-path",
      "js-util",
      "log"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "get-path",
      "log",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "main",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "runChildProcess",
        "fileName": "src/runChildProcess.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "canRead from fs-util",
          "getOperationPath from get-path",
          "notEmpty from js-util",
          "log from log"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof runChildProcess>",
        "fileName": "src/runChildProcess.ts",
        "imports": [
          "path from fs-util",
          "fs from fs-util",
          "canRead from fs-util",
          "getOperationPath from get-path",
          "notEmpty from js-util",
          "log from log"
        ]
      }
    ],
    "cumulativeDependencies": [
      "run-child-process",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "js-util",
      "log"
    ]
  },
  {
    "operationName": "browser-types",
    "totalInstancesCount": 3,
    "totalImportCount": 5,
    "totalDependencyCount": 1,
    "importDependencies": [
      "model-types"
    ],
    "packageJsonDependencies": [
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BrowserPage",
        "fileName": "src/BrowserPage.ts",
        "imports": [
          "DefaultModelType from model-types"
        ]
      },
      {
        "name": "BrowserSession",
        "fileName": "src/BrowserSession.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/BrowserSession.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Id from model-types",
          "Language from model-types",
          "Slug from model-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "browser-types",
      "model-types",
      "matter-types"
    ]
  },
  {
    "operationName": "chatgpt-controller",
    "totalInstancesCount": 12,
    "totalImportCount": 11,
    "totalDependencyCount": 5,
    "importDependencies": [
      "puppeteer",
      "puppeteer-utils",
      "database",
      "social-media-types",
      "ai-types"
    ],
    "packageJsonDependencies": [
      "clipboardy",
      "database",
      "html-to-md",
      "puppeteer",
      "puppeteer-utils",
      "social-media-types",
      "ai-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "chatGPTAuth",
        "fileName": "src/chatGPTAuth.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils",
          "db from database",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "detectChatGptPage",
        "fileName": "src/detectChatGptPage.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils"
        ]
      },
      {
        "name": "openAIChat",
        "fileName": "src/openAIChat.ts",
        "imports": [
          "openPage from puppeteer-utils",
          "setBrowserPageIdle from puppeteer-utils",
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "LoginResponse",
        "fileName": "src/chatGPTAuth.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils",
          "db from database",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof chatGPTAuth>",
        "fileName": "src/chatGPTAuth.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils",
          "db from database",
          "MediaCredential from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof detectChatGptPage>",
        "fileName": "src/detectChatGptPage.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils"
        ]
      },
      {
        "name": "NamedParameters<typeof openAIChat>",
        "fileName": "src/openAIChat.ts",
        "imports": [
          "openPage from puppeteer-utils",
          "setBrowserPageIdle from puppeteer-utils",
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "OpenAIChatProps",
        "fileName": "src/openAIChat.ts",
        "imports": [
          "openPage from puppeteer-utils",
          "setBrowserPageIdle from puppeteer-utils",
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "OpenAIChatResponseType",
        "fileName": "src/openAIChat.ts",
        "imports": [
          "openPage from puppeteer-utils",
          "setBrowserPageIdle from puppeteer-utils",
          "ProcessPromptFunctionResult from ai-types"
        ]
      },
      {
        "name": "Page",
        "fileName": "src/detectChatGptPage.ts",
        "imports": [
          "Page from puppeteer",
          "isCaptchaExist from puppeteer-utils",
          "solveReptcha from puppeteer-utils"
        ]
      }
    ],
    "cumulativeDependencies": [
      "chatgpt-controller",
      "puppeteer",
      "puppeteer-utils",
      "puppeteer-core",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "model-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "social-media-types",
      "geo-types",
      "ai-types",
      "function-server-types"
    ]
  },
  {
    "operationName": "puppeteer-utils",
    "totalInstancesCount": 75,
    "totalImportCount": 45,
    "totalDependencyCount": 7,
    "importDependencies": [
      "puppeteer",
      "puppeteer-core",
      "browser-types",
      "database",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types"
    ],
    "packageJsonDependencies": [
      "browser-types",
      "database",
      "get-path",
      "lru-cache",
      "model-types",
      "puppeteer",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-recaptcha",
      "puppeteer-extra-plugin-stealth",
      "puppeteer-utils",
      "uuid"
    ],
    "instancesAndTheirImports": [
      {
        "name": "clickOnSpanTag",
        "fileName": "src/clickOnSpanTag.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "delay",
        "fileName": "src/openPage.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "facebookLogin",
        "fileName": "src/facebookLogin.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "foundOrNotXpath",
        "fileName": "src/foundOrNotXpath.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "foundOrNot",
        "fileName": "src/foundOrNot.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "getBrowserPageById",
        "fileName": "src/getBrowserPageById.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "getBrowserTabs",
        "fileName": "src/getBrowserTabs.ts",
        "imports": [
          "BrowserSession from browser-types",
          "Page from puppeteer-core",
          "db from database"
        ]
      },
      {
        "name": "getBrowser",
        "fileName": "src/browserSession.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "getChromeExecutablePath",
        "fileName": "src/getChromeExecutablePath.ts",
        "imports": []
      },
      {
        "name": "getConnectedBrowsers",
        "fileName": "src/getConnectedBrowsers.ts",
        "imports": [
          "db from database",
          "BrowserSession from browser-types"
        ]
      },
      {
        "name": "getIdlePage",
        "fileName": "src/getIdlePage.ts",
        "imports": [
          "Browser from puppeteer",
          "Page from puppeteer",
          "db from database"
        ]
      },
      {
        "name": "getNewPage",
        "fileName": "src/getNewPage.ts",
        "imports": [
          "Browser from puppeteer",
          "Page from puppeteer"
        ]
      },
      {
        "name": "gmailLogin",
        "fileName": "src/gmailLogin.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "isCaptchaExist",
        "fileName": "src/isCaptchaExist.ts",
        "imports": [
          "Page from puppeteer",
          "CaptchaInfo from puppeteer-extra-plugin-recaptcha/dist/types",
          "FindRecaptchasResult from puppeteer-extra-plugin-recaptcha/dist/types"
        ]
      },
      {
        "name": "logConsoleIfDebug",
        "fileName": "src/logConsoleIfDebug.ts",
        "imports": []
      },
      {
        "name": "openMultiTabs",
        "fileName": "src/openMultiTabs.ts",
        "imports": [
          "Browser from puppeteer",
          "BrowserPage from browser-types",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "openNewBrowserOnChildProcess",
        "fileName": "src/openBrowserOnChildProcess.ts",
        "imports": [
          "db from database",
          "getProjectRoot from get-path",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "openNewBrowser",
        "fileName": "src/openNewBrowser.ts",
        "imports": [
          "db from database",
          "Browser from puppeteer"
        ]
      },
      {
        "name": "openPage",
        "fileName": "src/openPage.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "racePromises",
        "fileName": "src/racePromises.ts",
        "imports": []
      },
      {
        "name": "retryClickAndWaitSelector",
        "fileName": "src/retryClickAndWaitSelector.ts",
        "imports": []
      },
      {
        "name": "retryWaitSelector",
        "fileName": "src/retryWaitSelector.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "runBrowser",
        "fileName": "src/cli/runBrowser.cli.ts",
        "imports": [
          "Browser from puppeteer",
          "db from database",
          "Creation from model-types",
          "BrowserSession from browser-types",
          "BrowserPage from browser-types"
        ]
      },
      {
        "name": "setBrowserPageIdle",
        "fileName": "src/setBrowserPageIdle.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "setBrowserSession",
        "fileName": "src/browserSession.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "setInnerHtml",
        "fileName": "src/setInnerHtml.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "setInputValue",
        "fileName": "src/setInputValue.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "solveReptcha",
        "fileName": "src/solveRecaptcha.ts",
        "imports": [
          "Page from puppeteer",
          "SolveRecaptchasResult from puppeteer-extra-plugin-recaptcha/dist/types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "trueClick",
        "fileName": "src/trueClick.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "twitterLogin",
        "fileName": "src/twitterLogin.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "typeInTheInputField",
        "fileName": "src/typeInTheInputField.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "typeOnTheTargetWithXpathSelector",
        "fileName": "src/typeOnTheTargetWithXpathSelector.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "waitMilliseconds",
        "fileName": "src/waitMillisseconds.ts",
        "imports": []
      },
      {
        "name": "Browser",
        "fileName": "src/openMultiTabs.ts",
        "imports": [
          "Browser from puppeteer",
          "BrowserPage from browser-types",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "BrowserSession",
        "fileName": "src/getBrowserTabs.ts",
        "imports": [
          "BrowserSession from browser-types",
          "Page from puppeteer-core",
          "db from database"
        ]
      },
      {
        "name": "FacebookLoginPropsType",
        "fileName": "src/facebookLogin.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "GmailLoginPropsType",
        "fileName": "src/gmailLogin.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof getChromeExecutablePath>",
        "fileName": "src/getChromeExecutablePath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof clickOnSpanTag>",
        "fileName": "src/clickOnSpanTag.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof delay>",
        "fileName": "src/openPage.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof facebookLogin>",
        "fileName": "src/facebookLogin.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof foundOrNot>",
        "fileName": "src/foundOrNot.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof foundOrNotXpath>",
        "fileName": "src/foundOrNotXpath.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof getBrowser>",
        "fileName": "src/browserSession.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof getBrowserPageById>",
        "fileName": "src/getBrowserPageById.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof getBrowserTabs>",
        "fileName": "src/getBrowserTabs.ts",
        "imports": [
          "BrowserSession from browser-types",
          "Page from puppeteer-core",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getChromeExecutablePath>",
        "fileName": "src/getChromeExecutablePath.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getConnectedBrowsers>",
        "fileName": "src/getConnectedBrowsers.ts",
        "imports": [
          "db from database",
          "BrowserSession from browser-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getIdlePage>",
        "fileName": "src/getIdlePage.ts",
        "imports": [
          "Browser from puppeteer",
          "Page from puppeteer",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getNewPage>",
        "fileName": "src/getNewPage.ts",
        "imports": [
          "Browser from puppeteer",
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof gmailLogin>",
        "fileName": "src/gmailLogin.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof isCaptchaExist>",
        "fileName": "src/isCaptchaExist.ts",
        "imports": [
          "Page from puppeteer",
          "CaptchaInfo from puppeteer-extra-plugin-recaptcha/dist/types",
          "FindRecaptchasResult from puppeteer-extra-plugin-recaptcha/dist/types"
        ]
      },
      {
        "name": "NamedParameters<typeof logConsoleIfDebug>",
        "fileName": "src/logConsoleIfDebug.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof openMultiTabs>",
        "fileName": "src/openMultiTabs.ts",
        "imports": [
          "Browser from puppeteer",
          "BrowserPage from browser-types",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof openNewBrowser>",
        "fileName": "src/openNewBrowser.ts",
        "imports": [
          "db from database",
          "Browser from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof openNewBrowserOnChildProcess>",
        "fileName": "src/openBrowserOnChildProcess.ts",
        "imports": [
          "db from database",
          "getProjectRoot from get-path",
          "getOperationPath from get-path"
        ]
      },
      {
        "name": "NamedParameters<typeof openPage>",
        "fileName": "src/openPage.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof racePromises>",
        "fileName": "src/racePromises.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof retryClickAndWaitSelector>",
        "fileName": "src/retryClickAndWaitSelector.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof retryWaitSelector>",
        "fileName": "src/retryWaitSelector.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof runBrowser>",
        "fileName": "src/cli/runBrowser.cli.ts",
        "imports": [
          "Browser from puppeteer",
          "db from database",
          "Creation from model-types",
          "BrowserSession from browser-types",
          "BrowserPage from browser-types"
        ]
      },
      {
        "name": "NamedParameters<typeof setBrowserPageIdle>",
        "fileName": "src/setBrowserPageIdle.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof setBrowserSession>",
        "fileName": "src/browserSession.ts",
        "imports": [
          "Browser from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof setInnerHtml>",
        "fileName": "src/setInnerHtml.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof solveReptcha>",
        "fileName": "src/solveRecaptcha.ts",
        "imports": [
          "Page from puppeteer",
          "SolveRecaptchasResult from puppeteer-extra-plugin-recaptcha/dist/types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof trueClick>",
        "fileName": "src/trueClick.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof twitterLogin>",
        "fileName": "src/twitterLogin.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof typeInTheInputField>",
        "fileName": "src/typeInTheInputField.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "NamedParameters<typeof typeOnTheTargetWithXpathSelector>",
        "fileName": "src/typeOnTheTargetWithXpathSelector.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof waitMilliseconds>",
        "fileName": "src/waitMillisseconds.ts",
        "imports": []
      },
      {
        "name": "NewPageProps",
        "fileName": "src/openPage.ts",
        "imports": [
          "Page from puppeteer"
        ]
      },
      {
        "name": "OpenMultiTabProps",
        "fileName": "src/openMultiTabs.ts",
        "imports": [
          "Browser from puppeteer",
          "BrowserPage from browser-types",
          "Creation from model-types",
          "db from database"
        ]
      },
      {
        "name": "Page",
        "fileName": "src/typeOnTheTargetWithXpathSelector.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      }
    ],
    "cumulativeDependencies": [
      "puppeteer-utils",
      "puppeteer",
      "puppeteer-core",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types"
    ]
  },
  {
    "operationName": "slack-controller",
    "totalInstancesCount": 43,
    "totalImportCount": 14,
    "totalDependencyCount": 6,
    "importDependencies": [
      "puppeteer-core",
      "puppeteer-utils",
      "database",
      "model-types",
      "social-media-types",
      "peer-types"
    ],
    "packageJsonDependencies": [
      "@types/node",
      "database",
      "model-types",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "puppeteer-utils",
      "recursive-types",
      "recursive-util",
      "social-media-types",
      "typescript",
      "webpage-types",
      "peer-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "checkAndGetSlackFileUrl",
        "fileName": "src/utils/checkAndGetFileUrl.ts",
        "imports": []
      },
      {
        "name": "elementExists",
        "fileName": "src/utils/elementExists.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "getAllMessages",
        "fileName": "src/getAllMessages.ts",
        "imports": []
      },
      {
        "name": "getLatestMessages",
        "fileName": "src/getLatestMessages.ts",
        "imports": []
      },
      {
        "name": "getSlackChannelMemberList",
        "fileName": "src/getSlackChannelMemberList.ts",
        "imports": []
      },
      {
        "name": "getSlackChannels",
        "fileName": "src/getSlackChannels.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "getSlackMessageFrom",
        "fileName": "src/getSlackMessageFrom.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "getSlackWorkspaces",
        "fileName": "src/getSlackWorkspaces.ts",
        "imports": []
      },
      {
        "name": "scrapeSlackMessage",
        "fileName": "src/utils/scrapeMessage.ts",
        "imports": []
      },
      {
        "name": "scrollToTop",
        "fileName": "src/utils/scrollTop.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "selectSlackChannel",
        "fileName": "src/utils/selectSlackChannel.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "selectSlackWorkspace",
        "fileName": "src/utils/selectSlackWorkspace.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "sendSlackMessage",
        "fileName": "src/sendSlackMessage.ts",
        "imports": []
      },
      {
        "name": "slackLogin",
        "fileName": "src/slackLogin.ts",
        "imports": [
          "Page from puppeteer-core",
          "getChromeExecutablePath from puppeteer-utils"
        ]
      },
      {
        "name": "storeAllSlackChannel",
        "fileName": "src/storeAllSlackChannel.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "MediaChannel from social-media-types"
        ]
      },
      {
        "name": "storeSlackChannelMember",
        "fileName": "src/storeSlackChannelMember.ts",
        "imports": [
          "db from database",
          "Person from peer-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.slack.ts",
        "imports": []
      },
      {
        "name": "ChannelType",
        "fileName": "src/getLatestMessages.ts",
        "imports": []
      },
      {
        "name": "GetSlackChannelMemberParamsType",
        "fileName": "src/getSlackChannelMemberList.ts",
        "imports": []
      },
      {
        "name": "GetSlackWorkSpaceParamsTypes",
        "fileName": "src/getSlackWorkspaces.ts",
        "imports": []
      },
      {
        "name": "MessageType",
        "fileName": "src/getLatestMessages.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof elementExists>",
        "fileName": "src/utils/elementExists.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof getAllMessages>",
        "fileName": "src/getAllMessages.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getLatestMessages>",
        "fileName": "src/getLatestMessages.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSlackChannelMemberList>",
        "fileName": "src/getSlackChannelMemberList.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getSlackChannels>",
        "fileName": "src/getSlackChannels.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof getSlackMessageFrom>",
        "fileName": "src/getSlackMessageFrom.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof getSlackWorkspaces>",
        "fileName": "src/getSlackWorkspaces.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof scrapeSlackMessage>",
        "fileName": "src/utils/scrapeMessage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof scrollToTop>",
        "fileName": "src/utils/scrollTop.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof selectSlackChannel>",
        "fileName": "src/utils/selectSlackChannel.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof selectSlackWorkspace>",
        "fileName": "src/utils/selectSlackWorkspace.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof sendSlackMessage>",
        "fileName": "src/sendSlackMessage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof slackLogin>",
        "fileName": "src/slackLogin.ts",
        "imports": [
          "Page from puppeteer-core",
          "getChromeExecutablePath from puppeteer-utils"
        ]
      },
      {
        "name": "NamedParameters<typeof storeAllSlackChannel>",
        "fileName": "src/storeAllSlackChannel.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "MediaChannel from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof storeSlackChannelMember>",
        "fileName": "src/storeSlackChannelMember.ts",
        "imports": [
          "db from database",
          "Person from peer-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.slack.ts",
        "imports": []
      },
      {
        "name": "Page",
        "fileName": "src/utils/selectSlackWorkspace.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "Platform",
        "fileName": "src/getLatestMessages.ts",
        "imports": []
      },
      {
        "name": "ResponseType",
        "fileName": "src/slackLogin.ts",
        "imports": [
          "Page from puppeteer-core",
          "getChromeExecutablePath from puppeteer-utils"
        ]
      },
      {
        "name": "SlackLoginArguments",
        "fileName": "src/slackLogin.ts",
        "imports": [
          "Page from puppeteer-core",
          "getChromeExecutablePath from puppeteer-utils"
        ]
      },
      {
        "name": "slackSendMessagePropTypes",
        "fileName": "src/sendSlackMessage.ts",
        "imports": []
      },
      {
        "name": "StoreChannelReturnType",
        "fileName": "src/storeAllSlackChannel.ts",
        "imports": [
          "db from database",
          "Creation from model-types",
          "MediaChannel from social-media-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "slack-controller",
      "puppeteer-core",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "log",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "read-json-file",
      "try-parse-json",
      "js-util",
      "k-explore",
      "markdown-types",
      "asset-type",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "model-types",
      "social-media-types",
      "geo-types",
      "peer-types",
      "auth-types"
    ]
  },
  {
    "operationName": "twitter-controller",
    "totalInstancesCount": 10,
    "totalImportCount": 7,
    "totalDependencyCount": 3,
    "importDependencies": [
      "puppeteer-core",
      "puppeteer-utils",
      "social-media-types"
    ],
    "packageJsonDependencies": [
      "puppeteer-utils",
      "puppeteer-core",
      "puppeteer-extra",
      "puppeteer-extra-plugin-stealth",
      "typescript",
      "social-media-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getTwitterPostUrl",
        "fileName": "src/getTwitterPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "postTweetOnTwitter",
        "fileName": "src/postTweetOnTwitter.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "twitterLogin from puppeteer-utils",
          "clickOnSpanTag from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "test",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof postTweetOnTwitter>",
        "fileName": "src/postTweetOnTwitter.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "twitterLogin from puppeteer-utils",
          "clickOnSpanTag from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getTwitterPostUrl>",
        "fileName": "src/getTwitterPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof postTweetOnTwitter>",
        "fileName": "src/postTweetOnTwitter.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "twitterLogin from puppeteer-utils",
          "clickOnSpanTag from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "NamedParameters<typeof test>",
        "fileName": "src/test.ts",
        "imports": []
      },
      {
        "name": "Page",
        "fileName": "src/getTwitterPostUrl.ts",
        "imports": [
          "Page from puppeteer-core"
        ]
      },
      {
        "name": "PublishTweetPropsType",
        "fileName": "src/postTweetOnTwitter.ts",
        "imports": [
          "typeInTheInputField from puppeteer-utils",
          "twitterLogin from puppeteer-utils",
          "clickOnSpanTag from puppeteer-utils",
          "getChromeExecutablePath from puppeteer-utils",
          "SocialMediaPostTypeReturnType from social-media-types",
          "Page from puppeteer-core"
        ]
      }
    ],
    "cumulativeDependencies": [
      "twitter-controller",
      "puppeteer-core",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "get-path",
      "model-types",
      "social-media-types",
      "geo-types"
    ]
  },
  {
    "operationName": "social-media-node",
    "totalInstancesCount": 16,
    "totalImportCount": 15,
    "totalDependencyCount": 9,
    "importDependencies": [
      "explore-project",
      "webpage-types",
      "fs-util",
      "fs-util-js",
      "convert-case",
      "peer-types",
      "database",
      "social-media-types",
      "recursive-util"
    ],
    "packageJsonDependencies": [
      "recursive-util",
      "recursive-types",
      "webpage-types",
      "social-media-types",
      "database",
      "peer-types",
      "explore-project",
      "fs-util",
      "fs-util-js",
      "convert-case"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getAbsolutePathMdFileName",
        "fileName": "src/getAbsolutePathMdFileName.ts",
        "imports": []
      },
      {
        "name": "getAllPostables",
        "fileName": "src/getAllPostables.ts",
        "imports": [
          "getTodoPaths from explore-project",
          "WebPage from webpage-types",
          "getLastFolder from fs-util",
          "withoutExtension from fs-util-js",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "getPersonDetails",
        "fileName": "src/getPersonDetails.ts",
        "imports": [
          "Person from peer-types",
          "db from database"
        ]
      },
      {
        "name": "getPersonsMenu",
        "fileName": "src/getPersonsMenu.ts",
        "imports": [
          "db from database",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getSocialMediaChannelsMenu",
        "fileName": "src/getSocialMediaChannelsMenu.ts",
        "imports": [
          "MediaChannel from social-media-types",
          "db from database",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "getSocialMediaMenu",
        "fileName": "src/getSocialMediaMenu.ts",
        "imports": [
          "getMenuPagesObject from recursive-util",
          "WebPage from webpage-types",
          "NestedWebPage from webpage-types"
        ]
      },
      {
        "name": "getSubExtensions",
        "fileName": "src/getSubExtensions.ts",
        "imports": []
      },
      {
        "name": "hasSubExtension",
        "fileName": "src/hasSubExtension.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getAbsolutePathMdFileName>",
        "fileName": "src/getAbsolutePathMdFileName.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getAllPostables>",
        "fileName": "src/getAllPostables.ts",
        "imports": [
          "getTodoPaths from explore-project",
          "WebPage from webpage-types",
          "getLastFolder from fs-util",
          "withoutExtension from fs-util-js",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "NamedParameters<typeof getPersonDetails>",
        "fileName": "src/getPersonDetails.ts",
        "imports": [
          "Person from peer-types",
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getPersonsMenu>",
        "fileName": "src/getPersonsMenu.ts",
        "imports": [
          "db from database",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSocialMediaChannelsMenu>",
        "fileName": "src/getSocialMediaChannelsMenu.ts",
        "imports": [
          "MediaChannel from social-media-types",
          "db from database",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSocialMediaMenu>",
        "fileName": "src/getSocialMediaMenu.ts",
        "imports": [
          "getMenuPagesObject from recursive-util",
          "WebPage from webpage-types",
          "NestedWebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSubExtensions>",
        "fileName": "src/getSubExtensions.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof hasSubExtension>",
        "fileName": "src/hasSubExtension.ts",
        "imports": []
      }
    ],
    "cumulativeDependencies": [
      "social-media-node",
      "explore-project",
      "k-explore",
      "markdown-types",
      "asset-type",
      "matter-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "make-test",
      "bundle-util",
      "db-util",
      "get-path",
      "log",
      "try-parse-json",
      "sdk-operations",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "js-util",
      "filename-conventions",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "get-package-source-paths",
      "schema-util",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "one-by-one",
      "cleanup-typescript-database",
      "read-markdown-file",
      "read-typescript-file",
      "find-all-dependency-operations",
      "all",
      "markdown-parsings",
      "json-util",
      "recursive-types",
      "markdown-reader-functions",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "fs-orm",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "generate-index",
      "operation-util",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "minify-build",
      "terser",
      "set-json-key",
      "read-json-file",
      "write-to-assets",
      "todo-types",
      "model-types",
      "webpage-types",
      "fs-util",
      "graceful-fs",
      "fs-util-js",
      "convert-case",
      "peer-types",
      "auth-types",
      "geo-types",
      "database",
      "social-media-types",
      "recursive-util",
      "nested-menu-types"
    ]
  },
  {
    "operationName": "social-media-web",
    "totalInstancesCount": 15,
    "totalImportCount": 28,
    "totalDependencyCount": 21,
    "importDependencies": [
      "layout",
      "api",
      "webpage-types",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "todo-types",
      "convert-case",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-with-native-select",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-notification",
      "authentication",
      "fancy-loader"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "@zeit/next-workers",
      "next",
      "next-transpile-modules",
      "react",
      "next-pwa",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-alert",
      "react-with-native-form",
      "react-with-native-modal",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "worker-loader",
      "db-recipes",
      "layout",
      "api",
      "webpage-types",
      "api-store",
      "nested-menu",
      "writer-input",
      "file-tabs",
      "db-crud",
      "todo-types",
      "convert-case",
      "react-with-native-form-inputs",
      "react-with-native-select",
      "react-with-native-notification",
      "authentication",
      "fancy-loader"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Chat",
        "fileName": "src/components/Chat.tsx",
        "imports": []
      },
      {
        "name": "FileWriterPage",
        "fileName": "src/WriterFilePage.tsx",
        "imports": []
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "ToastContainer from react-with-native-notification"
        ]
      },
      {
        "name": "MyLayout",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "queries from api",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "PersonSetting",
        "fileName": "src/components/PersonSetting.tsx",
        "imports": []
      },
      {
        "name": "Person",
        "fileName": "src/components/Person.tsx",
        "imports": []
      },
      {
        "name": "Test",
        "fileName": "src/pages/test.tsx",
        "imports": []
      },
      {
        "name": "TodoMenuHeader",
        "fileName": "src/TodoMenuHeader.tsx",
        "imports": [
          "queries from api",
          "humanCase from convert-case",
          "Div from react-with-native",
          "SelectInput from react-with-native-form-inputs",
          "ToggleInput from react-with-native-form-inputs",
          "Item from react-with-native-select",
          "TodoPagesConfig from todo-types",
          "todoPagesConfigRecencys from todo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof Chat>",
        "fileName": "src/components/Chat.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof FileWriterPage>",
        "fileName": "src/WriterFilePage.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof MyLayout>",
        "fileName": "src/MyLayout.tsx",
        "imports": [
          "AuthenticationLayout from layout",
          "queries from api",
          "WebPage from webpage-types"
        ]
      },
      {
        "name": "NamedParameters<typeof Person>",
        "fileName": "src/components/Person.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof PersonSetting>",
        "fileName": "src/components/PersonSetting.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof Test>",
        "fileName": "src/pages/test.tsx",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof TodoMenuHeader>",
        "fileName": "src/TodoMenuHeader.tsx",
        "imports": [
          "queries from api",
          "humanCase from convert-case",
          "Div from react-with-native",
          "SelectInput from react-with-native-form-inputs",
          "ToggleInput from react-with-native-form-inputs",
          "Item from react-with-native-select",
          "TodoPagesConfig from todo-types",
          "todoPagesConfigRecencys from todo-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "social-media-web",
      "layout",
      "menu",
      "file-search",
      "hotkeys",
      "recursive-util",
      "recursive-types",
      "nested-menu-types",
      "augmented-word-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "bundle-types",
      "model-types",
      "matter-types",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "function-form",
      "simplified-schema-form",
      "js-util",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "name-conventions",
      "pluralize",
      "react-with-native-form-asset-input",
      "react-with-native-form",
      "asset-input",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "asset-view",
      "markdown",
      "react-markdown",
      "markdown-parse-js",
      "frontmatter-util",
      "marked-util",
      "marked",
      "make-test",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "markdown-types",
      "ai-types",
      "filename-conventions",
      "function-server-types",
      "text-or-binary",
      "asset-functions-js",
      "fs-util-js",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "asset-type",
      "react-with-native-ui",
      "sdk-db",
      "code-types",
      "measure-performance",
      "ts-json-schema-generator",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "cool-toast",
      "api-types",
      "sdk-api",
      "react",
      "api",
      "sdk-api-keys",
      "rest-util",
      "webpage-types",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "file-tabs",
      "file-icons",
      "next-paths",
      "db-crud",
      "use-url-store",
      "string-to-json",
      "react-with-native-table",
      "todo-types",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "convert-case",
      "react-with-native",
      "react-with-native-form-inputs",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "react-with-native-modal",
      "react-with-native-notification",
      "react-toastify",
      "authentication",
      "fancy-loader"
    ]
  },
  {
    "operationName": "social-media-wrapper",
    "totalInstancesCount": 43,
    "totalImportCount": 50,
    "totalDependencyCount": 10,
    "importDependencies": [
      "database",
      "social-media-types",
      "markdown-types",
      "todo-types",
      "sdk-db",
      "dev-to-controller",
      "facebook-controller",
      "medium-controller",
      "reddit-controller",
      "twitter-controller"
    ],
    "packageJsonDependencies": [
      "@types/node-cron",
      "dev-to-controller",
      "facebook-controller",
      "medium-controller",
      "node-cron",
      "reddit-controller",
      "social-media-types",
      "twitter-controller",
      "database",
      "markdown-types",
      "todo-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "addSocialMediaCredential",
        "fileName": "src/addSocialMediaCredential.ts",
        "imports": [
          "db from database",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "canBePosted",
        "fileName": "src/createAllSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "createAllSocialMediaPost",
        "fileName": "src/createAllSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "createSocialMediaPost",
        "fileName": "src/createSocialMediaPost.ts",
        "imports": [
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "devtoCotentAnalyzer",
        "fileName": "src/analyzers/devtoContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "facebookContentAnalyzer",
        "fileName": "src/analyzers/facebookContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "getSocialMediaCredentials",
        "fileName": "src/getSocialMediaCredentials.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "mediumCotentAnalyzer",
        "fileName": "src/analyzers/mediumContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "postSocialMediaPostToDevto",
        "fileName": "src/post-on-social-media/postSocialMediaPostToDevto.ts",
        "imports": [
          "db from database",
          "publishBlogOnDevTo from dev-to-controller",
          "MediaCredential from social-media-types",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "postSocialMediaPostToFacebook",
        "fileName": "src/post-on-social-media/postSocialMediaPostToFacebook.ts",
        "imports": [
          "db from database",
          "facebookPost from facebook-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "postSocialMediaPostToMedium",
        "fileName": "src/post-on-social-media/postSocialMediaPostToMedium.ts",
        "imports": [
          "db from database",
          "publishBlogOnMedium from medium-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "postSocialMediaPostToReddit",
        "fileName": "src/post-on-social-media/postSocialMediaPostToReddit.ts",
        "imports": [
          "publishBlogOnReddit from reddit-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "postSocialMediaPostToTwitter",
        "fileName": "src/post-on-social-media/postSocialMediaPostToTwitter.ts",
        "imports": [
          "postTweetOnTwitter from twitter-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "redditContentAnalyzer",
        "fileName": "src/analyzers/redditContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "socialMediaPostPlanner",
        "fileName": "src/socialMediaPostPlanner.ts",
        "imports": [
          "db from database",
          "WebMarkdownFile from markdown-types",
          "TodoFile from todo-types"
        ]
      },
      {
        "name": "startSocialMediaController",
        "fileName": "src/startSocialMediaController.ts",
        "imports": []
      },
      {
        "name": "twitterContentAnalyzer",
        "fileName": "src/analyzers/twitterContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "updateSocialMediaPost",
        "fileName": "src/post-on-social-media/utils/updateSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "CredentialType",
        "fileName": "src/addSocialMediaCredential.ts",
        "imports": [
          "db from database",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "MediaCredential",
        "fileName": "src/post-on-social-media/postSocialMediaPostToDevto.ts",
        "imports": [
          "db from database",
          "publishBlogOnDevTo from dev-to-controller",
          "MediaCredential from social-media-types",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "MediaPlatformEnum",
        "fileName": "src/getSocialMediaCredentials.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "MediaPost",
        "fileName": "src/post-on-social-media/utils/updateSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof addSocialMediaCredential>",
        "fileName": "src/addSocialMediaCredential.ts",
        "imports": [
          "db from database",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof canBePosted>",
        "fileName": "src/createAllSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof createAllSocialMediaPost>",
        "fileName": "src/createAllSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof createSocialMediaPost>",
        "fileName": "src/createSocialMediaPost.ts",
        "imports": [
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof devtoCotentAnalyzer>",
        "fileName": "src/analyzers/devtoContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof facebookContentAnalyzer>",
        "fileName": "src/analyzers/facebookContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getSocialMediaCredentials>",
        "fileName": "src/getSocialMediaCredentials.ts",
        "imports": [
          "db from database",
          "DbModels from sdk-db",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof mediumCotentAnalyzer>",
        "fileName": "src/analyzers/mediumContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof postSocialMediaPostToDevto>",
        "fileName": "src/post-on-social-media/postSocialMediaPostToDevto.ts",
        "imports": [
          "db from database",
          "publishBlogOnDevTo from dev-to-controller",
          "MediaCredential from social-media-types",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof postSocialMediaPostToFacebook>",
        "fileName": "src/post-on-social-media/postSocialMediaPostToFacebook.ts",
        "imports": [
          "db from database",
          "facebookPost from facebook-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof postSocialMediaPostToMedium>",
        "fileName": "src/post-on-social-media/postSocialMediaPostToMedium.ts",
        "imports": [
          "db from database",
          "publishBlogOnMedium from medium-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof postSocialMediaPostToReddit>",
        "fileName": "src/post-on-social-media/postSocialMediaPostToReddit.ts",
        "imports": [
          "publishBlogOnReddit from reddit-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof postSocialMediaPostToTwitter>",
        "fileName": "src/post-on-social-media/postSocialMediaPostToTwitter.ts",
        "imports": [
          "postTweetOnTwitter from twitter-controller",
          "MediaPost from social-media-types",
          "SocialMediaPostTypeReturnType from social-media-types"
        ]
      },
      {
        "name": "NamedParameters<typeof redditContentAnalyzer>",
        "fileName": "src/analyzers/redditContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof socialMediaPostPlanner>",
        "fileName": "src/socialMediaPostPlanner.ts",
        "imports": [
          "db from database",
          "WebMarkdownFile from markdown-types",
          "TodoFile from todo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof startSocialMediaController>",
        "fileName": "src/startSocialMediaController.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof twitterContentAnalyzer>",
        "fileName": "src/analyzers/twitterContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "NamedParameters<typeof updateSocialMediaPost>",
        "fileName": "src/post-on-social-media/utils/updateSocialMediaPost.ts",
        "imports": [
          "db from database",
          "MediaPost from social-media-types"
        ]
      },
      {
        "name": "SocialMediaCrentialType",
        "fileName": "src/addSocialMediaCredential.ts",
        "imports": [
          "db from database",
          "MediaPlatformEnum from social-media-types"
        ]
      },
      {
        "name": "TodoFile",
        "fileName": "src/analyzers/twitterContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      },
      {
        "name": "WebMarkdownFile",
        "fileName": "src/analyzers/twitterContentAnalyzer.ts",
        "imports": [
          "MediaPost from social-media-types",
          "TodoFile from todo-types",
          "WebMarkdownFile from markdown-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "social-media-wrapper",
      "database",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "js-util",
      "social-media-types",
      "geo-types",
      "markdown-types",
      "bundle-types",
      "todo-types",
      "peer-types",
      "auth-types",
      "sdk-db",
      "dev-to-controller",
      "puppeteer-core",
      "puppeteer-utils",
      "puppeteer",
      "browser-types",
      "puppeteer-extra-plugin-recaptcha/dist/types",
      "facebook-controller",
      "medium-controller",
      "reddit-controller",
      "twitter-controller"
    ]
  },
  {
    "operationName": "code-from-anywhere-web",
    "totalInstancesCount": 4,
    "totalImportCount": 15,
    "totalDependencyCount": 11,
    "importDependencies": [
      "markdown-reader-types",
      "react-with-native",
      "layout",
      "next/app",
      "reader-ui",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "next",
      "swipe-homepage"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@builder.io/partytown",
      "@headlessui/react",
      "@next/font",
      "asset-view",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "markdown-reader-types",
      "next",
      "next-a-link",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "reader-ui",
      "rehype-highlight",
      "layout",
      "swipe-homepage"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "getStaticProps",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "Layout",
        "fileName": "src/Layout.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "Div from react-with-native",
          "P from react-with-native",
          "LayoutGrid from layout"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "Partytown from @builder.io/partytown/react",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      }
    ],
    "cumulativeDependencies": [
      "code-from-anywhere-web",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "react-with-native",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "server-api-url",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-modal",
      "react",
      "react-with-native-store",
      "nested-menu",
      "next/app",
      "reader-ui",
      "markdown-reader-functions-js",
      "next-types",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "augmented-word-node",
      "next",
      "swipe-homepage"
    ]
  },
  {
    "operationName": "code-from-bali-web",
    "totalInstancesCount": 4,
    "totalImportCount": 16,
    "totalDependencyCount": 11,
    "importDependencies": [
      "markdown-reader-types",
      "react-with-native",
      "layout",
      "next/app",
      "reader-ui",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "next",
      "swipe-homepage"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@builder.io/partytown",
      "@headlessui/react",
      "@next/font",
      "asset-view",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "markdown-reader-types",
      "next",
      "next-a-link",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "reader-ui",
      "rehype-highlight",
      "layout",
      "swipe-homepage"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "getStaticProps",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "Layout",
        "fileName": "src/Layout.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "Div from react-with-native",
          "P from react-with-native",
          "LayoutGrid from layout"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "Partytown from @builder.io/partytown/react",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      }
    ],
    "cumulativeDependencies": [
      "code-from-bali-web",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "react-with-native",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "server-api-url",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-modal",
      "react",
      "react-with-native-store",
      "nested-menu",
      "next/app",
      "reader-ui",
      "markdown-reader-functions-js",
      "next-types",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "augmented-word-node",
      "next",
      "swipe-homepage"
    ]
  },
  {
    "operationName": "code-from-brazil-web",
    "totalInstancesCount": 4,
    "totalImportCount": 16,
    "totalDependencyCount": 11,
    "importDependencies": [
      "markdown-reader-types",
      "react-with-native",
      "layout",
      "next/app",
      "reader-ui",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "next",
      "swipe-homepage"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@builder.io/partytown",
      "@headlessui/react",
      "@next/font",
      "asset-view",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "markdown-reader-types",
      "next",
      "next-a-link",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "reader-ui",
      "rehype-highlight",
      "layout",
      "swipe-homepage"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "getStaticProps",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "Layout",
        "fileName": "src/Layout.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "Div from react-with-native",
          "P from react-with-native",
          "LayoutGrid from layout"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "Partytown from @builder.io/partytown/react",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      }
    ],
    "cumulativeDependencies": [
      "code-from-brazil-web",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "react-with-native",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "server-api-url",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-modal",
      "react",
      "react-with-native-store",
      "nested-menu",
      "next/app",
      "reader-ui",
      "markdown-reader-functions-js",
      "next-types",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "augmented-word-node",
      "next",
      "swipe-homepage"
    ]
  },
  {
    "operationName": "code-from-nepal-web",
    "totalInstancesCount": 4,
    "totalImportCount": 16,
    "totalDependencyCount": 11,
    "importDependencies": [
      "markdown-reader-types",
      "react-with-native",
      "layout",
      "next/app",
      "reader-ui",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "next",
      "swipe-homepage"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@builder.io/partytown",
      "@headlessui/react",
      "@next/font",
      "asset-view",
      "fs-orm",
      "fs-util",
      "get-path",
      "markdown-reader-functions",
      "markdown-reader-types",
      "next",
      "next-a-link",
      "next-transpile-modules",
      "nightwind",
      "react",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "read-markdown-file",
      "reader-ui",
      "rehype-highlight",
      "layout",
      "swipe-homepage"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getStaticPaths",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "getStaticProps",
        "fileName": "src/pages/[...paths].tsx",
        "imports": []
      },
      {
        "name": "Layout",
        "fileName": "src/Layout.tsx",
        "imports": [
          "MarkdownReaderPageProps from markdown-reader-types",
          "Div from react-with-native",
          "P from react-with-native",
          "LayoutGrid from layout"
        ]
      },
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "MarkdownReaderPageProps from markdown-reader-types",
          "StoreProvider from reader-ui",
          "Partytown from @builder.io/partytown/react",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "publicEnvironmentVariables from sdk-env-public",
          "publicLocalEnvironmentVariables from sdk-env-public"
        ]
      }
    ],
    "cumulativeDependencies": [
      "code-from-nepal-web",
      "markdown-reader-types",
      "bundle-types",
      "model-types",
      "matter-types",
      "webpage-types",
      "convert-case",
      "make-test",
      "recursive-types",
      "augmented-word-types",
      "js-util",
      "markdown-types",
      "asset-type",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "react-with-native",
      "layout",
      "authentication",
      "function-form",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "fs-util",
      "graceful-fs",
      "filename-conventions",
      "frontmatter-util",
      "marked-util",
      "asset-functions-js",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "log",
      "next/router",
      "react-with-native-ui",
      "api-types",
      "sdk-api",
      "cool-toast",
      "big-button",
      "peer-types",
      "auth-types",
      "geo-types",
      "social-media-types",
      "react-with-native-alert",
      "react-native",
      "@headlessui/react",
      "react-with-native-notification",
      "react-toastify",
      "asset-view",
      "server-api-url",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "tooltip",
      "@popperjs/core",
      "ai-types",
      "function-server-types",
      "fancy-loader",
      "api-store",
      "simplified-schema-form",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "writer-input",
      "prompt-components",
      "breadcrumbs",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "api",
      "sdk-api-keys",
      "rest-util",
      "menu",
      "file-search",
      "recursive-util",
      "nested-menu-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "clickable-icon",
      "next-a-link",
      "next/link",
      "share",
      "react-with-native-modal",
      "react",
      "react-with-native-store",
      "nested-menu",
      "next/app",
      "reader-ui",
      "markdown-reader-functions-js",
      "next-types",
      "@builder.io/partytown/react",
      "react-query",
      "sdk-env-public",
      "markdown-reader-functions",
      "augmented-word-node",
      "next",
      "swipe-homepage"
    ]
  },
  {
    "operationName": "course-basics",
    "totalInstancesCount": 20,
    "totalImportCount": 6,
    "totalDependencyCount": 4,
    "importDependencies": [
      "database",
      "ui-util",
      "js-util",
      "fs-util"
    ],
    "packageJsonDependencies": [
      "database",
      "ui-util",
      "js-util",
      "fs-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "alterArrayTest",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "alterObjectTest",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "divideNumber",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "divideNumbers",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "doubleNumber",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "doubleNumbers",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "getHighNumbers",
        "fileName": "src/getHighNumbers.ts",
        "imports": []
      },
      {
        "name": "makeExercises",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "sumNumbers",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "writeExercises",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof alterArrayTest>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof alterObjectTest>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof divideNumber>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof divideNumbers>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof doubleNumber>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof doubleNumbers>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getHighNumbers>",
        "fileName": "src/getHighNumbers.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof makeExercises>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof sumNumbers>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof writeExercises>",
        "fileName": "src/course-basics.ts",
        "imports": [
          "db from database",
          "createCodeblockMarkdown from ui-util",
          "notEmpty from js-util",
          "fs from fs-util",
          "path from fs-util",
          "writeStringToFile from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "course-basics",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "filename-conventions",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "model-types",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "ui-util",
      "js-util",
      "fs-util",
      "graceful-fs",
      "recursive-types"
    ]
  },
  {
    "operationName": "himalayajeep-functions",
    "totalInstancesCount": 14,
    "totalImportCount": 21,
    "totalDependencyCount": 7,
    "importDependencies": [
      "database",
      "server-login",
      "fs-orm",
      "himalayajeep-types",
      "model-types",
      "encrypt-password",
      "geo-types"
    ],
    "packageJsonDependencies": [
      "database",
      "server-login",
      "model-types",
      "fs-orm",
      "himalayajeep-types",
      "geo-types",
      "encrypt-password"
    ],
    "instancesAndTheirImports": [
      {
        "name": "driverLogin",
        "fileName": "src/driverLogin.ts",
        "imports": [
          "db from database",
          "encryptPassword from server-login",
          "comparePassword from server-login"
        ]
      },
      {
        "name": "driverSignup",
        "fileName": "src/driverSignup.ts",
        "imports": [
          "db from database",
          "UpsertQueryConfig from fs-orm",
          "JeepType from himalayajeep-types",
          "SignupJeepType from himalayajeep-types",
          "Creation from model-types",
          "generateRandomString from model-types",
          "isEmail from model-types",
          "isValidPassword from server-login",
          "encryptPassword from encrypt-password"
        ]
      },
      {
        "name": "earthDistance",
        "fileName": "src/earthDistance.ts",
        "imports": []
      },
      {
        "name": "getMyJeep",
        "fileName": "src/getMyJeep.ts",
        "imports": [
          "db from database",
          "MyJeepType from himalayajeep-types"
        ]
      },
      {
        "name": "getPublicJeeps",
        "fileName": "src/getPublicJeeps.ts",
        "imports": [
          "db from database",
          "Position from geo-types",
          "PublicJeepType from himalayajeep-types"
        ]
      },
      {
        "name": "updateMyProfile",
        "fileName": "src/updateMyProfile.ts",
        "imports": [
          "db from database",
          "JeepType from himalayajeep-types",
          "MyJeepType from himalayajeep-types",
          "MyJeepAdminTypes from himalayajeep-types"
        ]
      },
      {
        "name": "NamedParameters<typeof driverLogin>",
        "fileName": "src/driverLogin.ts",
        "imports": [
          "db from database",
          "encryptPassword from server-login",
          "comparePassword from server-login"
        ]
      },
      {
        "name": "NamedParameters<typeof driverSignup>",
        "fileName": "src/driverSignup.ts",
        "imports": [
          "db from database",
          "UpsertQueryConfig from fs-orm",
          "JeepType from himalayajeep-types",
          "SignupJeepType from himalayajeep-types",
          "Creation from model-types",
          "generateRandomString from model-types",
          "isEmail from model-types",
          "isValidPassword from server-login",
          "encryptPassword from encrypt-password"
        ]
      },
      {
        "name": "NamedParameters<typeof earthDistance>",
        "fileName": "src/earthDistance.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getMyJeep>",
        "fileName": "src/getMyJeep.ts",
        "imports": [
          "db from database",
          "MyJeepType from himalayajeep-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getPublicJeeps>",
        "fileName": "src/getPublicJeeps.ts",
        "imports": [
          "db from database",
          "Position from geo-types",
          "PublicJeepType from himalayajeep-types"
        ]
      },
      {
        "name": "NamedParameters<typeof updateMyProfile>",
        "fileName": "src/updateMyProfile.ts",
        "imports": [
          "db from database",
          "JeepType from himalayajeep-types",
          "MyJeepType from himalayajeep-types",
          "MyJeepAdminTypes from himalayajeep-types"
        ]
      },
      {
        "name": "Position",
        "fileName": "src/getPublicJeeps.ts",
        "imports": [
          "db from database",
          "Position from geo-types",
          "PublicJeepType from himalayajeep-types"
        ]
      },
      {
        "name": "SignupJeepType",
        "fileName": "src/driverSignup.ts",
        "imports": [
          "db from database",
          "UpsertQueryConfig from fs-orm",
          "JeepType from himalayajeep-types",
          "SignupJeepType from himalayajeep-types",
          "Creation from model-types",
          "generateRandomString from model-types",
          "isEmail from model-types",
          "isValidPassword from server-login",
          "encryptPassword from encrypt-password"
        ]
      }
    ],
    "cumulativeDependencies": [
      "himalayajeep-functions",
      "database",
      "sdk-db",
      "code-types",
      "pluralize",
      "convert-case",
      "make-test",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "measure-performance",
      "log",
      "js-util",
      "server-login",
      "peer-types",
      "social-media-types",
      "sms",
      "twilio/lib/rest/api/v2010/account/message",
      "persona-functions-node",
      "mail",
      "@sendgrid/mail",
      "function-context-type",
      "server/typings/common",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "get-path",
      "read-json-file",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "write-to-assets",
      "sdk-operations",
      "fs-util-js",
      "auth-types",
      "function-server-types",
      "asset-type",
      "asset-functions-node",
      "set-json-key",
      "ffmpeg-util",
      "one-by-one",
      "fs-orm",
      "schema-util",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "read-markdown-file",
      "himalayajeep-types",
      "model-types",
      "encrypt-password",
      "bcrypt",
      "geo-types"
    ]
  },
  {
    "operationName": "himalayajeep-types",
    "totalInstancesCount": 8,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "model-types",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "model-types",
      "asset-type"
    ],
    "instancesAndTheirImports": [
      {
        "name": "BackendAsset",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "JeepType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "LocationType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "MyJeepAdminTypes",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "MyJeepType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "PublicJeepType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "SignupJeepType",
        "fileName": "src/types.ts",
        "imports": [
          "DefaultModelType from model-types",
          "BackendAsset from asset-type"
        ]
      }
    ],
    "cumulativeDependencies": [
      "himalayajeep-types",
      "model-types",
      "matter-types",
      "asset-type"
    ]
  },
  {
    "operationName": "himalayajeep-ui",
    "totalInstancesCount": 19,
    "totalImportCount": 32,
    "totalDependencyCount": 11,
    "importDependencies": [
      "react-with-native-store",
      "@react-navigation/native-stack",
      "code-types",
      "react-with-native",
      "react-with-native-router",
      "himalayajeep-types",
      "function-form",
      "api-types",
      "react-with-native-alert",
      "api",
      "next-types"
    ],
    "packageJsonDependencies": [
      "@tailwindcss/line-clamp",
      "markdown-parse-js",
      "nested-menu",
      "react-minimal-pie-chart",
      "react-with-native",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "api",
      "function-form",
      "react-with-native-alert",
      "markdown-reader-types",
      "code-types",
      "himalayajeep-types",
      "api-types",
      "@react-navigation/native-stack",
      "next",
      "next-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "EditProfile",
        "fileName": "src/pages/edit-profile.tsx",
        "imports": [
          "FunctionForm from function-form",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "useAlert from react-with-native-alert",
          "FunctionParameter from code-types",
          "queries from api"
        ]
      },
      {
        "name": "getPageTitle",
        "fileName": "src/pages.ts",
        "imports": []
      },
      {
        "name": "getQueryPath",
        "fileName": "src/util/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      },
      {
        "name": "JeepList",
        "fileName": "src/pages/jeep-list.tsx",
        "imports": [
          "queries from api",
          "api from api"
        ]
      },
      {
        "name": "JeepLogin",
        "fileName": "src/pages/jeep-login.tsx",
        "imports": [
          "FunctionForm from function-form",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "JeepSignupPage",
        "fileName": "src/pages/jeep-signup.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "useAlert from react-with-native-alert",
          "FunctionForm from function-form",
          "RealApiReturnType from api-types"
        ]
      },
      {
        "name": "JeepView",
        "fileName": "src/pages/jeep-view.tsx",
        "imports": [
          "P from react-with-native"
        ]
      },
      {
        "name": "Layout",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "MenuItem",
        "fileName": "src/components/MenuItem.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "PublicJeep",
        "fileName": "src/components/PublicJeep.tsx",
        "imports": [
          "PublicJeepType from himalayajeep-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof EditProfile>",
        "fileName": "src/pages/edit-profile.tsx",
        "imports": [
          "FunctionForm from function-form",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "useAlert from react-with-native-alert",
          "FunctionParameter from code-types",
          "queries from api"
        ]
      },
      {
        "name": "NamedParameters<typeof getQueryPath>",
        "fileName": "src/util/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      },
      {
        "name": "NamedParameters<typeof JeepList>",
        "fileName": "src/pages/jeep-list.tsx",
        "imports": [
          "queries from api",
          "api from api"
        ]
      },
      {
        "name": "NamedParameters<typeof JeepLogin>",
        "fileName": "src/pages/jeep-login.tsx",
        "imports": [
          "FunctionForm from function-form",
          "P from react-with-native",
          "RealApiReturnType from api-types",
          "useAlert from react-with-native-alert"
        ]
      },
      {
        "name": "NamedParameters<typeof JeepView>",
        "fileName": "src/pages/jeep-view.tsx",
        "imports": [
          "P from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof Layout>",
        "fileName": "src/components/Layout.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "useRouter from react-with-native-router"
        ]
      },
      {
        "name": "NamedParameters<typeof PublicJeep>",
        "fileName": "src/components/PublicJeep.tsx",
        "imports": [
          "PublicJeepType from himalayajeep-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "ParsedUrlQuery",
        "fileName": "src/util/getQueryPath.ts",
        "imports": [
          "ParsedUrlQuery from next-types"
        ]
      },
      {
        "name": "PublicJeepType",
        "fileName": "src/components/PublicJeep.tsx",
        "imports": [
          "PublicJeepType from himalayajeep-types",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      }
    ],
    "cumulativeDependencies": [
      "himalayajeep-ui",
      "react-with-native-store",
      "react",
      "@react-navigation/native-stack",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "himalayajeep-types",
      "asset-type",
      "function-form",
      "simplified-schema-form",
      "clickable-icon",
      "js-util",
      "big-button",
      "schema-util",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-native",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "writer-input",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "asset-functions-js",
      "text-or-binary",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "api-types",
      "sdk-api",
      "react-query",
      "react-with-native-alert",
      "@headlessui/react",
      "api",
      "sdk-api-keys",
      "rest-util",
      "next-types"
    ]
  },
  {
    "operationName": "himalayajeep-web",
    "totalInstancesCount": 1,
    "totalImportCount": 12,
    "totalDependencyCount": 4,
    "importDependencies": [
      "next/app",
      "react-query",
      "react-with-native-alert",
      "himalayajeep-ui"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@headlessui/react",
      "next-transpile-modules",
      "nightwind",
      "react",
      "next",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-markdown",
      "react-query",
      "react-with-native",
      "react-with-native-form",
      "react-with-native-router",
      "react-with-native-store",
      "rehype-highlight",
      "reader-ui",
      "bundle-util",
      "fs-util",
      "read-markdown-file",
      "fs-orm",
      "get-path",
      "react-with-native-alert",
      "himalayajeep-ui"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "AlertProvider from react-with-native-alert",
          "MainPageProps from himalayajeep-ui",
          "StoreProvider from himalayajeep-ui"
        ]
      }
    ],
    "cumulativeDependencies": [
      "himalayajeep-web",
      "next/app",
      "react-query",
      "react-with-native-alert",
      "react-native",
      "react",
      "@headlessui/react",
      "react-with-native",
      "himalayajeep-ui",
      "react-with-native-store",
      "@react-navigation/native-stack",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "make-test",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "himalayajeep-types",
      "asset-type",
      "function-form",
      "simplified-schema-form",
      "clickable-icon",
      "js-util",
      "big-button",
      "schema-util",
      "log",
      "fancy-loader",
      "react-with-native-form-inputs",
      "react-with-native-form",
      "react-dropzone",
      "react-map-gl",
      "react-with-native-select",
      "name-conventions",
      "writer-input",
      "filename-conventions",
      "fs-util-js",
      "prompt-components",
      "ai-types",
      "recursive-types",
      "function-server-types",
      "asset-functions-js",
      "text-or-binary",
      "frontmatter-util",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "react-with-native-modal",
      "try-parse-json",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-ui",
      "sdk-db",
      "cool-toast",
      "react-with-native-notification",
      "react-toastify",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "api-types",
      "sdk-api",
      "api",
      "sdk-api-keys",
      "rest-util",
      "next-types"
    ]
  },
  {
    "operationName": "migrate-operation-model",
    "totalInstancesCount": 12,
    "totalImportCount": 18,
    "totalDependencyCount": 11,
    "importDependencies": [
      "get-path",
      "all",
      "database",
      "log",
      "code-types",
      "fs-util",
      "read-markdown-file",
      "read-json-file",
      "js-util",
      "write-to-assets",
      "model-types"
    ],
    "packageJsonDependencies": [
      "get-path",
      "all",
      "database",
      "log",
      "code-types",
      "fs-util",
      "read-markdown-file",
      "read-json-file",
      "js-util",
      "write-to-assets",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "migratePackageJsonToOperation",
        "fileName": "src/migratePackageJsonToOperation.cli.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "forAllFolders from all",
          "db from database",
          "log from log",
          "Operation from code-types",
          "getLastFolder from fs-util",
          "path from fs-util",
          "readMarkdownFile from read-markdown-file",
          "readJsonFile from read-json-file",
          "destructureOptionalObject from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "AnyModelType",
        "fileName": "src/PackageJson.ts",
        "imports": [
          "OperationClassification from code-types",
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "FolderSummary",
        "fileName": "src/OperationIndex.ts",
        "imports": [
          "SlugModelType from model-types",
          "FolderSummary from code-types",
          "CategorizedFilePaths from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "GeneralOperationIndex",
        "fileName": "src/OperationIndex.ts",
        "imports": [
          "SlugModelType from model-types",
          "FolderSummary from code-types",
          "CategorizedFilePaths from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "NamedParameters<typeof migratePackageJsonToOperation>",
        "fileName": "src/migratePackageJsonToOperation.cli.ts",
        "imports": [
          "getPathsWithOperations from get-path",
          "forAllFolders from all",
          "db from database",
          "log from log",
          "Operation from code-types",
          "getLastFolder from fs-util",
          "path from fs-util",
          "readMarkdownFile from read-markdown-file",
          "readJsonFile from read-json-file",
          "destructureOptionalObject from js-util",
          "writeToAssets from write-to-assets"
        ]
      },
      {
        "name": "OperationClassification",
        "fileName": "src/PackageJson.ts",
        "imports": [
          "OperationClassification from code-types",
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "OperationConfig",
        "fileName": "src/OperationConfig.ts",
        "imports": [
          "MarkdownModelType from model-types"
        ]
      },
      {
        "name": "OperationIndex",
        "fileName": "src/OperationIndex.ts",
        "imports": [
          "SlugModelType from model-types",
          "FolderSummary from code-types",
          "CategorizedFilePaths from code-types",
          "OperationClassification from code-types"
        ]
      },
      {
        "name": "PackageInfoObject",
        "fileName": "src/PackageJson.ts",
        "imports": [
          "OperationClassification from code-types",
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "PackageJson",
        "fileName": "src/PackageJson.ts",
        "imports": [
          "OperationClassification from code-types",
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "SensibleConfig",
        "fileName": "src/PackageJson.ts",
        "imports": [
          "OperationClassification from code-types",
          "AnyModelType from model-types"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/OperationIndex.ts",
        "imports": [
          "SlugModelType from model-types",
          "FolderSummary from code-types",
          "CategorizedFilePaths from code-types",
          "OperationClassification from code-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "migrate-operation-model",
      "get-path",
      "try-parse-json",
      "k-explore",
      "markdown-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "pluralize",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "sdk-operations",
      "fs-util-js",
      "filename-conventions",
      "all",
      "markdown-parsings",
      "find-all-dependency-operations",
      "json-util",
      "bundle-util",
      "db-util",
      "recursive-types",
      "json-schema",
      "markdown-reader-functions",
      "webpage-types",
      "next-types",
      "markdown-reader-types",
      "augmented-word-types",
      "recursive-util",
      "nested-menu-types",
      "fs-orm",
      "measure-performance",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-kvmd-file",
      "sdk-db",
      "markdown-reader-functions-js",
      "augmented-word-node",
      "schema-util",
      "rebuild-operation",
      "run-child-process",
      "get-package-json",
      "cleanup-typescript-database",
      "generate-index",
      "operation-util",
      "path-util",
      "index-typescript",
      "ts-morph",
      "get-imported-dependencies",
      "ts-morph-util",
      "ts-json-schema-generator",
      "comment-util",
      "lodash",
      "watch-types",
      "get-imports-exports",
      "typescript",
      "get-package-source-paths",
      "lint",
      "get-ts-config",
      "folder-get-updated-at",
      "one-by-one",
      "minify-build",
      "terser",
      "set-json-key",
      "database",
      "log",
      "code-types",
      "fs-util",
      "graceful-fs",
      "read-markdown-file",
      "read-json-file",
      "js-util",
      "write-to-assets",
      "model-types"
    ]
  },
  {
    "operationName": "passionfruit-web",
    "totalInstancesCount": 1,
    "totalImportCount": 22,
    "totalDependencyCount": 7,
    "importDependencies": [
      "next/app",
      "react-query",
      "passionfruit-ui",
      "react-with-native-notification",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-router"
    ],
    "packageJsonDependencies": [
      "@badrap/bar-of-progress",
      "@floating-ui/react-dom-interactions",
      "@heroicons/react",
      "chart.js",
      "elkjs",
      "next",
      "next-transpile-modules",
      "rc-time-picker",
      "react",
      "react-autosuggest",
      "react-chartjs-2",
      "react-datepicker",
      "react-datetime",
      "react-dom",
      "react-dropzone",
      "react-flow-renderer",
      "react-map-gl",
      "react-merge-refs",
      "react-query",
      "react-stars",
      "react-with-native",
      "react-with-native-router",
      "react-with-native-store",
      "web-worker",
      "passionfruit-ui",
      "react-with-native-notification",
      "react-with-native-alert",
      "react-with-native-modal"
    ],
    "instancesAndTheirImports": [
      {
        "name": "MyApp",
        "fileName": "src/pages/_app.tsx",
        "imports": [
          "AppProps from next/app",
          "QueryClient from react-query",
          "QueryClientProvider from react-query",
          "StoreProvider from passionfruit-ui",
          "pagesObject from passionfruit-ui",
          "pages from passionfruit-ui",
          "getPageTitle from passionfruit-ui",
          "ToastContainer from react-with-native-notification",
          "AlertProvider from react-with-native-alert",
          "ModalProvider from react-with-native-modal",
          "useRouter from react-with-native-router"
        ]
      }
    ],
    "cumulativeDependencies": [
      "passionfruit-web",
      "next/app",
      "react-query",
      "passionfruit-ui",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "webpage-types",
      "recursive-types",
      "nested-menu-types",
      "next-a-link",
      "fs-util-js",
      "writer-input",
      "clickable-icon",
      "cool-toast",
      "api-types",
      "sdk-api",
      "filename-conventions",
      "prompt-components",
      "ai-types",
      "function-server-types",
      "sdk-db",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "asset-type",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "matter-types",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "measure-performance",
      "try-parse-json",
      "db-crud",
      "rest-util",
      "react-with-native-table",
      "@react-navigation/native-stack",
      "react",
      "@heroicons/react/solid",
      "@heroicons/react/outline",
      "foodchain-types",
      "api",
      "sdk-api-keys",
      "geo-types",
      "use-url-store",
      "string-to-json",
      "react-with-native",
      "js-util",
      "react-with-native-form",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-form-inputs",
      "react-dropzone",
      "react-map-gl",
      "next/link",
      "convert-case",
      "elkjs",
      "react-flow-renderer",
      "@headlessui/react",
      "@floating-ui/dom",
      "react-with-native-select",
      "@floating-ui/react-dom-interactions",
      "react-merge-refs",
      "react-with-native-ui",
      "chart.js",
      "react-chartjs-2",
      "code-types",
      "ts-json-schema-generator",
      "foodchain-recipes-js",
      "model-types",
      "react-toastify",
      "react-native",
      "react-with-native-notification",
      "react-with-native-alert",
      "react-with-native-modal",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router"
    ]
  },
  {
    "operationName": "foodchain-recipes",
    "totalInstancesCount": 45,
    "totalImportCount": 64,
    "totalDependencyCount": 6,
    "importDependencies": [
      "foodchain-types",
      "geo-types",
      "js-util",
      "foodchain-recipes-js",
      "database",
      "model-types"
    ],
    "packageJsonDependencies": [
      "database",
      "foodchain-types",
      "js-util",
      "geo-types",
      "foodchain-recipes-js",
      "model-types"
    ],
    "instancesAndTheirImports": [
      {
        "name": "calculateFullCompany",
        "fileName": "src/company/calculateFullCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "Contribution from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "companyAttachContributionInformation",
        "fileName": "src/company/companyAttachContributionInformation.ts",
        "imports": [
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "Location from geo-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "companyAttachEsgMetricProofStates",
        "fileName": "src/company/companyAttachEsgMetricProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types"
        ]
      },
      {
        "name": "companyAttachRequirements",
        "fileName": "src/company/companyAttachRequirements.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "ProofState from foodchain-types",
          "requirementAppliesToCompany from foodchain-recipes-js"
        ]
      },
      {
        "name": "companyAttachTransparency",
        "fileName": "src/company/companyAttachTransparency.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "concatenateItems",
        "fileName": "src/util/concatenateItems.ts",
        "imports": [
          "onlyUnique2 from js-util",
          "AugmentedAnyModelType from model-types"
        ]
      },
      {
        "name": "contributionAddNextContributions",
        "fileName": "src/contribution/contributionAddNextContributions.ts",
        "imports": [
          "Contribution from foodchain-types"
        ]
      },
      {
        "name": "getActivities",
        "fileName": "src/endpoints/getActivities.ts",
        "imports": [
          "db from database",
          "Activity from foodchain-types",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "getAverage",
        "fileName": "src/util/getAverage.ts",
        "imports": []
      },
      {
        "name": "getCompanies",
        "fileName": "src/endpoints/getCompanies.ts",
        "imports": [
          "db from database",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "getFinalProducts",
        "fileName": "src/endpoints/getFinalProducts.ts",
        "imports": [
          "db from database",
          "ProductValueChain from foodchain-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "getFullCompanyData",
        "fileName": "src/company/getFullCompanyData.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getIngredientProducts",
        "fileName": "src/endpoints/getIngredientProducts.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getProductValueChainForProduct",
        "fileName": "src/product-value-chain/getProductValueChainForProduct.ts",
        "imports": [
          "Company from foodchain-types",
          "Product from foodchain-types",
          "ProductValueChain from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "getProductValueChain",
        "fileName": "src/endpoints/getProductValueChain.ts",
        "imports": [
          "db from database",
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "getRequiredValueChainData",
        "fileName": "src/product-value-chain/getRequiredValueChainData.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "getSustainabilityPlan",
        "fileName": "src/endpoints/getSustainabilityPlan.ts",
        "imports": [
          "db from database",
          "CompanyRequirement from foodchain-types",
          "SustainabilityPlan from foodchain-types",
          "requirementAppliesToCompany from foodchain-recipes-js"
        ]
      },
      {
        "name": "hasEsgMetricWithStatus",
        "fileName": "src/esg-metrics/hasEsgMetricWithStatus.ts",
        "imports": [
          "EsgMetric from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types"
        ]
      },
      {
        "name": "requirementAttachProofStates",
        "fileName": "src/company-requirement/requirementAttachProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "ProofState from foodchain-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "sumEsgMetricProofStates",
        "fileName": "src/esg-metrics/sumEsgMetricProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "Company",
        "fileName": "src/product-value-chain/getProductValueChainForProduct.ts",
        "imports": [
          "Company from foodchain-types",
          "Product from foodchain-types",
          "ProductValueChain from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "CompanyRequirement",
        "fileName": "src/company-requirement/requirementAttachProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "ProofState from foodchain-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "Contribution",
        "fileName": "src/contribution/contributionAddNextContributions.ts",
        "imports": [
          "Contribution from foodchain-types"
        ]
      },
      {
        "name": "EsgMetric",
        "fileName": "src/esg-metrics/sumEsgMetricProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/company/companyAttachContributionInformation.ts",
        "imports": [
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "Location from geo-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof calculateFullCompany>",
        "fileName": "src/company/calculateFullCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "Contribution from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types",
          "Location from geo-types"
        ]
      },
      {
        "name": "NamedParameters<typeof companyAttachContributionInformation>",
        "fileName": "src/company/companyAttachContributionInformation.ts",
        "imports": [
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "Location from geo-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof companyAttachEsgMetricProofStates>",
        "fileName": "src/company/companyAttachEsgMetricProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof companyAttachRequirements>",
        "fileName": "src/company/companyAttachRequirements.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "ProofState from foodchain-types",
          "requirementAppliesToCompany from foodchain-recipes-js"
        ]
      },
      {
        "name": "NamedParameters<typeof companyAttachTransparency>",
        "fileName": "src/company/companyAttachTransparency.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof contributionAddNextContributions>",
        "fileName": "src/contribution/contributionAddNextContributions.ts",
        "imports": [
          "Contribution from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getActivities>",
        "fileName": "src/endpoints/getActivities.ts",
        "imports": [
          "db from database",
          "Activity from foodchain-types",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAverage>",
        "fileName": "src/util/getAverage.ts",
        "imports": []
      },
      {
        "name": "NamedParameters<typeof getCompanies>",
        "fileName": "src/endpoints/getCompanies.ts",
        "imports": [
          "db from database",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getFinalProducts>",
        "fileName": "src/endpoints/getFinalProducts.ts",
        "imports": [
          "db from database",
          "ProductValueChain from foodchain-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getFullCompanyData>",
        "fileName": "src/company/getFullCompanyData.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getIngredientProducts>",
        "fileName": "src/endpoints/getIngredientProducts.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getProductValueChain>",
        "fileName": "src/endpoints/getProductValueChain.ts",
        "imports": [
          "db from database",
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getProductValueChainForProduct>",
        "fileName": "src/product-value-chain/getProductValueChainForProduct.ts",
        "imports": [
          "Company from foodchain-types",
          "Product from foodchain-types",
          "ProductValueChain from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof getRequiredValueChainData>",
        "fileName": "src/product-value-chain/getRequiredValueChainData.ts",
        "imports": [
          "db from database"
        ]
      },
      {
        "name": "NamedParameters<typeof getSustainabilityPlan>",
        "fileName": "src/endpoints/getSustainabilityPlan.ts",
        "imports": [
          "db from database",
          "CompanyRequirement from foodchain-types",
          "SustainabilityPlan from foodchain-types",
          "requirementAppliesToCompany from foodchain-recipes-js"
        ]
      },
      {
        "name": "NamedParameters<typeof requirementAttachProofStates>",
        "fileName": "src/company-requirement/requirementAttachProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "ProofState from foodchain-types",
          "Creation from model-types"
        ]
      },
      {
        "name": "NamedParameters<typeof sumEsgMetricProofStates>",
        "fileName": "src/esg-metrics/sumEsgMetricProofStates.ts",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "Product",
        "fileName": "src/product-value-chain/getProductValueChainForProduct.ts",
        "imports": [
          "Company from foodchain-types",
          "Product from foodchain-types",
          "ProductValueChain from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "ProofState",
        "fileName": "src/product-value-chain/getProductValueChainForProduct.ts",
        "imports": [
          "Company from foodchain-types",
          "Product from foodchain-types",
          "ProductValueChain from foodchain-types",
          "ProofState from foodchain-types",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "foodchain-recipes",
      "foodchain-types",
      "asset-type",
      "geo-types",
      "js-util",
      "foodchain-recipes-js",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "try-parse-json",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "get-path",
      "fs-util-js",
      "k-explore",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "model-types"
    ]
  },
  {
    "operationName": "foodchain-recipes-js",
    "totalInstancesCount": 6,
    "totalImportCount": 5,
    "totalDependencyCount": 2,
    "importDependencies": [
      "foodchain-types",
      "js-util"
    ],
    "packageJsonDependencies": [
      "foodchain-types",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "getCompanyRequirementDescription",
        "fileName": "src/getCompanyRequirementDescription.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "requirementAppliesToCompany",
        "fileName": "src/requirementAppliesToCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "Company",
        "fileName": "src/requirementAppliesToCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "CompanyRequirement",
        "fileName": "src/requirementAppliesToCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCompanyRequirementDescription>",
        "fileName": "src/getCompanyRequirementDescription.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "notEmpty from js-util"
        ]
      },
      {
        "name": "NamedParameters<typeof requirementAppliesToCompany>",
        "fileName": "src/requirementAppliesToCompany.ts",
        "imports": [
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types"
        ]
      }
    ],
    "cumulativeDependencies": [
      "foodchain-recipes-js",
      "foodchain-types",
      "model-types",
      "matter-types",
      "geo-types",
      "asset-type",
      "js-util"
    ]
  },
  {
    "operationName": "foodchain-types",
    "totalInstancesCount": 46,
    "totalImportCount": 11,
    "totalDependencyCount": 3,
    "importDependencies": [
      "model-types",
      "geo-types",
      "asset-type"
    ],
    "packageJsonDependencies": [
      "model-types",
      "geo-types",
      "asset-type"
    ],
    "instancesAndTheirImports": [
      {
        "name": "Activity",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "BackendAsset",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanyRequirement",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanySize",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanyType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Company",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanyRequirement",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanySize",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "CompanyType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ContactInformation",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ContactInformation",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Contribution",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "DefaultModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "EsgMetric",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "EsgMetric",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "EsgMetricStatus",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Id",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "KeyValueMarkdownModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Location",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Markdown",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "PhoneNumber",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "PhoneNumber",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductCategory",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductValueChain",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Product",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductCategory",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProductValueChain",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProgressBarMultiple",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProgressBarMultiple",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProofState",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Proof",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProofState",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ProofStateStatus",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "SlugModelType",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "SustainabilityPlan",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "SustainabilityPlan",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "TransparencyDetailsCalculated",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "TransparencyDetailsCalculated",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ValueChainPhase",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      },
      {
        "name": "ValueChainPhase",
        "fileName": "src/FoodChain.ts",
        "imports": [
          "DefaultModelType from model-types",
          "Markdown from model-types",
          "PhoneNumber from model-types",
          "Slug from model-types",
          "SlugModelType from model-types",
          "Id from model-types",
          "KeyValueMarkdownModelType from model-types",
          "Creation from model-types",
          "Location from geo-types",
          "Asset from asset-type",
          "BackendAsset from asset-type"
        ]
      }
    ],
    "cumulativeDependencies": [
      "foodchain-types",
      "model-types",
      "matter-types",
      "geo-types",
      "asset-type"
    ]
  },
  {
    "operationName": "passionfruit-ui",
    "totalInstancesCount": 101,
    "totalImportCount": 713,
    "totalDependencyCount": 40,
    "importDependencies": [
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "writer-input",
      "db-crud",
      "@react-navigation/native-stack",
      "react",
      "@heroicons/react/solid",
      "@heroicons/react/outline",
      "foodchain-types",
      "react-query",
      "api",
      "geo-types",
      "use-url-store",
      "react-with-native",
      "react-with-native-router",
      "js-util",
      "react-with-native-form",
      "react-with-native-alert",
      "react-with-native-notification",
      "react-with-native-modal",
      "react-with-native-form-asset-input",
      "react-with-native-form-inputs",
      "next/link",
      "convert-case",
      "elkjs",
      "react-flow-renderer",
      "@headlessui/react",
      "@floating-ui/dom",
      "react-with-native-select",
      "@floating-ui/react-dom-interactions",
      "react-merge-refs",
      "react-with-native-ui",
      "chart.js",
      "react-chartjs-2",
      "code-types",
      "foodchain-recipes-js",
      "model-types",
      "react-toastify",
      "react-native"
    ],
    "packageJsonDependencies": [
      "react-with-native-store",
      "foodchain-types",
      "api",
      "use-url-store",
      "react-with-native",
      "react-with-native-router",
      "js-util",
      "react-with-native-select",
      "foodchain-recipes",
      "react-with-native-alert",
      "react-with-native-notification",
      "react-with-native-modal",
      "react-with-native-form-asset-input",
      "react-with-native-form-inputs",
      "convert-case",
      "react-with-native-ui",
      "code-types",
      "foodchain-recipes-js",
      "model-types",
      "geo-types",
      "react-with-native-form",
      "@react-navigation/native-stack",
      "@heroicons/react",
      "elkjs",
      "react-flow-renderer",
      "@floating-ui/dom",
      "@floating-ui/react-dom-interactions",
      "react-merge-refs",
      "chart.js",
      "react-chartjs-2",
      "react-toastify",
      "react",
      "react-query",
      "next",
      "react-native",
      "api-store",
      "nested-menu",
      "writer-input",
      "db-crud",
      "@headlessui/react"
    ],
    "instancesAndTheirImports": [
      {
        "name": "AdminLinks",
        "fileName": "src/components/presentational/side-menu/components/AdminLinks.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "ALink",
        "fileName": "src/components/containers/ALinks/ALink.tsx",
        "imports": [
          "LinkProps from next/link",
          "A from react-with-native",
          "AType from react-with-native"
        ]
      },
      {
        "name": "AverageMetricDougnut",
        "fileName": "src/components/containers/charts/circle/AverageStatusses.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Doughnut from react-chartjs-2"
        ]
      },
      {
        "name": "AverageTransparencyDougnut",
        "fileName": "src/components/containers/charts/circle/AverageTransparencyDougnut.tsx",
        "imports": [
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Doughnut from react-chartjs-2"
        ]
      },
      {
        "name": "CardRow",
        "fileName": "src/components/containers/value-chain/components/Cards.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "P from react-with-native",
          "ReactNode from react",
          "MouseEventHandler from react",
          "useEffect from react",
          "Contribution from foodchain-types",
          "useLayoutEffect from react",
          "useRef from react",
          "useUpdateNodeInternals from react-flow-renderer"
        ]
      },
      {
        "name": "CompanyInfoTab",
        "fileName": "src/components/containers/tabs/CompanyInfoTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "CompanyInfo",
        "fileName": "src/components/containers/company-info/CompanyInfo.tsx",
        "imports": [
          "Div from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "ContributionNodeComponent",
        "fileName": "src/components/containers/value-chain/components/ContributionNodeComponent.tsx",
        "imports": [
          "useCallback from react",
          "ComponentType from react",
          "Handle from react-flow-renderer",
          "Position from react-flow-renderer",
          "NodeProps from react-flow-renderer",
          "Div from react-with-native",
          "Contribution from foodchain-types"
        ]
      },
      {
        "name": "CountriesHorizontalBar",
        "fileName": "src/components/containers/charts/horizontal-bars/CountriesHorizontalBar.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Bar from react-chartjs-2"
        ]
      },
      {
        "name": "EnvironmentTab",
        "fileName": "src/components/containers/tabs/EnvironmentTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "EsgPerformance",
        "fileName": "src/components/containers/esg-metrics/EsgPerformance.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types"
        ]
      },
      {
        "name": "FilterContainer",
        "fileName": "src/components/containers/Filters/FilterContainer.tsx",
        "imports": [
          "Company from foodchain-types",
          "useState from react",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "getAverageCompanies",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "getAverageTransparency",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "getCompanyToDos",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "getCompanyTransparency",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "getMappedProducts",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "getPageIcon",
        "fileName": "src/pages.ts",
        "imports": []
      },
      {
        "name": "getPageTitle",
        "fileName": "src/pages.ts",
        "imports": []
      },
      {
        "name": "getValueChainlength",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "GoalsOverview",
        "fileName": "src/components/containers/charts/tables/GoalOverview.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "GoalsTab",
        "fileName": "src/components/containers/tabs/GoalsTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "ListHeader",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "ListItem",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "List",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "Page",
        "fileName": "src/pages/companies.tsx",
        "imports": [
          "Div from react-with-native",
          "Company from foodchain-types",
          "CompanyRequirement from foodchain-types",
          "useState from react"
        ]
      },
      {
        "name": "PhaseNodeComponent",
        "fileName": "src/components/containers/value-chain/components/PhaseNodeComponent.tsx",
        "imports": [
          "useCallback from react",
          "ComponentType from react",
          "Handle from react-flow-renderer",
          "Position from react-flow-renderer",
          "NodeProps from react-flow-renderer",
          "Div from react-with-native",
          "P from react-with-native",
          "ValueChainPhase from foodchain-types",
          "Icons from react-toastify"
        ]
      },
      {
        "name": "PriorityChip",
        "fileName": "src/components/containers/requirements/components/PriorityChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "ProofStateForm",
        "fileName": "src/components/containers/forms/requirement/ProofStateForm.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "api from api",
          "Creation from model-types",
          "Slug from model-types",
          "getObjectKeysArray from js-util",
          "omitUndefinedValues from js-util",
          "Item from react-with-native-select",
          "Div from react-with-native"
        ]
      },
      {
        "name": "ProofStatusChip",
        "fileName": "src/components/containers/requirements/components/ProofStatusChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Proof from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "ProofValueChip",
        "fileName": "src/components/containers/requirements/components/ProofValueChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Proof from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "RenderCompanyEsgPolarArea",
        "fileName": "src/components/containers/charts/polar-area/renderPolarAreaESG.tsx",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderCompanyESGdetails",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "renderEsgMetrics",
        "fileName": "src/components/containers/analytics/esg-performance/functions/getESGMetrics.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "renderEsgProgressBar",
        "fileName": "src/components/containers/charts/progress-bars/renderEsgProgressBar.tsx",
        "imports": [
          "Company from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderESGMetricdetails",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "renderGetArrayLength",
        "fileName": "src/components/containers/table/RenderGetArrayLength.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderGetArrayNames",
        "fileName": "src/components/containers/table/RenderGetArrayNames.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "renderGetArray",
        "fileName": "src/components/containers/table/RenderGetArray.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderGetCategoryIcons",
        "fileName": "src/components/containers/labels/RenderGetCategoryIcons.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderGetCategoryLabel",
        "fileName": "src/components/containers/labels/RenderGetCategoryIcons.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderGetCompanyLogo",
        "fileName": "src/components/containers/labels/RenderGetCategoryIcons.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "renderGetCompanyTranspTooltip",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "RenderGetEnvPerformance",
        "fileName": "src/components/containers/charts/progress-bars/ProgressBarMultiple.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "renderGetIconText",
        "fileName": "src/components/containers/table/RenderGetIconText.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetMainLink",
        "fileName": "src/components/containers/table/RenderGetMainLink.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetPriority",
        "fileName": "src/components/containers/chips/RenderGetPriority.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "renderGetProgressBarSingle",
        "fileName": "src/components/containers/charts/progress-bars/ProgressBarSingle.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "renderGetProofState",
        "fileName": "src/components/containers/requirements/RenderGetProofState.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "renderGetRequirementStatus",
        "fileName": "src/components/containers/charts/getRequirementStatus.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "Div from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetRequirement",
        "fileName": "src/components/containers/requirements/RenderGetRequirement.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetSidePanel",
        "fileName": "src/components/containers/table/RenderGetSidepanel.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetStaticIconArray",
        "fileName": "src/components/containers/table/RenderGetIconText.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "renderGetSumArray",
        "fileName": "src/components/containers/table/RenderGetSumArray.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "renderGetSummarizedArray",
        "fileName": "src/components/containers/table/RenderGetSummarizedArray.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "renderGetTier",
        "fileName": "src/components/containers/table/RenderGetTier.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "notEmpty from js-util",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "renderMetricProgressBar",
        "fileName": "src/components/containers/esg-metrics/EsgPerformance.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types"
        ]
      },
      {
        "name": "renderNestedText",
        "fileName": "src/components/containers/table/RenderGetProductInfo.tsx",
        "imports": [
          "Div from react-with-native"
        ]
      },
      {
        "name": "SearchField",
        "fileName": "src/components/containers/Filters/SearchField.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "SideMenu",
        "fileName": "src/components/presentational/side-menu/index.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "SocialTab",
        "fileName": "src/components/containers/tabs/SocialTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "sortedArray",
        "fileName": "src/components/containers/sortedArray.tsx",
        "imports": []
      },
      {
        "name": "TabContent",
        "fileName": "src/components/containers/tabs/components/TabContent.tsx",
        "imports": [
          "ReactNode from react",
          "Div from react-with-native",
          "P from react-with-native"
        ]
      },
      {
        "name": "TooltipGroup",
        "fileName": "src/components/containers/charts/progress-bars/RenderGetTooltip.tsx",
        "imports": [
          "Div from react-with-native",
          "Label from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "humanCase from convert-case"
        ]
      },
      {
        "name": "ValueChainCard",
        "fileName": "src/components/containers/value-chain/components/Cards.tsx",
        "imports": [
          "Div from react-with-native",
          "Span from react-with-native",
          "P from react-with-native",
          "ReactNode from react",
          "MouseEventHandler from react",
          "useEffect from react",
          "Contribution from foodchain-types",
          "useLayoutEffect from react",
          "useRef from react",
          "useUpdateNodeInternals from react-flow-renderer"
        ]
      },
      {
        "name": "ValueChainConnectionsForm",
        "fileName": "src/components/containers/forms/contribution/valueChainConnectionsForm.tsx",
        "imports": [
          "Div from react-with-native",
          "Item from react-with-native-select",
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "ValueChainPhase from foodchain-types",
          "Creation from model-types",
          "api from api"
        ]
      },
      {
        "name": "Company",
        "fileName": "src/components/containers/tabs/SocialTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "CompanyRequirement",
        "fileName": "src/components/containers/requirements/components/PriorityChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "Contribution",
        "fileName": "src/components/containers/forms/contribution/valueChainConnectionsForm.tsx",
        "imports": [
          "Div from react-with-native",
          "Item from react-with-native-select",
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "ValueChainPhase from foodchain-types",
          "Creation from model-types",
          "api from api"
        ]
      },
      {
        "name": "EsgMetric",
        "fileName": "src/components/containers/charts/polar-area/renderPolarAreaESG.tsx",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "EsgMetricStatus",
        "fileName": "src/components/containers/forms/requirement/ProofStateForm.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "api from api",
          "Creation from model-types",
          "Slug from model-types",
          "getObjectKeysArray from js-util",
          "omitUndefinedValues from js-util",
          "Item from react-with-native-select",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof AdminLinks>",
        "fileName": "src/components/presentational/side-menu/components/AdminLinks.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof AverageMetricDougnut>",
        "fileName": "src/components/containers/charts/circle/AverageStatusses.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Doughnut from react-chartjs-2"
        ]
      },
      {
        "name": "NamedParameters<typeof AverageTransparencyDougnut>",
        "fileName": "src/components/containers/charts/circle/AverageTransparencyDougnut.tsx",
        "imports": [
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Doughnut from react-chartjs-2"
        ]
      },
      {
        "name": "NamedParameters<typeof CompanyInfo>",
        "fileName": "src/components/containers/company-info/CompanyInfo.tsx",
        "imports": [
          "Div from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof CompanyInfoTab>",
        "fileName": "src/components/containers/tabs/CompanyInfoTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof CountriesHorizontalBar>",
        "fileName": "src/components/containers/charts/horizontal-bars/CountriesHorizontalBar.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types",
          "Chart from chart.js",
          "CategoryScale from chart.js",
          "LinearScale from chart.js",
          "PointElement from chart.js",
          "LineElement from chart.js",
          "Title from chart.js",
          "Tooltip from chart.js",
          "Legend from chart.js",
          "Bar from react-chartjs-2"
        ]
      },
      {
        "name": "NamedParameters<typeof EnvironmentTab>",
        "fileName": "src/components/containers/tabs/EnvironmentTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAverageCompanies>",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getAverageTransparency>",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCompanyToDos>",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getCompanyTransparency>",
        "fileName": "src/components/containers/analytics/supplier-transparency/functions/getAverageTransparency.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getMappedProducts>",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof getValueChainlength>",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof GoalsOverview>",
        "fileName": "src/components/containers/charts/tables/GoalOverview.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "CompanyRequirement from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof GoalsTab>",
        "fileName": "src/components/containers/tabs/GoalsTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof PriorityChip>",
        "fileName": "src/components/containers/requirements/components/PriorityChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof ProofStateForm>",
        "fileName": "src/components/containers/forms/requirement/ProofStateForm.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "api from api",
          "Creation from model-types",
          "Slug from model-types",
          "getObjectKeysArray from js-util",
          "omitUndefinedValues from js-util",
          "Item from react-with-native-select",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof ProofStatusChip>",
        "fileName": "src/components/containers/requirements/components/ProofStatusChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Proof from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof RenderCompanyEsgPolarArea>",
        "fileName": "src/components/containers/charts/polar-area/renderPolarAreaESG.tsx",
        "imports": [
          "Company from foodchain-types",
          "EsgMetric from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof renderEsgMetrics>",
        "fileName": "src/components/containers/analytics/esg-performance/functions/getESGMetrics.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof RenderGetEnvPerformance>",
        "fileName": "src/components/containers/charts/progress-bars/ProgressBarMultiple.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof renderGetProgressBarSingle>",
        "fileName": "src/components/containers/charts/progress-bars/ProgressBarSingle.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native",
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof SideMenu>",
        "fileName": "src/components/presentational/side-menu/index.tsx",
        "imports": [
          "Div from react-with-native",
          "P from react-with-native",
          "Span from react-with-native"
        ]
      },
      {
        "name": "NamedParameters<typeof SocialTab>",
        "fileName": "src/components/containers/tabs/SocialTab.tsx",
        "imports": [
          "Company from foodchain-types"
        ]
      },
      {
        "name": "NamedParameters<typeof ValueChainConnectionsForm>",
        "fileName": "src/components/containers/forms/contribution/valueChainConnectionsForm.tsx",
        "imports": [
          "Div from react-with-native",
          "Item from react-with-native-select",
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "ValueChainPhase from foodchain-types",
          "Creation from model-types",
          "api from api"
        ]
      },
      {
        "name": "ProductValueChain",
        "fileName": "src/components/containers/analytics/product-transparency/getProductsMapped.tsx",
        "imports": [
          "ProductValueChain from foodchain-types"
        ]
      },
      {
        "name": "ProofState",
        "fileName": "src/components/containers/forms/requirement/ProofStateForm.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "api from api",
          "Creation from model-types",
          "Slug from model-types",
          "getObjectKeysArray from js-util",
          "omitUndefinedValues from js-util",
          "Item from react-with-native-select",
          "Div from react-with-native"
        ]
      },
      {
        "name": "ProofStateStatus",
        "fileName": "src/components/containers/requirements/components/ProofStatusChip.tsx",
        "imports": [
          "humanCase from convert-case",
          "CompanyRequirement from foodchain-types",
          "Proof from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "Div from react-with-native"
        ]
      },
      {
        "name": "Slug",
        "fileName": "src/components/containers/forms/requirement/ProofStateForm.tsx",
        "imports": [
          "CompanyRequirement from foodchain-types",
          "EsgMetricStatus from foodchain-types",
          "ProofState from foodchain-types",
          "ProofStateStatus from foodchain-types",
          "api from api",
          "Creation from model-types",
          "Slug from model-types",
          "getObjectKeysArray from js-util",
          "omitUndefinedValues from js-util",
          "Item from react-with-native-select",
          "Div from react-with-native"
        ]
      },
      {
        "name": "ValueChainPhase",
        "fileName": "src/components/containers/forms/contribution/valueChainConnectionsForm.tsx",
        "imports": [
          "Div from react-with-native",
          "Item from react-with-native-select",
          "Company from foodchain-types",
          "Contribution from foodchain-types",
          "ValueChainPhase from foodchain-types",
          "Creation from model-types",
          "api from api"
        ]
      }
    ],
    "cumulativeDependencies": [
      "passionfruit-ui",
      "react-with-native-store",
      "api-store",
      "nested-menu",
      "webpage-types",
      "recursive-types",
      "nested-menu-types",
      "next-a-link",
      "fs-util-js",
      "writer-input",
      "clickable-icon",
      "cool-toast",
      "api-types",
      "sdk-api",
      "filename-conventions",
      "prompt-components",
      "ai-types",
      "function-server-types",
      "sdk-db",
      "asset-functions-js",
      "name-conventions",
      "pluralize",
      "text-or-binary",
      "asset-type",
      "frontmatter-util",
      "make-test",
      "marked-util",
      "markdown-parse-js",
      "markdown-types",
      "bundle-types",
      "matter-types",
      "simplified-schema-form",
      "big-button",
      "schema-util",
      "json-schema",
      "log",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "markdown",
      "react-markdown",
      "ui-util",
      "asset-view",
      "tooltip",
      "@popperjs/core",
      "breadcrumbs",
      "augmented-word-types",
      "key-value-markdown-js",
      "hotkeys",
      "markdown/build/esm",
      "writer-types",
      "language-types",
      "labeled-button",
      "fancy-loader",
      "short-markdown-writer-input",
      "short-markdown-types",
      "use-on-screen",
      "marked",
      "share",
      "function-form",
      "database",
      "fs-orm",
      "fs-util",
      "graceful-fs",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "read-csv-file",
      "csv-parse/sync",
      "read-json-file",
      "read-kvmd-file",
      "read-markdown-file",
      "get-path",
      "k-explore",
      "write-to-assets",
      "sdk-operations",
      "measure-performance",
      "try-parse-json",
      "db-crud",
      "rest-util",
      "react-with-native-table",
      "@react-navigation/native-stack",
      "react",
      "@heroicons/react/solid",
      "@heroicons/react/outline",
      "foodchain-types",
      "react-query",
      "api",
      "sdk-api-keys",
      "geo-types",
      "use-url-store",
      "string-to-json",
      "react-with-native",
      "react-with-native-router",
      "@react-navigation/native",
      "next/router",
      "next/dist/server/web/next-url",
      "next/dist/shared/lib/mitt",
      "next/dist/shared/lib/router/router",
      "js-util",
      "react-with-native-form",
      "react-with-native-alert",
      "react-with-native-notification",
      "react-with-native-modal",
      "react-with-native-form-asset-input",
      "asset-input",
      "extendable-media-recorder",
      "extendable-media-recorder-wav-encoder",
      "react-with-native-form-inputs",
      "react-dropzone",
      "react-map-gl",
      "next/link",
      "convert-case",
      "elkjs",
      "react-flow-renderer",
      "@headlessui/react",
      "@floating-ui/dom",
      "react-with-native-select",
      "@floating-ui/react-dom-interactions",
      "react-merge-refs",
      "react-with-native-ui",
      "chart.js",
      "react-chartjs-2",
      "code-types",
      "ts-json-schema-generator",
      "foodchain-recipes-js",
      "model-types",
      "react-toastify",
      "react-native"
    ]
  },
  {
    "operationName": "parse-address-henrik",
    "totalInstancesCount": 10,
    "totalImportCount": 2,
    "totalDependencyCount": 2,
    "importDependencies": [
      "fs-util",
      "read-csv-file"
    ],
    "packageJsonDependencies": [
      "fs-util",
      "read-csv-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "charIsLetter",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "createCsvString",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "oldToNew",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "parseAddress",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "parse",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "NamedParameters<typeof charIsLetter>",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "NamedParameters<typeof createCsvString>",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "NamedParameters<typeof oldToNew>",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "NamedParameters<typeof parse>",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      },
      {
        "name": "NamedParameters<typeof parseAddress>",
        "fileName": "src/parse-address.ts",
        "imports": [
          "fs from fs-util",
          "readCsvFile from read-csv-file"
        ]
      }
    ],
    "cumulativeDependencies": [
      "parse-address-henrik",
      "fs-util",
      "log",
      "graceful-fs",
      "js-util",
      "recursive-types",
      "filename-conventions",
      "read-csv-file",
      "make-test",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "code-types",
      "model-types",
      "pluralize",
      "convert-case",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "matter-types",
      "csv-parse",
      "csv-parse/sync"
    ]
  },
  {
    "operationName": "parse-images",
    "totalInstancesCount": 2,
    "totalImportCount": 13,
    "totalDependencyCount": 8,
    "importDependencies": [
      "fs-util",
      "k-explore",
      "js-util",
      "get-path",
      "write-to-assets",
      "fs-util-js",
      "one-by-one",
      "read-json-file"
    ],
    "packageJsonDependencies": [
      "cloudinary",
      "fs-util",
      "k-explore",
      "js-util",
      "get-path",
      "write-to-assets",
      "fs-util-js",
      "one-by-one",
      "read-json-file"
    ],
    "instancesAndTheirImports": [
      {
        "name": "main",
        "fileName": "src/upload-to-cloudinary.cli.ts",
        "imports": [
          "getExtension from fs-util-js",
          "oneByOne from one-by-one",
          "writeToAssets from write-to-assets",
          "notEmpty from js-util",
          "readJsonFile from read-json-file",
          "findOperationBasePath from get-path",
          "path from fs-util"
        ]
      },
      {
        "name": "NamedParameters<typeof main>",
        "fileName": "src/upload-to-cloudinary.cli.ts",
        "imports": [
          "getExtension from fs-util-js",
          "oneByOne from one-by-one",
          "writeToAssets from write-to-assets",
          "notEmpty from js-util",
          "readJsonFile from read-json-file",
          "findOperationBasePath from get-path",
          "path from fs-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "parse-images",
      "fs-util",
      "log",
      "graceful-fs",
      "recursive-types",
      "filename-conventions",
      "k-explore",
      "markdown-types",
      "model-types",
      "asset-type",
      "matter-types",
      "convert-case",
      "make-test",
      "bundle-types",
      "code-types",
      "pluralize",
      "measure-performance",
      "ts-json-schema-generator",
      "json-schema",
      "markdown-parse-js",
      "frontmatter-util",
      "name-conventions",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "js-util",
      "get-path",
      "try-parse-json",
      "sdk-operations",
      "write-to-assets",
      "fs-util-js",
      "one-by-one",
      "read-json-file"
    ]
  },
  {
    "operationName": "sprent-migrate",
    "totalInstancesCount": 9,
    "totalImportCount": 13,
    "totalDependencyCount": 8,
    "importDependencies": [
      "database",
      "model-types",
      "read-csv-file",
      "get-path",
      "fs-util",
      "read-json-file",
      "csv-util",
      "js-util"
    ],
    "packageJsonDependencies": [
      "csv-stringify",
      "database",
      "read-csv-file",
      "get-path",
      "fs-util",
      "read-json-file",
      "csv-util",
      "parse-address-henrik",
      "model-types",
      "js-util"
    ],
    "instancesAndTheirImports": [
      {
        "name": "booleanifyKeys",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "booleanify",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "getThisOperationPath",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "makeJson",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "mapJsonItems",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "splitDryWash",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "toCsv",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "updateData2",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      },
      {
        "name": "updateData",
        "fileName": "src/migration.cli.ts",
        "imports": [
          "db from database",
          "AugmentedAnyModelType from model-types",
          "CsvModelType from model-types",
          "readCsvFile from read-csv-file",
          "findOperationBasePath from get-path",
          "fs from fs-util",
          "path from fs-util",
          "writeJsonToFile from fs-util",
          "readJsonFile from read-json-file",
          "csvItemArrayToCsvString from csv-util",
          "CsvItemType from csv-util",
          "notEmpty from js-util",
          "onlyUnique2 from js-util"
        ]
      }
    ],
    "cumulativeDependencies": [
      "sprent-migrate",
      "database",
      "sdk-db",
      "fs-orm",
      "schema-util",
      "name-conventions",
      "json-schema",
      "matter-types",
      "frontmatter-util",
      "make-test",
      "asset-type",
      "marked-util",
      "asset-functions-js",
      "api",
      "api-types",
      "sdk-api",
      "server-api-url",
      "sdk-env-public",
      "port-conventions",
      "react-with-native-store",
      "react",
      "sdk-api-keys",
      "rest-util",
      "react-query",
      "text-or-binary",
      "marked",
      "key-value-markdown-js",
      "markdown-parse-js",
      "read-kvmd-file",
      "read-markdown-file",
      "convert-case",
      "markdown-types",
      "bundle-types",
      "fs-util-js",
      "k-explore",
      "filename-conventions",
      "write-to-assets",
      "pluralize",
      "sdk-operations",
      "code-types",
      "ts-json-schema-generator",
      "measure-performance",
      "log",
      "model-types",
      "read-csv-file",
      "csv-parse/sync",
      "get-path",
      "try-parse-json",
      "fs-util",
      "graceful-fs",
      "recursive-types",
      "read-json-file",
      "csv-util",
      "csv-stringify/sync",
      "parse-primitive",
      "csv-parse",
      "js-util"
    ]
  }
]