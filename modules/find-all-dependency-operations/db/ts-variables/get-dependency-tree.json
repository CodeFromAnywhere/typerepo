{
  "createdAt": 1673380284900,
  "updatedAt": 1673380284900,
  "deletedAt": 0,
  "createdFirstAt": 1673380284900,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getDependencyTree",
  "slug": "get-dependency-tree",
  "operationRelativeTypescriptFilePath": "src/getDependencyTree.ts",
  "type": {
    "rawType": "(allImports: import(\"/Users/king/King/operations/tools/types/code-types/build/TsImport\").TsImport[], allExports: import(\"/Users/king/King/operations/tools/types/code-types/build/TsExport\").TsExport[], operationName: string, usedImports: string[], alreadySearched?: string[]) => Promise<import(\"/Users/king/King/operations/tools/typescript/find-all-dependency-operations/src/getDependencyTree\").DependencyTreeChildObject>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  allImports: TsImport[],\n  allExports: TsExport[],\n  operationName: string,\n  usedImports: string[],\n  alreadySearched: string[] = []\n): Promise<DependencyTreeChildObject> => {\n  console.log(operationName);\n  const uniqueExportedNames = findMonorepoExports(allExports, operationName);\n\n  const allMonorepoImports = findMonorepoImports(allImports, operationName);\n  const newStack = alreadySearched.concat(operationName);\n\n  const newImportsPerModule = allMonorepoImports\n    .map((x) => x.module)\n    .filter(onlyUnique2())\n    .map((operationName) => {\n      return {\n        operationName,\n        importNames: allMonorepoImports\n          .filter((x) => x.module === operationName)\n          .map((x) => x.name),\n      };\n    });\n\n  const children: DependencyTreeChildObject[] = (\n    await Promise.all(\n      newImportsPerModule.map((perModule) =>\n        // don't go infinite recursion\n        newStack.includes(perModule.operationName)\n          ? undefined\n          : getDependencyTree(\n              allImports,\n              allExports,\n              perModule.operationName,\n              perModule.importNames,\n              newStack\n            )\n      )\n    )\n  ).filter(notEmpty);\n\n  const object: DependencyTreeChildObject = {\n    operationName,\n    dependencyCount: children.length,\n    usedExportsCount: usedImports.length,\n    allExportsCount: uniqueExportedNames.length,\n    cumulativeExportsCount:\n      sum(children.map((x) => x.cumulativeExportsCount)) +\n      uniqueExportedNames.length,\n    cumulativeUsedExportsCount:\n      usedImports.length +\n      sum(children.map((x) => x.cumulativeUsedExportsCount)),\n    usedExports: usedImports,\n    // allExports: uniqueExportedNames,\n    children,\n  };\n\n  return object;\n}",
  "description": "",
  "id": "jzmoxtaudkncodzolgpczjja"
}