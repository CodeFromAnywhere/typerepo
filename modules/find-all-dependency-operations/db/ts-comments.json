[
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependencies of an operation name",
    "rawStatement": "export const findMonorepoModules = async (operationName: string) => {\n  const imports = await db.get(\"TsImport\", { operationName });\n  const monorepoModules = imports\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x.module : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 8,
    "lastLine": 10,
    "id": "xcutkzadzojfkbwqjuvknsta"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependencies of an operation name",
    "rawStatement": "export const findDependenciesRecursively = async (\n  /**\n   * all imports\n   */\n  imports: TsImport[],\n  operationName: string,\n  /**\n   * skip recursing on these ones because they are already found\n   */\n  already: string[],\n  ignore?: string[],\n  ignoreFilter?: (operationName: string) => boolean\n): Promise<string[]> => {\n  if (ignore?.includes(operationName)) return [];\n\n  const onlyIncluded = (operationName: string) =>\n    !ignore?.includes(operationName) &&\n    (!ignoreFilter || ignoreFilter(operationName));\n\n  const thisImports = imports.filter((x) => x.operationName === operationName);\n\n  const monorepoModules = thisImports\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x.module : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique)\n    .filter(onlyIncluded);\n\n  const newAlready = already.concat(monorepoModules).filter(onlyUnique);\n\n  const dependencyPromises = monorepoModules\n    .filter((x) => !already?.includes(x))\n    .map((operationName) =>\n      findDependenciesRecursively(imports, operationName, newAlready, ignore)\n    );\n  const dependencies = (await Promise.all(dependencyPromises)).flat();\n  const all: string[] = monorepoModules.concat(dependencies);\n  return all;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 23,
    "lastLine": 25,
    "id": "qynaxamenctedtozlffqojgz"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "to be used when you need to know all dependencies for multiple operation names at once\n\nTODO: NB: this breaks with circular dependencies",
    "rawStatement": "export const findAllDependencyOperations = async ({\n  imports,\n  operationNames,\n  ignoreOperationNames,\n  ignoreFilter,\n}: {\n  /**\n   * All imports\n   */\n  imports: TsImport[];\n  operationNames: string[];\n  ignoreOperationNames?: string[];\n  ignoreFilter?: (operationName: string) => boolean;\n}) => {\n  const dependencies = (\n    await oneByOne(operationNames, async (operationName) => {\n      process.stdout.write(`${operationName} ... `);\n\n      return findDependenciesRecursively(\n        imports,\n        operationName,\n        operationNames,\n        ignoreOperationNames,\n        ignoreFilter\n      );\n    })\n  ).flat();\n\n  return dependencies.filter(onlyUnique);\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 67,
    "lastLine": 71,
    "id": "lbpljnbvierjphtcwwottprr"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// how do I get a format like this?",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "lnfbrmscoglahsxempdsbsxc"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// const x = {",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "ejtwhkbeouqrglpyirtjulvv"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "// const x = {",
    "parameters": {},
    "types": [],
    "firstLine": 105,
    "lastLine": 105,
    "id": "kqghwfmkocqakawxsuthnnwi"
  },
  {
    "createdAt": 1666263853046,
    "updatedAt": 1666263853046,
    "deletedAt": 0,
    "createdFirstAt": 1666263853046,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "tsjmomxgtdlafjejpgztvjrz"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 105,
    "lastLine": 105,
    "id": "ycvwukrudyfwjtrpliuzrbgu"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 107,
    "lastLine": 107,
    "id": "sypclrwfwmwzlxyqcxvgeoxu"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "engxfwgswovaulnrqbjgbmmr"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 105,
    "lastLine": 105,
    "id": "tchcjftflnzukwvqukincukt"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 107,
    "lastLine": 107,
    "id": "bxknzbbtoimvcufaxvuefefc"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 108,
    "lastLine": 108,
    "id": "rvhsqpurizlxvqddgpzkwbwd"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "kfzdacoleoiqylpvkixxbwqv"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 105,
    "lastLine": 105,
    "id": "vffnmdvqaphjzaxzqojzeppn"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 107,
    "lastLine": 107,
    "id": "zubqpuegwduzypqpzcxdlfag"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 108,
    "lastLine": 108,
    "id": "uizsigljrxwmgxzmdwnrlwmm"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"js-util\": [],",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 109,
    "lastLine": 109,
    "id": "ogyciwyfhwjokvqevxmqqyof"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 103,
    "lastLine": 103,
    "id": "vayhgkoweqaujlashzcawsvp"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 105,
    "lastLine": 105,
    "id": "xnbniedspsqiibjnhaycuexv"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 107,
    "lastLine": 107,
    "id": "walgnelwiuwqzntybvwwxdbm"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 108,
    "lastLine": 108,
    "id": "gnlyscxltkpouqipttysytmy"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"js-util\": [],",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 109,
    "lastLine": 109,
    "id": "qgrnzkiciodtpowawzlkfcqc"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "}",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 111,
    "lastLine": 111,
    "id": "twrvwoeavkqxsspbuouyzqkv"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "now I want this",
    "rawStatement": "export type DependencyTree = {\n  [dependencyName: string]: DependencyTree | null;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 130,
    "lastLine": 130,
    "id": "pjxcwnivtnfvonfdkkwwagty"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "//   console.dir(res, { depth: 999 })",
    "parameters": {},
    "types": [],
    "firstLine": 166,
    "lastLine": 166,
    "id": "oocpznwcgddirjwyffgbxlce"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "// );",
    "parameters": {},
    "types": [],
    "firstLine": 166,
    "lastLine": 166,
    "id": "znmocsjkkqptxcltdyyszwoe"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "console.dir(res, { depth: 999 })",
    "rawStatement": "// );",
    "parameters": {},
    "types": [],
    "firstLine": 167,
    "lastLine": 167,
    "id": "srsjyzahvusqmwvbeopdbofq"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 166,
    "lastLine": 166,
    "id": "yarpmbjroyahvtfsswghobbk"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "console.dir(res, { depth: 999 })",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 167,
    "lastLine": 167,
    "id": "qzstqznqzlzrffatajadimpb"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": ");",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 168,
    "lastLine": 168,
    "id": "orisydccscnikwgzqvkxwvmn"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependants of an operation or a specific import from that operation\n\nnormally returns the files where the operation or function is used, unless you specify to return the operationNames only.",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 170,
    "lastLine": 174,
    "id": "hfwhwdhrgomciekeefbmipwr"
  },
  {
    "createdAt": 1666263853047,
    "updatedAt": 1666263853047,
    "deletedAt": 0,
    "createdFirstAt": 1666263853047,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   operationName: \"js-util\",",
    "parameters": {},
    "types": [],
    "firstLine": 203,
    "lastLine": 203,
    "id": "fwyykcvvxclezdacucejzvek"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   importName: \"notEmpty\",",
    "parameters": {},
    "types": [],
    "firstLine": 203,
    "lastLine": 203,
    "id": "zvdfohbogpinzwtqczgfdayg"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "//   importName: \"notEmpty\",",
    "parameters": {},
    "types": [],
    "firstLine": 204,
    "lastLine": 204,
    "id": "stincdnbmfpwvlixbrtmbsbk"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 203,
    "lastLine": 203,
    "id": "pleagrgwkvimwepuqsthzkbb"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 204,
    "lastLine": 204,
    "id": "qhqlghfnsshdgmymflxqqhsm"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 205,
    "lastLine": 205,
    "id": "enutoadeqobcshhaoxafdfjp"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 203,
    "lastLine": 203,
    "id": "vuqwrnogzieqyelfewnoysrg"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 204,
    "lastLine": 204,
    "id": "yzcwbrrdzumtvavyibthywhi"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 205,
    "lastLine": 205,
    "id": "gzvzyjkswhatjhfgktcvguol"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "returnOperationName: false,",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 206,
    "lastLine": 206,
    "id": "gtfvdjjljytixvhjsecxvsek"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 203,
    "lastLine": 203,
    "id": "qswnkjpyhrfcdmiegvtnlhkh"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 204,
    "lastLine": 204,
    "id": "xeutrxgasalfqbowsdkalebm"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 205,
    "lastLine": 205,
    "id": "oglmddjlzxiujclcjbiosqvg"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "returnOperationName: false,",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 206,
    "lastLine": 206,
    "id": "xfbgkkwyduqkoevlbdozwscl"
  },
  {
    "createdAt": 1666263853048,
    "updatedAt": 1666263853048,
    "deletedAt": 0,
    "createdFirstAt": 1666263853048,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "}).then(console.log);",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 207,
    "lastLine": 207,
    "id": "qbypjramuimtajkfbnhjqsfp"
  }
]