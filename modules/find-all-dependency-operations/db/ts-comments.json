[
  {
    "createdAt": 1663012941022,
    "updatedAt": 1663012941022,
    "deletedAt": 0,
    "createdFirstAt": 1663012941022,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependencies of an operation name",
    "rawStatement": "export const findMonorepoModules = async (operationName: string) => {\n  const imports = await db.get(\"TsImport\", { operationName });\n  const monorepoModules = imports\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x.module : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 8,
    "lastLine": 10,
    "id": "yBgVARrzIttRpRrO"
  },
  {
    "createdAt": 1663012941022,
    "updatedAt": 1663012941022,
    "deletedAt": 0,
    "createdFirstAt": 1663012941022,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependencies of an operation name",
    "rawStatement": "export const findDependenciesRecursively = async (\n  operationName: string,\n  /**\n   * skip recursing on these ones because they are already found\n   */\n  already: string[],\n  ignore?: string[],\n  ignoreFilter?: (operationName: string) => boolean\n): Promise<string[]> => {\n  if (ignore?.includes(operationName)) return [];\n\n  const onlyIncluded = (operationName: string) =>\n    !ignore?.includes(operationName) &&\n    (!ignoreFilter || ignoreFilter(operationName));\n  const imports = await db.get(\"TsImport\", { operationName });\n  const monorepoModules = imports\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x.module : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique)\n    .filter(onlyIncluded);\n\n  const newAlready = already.concat(monorepoModules).filter(onlyUnique);\n\n  const dependencyPromises = monorepoModules\n    .filter((x) => !already?.includes(x))\n    .map((operationName) =>\n      findDependenciesRecursively(operationName, newAlready, ignore)\n    );\n  const dependencies = (await Promise.all(dependencyPromises)).flat();\n  const all: string[] = monorepoModules.concat(dependencies);\n  return all;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 23,
    "lastLine": 25,
    "id": "SULbxWDqWGcDTloA"
  },
  {
    "createdAt": 1663012941022,
    "updatedAt": 1663012941022,
    "deletedAt": 0,
    "createdFirstAt": 1663012941022,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "to be used when you need to know all dependencies for multiple operation names at once\n\nTODO: NB: this breaks with circular dependencies",
    "rawStatement": "export const findAllDependencyOperations = async ({\n  operationNames,\n  ignoreOperationNames,\n  ignoreFilter,\n}: {\n  operationNames: string[];\n  ignoreOperationNames?: string[];\n  ignoreFilter?: (operationName: string) => boolean;\n}) => {\n  const dependencyPromises = operationNames.map((operationName) =>\n    findDependenciesRecursively(\n      operationName,\n      operationNames,\n      ignoreOperationNames,\n      ignoreFilter\n    )\n  );\n  const dependencies = (await Promise.all(dependencyPromises)).flat();\n  return dependencies.filter(onlyUnique);\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 61,
    "lastLine": 65,
    "id": "NBoAWwkIBeOkvDxp"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// how do I get a format like this?",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "lHEuvfnAxWsRcaTF"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// const x = {",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "tLJfoCVoiRfcqLme"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "// const x = {",
    "parameters": {},
    "types": [],
    "firstLine": 89,
    "lastLine": 89,
    "id": "YbKKRhOUNEmAdrYT"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "SXyRrUPgimzyhaqg"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 89,
    "lastLine": 89,
    "id": "JvKOcFTKoHJfbZnp"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "//   \"fs-orm\": [\"js-util\"],",
    "parameters": {},
    "types": [],
    "firstLine": 91,
    "lastLine": 91,
    "id": "RyWYqSFNOzPssxcT"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "WELMxkZaZhlpIqZH"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 89,
    "lastLine": 89,
    "id": "uJJMAcfjJfStHKAV"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 91,
    "lastLine": 91,
    "id": "hfYOxkjrjgCMsDKn"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "//   \"js-util\": [],",
    "parameters": {},
    "types": [],
    "firstLine": 92,
    "lastLine": 92,
    "id": "AyHTIDVuQusGmhoL"
  },
  {
    "createdAt": 1663012941023,
    "updatedAt": 1663012941023,
    "deletedAt": 0,
    "createdFirstAt": 1663012941023,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "FucVQuwGhrYXpxhQ"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 89,
    "lastLine": 89,
    "id": "poEDjoUKeINrcWjN"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 91,
    "lastLine": 91,
    "id": "siVxiBRkobypNCcD"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 92,
    "lastLine": 92,
    "id": "lcZbPhimhbowUMqp"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"js-util\": [],",
    "rawStatement": "// }",
    "parameters": {},
    "types": [],
    "firstLine": 93,
    "lastLine": 93,
    "id": "tBUwnHwCioFGeGHZ"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findAllDependencyOperations([\"fs-orm\"]).then(console.log);",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 87,
    "lastLine": 87,
    "id": "NReLSIFjPTrdKYgD"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "how do I get a format like this?",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 89,
    "lastLine": 89,
    "id": "tsbqXWmwsYmrftYi"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "const x = {",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 91,
    "lastLine": 91,
    "id": "zcDzNWTjDnXVxXVu"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"fs-orm\": [\"js-util\"],",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 92,
    "lastLine": 92,
    "id": "FwTFUDuWlMTyvBRC"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "\"js-util\": [],",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 93,
    "lastLine": 93,
    "id": "RQZWYROGIwjmvPkG"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "}",
    "rawStatement": "export const getDependencyObject = async () => {\n  const allOperations = await exploreOperationFolders({});\n\n  const dependencyObject = mergeObjectsArray(\n    await Promise.all(\n      allOperations.map(async (operationFolderPath) => {\n        const operationName = getLastFolder(operationFolderPath);\n        const monorepoModules = await findMonorepoModules(operationName);\n\n        return { [operationName]: monorepoModules };\n      })\n    )\n  );\n\n  return dependencyObject;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 95,
    "lastLine": 95,
    "id": "CudJuWXgePzDIvfk"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "now I want this",
    "rawStatement": "export type DependencyTree = {\n  [dependencyName: string]: DependencyTree | null;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 114,
    "lastLine": 114,
    "id": "jZTsIONOasrcCvhN"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "//   console.dir(res, { depth: 999 })",
    "parameters": {},
    "types": [],
    "firstLine": 150,
    "lastLine": 150,
    "id": "GrBNaQReEMRaoOGu"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "// );",
    "parameters": {},
    "types": [],
    "firstLine": 150,
    "lastLine": 150,
    "id": "aRSGAmaPDGjHCHLc"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "console.dir(res, { depth: 999 })",
    "rawStatement": "// );",
    "parameters": {},
    "types": [],
    "firstLine": 151,
    "lastLine": 151,
    "id": "BwmoHHdZxhjSWsZr"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "getDependencyTree([\"k-types\", \"fs-orm\"], []).then((res) =>",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 150,
    "lastLine": 150,
    "id": "ZdHMEUxctMUqmvJG"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "console.dir(res, { depth: 999 })",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 151,
    "lastLine": 151,
    "id": "YIiEMVCxvwEnDjPI"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": ");",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 152,
    "lastLine": 152,
    "id": "BWqlamBRqReMRcaQ"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "finds all dependants of an operation or a specific import from that operation\n\nnormally returns the files where the operation or function is used, unless you specify to return the operationNames only.",
    "rawStatement": "export const findDependants = async ({\n  operationName,\n  importName,\n  returnOperationName,\n}: {\n  operationName: string;\n  /**\n   * Optionally specify a specific import from an operation that you want to find the dependants for\n   */\n  importName?: string;\n  returnOperationName?: boolean;\n}) => {\n  const resultValueKey: keyof TsImport = returnOperationName\n    ? \"operationName\"\n    : \"projectRelativePath\";\n  const imports = await db.get(\"TsImport\");\n  const monorepoModules = imports\n    .filter((x) => x.module === operationName)\n    .filter((x) => (importName ? x.name === importName : true))\n    .map((x) =>\n      x.isModuleFromMonorepo && x.isModuleResolved ? x[resultValueKey] : null\n    )\n    .filter(notEmpty)\n    .filter(onlyUnique);\n\n  return monorepoModules;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 154,
    "lastLine": 158,
    "id": "faQoCBQMuMjvcSoV"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   operationName: \"js-util\",",
    "parameters": {},
    "types": [],
    "firstLine": 187,
    "lastLine": 187,
    "id": "tjVuhrLIccALpqQR"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   importName: \"notEmpty\",",
    "parameters": {},
    "types": [],
    "firstLine": 187,
    "lastLine": 187,
    "id": "LKcncGTAEFAcTvjZ"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "//   importName: \"notEmpty\",",
    "parameters": {},
    "types": [],
    "firstLine": 188,
    "lastLine": 188,
    "id": "JvNXQxfYJIhnlfXz"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 187,
    "lastLine": 187,
    "id": "AUNQsJiJleODMVub"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 188,
    "lastLine": 188,
    "id": "QpUXoyAvfNFjHxfl"
  },
  {
    "createdAt": 1663012941024,
    "updatedAt": 1663012941024,
    "deletedAt": 0,
    "createdFirstAt": 1663012941024,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "//   returnOperationName: false,",
    "parameters": {},
    "types": [],
    "firstLine": 189,
    "lastLine": 189,
    "id": "CanubwgoJKyVOckP"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 187,
    "lastLine": 187,
    "id": "CIizeZpcUWibvqwT"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 188,
    "lastLine": 188,
    "id": "RrScEMTNRXyKmEla"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 189,
    "lastLine": 189,
    "id": "eNeTuhxNisebXxQZ"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "returnOperationName: false,",
    "rawStatement": "// }).then(console.log);",
    "parameters": {},
    "types": [],
    "firstLine": 190,
    "lastLine": 190,
    "id": "BLLeAepcevPuBFLr"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "findDependants({",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 187,
    "lastLine": 187,
    "id": "fTpqLRmQPFLXXMop"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "operationName: \"js-util\",",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 188,
    "lastLine": 188,
    "id": "ERFcZMgSQUCmJoLC"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "importName: \"notEmpty\",",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 189,
    "lastLine": 189,
    "id": "ollmPBPTZCJgCozV"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "returnOperationName: false,",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 190,
    "lastLine": 190,
    "id": "xTcYYFQRIcpYyQGv"
  },
  {
    "createdAt": 1663012941025,
    "updatedAt": 1663012941025,
    "deletedAt": 0,
    "createdFirstAt": 1663012941025,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/findAllDependencyOperations.ts",
    "comment": "}).then(console.log);",
    "rawStatement": "export const findDependantsRecursively = async (\n  operationName: string,\n  already?: string[]\n): Promise<string[]> => {\n  const dependantOperationNames = await findDependants({\n    returnOperationName: true,\n    operationName,\n  });\n\n  const dependantsUntilNow = [\n    operationName,\n    ...dependantOperationNames,\n    ...(already || []),\n  ];\n\n  const recursedDependants: string[] =\n    dependantOperationNames.length > 0\n      ? (\n          await Promise.all(\n            dependantOperationNames.map((name) =>\n              findDependantsRecursively(name, dependantsUntilNow)\n            )\n          )\n        ).flat()\n      : [];\n\n  return [...dependantsUntilNow, ...recursedDependants].filter(onlyUnique2());\n};",
    "parameters": {},
    "types": [],
    "firstLine": 191,
    "lastLine": 191,
    "id": "oEQgaocwZTXHvXID"
  }
]