{
  "createdAt": 1669384821119,
  "updatedAt": 1669384821119,
  "deletedAt": 0,
  "createdFirstAt": 1669384821119,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/getNestedPathObject.ts",
  "commentsInside": [],
  "rawText": " async (\n  baseFolderPath: string\n): Promise<NestedPathObject> => {\n  // 1 - explore\n\n  const exploreResult = await explore({\n    basePath: baseFolderPath,\n    includeFoldersWithResults: true,\n  });\n  // 2 - get file and folder paths from explore result\n  const explorePaths = exploreResult.map((textJson) => textJson.path);\n  const relativeExplorePaths = explorePaths.map((explorePath) => {\n    const baseFolderRelativeExplorePath = makeRelative(\n      explorePath,\n      baseFolderPath\n    );\n\n    return baseFolderRelativeExplorePath;\n  });\n\n  // 3- convert file/folder paths array into `NestedPathObject`\n  const nestedPathObject =\n    queryPathsArrayToNestedPathObject(relativeExplorePaths);\n\n  // 4 - return that\n  return nestedPathObject;\n}",
  "name": "getNestedPathObject",
  "slug": "get-nested-path-object",
  "parameters": [
    {
      "name": "baseFolderPath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/types/recursive-types/build/NestedPathObject\").NestedPathObject>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 747,
    "lines": 27,
    "bytes": 747,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 27,
    "numberOfFiles": 1
  },
  "id": "evrnylzjlapgackdudznlchf"
}