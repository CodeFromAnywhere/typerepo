{
  "createdAt": 1668149674941,
  "updatedAt": 1668149674941,
  "deletedAt": 0,
  "createdFirstAt": 1668149674941,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getAllAppOperations.ts",
  "commentsInside": [],
  "rawText": " async (): Promise<AppOperation[]> => {\n  const operationConfigs = await db.get(\"OperationConfig\");\n  const appOperations = (await db.get(\"PackageJson\"))\n    .filter(\n      (packageJson) =>\n        packageJson.name && Object.keys(ports).includes(packageJson.name)\n    )\n    .map((packageJson) => {\n      const operationConfig = operationConfigs.find(\n        (x) => x.operationName === packageJson.operationName\n      );\n      const description = operationConfig?.markdown || packageJson.description;\n      return {\n        name: packageJson.name!,\n        port: ports[packageJson.name as keyof typeof ports],\n        description,\n        emoji: getFirstEmoji(description),\n      };\n    })\n    .sort((a, b) => {\n      if (a.port < b.port) return -1;\n      return 1;\n    });\n\n  const appOperationsWithOnline: AppOperation[] = await Promise.all(\n    appOperations.map(async (appOperation) => {\n      const isOnline = await isPortUsed(appOperation.port);\n      const newAppOperation: AppOperation = {\n        ...appOperation,\n        isOnline,\n      };\n      return newAppOperation;\n    })\n  );\n\n  return appOperationsWithOnline;\n}",
  "name": "getAllAppOperations",
  "slug": "get-all-app-operations",
  "parameters": [],
  "description": "Gets all app operations from all packageJsons from the database. Adds `isOnline` to it on the fly by checking if it can connect to the port or not",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/p2p/peer-types/build/AppOperation\").AppOperation[]>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1274,
    "lines": 37,
    "bytes": 1274,
    "bytesPerCharacter": 1,
    "charactersPerLine": 34,
    "linesPerFile": 37,
    "numberOfFiles": 1
  },
  "id": "vmzhhbyktyqndhrecmcuxpzj"
}