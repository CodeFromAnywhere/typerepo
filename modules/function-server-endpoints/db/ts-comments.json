[
  {
    "createdAt": 1669983244674,
    "updatedAt": 1669983244674,
    "deletedAt": 0,
    "createdFirstAt": 1669983244674,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
    "comment": "external",
    "rawStatement": "import { Context } from \"server/typings/common\";",
    "parameters": {},
    "types": [],
    "firstLine": 1,
    "lastLine": 1,
    "id": "dspixcfttogkpyettedonvjp"
  },
  {
    "createdAt": 1669983244674,
    "updatedAt": 1669983244674,
    "deletedAt": 0,
    "createdFirstAt": 1669983244674,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
    "comment": "NB: uses SDK-api!",
    "rawStatement": "import { sdk } from \"sdk-api\";",
    "parameters": {},
    "types": [
      "nb"
    ],
    "firstLine": 3,
    "lastLine": 3,
    "id": "kiecbfxnkwpnvdchoziwzent"
  },
  {
    "createdAt": 1669983244674,
    "updatedAt": 1669983244674,
    "deletedAt": 0,
    "createdFirstAt": 1669983244674,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
    "comment": "monorepo",
    "rawStatement": "import { notEmpty } from \"js-util\";",
    "parameters": {},
    "types": [],
    "firstLine": 10,
    "lastLine": 10,
    "id": "qaowtdrqpomtlevmtdupmtoq"
  },
  {
    "createdAt": 1669983244674,
    "updatedAt": 1669983244674,
    "deletedAt": 0,
    "createdFirstAt": 1669983244674,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
    "comment": "relative",
    "rawStatement": "import { upsertDevice } from \"./upsertDevice\";",
    "parameters": {},
    "types": [],
    "firstLine": 17,
    "lastLine": 17,
    "id": "ufcytgykbyglhbivgyrygfjr"
  },
  {
    "createdAt": 1669983244674,
    "updatedAt": 1669983244674,
    "deletedAt": 0,
    "createdFirstAt": 1669983244674,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
    "comment": "steps for someone to use the API\n\n1) auth\n2) cache lookup\n3) input validation\n4) running function\n5) store cache\n6) store performance\n7) returning result\n\nTODO: make it possible to return result BEFORE storing cache and performance. we probably need to use the server.reply for this, which makes this function unusable in any other setting than an api, so let's make it optional",
    "rawStatement": "export const executeFunctionWithParameters = async <\n  TFunctionName extends keyof typeof sdk\n>(\n  functionName: TFunctionName,\n  parameters: undefined | any[],\n  serverContext: Context\n): Promise<RealApiReturnType<any>> => {\n  const publicBundleConfig = await getPublicBundleConfig();\n  const executionId = generateId();\n\n  if (isGetEndpoint(functionName)) {\n    // NB: shortcut for now, until we have cookie support:\n\n    const result = await (sdk[functionName] as any)(serverContext);\n\n    return result;\n  }\n\n  const performance: (PerformanceItem | undefined)[] = [];\n\n  performance.push(getNewPerformance(\"start\", executionId, true));\n\n  // 1) upsert device\n  const device = await upsertDevice(serverContext);\n  if (!device) {\n    return {\n      isSuccessful: false,\n      message: \"Couldn't create device\",\n    };\n  }\n\n  performance.push(getNewPerformance(\"upsertDevice\", executionId));\n\n  // 2) get ts function\n  const tsFunction = await getTsFunction(functionName);\n  if (!tsFunction) {\n    return {\n      isSuccessful: false,\n      message: `TsFunction file could not be found in \"sdk-function-paths\" (${functionName}). Maybe you need to rebuild your operation and update your SDK?`,\n    };\n  }\n  performance.push(getNewPerformance(\"getTsFunction\", executionId));\n\n  const { hasAuthorization, authorizations, groups } = getAuthorizationInfo(\n    device,\n    tsFunction\n  );\n\n  //new way: hasAuthorization\n  /*\n    if (!hasAuthorization) {\n    return {\n      isSuccessful: false,\n      isUnauthorized: true,\n      message:\n        \"You are not authorized to execute this function, you might need to login.\",\n    };\n  }\n*/\n\n  // console.log({ skug: publicBundleConfig?.slug });\n  // 3) auth\n  //OLD way:\n  const authToken: string | undefined = serverContext.data?.authToken;\n  if (\n    publicBundleConfig?.slug === \"passionfruit\" &&\n    privateAuthToken !== authToken\n  ) {\n    return {\n      isSuccessful: false,\n      isUnauthorized: true,\n      message:\n        \"You are not authorized to execute this function, you might need to login.\",\n    };\n  }\n\n  performance.push(getNewPerformance(\"auth\", executionId));\n\n  // 4) cache lookup\n  const cacheLookupResult = cacheLookup(functionName, parameters);\n  if (cacheLookupResult.hasValidCache) {\n    return {\n      result: cacheLookupResult.result,\n      isSuccessful: true,\n      isCached: true,\n    };\n  }\n  performance.push(getNewPerformance(\"cacheLookup\", executionId));\n\n  // 5) validation\n  const validationResult = validateInput(functionName, parameters, tsFunction);\n\n  // if (!validationResult.isValid) {\n  //   return {\n  //     isSuccessful: false,\n  //     errors: validationResult.errors,\n  //     message: `Your input has some errors. Input ${JSON.stringify(\n  //       parameters\n  //     )}.`,\n  //   };\n  // }\n  performance.push(getNewPerformance(\"inputValidation\", executionId));\n\n  // 6) running function\n  const fn = sdk[functionName];\n\n  if (typeof fn !== \"function\") {\n    return {\n      isSuccessful: false,\n      message: `Function not found in the api-sdk: ${functionName}`,\n    };\n  }\n\n  /**\n   * Convention\n   */\n\n  const needsReturnRaw =\n    functionName.endsWith(apiConventions.rawFunctionConventionSuffix) ||\n    functionName.endsWith(apiConventions.getFunctionConventionSuffix);\n\n  const needsFunctionContext =\n    functionName.endsWith(apiConventions.contextFunctionConventionSuffix) ||\n    needsReturnRaw;\n\n  const functionContext: FunctionContext = {\n    tsFunction,\n    authorizations,\n    device,\n    groups,\n    hasAuthorization,\n    authToken: device.authToken,\n    serverContext,\n  };\n\n  const parametersWithContext = needsFunctionContext\n    ? [functionContext].concat(parameters || [])\n    : parameters;\n\n  // console.log(`We are authorized to execute ${functionName}! Let's do it`);\n  // @ts-ignore\n  const result = await fn(...parametersWithContext);\n  performance.push(getNewPerformance(\"function\", executionId));\n\n  cleanupTimer(executionId);\n\n  const resultValidation = validateResult(functionName, result, tsFunction);\n\n  // console.log({ serverwithPar: performance });\n  // 6) store performance\n  storeFunctionExecution(\n    tsFunction,\n    parameters,\n    result,\n    performance.filter(notEmpty),\n    false\n  );\n\n  // need to return this immediately without the surrounding object, because it might do stuff with that server context that needs to be returned\n  if (needsReturnRaw) return result;\n\n  if (result === undefined) {\n    return {\n      isSuccessful: true,\n      isCached: false,\n      message: \"Function was executed but did not give any response\",\n      result: undefined,\n    };\n  }\n\n  return {\n    isSuccessful: true,\n    isCached: false,\n    result,\n  };\n};",
    "parameters": {},
    "types": [
      "todo"
    ],
    "firstLine": 29,
    "lastLine": 42,
    "id": "ljfatsylhzuxcphirwpqmrgi"
  }
]