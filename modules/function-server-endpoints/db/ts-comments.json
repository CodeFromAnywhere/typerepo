[
  {
    "createdAt": 1674548237830,
    "updatedAt": 1674548237830,
    "deletedAt": 0,
    "createdFirstAt": 1674548237830,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/getAuthorizationInfo.ts",
    "comment": "returns `AuthorizationInfo` for a device + function",
    "rawStatement": "export const getAuthorizationInfo = (\n  device: Storing<Device>,\n  tsFunction: TsFunction,\n  fn: { (...parameters: any): any; [key: string]: any }\n): AuthorizationInfo => {\n  const everyPersonsGroups =\n    device?.persons\n      ?.map((x) => x.groups)\n      .flat()\n      .filter(notEmpty)\n      .filter(onlyUnique2<Group>((a, b) => a.slug === b.slug)) || [];\n\n  // Accumulating all authorizations: the public authorization of the function, the manual person authorizations, and the group authorizations\n  const authorizations = everyPersonsGroups\n    .map((group) => group.customAuthorizations)\n    .flat()\n    .filter(notEmpty);\n\n  const hasAuthorization = !!authorizations.find((auth) => {\n    const authAppliesToThisFunction =\n      auth.tsFunctionId === tsFunction.id ||\n      auth.authorizedOperationName === tsFunction?.operationName ||\n      (auth.authorizedProjectRelativePath &&\n        tsFunction.projectRelativePath.startsWith(\n          auth.authorizedProjectRelativePath\n        ));\n\n    return authAppliesToThisFunction && auth.canExecute;\n  });\n\n  /**\n   * Function might ne an `ApiFunction`\n   */\n  const isPublic = fn.isPublic;\n\n  const result = {\n    hasAuthorization: isPublic || hasAuthorization,\n    authorizations,\n    groups: everyPersonsGroups,\n  };\n\n  console.log({ getAuthorizationInfo: result });\n  return result;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 28,
    "lastLine": 30,
    "id": "lcvwwkimzbewcfebnvzyfmqc"
  }
]