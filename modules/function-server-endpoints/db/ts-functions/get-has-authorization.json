{
  "createdAt": 1668149088439,
  "updatedAt": 1668149088439,
  "deletedAt": 0,
  "createdFirstAt": 1668149088439,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getHasAuthorization.ts",
  "commentsInside": [],
  "rawText": " (device: Device, tsFunction: TsFunction) => {\n  const publicAuthorization: Authorization = {\n    authorizations: tsFunction?.publicAuthorization || [],\n    type: \"TsFunction\",\n    value: tsFunction.id,\n  };\n\n  // Accumulating all authorizations: the public authorization of the function, the manual person authorizations, and the group authorizations\n  const authorizations = [\n    publicAuthorization,\n    ...(device?.persons?.map((x) => x.authorizations).flat() || []),\n    ...(device?.persons\n      ?.map((x) => x.groups)\n      .flat()\n      .filter(notEmpty)\n      ?.map((group) => group.authorizations)\n      .flat() || []),\n  ];\n\n  const hasAuthorization = !!authorizations.find((auth) =>\n    !auth.authorizations.includes(\"execute\")\n      ? false\n      : auth.type === \"TsFunction\"\n      ? auth.value === tsFunction.name\n      : auth.type === \"operationName\"\n      ? auth.value === tsFunction?.operationName\n      : false\n  );\n\n  return hasAuthorization;\n}",
  "name": "getHasAuthorization",
  "slug": "get-has-authorization",
  "parameters": [
    {
      "name": "device",
      "schema": {
        "$ref": "#/definitions/Device"
      },
      "simplifiedSchema": {
        "fullComment": "A Device that accesses any King OS api.\n\nA device can be connected to a person. A person can have multiple `Device`s.\n\nA Device does not necissarily have King OS installed themselves, they can also be a visitor to another King OS app of someone else.",
        "properties": [
          {
            "name": "ip",
            "required": true,
            "schema": {
              "fullComment": "The ip of the device. Can be a local IP or remote IP.\n\nNB: Port is not included",
              "nb": "Port is not included",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "positionRadiusKm",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timezone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "authToken",
            "required": true,
            "schema": {
              "fullComment": "AuthToken is used to identify a device. Unique identifier that is saved in the devices browser/app.\n\nIf the authToken is the same, we can be sure that the device is matched, even if the IP is different.",
              "type": "string"
            }
          },
          {
            "name": "userAgentString",
            "required": true,
            "schema": {
              "fullComment": "Raw `User-Agent` header.\n\nNOT used to identify the device, since the device can already be connected to a person!",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "fullComment": "Name of the device, calculated based on metadata like location, os, and ip\n\nCan be edited by the user",
              "type": "string"
            }
          },
          {
            "name": "previousIps",
            "required": true,
            "schema": {
              "fullComment": "the root IPInfo is from the latest IP the device had. All previous IPs are added to this array",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "origins",
            "required": true,
            "schema": {
              "fullComment": "Domains the Device has visited\n\nThe Origin request header indicates the origin (scheme, hostname, and port) that caused the request",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "hasPapi",
            "required": false,
            "schema": {
              "fullComment": "Is set to true if the devices IP is pinged and seems to have something that resembles a King OS PAPI.",
              "type": "boolean"
            }
          },
          {
            "name": "isOnlineCalculated",
            "required": false,
            "schema": {
              "fullComment": "Returning `true` or `false` indicating whether or not the IP is giving a response",
              "type": "boolean"
            }
          },
          {
            "name": "lastOnlineAt",
            "required": true,
            "schema": {
              "fullComment": "Whenever the peer is online, this should update",
              "type": "number"
            }
          },
          {
            "name": "isLocalIpCalculated",
            "required": false,
            "schema": {
              "fullComment": "if true, the above IP is a local one, meaning it cannot be accessed from outside of this network\n\nThis is easy to determine: local IP's must start with \"192.168\"",
              "type": "boolean"
            }
          },
          {
            "name": "isFavorite",
            "required": false,
            "schema": {
              "fullComment": "if `true`, this device will show on top",
              "type": "boolean"
            }
          },
          {
            "name": "isPrivate",
            "required": false,
            "schema": {
              "fullComment": "If true, this peer should not be shared",
              "type": "boolean"
            }
          },
          {
            "name": "lastSyncDatabaseAtObject",
            "required": true,
            "schema": {
              "fullComment": "last sync of any model\n\nUseful for example for a p2p messaging",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "personIds",
            "required": false,
            "schema": {
              "fullComment": "If the device is authenticated, this should be set.\n\nCan be unset by the person",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "appOperationsCalculated",
            "required": false,
            "schema": {
              "fullComment": "Calculated all operations that can be exposed as apps. This is taken from `getAllAppOperations` function",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "authenticationMethods",
            "required": true,
            "schema": {
              "fullComment": "If the `Device` is not identified as a person yet, this can be configured to authenticate with different methods. Once it matches to a person, this can be cleared and `personId` can be attached.",
              "items": [],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "tsFunction",
      "schema": {
        "$ref": "#/definitions/TsFunction"
      },
      "simplifiedSchema": {
        "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
        "properties": [
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "schema": {
              "fullComment": "unique id of the model",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "fullComment": "name (identifier) of the model",
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "fullComment": "kebab-case variant of the name",
              "type": "string"
            }
          },
          {
            "name": "operationRelativeTypescriptFilePath",
            "required": true,
            "schema": {
              "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
              "type": "string"
            }
          },
          {
            "name": "canCache",
            "required": false,
            "schema": {
              "fullComment": "whether or not the function is can be cached (relies on cache invalidation)",
              "type": "boolean"
            }
          },
          {
            "name": "isGetApi",
            "required": false,
            "schema": {
              "fullComment": "if true, the function will get the `server`.js context as its only argument, and it's directly exposed as GET api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzGetApi` whhere `abcXyz` can be anything.",
              "type": "boolean"
            }
          },
          {
            "name": "isPostApi",
            "required": false,
            "schema": {
              "fullComment": "If true, the function will get the `server`.js context as its only argument, and it's directly exposed as POST api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzPostApi` where `abcXyz` can be anything.",
              "type": "boolean"
            }
          },
          {
            "name": "isExported",
            "required": true,
            "schema": {
              "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
              "type": "boolean"
            }
          },
          {
            "name": "isApiExposed",
            "required": true,
            "schema": {
              "fullComment": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
              "type": "boolean"
            }
          },
          {
            "name": "publicAuthorization",
            "required": true,
            "schema": {
              "fullComment": "The default authorization that is set level applies to users without any specific authorization (granted to everyone).\n\nshould be indexed based on doccomment containing `AUTH-PUBLIC: [execute], [read], [search]`",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "rawText",
            "required": false,
            "schema": {
              "fullComment": "raw text of the function",
              "type": "string"
            }
          },
          {
            "name": "commentsInside",
            "required": true,
            "schema": {
              "fullComment": "all comments found in a function and the node that they belong to",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "parameters",
            "required": false,
            "schema": {
              "fullComment": "parameters the function takes as its arguments, if any",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "maxIndentationDepth",
            "required": true,
            "schema": {
              "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
              "type": "number"
            }
          },
          {
            "name": "dependantFiles",
            "required": false,
            "schema": {
              "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
              "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "{}",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 964,
    "lines": 31,
    "bytes": 964,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 31,
    "numberOfFiles": 1
  },
  "id": "afqvkzxnhwcdblfkarirbdxo"
}