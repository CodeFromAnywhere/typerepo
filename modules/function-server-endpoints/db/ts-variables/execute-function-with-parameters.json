{
  "createdAt": 1674548374885,
  "updatedAt": 1674548374885,
  "deletedAt": 0,
  "createdFirstAt": 1674548374885,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "executeFunctionWithParameters",
  "slug": "execute-function-with-parameters",
  "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
  "type": {
    "rawType": "<TFunctionName extends \"fetchUrl\" | \"addEmojiToEveryWord\" | \"addStatement\" | \"addWord\" | \"biggestFunctionName\" | \"checkQueue\" | \"cleanup\" | \"controlChatGptWrapper\" | \"controlChatGpt\" | \"deletePromptResult\" | \"developersQuote\" | \"diaryToInstagram\" | \"documentationWriting\" | \"emojiAugmentation\" | \"explainInDutch\" | \"explainInNepali\" | \"explainInPortuguese\" | \"explainLineByLine\" | \"explain\" | \"fixGrammarAndSpellingMistakes\" | \"followUpQuestions\" | \"getContextualPromptCategories\" | \"getContextualPromptResultJsonFilePath\" | \"getContextualPrompt\" | \"getObjectForkKeyRecursively\" | \"getToolFunctions\" | \"gptIdeasRegisterWithContext\" | \"haiku\" | \"hookOneliners\" | \"improveCode\" | \"investorPitch\" | \"marcusAurelius\" | \"opposite\" | \"outlineToInvestorPitch\" | \"poem\" | \"processChatGptPrompt\" | \"processPromptOnFile\" | \"processPromptOnFolderWithContext\" | \"quiz\" | \"removeAllFake\" | \"rickAndMortyRick\" | \"rickAndMorty\" | \"setIsFavoritePromptResult\" | \"shouldAddToQueue\" | \"socratesAndSnoopDogg\" | \"storytelling\" | \"toolFunctionWithContext\" | \"translateEverythingIntoHindi\" | \"translateEverythingPortuguese\" | \"translateEverything\" | \"translateToPortuguese\" | \"typescriptExplain\" | \"williamShakespear\" | \"writeContextualPromptSdk\" | \"writeCreatePromptCode\" | \"ye\" | \"yodafy\" | \"imageToText\" | \"languageTranslation\" | \"musicTrackSeparation\" | \"speakerSeparation\" | \"speechToText\" | \"textToImage\" | \"textToSpeech\" | \"textToText\" | \"bananaCarrot\" | \"bananaStableDiffusion\" | \"bananaWhisper\" | \"augmentMarkdown\" | \"canSeeFileContent\" | \"canSeeFile\" | \"expandFrontmatter\" | \"findClosestAbsolutePath\" | \"getContextualPromptResults\" | \"getContextualPromptsArray\" | \"getContextualPrompts\" | \"getFirstFile\" | \"getFolderRelativeScopeDbFilePath\" | \"getReaderPageProps\" | \"makeMarkdownLink\" | \"readerPageGetStaticPaths\" | \"readerPageGetStaticProps\" | \"gtpIndex\" | \"huggingfaceSpeakerDiarization\" | \"request\" | \"calculateTokenCount\" | \"gpt3\" | \"compressAsset\" | \"deleteReferencedAsset\" | \"downloadRemoteAsset\" | \"findAbsoluteAssetPathFromReference\" | \"findAllProjectMedia\" | \"getAssetDirectlyGetApi\" | \"getReferencedAssetGetApi\" | \"getStorageLocationInfo\" | \"getTemporaryAssetsFolderPath\" | \"processAsset\" | \"processItemAssets\" | \"removeOldTemporaryAssets\" | \"serverDownloadReply\" | \"uploadAssetWithContext\" | \"getFileCollectionPaths\" | \"renameFileCollection\" | \"folderGetUpdatedAt\" | \"getExtension\" | \"getFileOrFolderName\" | \"getFolderJs\" | \"getSubExtension\" | \"isPathRelative\" | \"makeRelative\" | \"removeTrailingSlash\" | \"withoutExtension\" | \"withoutSubExtensions\" | \"getAssociatedMd\" | \"getAvailableFolderPath\" | \"getOperationBins\" | \"getOperationPackageName\" | \"getPackageJson\" | \"getPackageSourcePaths\" | \"isEqualArray\" | \"renameTemplateFiles\" | \"renameTemplateToNormalFile\" | \"renameToTemplateFile\" | \"setJsonKey\" | \"setKeyAtLocation\" | \"initiateWatch\" | \"makeSubscription\" | \"pickWatcher\" | \"watchFoldersChokidar\" | \"watchFoldersFs\" | \"watchFolders\" | \"writeToAssets\" | \"allOperationsRemoveJsSrc\" | \"allOperationsToMarkdown\" | \"clearAllTsDatabases\" | \"codeAll\" | \"forAllFiles\" | \"forAllFolders\" | \"getAllOperationClassifications\" | \"gitShipAllRepos\" | \"mdAllOperations\" | \"minifyAllOperations\" | \"publishAllOperations\" | \"removeAllFiles\" | \"removeAllFolders\" | \"removeAll\" | \"renameAll\" | \"runScriptEverywhere\" | \"setScriptEverywhere\" | \"exploreOperation\" | \"exploreProject\" | \"getExplorationType\" | \"getFileWithExtension\" | \"getFolderExplorationDetails\" | \"getFrontmattersMappedObject\" | \"getInstanceNames\" | \"getProjectRelativePaths\" | \"getTodoPages\" | \"getTodoPaths\" | \"hasSameProjectPath\" | \"getAllOperationSourcePaths\" | \"determineFileType\" | \"exploreGitRepoFolders\" | \"exploreMultiple\" | \"exploreOperationFolders\" | \"explorePreset\" | \"explore\" | \"findAllDocsFolderPaths\" | \"findAllDotGitFolders\" | \"findAllFoldersWithName\" | \"findAllPackages\" | \"findAllTodoFolderPaths\" | \"findFilesRecursively\" | \"getFolderTypescriptFiles\" | \"pathArrayIsOperation\" | \"deleteApp\" | \"listApps\" | \"logApp\" | \"logTableObject\" | \"pm2ConnectDisconnect\" | \"pm2Connect\" | \"restartApp\" | \"startApp\" | \"stopAllAppsExcept\" | \"stopApps\" | \"watchAll\" | \"exitIfOperationsChange\" | \"gitCommitAllCron\" | \"watchOperations\" | \"brigtnessFull\" | \"brigtnessZero\" | \"decreaseBrightness\" | \"increaseBrightness\" | \"macosSetup\" | \"fileExplorerOpen\" | \"importAppleNotes\" | \"importGhostBlogs\" | \"importGoogleKeep\" | \"isSystemBusy\" | \"getFolderNames\" | \"playMusic\" | \"generateRecurringReminders\" | \"remindMeAboutNextMinute\" | \"setRandomTimezone\" | \"time\" | \"disableDarkMode\" | \"enableDarkMode\" | \"setDarkmodeCommand\" | \"toggleDarkMode\" | \"disableScreenSleep2\" | \"disableScreenSleep\" | \"enableScreenSleep\" | \"downVolume\" | \"getVolume\" | \"setVolume\" | \"upVolume\" | \"getOpenableFilePath\" | \"vscodeOpen\" | \"watchAudioVideo\" | \"watchMp3WithoutWav\" | \"watchMp4WithoutWav\" | \"watchWavToSpeakers\" | \"watchWavToSpeech\" | \"watchWavWithoutMp3\" | \"exploreBadNamingFiles\" | \"isBadName\" | \"renameAllBadlyNamedFiles\" | \"renameBadlyNamedFile\" | \"watchBadNaming\" | \"exploreAndRename\" | \"findJsonInMarkdown\" | \"getBetterFilename\" | \"getBetterLocation\" | \"makeMarkdownIndex\" | \"trimCodeblock\" | \"watchMarkdown\" | \"watchMp3Transcriptions\" | \"getYoutubeVideoUrls\" | \"watchAppleMemos\" | \"whisperLocalCpp\" | \"whisper\" | \"loginToDevto\" | \"publishBlogOnDevTo\" | \"typeIntoTheField\" | \"facebookPostOnTheGroup\" | \"facebookPost\" | \"facebookTimeLinePost\" | \"getLatestFacebookPostUrl\" | \"sendFacebookMessage\" | \"searchAndDownloadGifs\" | \"buildQuery\" | \"errArrayLenZero\" | \"errFileSize\" | \"errFileType\" | \"errInvalidType\" | \"errTextLenZero\" | \"errTextOverflow\" | \"generateArrayFromJson\" | \"getStringForTranslation\" | \"launch\" | \"startTranslation\" | \"storeResult\" | \"translateText\" | \"sendMail\" | \"publishBlogOnMedium\" | \"publishBlogOnReddit\" | \"sendDailyAlarmSms\" | \"sendSms\" | \"youtubeSearchAndDownload\" | \"youtubeSearch\" | \"youtubeToMp3\" | \"youtubeToMp4\" | \"getPort\" | \"isLocked\" | \"lock\" | \"unlock\" | \"getBundleSummary\" | \"getDbModelsForBundle\" | \"createBackup\" | \"getHumanReadableDate\" | \"createDistribution\" | \"filterInterfacesFromOperationNames\" | \"getDbModelsFromOperations\" | \"applyDataset\" | \"calculateBundleDependencies\" | \"calculateToPath\" | \"copyCodestories\" | \"copyDocsAndReadme\" | \"copyFromRepoToNiche\" | \"copyOperation\" | \"copyReadmesBeforeFolderToBundle\" | \"copyTodosIntoBundle\" | \"findAndCopyOperations\" | \"findInherited\" | \"generateAllBundles\" | \"generateBundle\" | \"generateBundles\" | \"getBundlePaths\" | \"getCompareFn\" | \"getDataset\" | \"getIndirectDependencies\" | \"getMatchingFilters\" | \"mergeBundleConfigs\" | \"syncInformation\" | \"syncNicheFolder\" | \"yarnInstall\" | \"installNodeModules\" | \"yarnInstallNewDistribution\" | \"detectLanguage\" | \"generateSimpleSentence\" | \"makeAudioCourse\" | \"sleep\" | \"createFolder\" | \"getAllMarkdownFiles\" | \"getFileInfo\" | \"getTranslatedWord\" | \"markdownStoreAndRecord\" | \"parseMarkdownWordByWord\" | \"recordMdFile\" | \"startMarkdownTranslator\" | \"translatedArrayToKeyValue\" | \"watchMdFile\" | \"createWordSimplificationMap\" | \"findBetterWords\" | \"getSynonymFrequencyDataset\" | \"preprocessSynonyms\" | \"preprocessWordFrequencies\" | \"speakWordsToLearn\" | \"createPaymentRequestWithContext\" | \"createPaymentTransactionWithContext\" | \"defaultResponse\" | \"fail\" | \"getPaymentWebPages\" | \"succeed\" | \"mapArrayJson\" | \"mapObjectJson\" | \"unzip\" | \"zip\" | \"csvItemArrayToCsvString\" | \"tryParseCsv\" | \"compressConvert\" | \"compressImages\" | \"compressMp4\" | \"convertToMp3\" | \"convertToMp4\" | \"copyCopyPairs\" | \"copyReaderStaticAssets\" | \"findReaderStaticAssets\" | \"findStaticAssets\" | \"docToMd\" | \"docxToMd\" | \"addCodestoryToSection\" | \"addModelName\" | \"findCodestories\" | \"makeCodespanMappedObject\" | \"makeCodestory\" | \"mapChunkRecursively\" | \"mapMarkdownParseSections\" | \"writeAllCodestories\" | \"writeCodespanDetails\" | \"addDependantCount\" | \"bundleFolderWithMarkdown\" | \"bundleToBookMarkdown\" | \"bundleToMarkdown\" | \"createMinimizedSectionMarkdown\" | \"createMinimizedSection\" | \"deployToVercel\" | \"emailMarkdownParse\" | \"flattenNestedObject\" | \"generateStaticSite\" | \"getJsonSchemaSummary\" | \"getMarkdownContents\" | \"getMergedMarkdownOutlineUrl\" | \"getOperationSummary\" | \"getOutline\" | \"getPublicMarkdownNestedPathObject\" | \"getTitlesRecursively\" | \"getTypeDescriptorRecursive\" | \"isConventionFileStatement\" | \"isUpperCase\" | \"makeOutlineMarkdownString\" | \"makePropertiesTable\" | \"markdownChunkToMarkdownStringRecursive\" | \"markdownChunksToMarkdownStringRecursive\" | \"markdownToSayable\" | \"mdToPdf\" | \"mergeMarkdownParse\" | \"noNewlines\" | \"operationRadio\" | \"operationToMarkdown\" | \"printNestedTitles\" | \"print\" | \"projectToMarkdown\" | \"propertyToTableRow\" | \"sayablesToMp3\" | \"selectRandomOperation\" | \"simplifiedSchemaToMarkdownString\" | \"statementItemToMarkdown\" | \"tsFunctionToMarkdownString\" | \"tsInterfaceToMarkdownString\" | \"tsVariableToMarkdownString\" | \"upMarkdownChunkLevelRecursively\" | \"convertPdfToMd\" | \"findAudioWithViewsArray\" | \"markdownParseToShortMarkdown\" | \"shortMarkdownToMarkdownParse\" | \"augmentShortMarkdown\" | \"fetchVoices\" | \"generateAugmentedShortMarkdown\" | \"getOrGenerateShortMarkdown\" | \"parseDialogue\" | \"uberduckGetPath\" | \"uberduckSpeak\" | \"voiceCloneDialogue\" | \"convertCsvToJson\" | \"convertXlsToJson\" | \"readCsvFileSync\" | \"readCsvFile\" | \"readJsonFileSync\" | \"readJsonFile\" | \"readProjectRelativeJsonFile\" | \"readKvmdFile\" | \"readMarkdownFileToModel\" | \"readMarkdownFile\" | \"getFolderTypescriptIndex\" | \"readTypescriptFile\" | \"generateCsvInstance\" | \"generateJsonSingleInstance\" | \"generateKvmdInstance\" | \"generateMarkdownInstance\" | \"generateSlugTestModel\" | \"getMergedQueryConfig\" | \"randomName\" | \"runModelEndToEndTest\" | \"testOperationModels\" | \"cacheLookup\" | \"calculateOperatingSystemBundle\" | \"deleteDbModel\" | \"getDatabaseMenu\" | \"getDbModelMetadata\" | \"getDbModelNames\" | \"getDbModel\" | \"getFunctionIndex\" | \"getNestedDatabaseMenu\" | \"getReferencableModelData\" | \"hasDbRecipes\" | \"makeSrcRelativeFolder\" | \"tsInterfaceToDbMenu\" | \"upsertDbModel\" | \"validateInput\" | \"validateResult\" | \"addDefaultValues\" | \"alterAny\" | \"alterCsv\" | \"alterJsonMultiple\" | \"alterJsonSingle\" | \"alterKeyValueMarkdown\" | \"alterMarkdown\" | \"augmentItemWithReferencedDataRecursively\" | \"calculateOperationsObject\" | \"createDb\" | \"findParent\" | \"getAugmentedData\" | \"getDatabaseFiles\" | \"getDatabaseRootFolder\" | \"getDbFileLocation\" | \"getDbStorageMethodExtension\" | \"getDefaultLocationPattern\" | \"getItemModelLocation\" | \"getLength\" | \"getLocationPattern\" | \"getMergedConfigOperationPath\" | \"getParentSlug\" | \"getRootFolders\" | \"getWildcardDbFileLocations__OLD\" | \"getWildcardDbFileLocations\" | \"groupByFile\" | \"makeStoringItem\" | \"mergeConfigs\" | \"removeKeyValueMarkdown\" | \"removeMultiple\" | \"upsertItems\" | \"upsertKeyValueMarkdown\" | \"upsert\" | \"waitForLockfile\" | \"validateModel\" | \"validate\" | \"getFunctionExecutions\" | \"getFunctionQueryPaths\" | \"getPublicBundleConfig\" | \"getSrcRelativeFolderPath\" | \"getTsFunction\" | \"getAllOperations\" | \"getAllPackagesNames\" | \"getGithubPersonalAccessToken\" | \"getGithubRepoLastCommitInfo\" | \"getRepoNameFromRepositoryUrl\" | \"initializeGitOrUseExistingAndPull\" | \"operationGithubPull\" | \"operationGithubPush\" | \"pullMultipleOperations\" | \"pushMultipleOperations\" | \"readAndWriteToPackageJsonExample\" | \"updateAllOperationStatus\" | \"getAugmentedWordObject\" | \"getAugmentedWords\" | \"getBundleAugmentedWords\" | \"codestoriesGetPages\" | \"codestoriesGetStaticPaths\" | \"codestoriesGetStaticProps\" | \"docsGetPages\" | \"getMarkdownReaderPages\" | \"getPublicMarkdownFilePaths\" | \"removeExtensionsFromPath\" | \"removeNumberPrefix\" | \"shouldExposeMarkdownFile\" | \"stripReadmeFromFolder\" | \"copyStaticAssets\" | \"docsGetStaticPaths\" | \"docsGetStaticProps\" | \"getAllMarkdownReaderPages\" | \"getChildren\" | \"getFolderExplorationInfo\" | \"getMarkdownModelPages\" | \"getMarkdownPageInfo\" | \"getMarkdownReaderQueryPaths\" | \"getOperationPages\" | \"getReaderTodoPages\" | \"markdownReaderGetStaticPaths\" | \"markdownReaderGetStaticPropsFromPages\" | \"markdownReaderGetStaticProps\" | \"putReadmeOnTop\" | \"getQueryPath\" | \"addPeerMessage\" | \"addPeer\" | \"augmentDevice\" | \"deviceGetAppsCalculated\" | \"getAllAppOperations\" | \"getAugmentedPersons\" | \"getFirstEmoji\" | \"getNestedPathObject\" | \"getPeerMessages\" | \"getPeerPeople\" | \"getPeersFromPeersRecursively\" | \"getPublicFolderNestedPathObjectFromPeer\" | \"getPublicFolderNestedPathObject\" | \"getPublicPeers\" | \"isPortUsed\" | \"lateFetchPeerMessageSync\" | \"ping\" | \"proactivePushAddPeerMessage\" | \"removePeer\" | \"sortDevices\" | \"updatePeer\" | \"getPrimaryPersona\" | \"youtubeToPlayItem\" | \"getDayNumber\" | \"remindMe\" | \"getPostableFrontmatterSchema\" | \"copyPath\" | \"deleteFileOrFolder\" | \"getFileContents\" | \"getFrontmatterSchema\" | \"getWriterWebPagesMenu\" | \"getWriterWebPages\" | \"movePath\" | \"newFile\" | \"newFolder\" | \"processAssetUpload\" | \"renameFileOrFolder\" | \"saveFileContents\" | \"trashFileOrFolder\" | \"updateFrontmatter\" | \"getLight\" | \"getLocation\" | \"fetchWithTimeout\" | \"isOnline\" | \"calculateBbqAbility\" | \"calculateCloudyness\" | \"calculateCodeFromNatureAbility\" | \"calculateDresscode\" | \"calculateKiteability\" | \"calculateRainyness\" | \"calculateSunnyness\" | \"calculateWindyness\" | \"fetchWeatherStormGlass\" | \"fetchWeatherTommorowIOApi\" | \"getCustomWeatherData\" | \"cleanupTsDatabase\" | \"shouldDeleteTsModel\" | \"findAllDependencyOperations\" | \"findDependantsRecursively\" | \"findDependants\" | \"findDependenciesRecursively\" | \"findMonorepoExports\" | \"findMonorepoImports\" | \"findMonorepoModules\" | \"getDependencyObject\" | \"getDependencyTree\" | \"getOldDependencyTree\" | \"getOperationDependencyReasons\" | \"generateBunFile\" | \"generateBunMonopackage\" | \"generateBunTypes\" | \"generateBunVariables\" | \"getItemNewPath\" | \"generateNamedIndex\" | \"generateSimpleIndex\" | \"isTestFn\" | \"mapToImportStatement\" | \"generateDbSdk\" | \"generateEnvSdks\" | \"generateFunctionPathsSdk\" | \"generateFunctionSdks\" | \"generateInterfacePathsSdk\" | \"generateOperationsSdk\" | \"generateSdkApiWatcher\" | \"generateSdkApi\" | \"generateSdkOperations\" | \"getFunctionSdksContent\" | \"getSdkDescription\" | \"getSdkFunctionsPerClassification\" | \"isNonUiOperationBuild\" | \"newEnvSdk\" | \"newFunctionKeysSdkOperation\" | \"newFunctionSdkOperation\" | \"tsFunctionIsIndexable\" | \"tsFunctionIsSdkable\" | \"updateClassifications\" | \"getImportedDependencies\" | \"getPackage\" | \"isAbsoluteImport\" | \"calculatePackageJsonDependencies\" | \"findAndWriteImportsExports\" | \"getDefaultSymbolType\" | \"getExportSpecifierNames\" | \"getExportSymbolTypeRecursive\" | \"getImportSpecifiersWithNames\" | \"getImportsExports\" | \"getPackageNameFromAbsoluteImport\" | \"getSymbolTypeDeclarations\" | \"getTypeFromImportSpecifierRecursive\" | \"isAbsoluteImportBuiltin\" | \"isImportFromOptionalFile\" | \"writeResult\" | \"getMissingDependencies\" | \"findAndUpsertTsInterfaces\" | \"findCommentTypes\" | \"generateSchema\" | \"getAllComments\" | \"getDbStorageMethod\" | \"getFrontmatterDbStorageMethod\" | \"getFrontmatterFunctionParameters\" | \"getIndexId\" | \"getMaxIndentationDepth\" | \"getMinMaxValidation\" | \"getNumberOfLines\" | \"getParamSchema\" | \"getParametersFromInterfaces\" | \"getPossibleRefs\" | \"getSpecialExtensionDbStorageMethod\" | \"getTsStatements\" | \"getTypeInfo\" | \"getValidatedOperationPathParse\" | \"hasDefinition\" | \"hasTypescriptFileChanged\" | \"indexImportsExportsForFilePath\" | \"indexTypescriptFilePath\" | \"indexTypescriptFile\" | \"indexTypescript\" | \"isPrimitive\" | \"makeTsComment\" | \"removeTypescriptIndex\" | \"schemaToTsInterface\" | \"tryCreateSchema\" | \"typeToSchema\" | \"preIndexLint\" | \"minifyBuild\" | \"getAvailableOperationName\" | \"newOperationWithFiles\" | \"newOperation\" | \"newTemplate\" | \"buildPackage\" | \"installMissingMonorepoDependencies\" | \"obfucsate\" | \"testPackage\" | \"prettierOperation\" | \"clearTsDatabase\" | \"executeCommandQuietUnlessFail\" | \"exitIfProcessDependenciesChanged\" | \"generateJsonSchemas\" | \"getAllDbModels\" | \"getFileIds\" | \"getIndexFileIds\" | \"getSrcIds\" | \"isOperationBuildNeeded\" | \"isSdkOperation\" | \"rebuildAllOperations\" | \"rebuildOperation\" | \"shouldSkip\" | \"yarnBuild\" | \"renameOperation\" | \"createSimpleTypescriptFile\" | \"alterTypescriptFile\" | \"alterTypescriptInstance\" | \"buildEverythingInRightOrder\" | \"detectCircularDependencies\" | \"getImports\" | \"getOperationPathsRebuildRequired\" | \"getTypescriptData\" | \"isAbsoluteModuleName\" | \"operationGetDependencies\" | \"operationGetIndexedDependencies\" | \"reindexAllOperationsCircularDependencies\" | \"reindexCircularDependencies\" | \"setTypescriptData\" | \"runTestsForOperation\" | \"runTests\" | \"getAllTsMorphSourceFiles\" | \"getHasGeneric\" | \"getTsMorphProject\" | \"comparePassword\" | \"encryptPassword\" | \"calculateDeviceName\" | \"executeFunctionWithParameters\" | \"getAuthorizationInfo\" | \"isGetEndpoint\" | \"savePageVisit\" | \"storeFunctionExecution\" | \"upsertDevice\" | \"addAuthenticationMethod\" | \"addDeviceAuthenticationMethodConfirm\" | \"addDeviceAuthenticationMethodWithContext\" | \"addPersonAuthenticationMethodWithContext\" | \"findAuthenticatedPersonWithHandle\" | \"findLoggedinPersonsWithContext\" | \"getMeWithContext\" | \"getPublicPerson\" | \"getPublicPersons\" | \"isPhoneNumber\" | \"isValidPassword\" | \"loginWithContext\" | \"loginWithPasswordWithContext\" | \"logoutWithContext\" | \"removeDeviceAuthenticationMethodWithContext\" | \"removePersonAuthenticationMethodWithContext\" | \"signupWithContext\" | \"signupWithPasswordWithContext\" | \"switchCurrentPersonWithContext\" | \"updateMeWithContext\" | \"sayDutch\" | \"sayLanguage\" | \"sayNepali\" | \"saySomething\" | \"textToMp3\" | \"askOk\" | \"ask\" | \"getArgumentOrAsk\" | \"cliVersionUpdates\" | \"handleVersionUpdates\" | \"execAsync\" | \"spawnAsync\" | \"executeCommand\" | \"getCommand\" | \"isCommandPerOs\" | \"getDbPath\" | \"rawPolygonToPolygon\" | \"dev\" | \"nodemon\" | \"chatGPTAuth\" | \"detectChatGptPage\" | \"openAIChat\" | \"checkAndGetSlackFileUrl\" | \"elementExists\" | \"getAllMessages\" | \"getLatestMessages\" | \"getSlackChannelMemberList\" | \"getSlackChannels\" | \"getSlackMessageFrom\" | \"getSlackWorkspaces\" | \"scrapeSlackMessage\" | \"scrollToTop\" | \"selectSlackChannel\" | \"selectSlackWorkspace\" | \"sendSlackMessage\" | \"slackLogin\" | \"storeAllSlackChannel\" | \"storeSlackChannelMember\" | \"detectTwitterPage\" | \"getTwitterPostUrl\" | \"postTweetOnTwitter\" | \"scrapPersonTweets\" | \"getAbsolutePathMdFileName\" | \"getAllPostables\" | \"getPersonDetails\" | \"getPersonsMenu\" | \"getSocialMediaChannelsMenu\" | \"getSocialMediaMenu\" | \"addSocialMediaCredential\" | \"canBePosted\" | \"createAllSocialMediaPost\" | \"createSocialMediaPost\" | \"devtoCotentAnalyzer\" | \"facebookContentAnalyzer\" | \"getSocialMediaCredentials\" | \"mediumCotentAnalyzer\" | \"postSocialMediaPostToDevto\" | \"postSocialMediaPostToFacebook\" | \"postSocialMediaPostToMedium\" | \"postSocialMediaPostToReddit\" | \"postSocialMediaPostToTwitter\" | \"redditContentAnalyzer\" | \"socialMediaPostPlanner\" | \"startSocialMediaController\" | \"twitterContentAnalyzer\" | \"updateSocialMediaPost\" | \"makeExercises\" | \"driverLogin\" | \"driverSignup\" | \"earthDistance\" | \"getMyJeep\" | \"getPublicJeeps\" | \"updateMyProfile\" | \"addToken\" | \"ensureToken\" | \"findAssetParametersRecursively\" | \"getConversionInfoFromType\" | \"getExtensionFromAsset\" | \"getNameFromRelativePath\" | \"getNameWithTokenFromRelativePath\" | \"getReferencedAssetApiUrl\" | \"getTypeFromUrlOrPath\" | \"readableSize\" | \"removeTokenIfPresent\" | \"getEncoding\" | \"isBinary\" | \"isText\" | \"canAccessSync\" | \"canAccess\" | \"canExecuteSync\" | \"canExecute\" | \"canReadSync\" | \"canRead\" | \"canSeeSync\" | \"canSee\" | \"canWriteSync\" | \"canWrite\" | \"copyAllRelativeFiles\" | \"findFileNameCaseInsensitive\" | \"getAllFoldersUntilFolder\" | \"getFileName\" | \"getFirstAvailableFilename\" | \"getFolderSizeObject\" | \"getFolder\" | \"getLastFolder\" | \"getOneFolderUpPath\" | \"getPathCombinations\" | \"oneUp\" | \"parseMd\" | \"removeAllExcept\" | \"renameAndCreate\" | \"updateSingleNestedJsonFile\" | \"writeJsonToFile\" | \"writeStringToFile\" | \"writeToFiles\" | \"getTsConfig\" | \"byteCount\" | \"calculatePathMetaData\" | \"categorizeFiles\" | \"getFolderSummary\" | \"getPathMainComment\" | \"getSizeSummary\" | \"sumSizeSummary\" | \"makeFileType\" | \"findFolderWhereMatch\" | \"findOperationBasePathWithClassification\" | \"findOperationBasePath\" | \"getAllPackageJsonDependencies\" | \"getCommonAncestor\" | \"getOperationClassificationObject\" | \"getOperationClassification\" | \"getOperationPathParse\" | \"getOperationPath\" | \"getOperationRelativePath\" | \"getPathParse\" | \"getPathsWithOperations\" | \"getProjectRoot\" | \"getRelativeLinkPath\" | \"getRelativePath\" | \"getRootPath\" | \"getSrcRelativeFileId\" | \"getSubExtensions\" | \"hasDependency\" | \"isBundle\" | \"isOperation\" | \"isUiOperation\" | \"isWorkspaceRoot\" | \"packageCompilesTs\" | \"tsconfigCompilesEsm\" | \"getDependenciesSummary\" | \"getOperationMetaData\" | \"recalculateOperationIndexJson\" | \"getFileTypeFromPath\" | \"getWriterType\" | \"hasSubExtension\" | \"isGeneratedOperationName\" | \"isGeneratedOperation\" | \"isIndexableFileId\" | \"getAssetInputType\" | \"getParameterContentType\" | \"isCalculatedParameter\" | \"isGeneratedParameterName\" | \"jsonToMdString\" | \"jsonToSayString\" | \"getSimpleJsonString\" | \"flattenMarkdownChunks\" | \"getKvmdItemsRecursively\" | \"getParagraphsRecursively\" | \"kvmdDataMap\" | \"kvmdDataToString\" | \"kvmdParseToMarkdownString\" | \"markdownStringToKvmdParse\" | \"parseKvmdLine\" | \"chunkToStringRecursively\" | \"getChunkParagraphsRecursively\" | \"getImplicitId\" | \"getMarkdownIntro\" | \"getMarkdownParseParagraphs\" | \"getMarkdownReferencePaths\" | \"getMarkdownReferencesFromParagraph\" | \"markdownParseToMarkdownStringFromContent\" | \"markdownParseToMarkdownString\" | \"mdContentParseRecursively\" | \"mdToJsonParse\" | \"parseFrontmatterMarkdownString\" | \"parseMarkdownParagraph\" | \"parseMdToChunks\" | \"removeHeaderPrefix\" | \"findCodeblocks\" | \"findCodespans\" | \"findEmbeds\" | \"findLinks\" | \"flattenMarkdownString\" | \"flattenMarkedTokenRecursive\" | \"parsePrimitiveArray\" | \"parsePrimitiveBoolean\" | \"parsePrimitiveString\" | \"parsePrimitive\" | \"tryParseJson\" | \"bodyFromQueryString\" | \"getFirstQueryStrings\" | \"getQueryPart\" | \"isValidEntry\" | \"toQueryString\" | \"MatchingText\" | \"PathSearchResults\" | \"findSentenceMatches\" | \"searchRecursiveObjectArray\" | \"frontmatterParseToString\" | \"frontmatterToObject\" | \"getFrontmatterValueString\" | \"markdownModelTypeToMarkdownString\" | \"objectToFrontmatter\" | \"parseFrontmatterString\" | \"quotedOrNot\" | \"stringifyNewlines\" | \"getFunctionExersize\" | \"createInvoiceContactMarkdown\" | \"createInvoiceMarkdown\" | \"createKeyValueMarkdown\" | \"money\" | \"newInvoice\" | \"printDate\" | \"markdownParseToMarkdownModelType\" | \"parseMarkdownModelTimestamp\" | \"tryParseDate\" | \"generateId\" | \"generatePassword\" | \"generateRandomString\" | \"generateTime\" | \"isEmail\" | \"createUser\" | \"getBacktickContents\" | \"isInPeriod\" | \"isOutOfStock\" | \"kvmdToCredential\" | \"upcomingOutgoingFlights\" | \"whereShouldIgo\" | \"crudPageToWebPages\" | \"functionFormPageToWebPage\" | \"stripCommentEnd\" | \"stripCommentStart\" | \"stripComment\" | \"stripSlashes\" | \"stripStar\" | \"trim\" | \"getCompileErrors\" | \"getTypescriptErrorsFromFiles\" | \"writeBuildErrors\" | \"findFirstCommentTypes\" | \"getDataParameterNames\" | \"getPossibleReferenceParameterNames\" | \"getProperties\" | \"getRefLink\" | \"getReferencableModels\" | \"getReferenceParameterInfo\" | \"getSchemaItems\" | \"getSchema\" | \"simplifiedSchemaToTypeDefinitionString\" | \"simplifySchema\" | \"getSimpleTypescriptFileString\" | \"jsonToString\" | \"parseRawSimpleTypescriptFile\" | \"isResultOfInterface\" | \"makeTest\" | \"getGetApiUrl\" | \"untypedApiFunction\" | \"makeArraysGetEndpoint\" | \"makeGetEndpoint\" | \"converse\" | \"executeSdkFunction\" | \"getCachedExportedFunctions\" | \"getMenu\" | \"getSdkFunctionPaths\" | \"objectStringToJson\" | \"parseIfJson\" | \"parsePrimitiveJson\" | \"stringToJson\" | \"BreadCrumbs\" | \"renderBreadCrumbs\" | \"ClickableIcon\" | \"errorToast\" | \"infoToast\" | \"showStandardResponse\" | \"successToast\" | \"warningToast\" | \"FancyLoader\" | \"getFileType\" | \"LabeledButton\" | \"getFullPath\" | \"getLastPathsChunk\" | \"usePath\" | \"Tabs\" | \"createCodeblockMarkdown\" | \"useCustomUrlStore\" | \"getKeysAtPathFromNestedObject\" | \"getMenuPagesObject\" | \"makeNestedObjectFromQueryPathObject\" | \"mapChildObjectRecursive\" | \"nestedObjectToChildObject\" | \"nestedPathObjectToNestedMenuRecursive\" | \"nestifyQueryPathObjectRecursive\" | \"queryPathsArrayToNestedPathObject\" | \"reduceQueryPathsRecursively\" | \"camelCase\" | \"capitalCase\" | \"capitaliseFirstLetter\" | \"convertCase\" | \"fileSlugify\" | \"getDelimiter\" | \"humanCase\" | \"kebabCase\" | \"lowerCaseArray\" | \"pascalCase\" | \"slugify\" | \"snakeCase\" | \"apply\" | \"createEnum\" | \"createMappedObject\" | \"destructureOptionalObject\" | \"findLastIndex\" | \"getObjectFromParamsString\" | \"getObjectKeysArray\" | \"getParameterAtLocation\" | \"getSubsetFromObject\" | \"groupByKey\" | \"hasAllLetters\" | \"insertAt\" | \"isAllTrue\" | \"isArrayEqual\" | \"makeArray\" | \"mapAsync\" | \"mapKeys\" | \"mapMany\" | \"mapValuesSync\" | \"mergeNestedObject\" | \"mergeObjectParameters\" | \"mergeObjectsArray\" | \"mergeObjects\" | \"noEmptyString\" | \"objectMapAsync\" | \"objectMapSync\" | \"objectValuesMap\" | \"omitUndefinedValues\" | \"onlyDuplicates\" | \"onlyUnique2\" | \"onlyUnique\" | \"pickRandomArrayItem\" | \"putIndexAtIndex\" | \"removeIndexFromArray\" | \"removeOptionalKeysFromObjectStrings\" | \"removeOptionalKeysFromObject\" | \"replaceLastOccurence\" | \"reverseString\" | \"sumAllKeys\" | \"sumObjectParameters\" | \"sum\" | \"takeFirst\" | \"trimSlashes\" | \"getCallerFileName\" | \"log\" | \"parseTitle\" | \"cleanupTimer\" | \"generateUniqueId\" | \"getNewPerformance\" | \"oneByOne\" | \"isPlural\" | \"isSingular\" | \"pluralize\" | \"singularize\" | \"runChildProcess\" | \"clickOnSpanTag\" | \"delay\" | \"facebookLogin\" | \"foundOrNotXpath\" | \"foundOrNot\" | \"getBrowserPageById\" | \"getBrowserTabs\" | \"getBrowser\" | \"getChromeExecutablePath\" | \"getConnectedBrowsers\" | \"getIdlePage\" | \"getNewPage\" | \"gmailLogin\" | \"isCaptchaExist\" | \"logConsoleIfDebug\" | \"openMultiTabs\" | \"openNewBrowserOnChildProcess\" | \"openNewBrowser\" | \"openPage\" | \"racePromises\" | \"retryClickAndWaitSelector\" | \"retryWaitSelector\" | \"setBrowserPageIdle\" | \"setBrowserSession\" | \"setInnerHtml\" | \"setInputValue\" | \"solveReptcha\" | \"trueClick\" | \"twitterLogin\" | \"typeInTheInputField\" | \"typeOnTheTargetWithXpathSelector\" | \"waitMilliseconds\">(functionName: TFunctionName, parameters: any[] | undefined, serverContext: import(\"/Users/king/King/operations/node_modules/@types/server/typings/common\").Context) => Promise<import(\"/Users/king/King/operations/tools/user-interfaces/api/api-types/build/api-types\").ApiReturnType<any>>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async <\n  TFunctionName extends keyof typeof sdk\n>(\n  functionName: TFunctionName,\n  parameters: undefined | any[],\n  serverContext: Context\n): Promise<RealApiReturnType<any>> => {\n  const publicBundleConfig = await getPublicBundleConfig();\n  const executionId = generateId();\n\n  if (isGetEndpoint(functionName)) {\n    // NB: shortcut for now, until we have cookie support:\n\n    const result = await (sdk[functionName] as any)(serverContext);\n\n    return result;\n  }\n\n  const performance: (PerformanceItem | undefined)[] = [];\n\n  performance.push(getNewPerformance(\"start\", executionId, true));\n\n  // 1) upsert device\n  const device = await upsertDevice(serverContext);\n  if (!device) {\n    console.log(\"Couldn't create device\");\n    return {\n      isSuccessful: false,\n      message: \"Couldn't create device\",\n    };\n  }\n\n  performance.push(getNewPerformance(\"upsertDevice\", executionId));\n\n  // 2) get ts function\n  const tsFunction = await getTsFunction(functionName);\n  if (!tsFunction) {\n    return {\n      isSuccessful: false,\n      message: `TsFunction file could not be found in \"sdk-function-paths\" (${functionName}). Maybe you need to rebuild your operation and update your SDK?`,\n    };\n  }\n  performance.push(getNewPerformance(\"getTsFunction\", executionId));\n\n  // 4) cache lookup\n  const cacheLookupResult = cacheLookup(functionName, parameters);\n  if (cacheLookupResult.hasValidCache) {\n    return {\n      result: cacheLookupResult.result,\n      isSuccessful: true,\n      isCached: true,\n    };\n  }\n  performance.push(getNewPerformance(\"cacheLookup\", executionId));\n\n  // 5) validation\n  //@ts-ignore\n  const validationResult = validateInput(functionName, parameters, tsFunction);\n\n  // if (!validationResult.isValid) {\n  //   return {\n  //     isSuccessful: false,\n  //     errors: validationResult.errors,\n  //     message: `Your input has some errors. Input ${JSON.stringify(\n  //       parameters\n  //     )}.`,\n  //   };\n  // }\n  performance.push(getNewPerformance(\"inputValidation\", executionId));\n\n  // 6) running function\n  const fn = sdk[functionName];\n\n  if (typeof fn !== \"function\") {\n    return {\n      isSuccessful: false,\n      message: `Function not found in the api-sdk: ${functionName}`,\n    };\n  }\n\n  const { hasAuthorization, authorizations, groups } = getAuthorizationInfo(\n    device,\n    tsFunction,\n    fn\n  );\n\n  if (publicBundleConfig?.slug !== \"passionfruit\" && !hasAuthorization) {\n    return {\n      isSuccessful: false,\n      isUnauthorized: true,\n      message:\n        \"You are not authorized to execute this function, you might need to login.\",\n    };\n  }\n\n  // 3) auth\n  // OLD simple way (passionfruit-only, to be deprecated once admin signup works good enough)\n  const authToken: string | undefined = serverContext.data?.authToken;\n  if (\n    publicBundleConfig?.slug === \"passionfruit\" &&\n    privateAuthToken !== authToken\n  ) {\n    return {\n      isSuccessful: false,\n      isUnauthorized: true,\n      message:\n        \"You are not authorized to execute this function, you might need to login.\",\n    };\n  }\n\n  performance.push(getNewPerformance(\"auth\", executionId));\n\n  /**\n   * Convention\n   */\n\n  const needsReturnRaw =\n    functionName.endsWith(apiConventions.rawFunctionConventionSuffix) ||\n    functionName.endsWith(apiConventions.getFunctionConventionSuffix);\n\n  const needsFunctionContext =\n    functionName.endsWith(apiConventions.contextFunctionConventionSuffix) ||\n    needsReturnRaw;\n\n  const functionContext: FunctionContext = {\n    tsFunction,\n    authorizations,\n    device,\n    groups,\n    hasAuthorization,\n    authToken: device.authToken,\n    serverContext,\n  };\n\n  const parametersWithContext = needsFunctionContext\n    ? [functionContext].concat(parameters || [])\n    : parameters;\n\n  console.dir(\n    { executeFunctionWithParameters: functionContext },\n    { depth: 99 }\n  );\n  // console.log(`We are authorized to execute ${functionName}! Let's do it`);\n  // @ts-ignore\n  const result = await fn(...parametersWithContext);\n  performance.push(getNewPerformance(\"function\", executionId));\n\n  cleanupTimer(executionId);\n\n  //@ts-ignore\n  const resultValidation = validateResult(functionName, result, tsFunction);\n\n  // console.log({ serverwithPar: performance });\n  // 6) store performance\n  storeFunctionExecution(\n    tsFunction,\n    parameters,\n    result,\n    performance.filter(notEmpty),\n    false\n  );\n\n  // need to return this immediately without the surrounding object, because it might do stuff with that server context that needs to be returned\n  if (needsReturnRaw) return result;\n\n  if (result === undefined) {\n    return {\n      isSuccessful: true,\n      isCached: false,\n      message: \"Function was executed but did not give any response\",\n      result: undefined,\n    };\n  }\n\n  return {\n    isSuccessful: true,\n    isCached: false,\n    result,\n  };\n}",
  "description": "steps for someone to use the API\n\n1) auth\n2) cache lookup\n3) input validation\n4) running function\n5) store cache\n6) store performance\n7) returning result\n\nTODO: make it possible to return result BEFORE storing cache and performance. we probably need to use the server.reply for this, which makes this function unusable in any other setting than an api, so let's make it optional",
  "id": "nbqllgyohfgumzolpqnwsxjc"
}