{
  "createdAt": 1667634816295,
  "updatedAt": 1667634816295,
  "deletedAt": 0,
  "createdFirstAt": 1667634816295,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "executeFunctionWithParameters",
  "slug": "execute-function-with-parameters",
  "operationRelativeTypescriptFilePath": "src/executeFunctionWithParameters.ts",
  "type": {
    "rawType": "(functionName: \"compressAsset\" | \"convertToMp3\" | \"deleteReferencedAsset\" | \"downloadRemoteAsset\" | \"findAbsoluteAssetPathFromReference\" | \"findAllProjectMedia\" | \"findAssetParametersRecursively\" | \"getAssetDirectlyGetApi\" | \"getReferencedAssetGetApi\" | \"getStorageLocationInfo\" | \"getTemporaryAssetsFolderPath\" | \"processAsset\" | \"processItemAssets\" | \"removeOldTemporaryAssets\" | \"serverDownloadReply\" | \"uploadAssetPostApi\" | \"folderGetUpdatedAt\" | \"getExtension\" | \"getFolderJs\" | \"getSubExtension\" | \"isPathRelative\" | \"removeTrailingSlash\" | \"withoutExtension\" | \"getAssociatedMd\" | \"getAvailableFolderPath\" | \"getOperationBins\" | \"getOperationPackageName\" | \"getPackageJson\" | \"getPackageSourcePaths\" | \"isEqualArray\" | \"renameTemplateFiles\" | \"renameTemplateToNormalFile\" | \"renameToTemplateFile\" | \"setJsonKey\" | \"setKeyAtLocation\" | \"initiateWatch\" | \"makeSubscription\" | \"pickWatcher\" | \"watchFoldersChokidar\" | \"watchFoldersFs\" | \"watchFolders\" | \"writeToAssets\" | \"allOperationsRemoveJsSrc\" | \"allOperationsToMarkdown\" | \"clearAllTsDatabases\" | \"codeAll\" | \"forAllFiles\" | \"forAllFolders\" | \"getAllOperationClassifications\" | \"gitShipAllRepos\" | \"mdAllOperations\" | \"minifyAllOperations\" | \"publishAllOperations\" | \"removeAllFiles\" | \"removeAllFolders\" | \"removeAll\" | \"renameAll\" | \"runScriptEverywhere\" | \"setScriptEverywhere\" | \"exploreOperation\" | \"exploreProject\" | \"getExplorationType\" | \"getFileWithExtension\" | \"getFolderExplorationDetails\" | \"getInstanceNames\" | \"getProjectRelativePaths\" | \"hasSameProjectPath\" | \"getAllOperationSourcePaths\" | \"determineFileType\" | \"exploreGitRepoFolders\" | \"exploreMultiple\" | \"exploreOperationFolders\" | \"explorePreset\" | \"explore\" | \"findAllDocsFolderPaths\" | \"findAllDotGitFolders\" | \"findAllFoldersWithName\" | \"findAllPackages\" | \"findAllTodoFolderPaths\" | \"pathArrayIsOperation\" | \"startApp\" | \"brigtnessFull\" | \"brigtnessZero\" | \"decreaseBrightness\" | \"increaseBrightness\" | \"sensibleSetup\" | \"playMusic\" | \"generateRecurringReminders\" | \"remindMeAboutNextMinute\" | \"setRandomTimezone\" | \"disableDarkMode\" | \"enableDarkMode\" | \"setDarkmodeCommand\" | \"toggleDarkMode\" | \"disableScreenSleep2\" | \"disableScreenSleep\" | \"enableScreenSleep\" | \"downVolume\" | \"getVolume\" | \"setVolume\" | \"upVolume\" | \"getOpenableFilePath\" | \"vscodeOpen\" | \"generateCsvInstance\" | \"generateJsonSingleInstance\" | \"generateKvmdInstance\" | \"generateMarkdownInstance\" | \"generateSlugTestModel\" | \"getMergedQueryConfig\" | \"randomName\" | \"runModelEndToEndTest\" | \"testOperationModels\" | \"cacheLookup\" | \"calculateOperatingSystemBundle\" | \"deleteDbModel\" | \"getDatabaseMenu\" | \"getDbModelNames\" | \"getDbModel\" | \"getFunctionIndex\" | \"getNestedDatabaseMenu\" | \"getReferencableModelData\" | \"hasDbRecipes\" | \"makeSrcRelativeFolder\" | \"tsInterfaceToDbMenu\" | \"upsertDbModel\" | \"validateInput\" | \"addDefaultValues\" | \"alterAny\" | \"alterCsv\" | \"alterJsonMultiple\" | \"alterJsonSingle\" | \"alterKeyValueMarkdown\" | \"alterMarkdown\" | \"augmentItemWithReferencedDataRecursively\" | \"calculateOperationsObject\" | \"createDb\" | \"findParent\" | \"getAugmentedData\" | \"getDatabaseFiles\" | \"getDatabaseRootFolder\" | \"getDbFileLocation\" | \"getDbStorageMethodExtension\" | \"getItemModelLocation\" | \"getLength\" | \"getLocationPattern\" | \"getMergedConfigOperationPath\" | \"getParentSlug\" | \"getRootFolders\" | \"getWildcardDbFileLocations__OLD\" | \"getWildcardDbFileLocations\" | \"groupByFile\" | \"makeStoringItem\" | \"mergeConfigs\" | \"removeKeyValueMarkdown\" | \"removeMultiple\" | \"upsertItems\" | \"upsertKeyValueMarkdown\" | \"upsert\" | \"validateModel\" | \"validate\" | \"getBundleSummary\" | \"getDbModelsForBundle\" | \"createBackup\" | \"getHumanReadableDate\" | \"createDistribution\" | \"filterInterfacesFromOperationNames\" | \"getDbModelsFromOperations\" | \"calculateBundleOperations\" | \"calculateToPath\" | \"copyDocsAndReadme\" | \"copyFromRepoToNiche\" | \"copyOperation\" | \"copyReadmesBeforeFolderToBundle\" | \"copyTodosIntoBundle\" | \"findAndCopyOperations\" | \"generateAllBundles\" | \"generateBundle\" | \"generateBundles\" | \"getBundlePaths\" | \"getIndirectDependencies\" | \"mergeBundleConfigs\" | \"syncInformation\" | \"syncNicheFolder\" | \"yarnInstall\" | \"installNodeModules\" | \"yarnInstallNewDistribution\" | \"getTsFunction\" | \"calculateDeviceName\" | \"cleanupTimer\" | \"executeFunctionWithParameters\" | \"getHasAuthorization\" | \"getNewPerformance\" | \"storeFunctionExecution\" | \"upsertDevice\" | \"addAuthenticationMethod\" | \"addDeviceAuthenticatedMethod\" | \"addDeviceAuthenticationMethodConfirm\" | \"addPersonAuthenticationMethod\" | \"comparePassword\" | \"encryptPassword\" | \"isPhoneNumber\" | \"isValidPassword\" | \"login\" | \"logoutPostApi\" | \"removeDeviceAuthenticationMethod\" | \"removePersonAuthenticationMethod\" | \"signup\" | \"remindMeIn\" | \"sayDutch\" | \"sayLanguage\" | \"sayNepali\" | \"say\" | \"askOk\" | \"ask\" | \"getArgumentOrAsk\" | \"cliVersionUpdates\" | \"handleVersionUpdates\" | \"detectLanguage\" | \"generateSimpleSentence\" | \"makeAudioCourse\" | \"pickRandomArrayItem\" | \"sleep\" | \"createWordSimplificationMap\" | \"findBetterWords\" | \"getSynonymFrequencyDataset\" | \"preprocessSynonyms\" | \"preprocessWordFrequencies\" | \"speakWordsToLearn\" | \"getAugmentedWordObject\" | \"getAugmentedWords\" | \"getBundleAugmentedWords\" | \"copyStaticAssets\" | \"getAllMarkdownReaderPages\" | \"getFolderExplorationInfo\" | \"getMarkdownModelPages\" | \"getMarkdownPageInfo\" | \"getMarkdownReaderPages\" | \"getMarkdownReaderQueryPaths\" | \"getOperationPages\" | \"getPublicMarkdownFilePaths\" | \"getTodoPages\" | \"markdownReaderGetStaticPaths\" | \"markdownReaderGetStaticProps\" | \"removeExtensionsFromPath\" | \"removeNumberPrefix\" | \"shouldExposeMarkdownFile\" | \"getQueryPath\" | \"sendMail\" | \"addPeerMessage\" | \"addPeer\" | \"getAllAppOperations\" | \"getFirstEmoji\" | \"getNestedPathObject\" | \"getPeerMessages\" | \"getPeersFromPeersRecursively\" | \"getPeers\" | \"getPublicFolderNestedPathObjectFromPeer\" | \"getPublicFolderNestedPathObject\" | \"getPublicPeers\" | \"isPortUsed\" | \"lateFetchPeerMessageSync\" | \"ping\" | \"proactivePushAddPeerMessage\" | \"removePeer\" | \"updatePeer\" | \"sendSms\" | \"unzip\" | \"zip\" | \"csvItemArrayToCsvString\" | \"tryParseCsv\" | \"bundleFolderWithMarkdown\" | \"bundleToBookMarkdown\" | \"bundleToMarkdown\" | \"deployToVercel\" | \"emailMarkdownParse\" | \"generateStaticSite\" | \"getFunctionsInfo\" | \"getMergedMarkdownOutlineUrl\" | \"getOutline\" | \"getTitlesRecursively\" | \"makeOutlineMarkdownString\" | \"makePropertiesTable\" | \"markdownChunkToMarkdownStringRecursive\" | \"markdownChunksToMarkdownStringRecursive\" | \"markdownToSayable\" | \"mdToPdf\" | \"mergeMarkdownParse\" | \"noNewlines\" | \"operationRadio\" | \"operationToMarkdown\" | \"printNestedTitles\" | \"print\" | \"projectToMarkdown\" | \"propertyToTableRow\" | \"sayablesToMp3\" | \"selectRandomOperation\" | \"simplifiedSchemaToMarkdownString\" | \"tsFunctionToMarkdownString\" | \"tsInterfaceToMarkdownString\" | \"tsVariableToMarkdownString\" | \"upMarkdownChunkLevelRecursively\" | \"createFolder\" | \"getAllMarkdownFiles\" | \"getFileInfo\" | \"getTranslatedWord\" | \"markdownStoreAndRecord\" | \"parseMarkdownWordByWord\" | \"recordMdFile\" | \"startMarkdownTranslator\" | \"startTranslation\" | \"translatedArrayToKeyValue\" | \"watchMdFile\" | \"readCsvFileSync\" | \"readCsvFile\" | \"readJsonFileSync\" | \"readJsonFile\" | \"readKvmdFile\" | \"readMarkdownFileToModel\" | \"readMarkdownFile\" | \"getFolderTypescriptIndex\" | \"readTypescriptFile\" | \"getLocation\" | \"getLight\" | \"addSocialMediaCredential\" | \"contentParser\" | \"devtoCotentAnalyzer\" | \"facebookContentAnalyzer\" | \"facebookContentParser\" | \"getSocialMediaCredentials\" | \"mediumCotentAnalyzer\" | \"redditContentAnalyzer\" | \"socialMediaPostPlanner\" | \"startSocialMediaController\" | \"twitterContentAnalyzer\" | \"getPostableFrontmatterSchema\" | \"cleanupTsDatabase\" | \"shouldDeleteTsModel\" | \"findAllDependencyOperations\" | \"findDependantsRecursively\" | \"findDependants\" | \"findDependenciesRecursively\" | \"findMonorepoModules\" | \"getDependencyTree\" | \"generateNamedIndex\" | \"generateSimpleIndex\" | \"isTestFn\" | \"mapToImportStatement\" | \"generateDbSdk\" | \"generateEnvSdks\" | \"generateFunctionPathsSdk\" | \"generateFunctionSdks\" | \"generateOperationsSdk\" | \"generateSdkOperations\" | \"getSdkDescription\" | \"getSdkFunctions\" | \"isTsFunctionIndexable\" | \"newEnvSdk\" | \"newSdkKeysOperation\" | \"newSdkOperation\" | \"tsFunctionIsSdkable\" | \"getImportedDependencies\" | \"getPackage\" | \"isAbsoluteImport\" | \"calculatePackageJsonDependencies\" | \"findAndWriteImportsExports\" | \"getDefaultSymbolType\" | \"getExportSpecifierNames\" | \"getExportSymbolTypeRecursive\" | \"getImportSpecifiersWithNames\" | \"getImportsExports\" | \"getPackageNameFromAbsoluteImport\" | \"getSymbolTypeDeclarations\" | \"getTypeFromImportSpecifierRecursive\" | \"isAbsoluteImportBuiltin\" | \"isImportFromOptionalFile\" | \"writeResult\" | \"getMissingDependencies\" | \"findAndUpsertTsInterfaces\" | \"findCommentTypes\" | \"generateSchema\" | \"getAllComments\" | \"getDbStorageMethod\" | \"getFrontmatterDbStorageMethod\" | \"getFrontmatterFunctionParameters\" | \"getIndexId\" | \"getMaxIndentationDepth\" | \"getMinMaxValidation\" | \"getNumberOfLines\" | \"getParamSchema\" | \"getParametersFromInterfaces\" | \"getPossibleRefs\" | \"getSpecialExtensionDbStorageMethod\" | \"getTsStatements\" | \"getTypeInfo\" | \"getValidatedOperationPathParse\" | \"hasDefinition\" | \"indexTypescriptFile\" | \"indexTypescript\" | \"isPrimitive\" | \"makeTsComment\" | \"schemaToTsInterface\" | \"tryCreateSchema\" | \"typeToSchema\" | \"preIndexLint\" | \"minifyBuild\" | \"getAvailableOperationName\" | \"getOperationConfig\" | \"newOperationWithFiles\" | \"newOperation\" | \"newTemplate\" | \"buildPackage\" | \"installMissingMonorepoDependencies\" | \"obfucsate\" | \"testPackage\" | \"prettierOperation\" | \"clearTsDatabase\" | \"executeCommandQuietUnlessFail\" | \"exitIfProcessDependenciesChanged\" | \"getFileIds\" | \"getIndexFileIds\" | \"getSrcIds\" | \"isOperationBuildNeeded\" | \"isSdkOperation\" | \"rebuildAllOperations\" | \"rebuildOperation\" | \"shouldSkip\" | \"yarnBuild\" | \"renameOperation\" | \"runTestsForOperation\" | \"runTests\" | \"getAllTsMorphSourceFiles\" | \"getHasGeneric\" | \"getTsMorphProject\" | \"exitIfOperationsChange\" | \"gitCommitAllCron\" | \"watchOperations\" | \"execAsync\" | \"spawnAsync\" | \"getDbPath\" | \"rawPolygonToPolygon\" | \"fetchWithTimeout\" | \"isOnline\" | \"dev\" | \"nodemon\" | \"getFileContents\" | \"getFrontmatterSchema\" | \"moveFile\" | \"newFile\" | \"newFolder\" | \"renameFilename\" | \"saveFileContents\" | \"makeExercises\" | \"driverLogin\" | \"driverSignup\" | \"getMyJeep\" | \"getPublicJeeps\" | \"calculateFullCompany\" | \"companyAttachContributionInformation\" | \"companyAttachEsgMetricProofStates\" | \"companyAttachRequirements\" | \"companyAttachTransparency\" | \"concatenateItems\" | \"contributionAddNextContributions\" | \"getActivities\" | \"getAverage\" | \"getCompanies\" | \"getCompanyRequirementDescription\" | \"getFinalProducts\" | \"getFullCompanyData\" | \"getIngredientProducts\" | \"getProductValueChainForProduct\" | \"getProductValueChain\" | \"getRequiredValueChainData\" | \"getSustainabilityPlan\" | \"hasEsgMetricWithStatus\" | \"requirementAppliesToCompany\" | \"requirementAttachProofStates\" | \"sumEsgMetricProofStates\", authToken: string | undefined, parameters: any[] | undefined, ctx: import(\"/Users/king/King/operations/node_modules/@types/server/typings/common\").Context) => Promise<import(\"/Users/king/King/operations/tools/interfaces/api/api-types/build/api-types\").RealApiReturnType<any>>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  functionName: keyof typeof sdk,\n  authToken: string | undefined,\n  parameters: undefined | any[],\n  ctx: Context\n): Promise<RealApiReturnType<any>> => {\n  const executionId = generateId();\n\n  const performance: (PerformanceItem | undefined)[] = [];\n\n  performance.push(getNewPerformance(\"start\", executionId, true));\n\n  // 1) upsert device\n  // const device = await upsertDevice(ctx);\n  // if (false && !device) {\n  //   return {\n  //     isSuccessful: false,\n  //     message: \"Couldn't create device\",\n  //   };\n  // }\n  performance.push(getNewPerformance(\"upsertDevice\", executionId));\n\n  // 2) get ts function\n  const tsFunction = await getTsFunction(functionName);\n  if (!tsFunction) {\n    return {\n      isSuccessful: false,\n      message: \"TsFunction file could not be found\",\n    };\n  }\n  performance.push(getNewPerformance(\"getTsFunction\", executionId));\n\n  // const hasAuthorization = getHasAuthorization(device, tsFunction);\n\n  // // 3) auth\n  // if (false && !hasAuthorization) {\n  //   return {\n  //     isSuccessful: false,\n  //     isUnauthorized: true,\n  //     message:\n  //       \"You are not authorized to execute this function, you might need to login.\",\n  //   };\n  // }\n  performance.push(getNewPerformance(\"auth\", executionId));\n\n  // 4) cache lookup\n  const cacheLookupResult = cacheLookup(functionName, parameters);\n  if (cacheLookupResult.hasValidCache) {\n    return {\n      result: cacheLookupResult.result,\n      isSuccessful: true,\n      isCached: true,\n    };\n  }\n  performance.push(getNewPerformance(\"cacheLookup\", executionId));\n\n  // 5) validation\n  const validationResult = validateInput(functionName, parameters, tsFunction);\n\n  if (!validationResult.isValid) {\n    return {\n      isSuccessful: false,\n      errors: validationResult.errors,\n      message: \"Your input has some errors\",\n    };\n  }\n  performance.push(getNewPerformance(\"inputValidation\", executionId));\n\n  // 4) running function\n  const fn = sdk[functionName];\n  if (typeof fn !== \"function\") {\n    return {\n      isSuccessful: false,\n      message: \"Function not found\",\n    };\n  }\n  // @ts-ignore\n  const result = await fn(...parameters);\n  performance.push(getNewPerformance(\"function\", executionId));\n\n  // 6) store performance\n  storeFunctionExecution(\n    tsFunction,\n    parameters,\n    result,\n    performance.filter(notEmpty),\n    false\n  );\n\n  if (result === undefined) {\n    return {\n      isSuccessful: true,\n      isCached: false,\n      message: \"Function was executed but did not give any response\",\n      result: undefined,\n    };\n  }\n\n  return {\n    isSuccessful: true,\n    isCached: false,\n    result,\n  };\n}",
  "description": "steps for someone to use the API\n\n1) auth\n2) cache lookup\n3) input validation\n4) running function\n5) store cache\n6) store performance\n7) returning result\n\nTODO: make it possible to return result BEFORE storing cache and performance. we probably need to use the server.reply for this, which makes this function unusable in any other setting than an api, so let's make it optional",
  "id": "npszhqxoutzpstylhwqpwsaj"
}