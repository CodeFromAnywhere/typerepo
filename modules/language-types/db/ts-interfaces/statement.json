{
  "createdAt": 1670923147151,
  "updatedAt": 1670923147151,
  "deletedAt": 0,
  "createdFirstAt": 1670923147151,
  "id": "statement",
  "name": "Statement",
  "slug": "statement",
  "operationRelativeTypescriptFilePath": "src/Statement.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n---\ndbStorageMethod: jsonSingle\n---\n\nStatement model:\n\nMotivation:\n\n- create a database of the belief system of one or multiple entities (Person, Algorithm, species, etc.)\n- use this belief system for fact-checking, differentiative checking, value checking, and more.\n\n */\nexport interface Statement extends DefaultModelType {\n  /**\n   * your statement: definition, fact, question, quote\n   */\n  description: string;\n\n  /**\n   * source of the statement, if the statement was a non-original one found online somewhere\n   */\n  url?: string;\n\n  author_personId?: Id;\n\n  /**\n   * Number [0-1] representing agreement of admin\n   *\n   * - 1 meaning 100% agreement\n   * - 0 means 0% agreement or complete disagreement\n   */\n  agreement?: number;\n\n  /**\n   * Number [0,1] representing agreement of readers\n   *\n   * 1 reader can vote once\n   */\n  readersAgreement?: number;\n  readersAgreementVotedCount?: number;\n\n  /**\n   * defaults to 0.5 meaning average importancy\n   * this could be either a calculated or set property.\n   * could it be calculated on your value hierarchy?\n   * not sure if this is practical (yet) but still a very interesting property to have, or somehow calculate.\n   */\n  importancy?: number;\n  /**\n   * by default, importancy is calculated by one or multiple systems. As the admin you can change it\n   *\n   * TODO: once this is all working, possibly add reader-importancy and readersImportancyVotedCount\n   */\n  isImportancySet?: boolean;\n\n  /**\n   * A statement can connect to one or more words. This can be calculated automatically I guess, by looking at all WordMatrix words and WordCombinations that are inside of the statement. However, we may not want to put all of them in there.\n   *\n   * For now, let's skip this, since it's probably better to calculate it on the fly, not index it.\n   */\n  wordMatrixSlugs?: Slug[];\n  wordMatrixs?: WordMatrix[];\n}",
  "extensions": [
    "DefaultModelType"
  ],
  "isOperationIndex": false,
  "description": "\nStatement model:\n\nMotivation:\n\n- create a database of the belief system of one or multiple entities (Person, Algorithm, species, etc.)\n- use this belief system for fact-checking, differentiative checking, value checking, and more.",
  "dbStorageMethod": "jsonSingle",
  "isDbModel": true,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        },
        "deletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "createdFirstAt": {
          "$ref": "#/definitions/CreatedFirstAt"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
        },
        "description": {
          "type": "string",
          "description": "your statement: definition, fact, question, quote"
        },
        "url": {
          "type": "string",
          "description": "source of the statement, if the statement was a non-original one found online somewhere"
        },
        "author_personId": {
          "$ref": "#/definitions/Id"
        },
        "agreement": {
          "type": "number",
          "description": "Number [0-1] representing agreement of admin\n\n- 1 meaning 100% agreement\n- 0 means 0% agreement or complete disagreement"
        },
        "readersAgreement": {
          "type": "number",
          "description": "Number [0,1] representing agreement of readers\n\n1 reader can vote once"
        },
        "readersAgreementVotedCount": {
          "type": "number"
        },
        "importancy": {
          "type": "number",
          "description": "defaults to 0.5 meaning average importancy this could be either a calculated or set property. could it be calculated on your value hierarchy? not sure if this is practical (yet) but still a very interesting property to have, or somehow calculate."
        },
        "isImportancySet": {
          "type": "boolean",
          "description": "by default, importancy is calculated by one or multiple systems. As the admin you can change it\n\nTODO: once this is all working, possibly add reader-importancy and readersImportancyVotedCount"
        },
        "wordMatrixSlugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slug"
          },
          "description": "A statement can connect to one or more words. This can be calculated automatically I guess, by looking at all WordMatrix words and WordCombinations that are inside of the statement. However, we may not want to put all of them in there.\n\nFor now, let's skip this, since it's probably better to calculate it on the fly, not index it."
        },
        "wordMatrixs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordMatrix"
          }
        }
      },
      "required": [
        "createdAt",
        "createdFirstAt",
        "deletedAt",
        "description",
        "id",
        "operationName",
        "projectRelativePath",
        "updatedAt"
      ],
      "additionalProperties": false,
      "description": "--- dbStorageMethod: jsonSingle\n---\n\nStatement model:\n\nMotivation:\n\n- create a database of the belief system of one or multiple entities (Person, Algorithm, species, etc.)\n- use this belief system for fact-checking, differentiative checking, value checking, and more."
    },
    "simplifiedSchema": {
      "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nStatement model:\n\nMotivation:\n\n- create a database of the belief system of one or multiple entities (Person, Algorithm, species, etc.)\n- use this belief system for fact-checking, differentiative checking, value checking, and more.",
      "properties": [
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": false,
          "schema": {
            "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "description",
          "required": true,
          "schema": {
            "fullComment": "your statement: definition, fact, question, quote",
            "type": "string"
          }
        },
        {
          "name": "url",
          "required": false,
          "schema": {
            "fullComment": "source of the statement, if the statement was a non-original one found online somewhere",
            "type": "string"
          }
        },
        {
          "name": "author_personId",
          "required": false,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "agreement",
          "required": false,
          "schema": {
            "fullComment": "Number [0-1] representing agreement of admin\n\n- 1 meaning 100% agreement\n- 0 means 0% agreement or complete disagreement",
            "type": "number"
          }
        },
        {
          "name": "readersAgreement",
          "required": false,
          "schema": {
            "fullComment": "Number [0,1] representing agreement of readers\n\n1 reader can vote once",
            "type": "number"
          }
        },
        {
          "name": "readersAgreementVotedCount",
          "required": false,
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "importancy",
          "required": false,
          "schema": {
            "fullComment": "defaults to 0.5 meaning average importancy this could be either a calculated or set property. could it be calculated on your value hierarchy? not sure if this is practical (yet) but still a very interesting property to have, or somehow calculate.",
            "type": "number"
          }
        },
        {
          "name": "isImportancySet",
          "required": false,
          "schema": {
            "fullComment": "by default, importancy is calculated by one or multiple systems. As the admin you can change it\n\nTODO: once this is all working, possibly add reader-importancy and readersImportancyVotedCount",
            "todo": "once this is all working, possibly add reader-importancy and readersImportancyVotedCount",
            "type": "boolean"
          }
        },
        {
          "name": "wordMatrixSlugs",
          "required": false,
          "schema": {
            "fullComment": "A statement can connect to one or more words. This can be calculated automatically I guess, by looking at all WordMatrix words and WordCombinations that are inside of the statement. However, we may not want to put all of them in there.\n\nFor now, let's skip this, since it's probably better to calculate it on the fly, not index it.",
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "Statement",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}