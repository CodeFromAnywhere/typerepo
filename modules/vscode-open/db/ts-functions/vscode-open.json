{
  "createdAt": 1668332392129,
  "updatedAt": 1668332392129,
  "deletedAt": 0,
  "createdFirstAt": 1668332392129,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/vscodeOpen.ts",
  "commentsInside": [],
  "rawText": " async (config: {\n  /**\n  Files to open. Either use a projectRelativePath or an operationName combined with an operationRelativePath.\n  \n  can optionally have the line and character specified as well after the file with [file-path]:[line]:[character]\n   */\n  files?: OpenableFile[];\n}): Promise<undefined | { success: boolean; response: string }> => {\n  const projectRoot = getProjectRoot();\n  if (!projectRoot) return;\n\n  if (!config.files) {\n    const command = `code --goto ${projectRoot}`;\n    execSync(command);\n    return { success: true, response: \"Opened the project root\" };\n  }\n\n  await Promise.all(\n    config.files.map(async (file) => {\n      const absolutePath = await getOpenableFilePath(file);\n\n      if (!absolutePath || !fs.existsSync(absolutePath)) {\n        return { success: false, response: \"This path doesn't exist\" };\n      }\n\n      const fullPathWithLine = file.line\n        ? `${absolutePath}:${file.line}`\n        : absolutePath;\n\n      const command = `code --goto ${fullPathWithLine}`;\n\n      execSync(command);\n\n      return { success: true, response: \"Opened the file\" };\n    })\n  );\n\n  return { success: true, response: \"Opened the file(s)\" };\n}",
  "name": "vscodeOpen",
  "slug": "vscode-open",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OpenableFile"
            },
            "description": "Files to open. Either use a projectRelativePath or an operationName combined with an operationRelativePath.\n\ncan optionally have the line and character specified as well after the file with [file-path]:[line]:[character]"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "files",
            "required": false,
            "schema": {
              "fullComment": "Files to open. Either use a projectRelativePath or an operationName combined with an operationRelativePath.\n\ncan optionally have the line and character specified as well after the file with [file-path]:[line]:[character]",
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "projectRelativePath",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationName",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationRelativeFilePath",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "line",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "OpenableFile"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "opens a file in vscode through the \"code\" cli",
  "returnType": {
    "rawType": "Promise<{ success: boolean; response: string; } | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1221,
    "lines": 39,
    "bytes": 1221,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 39,
    "numberOfFiles": 1
  },
  "id": "dukbytfeqpiqfaoquwninpri"
}