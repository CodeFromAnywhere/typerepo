{
  "createdAt": 1663305543522,
  "updatedAt": 1663305543522,
  "deletedAt": 0,
  "createdFirstAt": 1663305543522,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/util/queryPathsArrayToNestedPathObject.ts",
  "commentsInside": [],
  "rawText": " (\n  queryPaths: string[],\n  initialValue: NestedPathObject\n): NestedPathObject => {\n  const nestedPathObject = queryPaths.reduce((nestedPathObject, queryPath) => {\n    const parts: string[] = queryPath.split(\"/\");\n    const firstPart = parts[0];\n\n    // Base case 1: if we already have it, skip it\n    if (Object.keys(nestedPathObject).includes(firstPart))\n      return nestedPathObject;\n\n    // Base case 2: if it's a leave (last item), return it with value null\n    if (parts.length === 1) {\n      return { ...nestedPathObject, [firstPart]: null };\n    }\n\n    // Recursion case: find all queryPaths starting with the same branch\n    const queryPathsHere = queryPaths\n      .filter((p) => p.startsWith(`${firstPart}/`))\n      .map((p) => p.substring(firstPart.length + 1));\n\n    const newNestedPathObject: NestedPathObject = {\n      ...nestedPathObject,\n      [firstPart]: reduceQueryPathsRecursively(queryPathsHere, {}),\n    };\n\n    return newNestedPathObject;\n  }, initialValue);\n\n  return nestedPathObject;\n}",
  "name": "reduceQueryPathsRecursively",
  "slug": "reduce-query-paths-recursively",
  "parameters": [
    {
      "name": "queryPaths",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "initialValue",
      "schema": {
        "$ref": "#/definitions/NestedPathObject"
      },
      "simplifiedSchema": {
        "description": "A different way to represent a path array in a nested object of folders",
        "properties": [],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/ui/react-with-native/recipes/nested-menu/src/util/queryPathsArrayToNestedPathObject\").NestedPathObject",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1013,
    "lines": 32,
    "bytes": 1013,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 32,
    "numberOfFiles": 1
  },
  "id": "DamvAzISqoahXvTs"
}