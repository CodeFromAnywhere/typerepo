{
  "createdAt": 1664600527686,
  "updatedAt": 1664600527686,
  "deletedAt": 0,
  "createdFirstAt": 1664600527686,
  "id": "ts-function",
  "name": "TsFunction",
  "slug": "ts-function",
  "operationRelativeTypescriptFilePath": "src/Postable.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "\nInterface for arrow functions and normal functions",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "type": "string",
          "description": "unique id of the model"
        },
        "name": {
          "type": "string",
          "description": "name (identifier) of the model"
        },
        "slug": {
          "type": "string",
          "description": "kebab-case variant of the name"
        },
        "operationRelativeTypescriptFilePath": {
          "type": "string",
          "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)"
        },
        "isExported": {
          "type": "boolean",
          "description": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation"
        },
        "isApiExposed": {
          "type": "boolean",
          "description": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter"
        },
        "apiAuthenticationStrategy": {
          "$ref": "#/definitions/ApiAuthenticationStrategy",
          "description": "defaults to \"admin\" (which is a bundle-specific auth token), can be overwritten using frontmatter"
        },
        "description": {
          "$ref": "#/definitions/Markdown",
          "description": "parsed comment from doc-comment"
        },
        "rawText": {
          "type": "string",
          "description": "raw text of the function"
        },
        "commentsInside": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TsComment"
          },
          "description": "all comments found in a function and the node that they belong to"
        },
        "returnType": {
          "$ref": "#/definitions/TypeInfo",
          "description": "return type JSON Schema definition"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunctionParameter"
          },
          "description": "parameters the function takes as its arguments, if any"
        },
        "size": {
          "$ref": "#/definitions/SizeSummary",
          "description": "size of this function (comments + code)"
        },
        "commentSize": {
          "$ref": "#/definitions/SizeSummary",
          "description": "size of the comments of this function (including surrounding comments)"
        },
        "codeSize": {
          "$ref": "#/definitions/SizeSummary",
          "description": "size of the code inside the function (without comments)"
        },
        "cumulativeSize": {
          "$ref": "#/definitions/SizeSummary",
          "description": "tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively"
        },
        "cumulativeCommentSize": {
          "$ref": "#/definitions/SizeSummary"
        },
        "cumulativeCodeSize": {
          "$ref": "#/definitions/SizeSummary"
        },
        "maxIndentationDepth": {
          "type": "number",
          "description": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces"
        },
        "dependantFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly."
        }
      },
      "required": [
        "apiAuthenticationStrategy",
        "commentsInside",
        "id",
        "isApiExposed",
        "isExported",
        "maxIndentationDepth",
        "name",
        "operationName",
        "operationRelativeTypescriptFilePath",
        "projectRelativePath",
        "returnType",
        "size",
        "slug"
      ],
      "additionalProperties": false,
      "description": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions"
    },
    "simplifiedSchema": {
      "description": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
      "properties": [
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "description": "unique id of the model",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "description": "name (identifier) of the model",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "description": "kebab-case variant of the name",
            "type": "string"
          }
        },
        {
          "name": "operationRelativeTypescriptFilePath",
          "required": true,
          "schema": {
            "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
            "type": "string"
          }
        },
        {
          "name": "isExported",
          "required": true,
          "schema": {
            "description": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
            "type": "boolean"
          }
        },
        {
          "name": "isApiExposed",
          "required": true,
          "schema": {
            "description": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
            "type": "boolean"
          }
        },
        {
          "name": "apiAuthenticationStrategy",
          "required": true,
          "schema": {
            "description": "Still not sure if the user one is a good idea but there are probably some usecases that would really benefit to have a user-layer embedded in the king os system",
            "enum": [
              "none",
              "admin",
              "user"
            ],
            "type": "string"
          }
        },
        {
          "name": "description",
          "required": false,
          "schema": {
            "description": "a string that is known to contain markdown.",
            "type": "string"
          }
        },
        {
          "name": "rawText",
          "required": false,
          "schema": {
            "description": "raw text of the function",
            "type": "string"
          }
        },
        {
          "name": "commentsInside",
          "required": true,
          "schema": {
            "description": "all comments found in a function and the node that they belong to",
            "items": [
              {
                "schema": {
                  "description": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                  "properties": [
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "description": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "description": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "description": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "comment",
                      "required": true,
                      "schema": {
                        "description": "a string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": true,
                      "schema": {
                        "description": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "types",
                      "required": true,
                      "schema": {
                        "description": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                        "items": [
                          {
                            "schema": {
                              "enum": [
                                "todo",
                                "discussion",
                                "idea",
                                "later",
                                "nb"
                              ],
                              "type": "string"
                            },
                            "name": "CommentType"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "firstLine",
                      "required": true,
                      "schema": {
                        "description": "first line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "lastLine",
                      "required": true,
                      "schema": {
                        "description": "last line of the comment",
                        "type": "number"
                      }
                    },
                    {
                      "name": "statementName",
                      "required": false,
                      "schema": {
                        "description": "statement name the comment belongs to",
                        "type": "string"
                      }
                    },
                    {
                      "name": "rawStatement",
                      "required": false,
                      "schema": {
                        "description": "raw statement text the comment belongs to",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TsComment"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "returnType",
          "required": true,
          "schema": {
            "description": "all info that should always be collected when indexing any type interface",
            "properties": [
              {
                "name": "typeDefinition",
                "required": false,
                "schema": {
                  "properties": [
                    {
                      "name": "$id",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$ref",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$schema",
                      "required": false,
                      "schema": {
                        "description": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                        "type": "string"
                      }
                    },
                    {
                      "name": "$comment",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "$defs",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "type",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "enum",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "description": "Primitive type",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Type"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "const",
                      "required": false,
                      "schema": {
                        "description": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "multipleOf",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "maximum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "exclusiveMaximum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minimum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "exclusiveMinimum",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "maxLength",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minLength",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "pattern",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "items",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "additionalItems",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxItems",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minItems",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "uniqueItems",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "contains",
                      "required": false,
                      "schema": {
                        "circularRefName": "JSONSchema7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxProperties",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "minProperties",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "required",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "properties",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "patternProperties",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "additionalProperties",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "dependencies",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "propertyNames",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "if",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "then",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "else",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "allOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "anyOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "oneOf",
                      "required": false,
                      "schema": {
                        "items": [
                          {
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Definition"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "not",
                      "required": false,
                      "schema": {
                        "description": "JSON Schema v7",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "format",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "contentMediaType",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "contentEncoding",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "definitions",
                      "required": false,
                      "schema": {
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "title",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "default",
                      "required": false,
                      "schema": {
                        "description": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "readOnly",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "writeOnly",
                      "required": false,
                      "schema": {
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "examples",
                      "required": false,
                      "schema": {
                        "description": "Primitive type",
                        "properties": [],
                        "type": "object"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "simplifiedSchema",
                "required": false,
                "schema": {
                  "description": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                  "properties": [
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "enum": [
                          "string",
                          "number",
                          "boolean",
                          "object",
                          "array",
                          "null"
                        ],
                        "type": "string"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "circularRefName",
                      "required": false,
                      "schema": {
                        "description": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                        "type": "string"
                      }
                    },
                    {
                      "name": "enum",
                      "required": false,
                      "schema": {
                        "description": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                        "items": [
                          {
                            "schema": {
                              "description": "Primitive type",
                              "properties": [],
                              "type": "object"
                            },
                            "name": "JSONSchema7Type"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "properties",
                      "required": false,
                      "schema": {
                        "description": "in case of object, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": true,
                                  "schema": {
                                    "description": "NB: can't we put this in the SimplifiedSchema itself?",
                                    "type": "boolean"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaProperty"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "items",
                      "required": false,
                      "schema": {
                        "description": "in case of arrays, this will always appear",
                        "items": [
                          {
                            "schema": {
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "description": "name in case of it being a reference, otherwise null",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": true,
                                  "schema": {
                                    "circularRefName": "SimplifiedSchema",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "SimplifiedSchemaItem"
                          }
                        ],
                        "type": "array"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "isObject",
                "required": true,
                "schema": {
                  "description": "if the type is an object, this is true. false if it's an array",
                  "type": "boolean"
                }
              },
              {
                "name": "isArray",
                "required": true,
                "schema": {
                  "description": "if the type is an array, this is true",
                  "type": "boolean"
                }
              },
              {
                "name": "isPrimitive",
                "required": true,
                "schema": {
                  "description": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                  "type": "boolean"
                }
              },
              {
                "name": "isEnum",
                "required": true,
                "schema": {
                  "description": "will be true for any primitive conjunction types",
                  "type": "boolean"
                }
              },
              {
                "name": "isEnumLiteral",
                "required": true,
                "schema": {
                  "description": "will be true for string conjunction types",
                  "type": "boolean"
                }
              },
              {
                "name": "typeCoverage",
                "required": true,
                "schema": {
                  "description": "quantification of coverage of the specified type or subtypes in our database.",
                  "type": "number"
                }
              },
              {
                "name": "rawType",
                "required": true,
                "schema": {
                  "description": "raw type string",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "parameters",
          "required": false,
          "schema": {
            "description": "parameters the function takes as its arguments, if any",
            "items": [
              {
                "schema": {
                  "properties": [
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "schema",
                      "required": false,
                      "schema": {
                        "properties": [
                          {
                            "name": "$id",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "$ref",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "$schema",
                            "required": false,
                            "schema": {
                              "description": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                              "type": "string"
                            }
                          },
                          {
                            "name": "$comment",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "$defs",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "type",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "enum",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "description": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "JSONSchema7Type"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "const",
                            "required": false,
                            "schema": {
                              "description": "Primitive type",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "multipleOf",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "maximum",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "exclusiveMaximum",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "minimum",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "exclusiveMinimum",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "maxLength",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "minLength",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "pattern",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "items",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "additionalItems",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "maxItems",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "minItems",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "uniqueItems",
                            "required": false,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "contains",
                            "required": false,
                            "schema": {
                              "circularRefName": "JSONSchema7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "maxProperties",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "minProperties",
                            "required": false,
                            "schema": {
                              "type": "number"
                            }
                          },
                          {
                            "name": "required",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "properties",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "patternProperties",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "additionalProperties",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "dependencies",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "propertyNames",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "if",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "then",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "else",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "allOf",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "description": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "JSONSchema7Definition"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "anyOf",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "description": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "JSONSchema7Definition"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "oneOf",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "description": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "JSONSchema7Definition"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "not",
                            "required": false,
                            "schema": {
                              "description": "JSON Schema v7",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "format",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "contentMediaType",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "contentEncoding",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "definitions",
                            "required": false,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "title",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "description",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "default",
                            "required": false,
                            "schema": {
                              "description": "Primitive type",
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "readOnly",
                            "required": false,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "writeOnly",
                            "required": false,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "examples",
                            "required": false,
                            "schema": {
                              "description": "Primitive type",
                              "properties": [],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "simplifiedSchema",
                      "required": false,
                      "schema": {
                        "description": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                        "properties": [
                          {
                            "name": "type",
                            "required": true,
                            "schema": {
                              "enum": [
                                "string",
                                "number",
                                "boolean",
                                "object",
                                "array",
                                "null"
                              ],
                              "type": "string"
                            }
                          },
                          {
                            "name": "description",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "circularRefName",
                            "required": false,
                            "schema": {
                              "description": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                              "type": "string"
                            }
                          },
                          {
                            "name": "enum",
                            "required": false,
                            "schema": {
                              "description": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                              "items": [
                                {
                                  "schema": {
                                    "description": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": "JSONSchema7Type"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "properties",
                            "required": false,
                            "schema": {
                              "description": "in case of object, this will always appear",
                              "items": [
                                {
                                  "schema": {
                                    "properties": [
                                      {
                                        "name": "name",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "schema",
                                        "required": true,
                                        "schema": {
                                          "circularRefName": "SimplifiedSchema",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "required",
                                        "required": true,
                                        "schema": {
                                          "description": "NB: can't we put this in the SimplifiedSchema itself?",
                                          "type": "boolean"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  },
                                  "name": "SimplifiedSchemaProperty"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "items",
                            "required": false,
                            "schema": {
                              "description": "in case of arrays, this will always appear",
                              "items": [
                                {
                                  "schema": {
                                    "properties": [
                                      {
                                        "name": "name",
                                        "required": true,
                                        "schema": {
                                          "description": "name in case of it being a reference, otherwise null",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "schema",
                                        "required": true,
                                        "schema": {
                                          "circularRefName": "SimplifiedSchema",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  },
                                  "name": "SimplifiedSchemaItem"
                                }
                              ],
                              "type": "array"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "required",
                      "required": true,
                      "schema": {
                        "type": "boolean"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "FunctionParameter"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "size",
          "required": true,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "commentSize",
          "required": false,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "codeSize",
          "required": false,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "cumulativeSize",
          "required": false,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "cumulativeCommentSize",
          "required": false,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "cumulativeCodeSize",
          "required": false,
          "schema": {
            "description": "type interface that can be used to summarize multiple files",
            "properties": [
              {
                "name": "numberOfFiles",
                "required": false,
                "schema": {
                  "description": "if this is about multiple files, the number of files is specified here",
                  "type": "number"
                }
              },
              {
                "name": "characters",
                "required": true,
                "schema": {
                  "description": "amount of characters",
                  "type": "number"
                }
              },
              {
                "name": "lines",
                "required": true,
                "schema": {
                  "description": "amount of lines",
                  "type": "number"
                }
              },
              {
                "name": "bytes",
                "required": true,
                "schema": {
                  "description": "amount of bytes",
                  "type": "number"
                }
              },
              {
                "name": "linesPerFile",
                "required": true,
                "schema": {
                  "description": "rounded, amount of lines per file (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "charactersPerLine",
                "required": true,
                "schema": {
                  "description": "rounded, amount of characters per line (averaged)",
                  "type": "number"
                }
              },
              {
                "name": "bytesPerCharacter",
                "required": true,
                "schema": {
                  "description": "rounded, amount of bytes per character",
                  "type": "number"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "maxIndentationDepth",
          "required": true,
          "schema": {
            "description": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
            "type": "number"
          }
        },
        {
          "name": "dependantFiles",
          "required": false,
          "schema": {
            "description": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "TsFunction",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}