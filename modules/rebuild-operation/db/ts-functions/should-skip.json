{
  "createdAt": 1662740042624,
  "updatedAt": 1662740042624,
  "deletedAt": 0,
  "createdFirstAt": 1662740042624,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/shouldSkip.ts",
  "commentsInside": [],
  "rawText": " async (config: {\n  operationBasePath: string;\n  debug?: boolean;\n  force?: boolean;\n}) => {\n  const { operationBasePath, debug, force } = config;\n  const operationName = getLastFolder(operationBasePath);\n  if (force) {\n    console.log(\"Not skipping (force)\");\n    return false;\n  }\n\n  const operationIndex = (await db.get(\"OperationIndex\", { operationName }))[0];\n  if (!operationIndex) {\n    console.log(\"Not skipping because no operationIndex \");\n    return false;\n  }\n\n  const srcPath = path.join(operationBasePath, \"src\");\n\n  const srcUpdatedAt = await folderGetUpdatedAt({ folderPath: srcPath });\n\n  if (operationIndex && operationIndex.updatedAt <= srcUpdatedAt) {\n    console.log(\"Not skipping because src updated\");\n    return false;\n  }\n\n  const hasIndexFolder = fs.existsSync(\n    path.join(operationBasePath, databaseFolderName)\n  );\n  if (!hasIndexFolder) {\n    console.log(\"Not skipping because has no db folder \");\n    return false;\n  }\n\n  const noBuildFolder = !fs.existsSync(\n    path.join(operationBasePath, buildFolderName)\n  );\n\n  const isBuildNeeded = isOperationBuildNeeded(operationBasePath);\n\n  if (noBuildFolder && isBuildNeeded) {\n    console.log(\"Not skipping because noBuildFolder\");\n    return false;\n  }\n\n  return true;\n}",
  "name": "shouldSkip",
  "slug": "should-skip",
  "parameters": [],
  "description": "if you don't force it, there's an operation index, there's an index folder, the src has not been touched since hte last indexation, and there's a buildfolder (if needed), then the rebuildOperation can be skipped",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 1462,
    "lines": 48,
    "bytes": 1462,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 48,
    "numberOfFiles": 1
  },
  "id": "EVUqiyrxmOgLbcYf"
}