{
  "createdAt": 1671130409026,
  "updatedAt": 1671130409026,
  "deletedAt": 0,
  "createdFirstAt": 1671130409026,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/openAIChat.ts",
  "commentsInside": [],
  "rawText": " async (\n  props: OpenAIChatProps\n): Promise<ProcessPromptFunctionResult> => {\n  const { prompt, thread, isHeadless } = props;\n  console.log(\"openAIChat Called\", props);\n\n  try {\n    // chat login test ...\n\n    const { page, pageId } = await openPage(thread);\n    if (!page) return { isSuccessful: false, message: \"Faild to create page.\" };\n    if (thread !== pageId) {\n      await page.goto(\"https://chat.openai.com/chat\", {\n        waitUntil: \"domcontentloaded\",\n      });\n    }\n\n    let sendMessageButton = await page.$(\n      'button[class=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\"]'\n    );\n    let textAreaElementHandle = await page.$(\"textarea\");\n\n    if (!textAreaElementHandle || !sendMessageButton) {\n      const pageType = await detectChatGptPage(page);\n      console.log({ pageType });\n      if (pageType === \"Login\") {\n        const authResponse = await chatGPTAuth(page);\n        console.log({ authResponse });\n        await new Promise((r) => setTimeout(r, 5000));\n      }\n    }\n\n    // Wating and typing the prompt in the textarea field\n    await page.waitForSelector(\"textarea\", { timeout: 60000 });\n    await page.waitForSelector(\n      'button[class=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\"]',\n      { timeout: 60000 }\n    );\n\n    sendMessageButton = await page.$(\n      'button[class=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\"]'\n    );\n    textAreaElementHandle = await page.$(\"textarea\");\n\n    if (!textAreaElementHandle || !sendMessageButton) {\n      return {\n        isSuccessful: false,\n        message: \"Text area not found\",\n        result: {\n          thread: pageId,\n        },\n      };\n    }\n\n    console.log(\"inside of set value\");\n    await new Promise(async (resolve, reject) => {\n      console.log(\"inside promise\");\n      resolve(\n        await page.evaluate((evPrompt) => {\n          const promtTextAreaField = document.getElementsByTagName(\"textarea\");\n          console.log({ promtTextAreaField });\n          if (promtTextAreaField[0]) {\n            //@ts-ignore\n            promtTextAreaField[0].focus();\n            promtTextAreaField[0].click();\n            promtTextAreaField[0].value = evPrompt;\n            const button = document.querySelector(\n              'button[class=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\"]'\n            );\n            //@ts-ignore\n            button?.click();\n            return true;\n          }\n          console.log(\"TEXT AREA NOT FOUND\");\n        }, prompt)\n      );\n    });\n\n    // Waiting for re-appear send message button that show current prompt is completed\n    await page.waitForSelector(\n      'button[class=\"absolute p-1 rounded-md text-gray-500 bottom-1.5 right-1 md:bottom-2.5 md:right-2 hover:bg-gray-100 dark:hover:text-gray-400 dark:hover:bg-gray-900 disabled:hover:bg-transparent dark:disabled:hover:bg-transparent\"]',\n      { timeout: 600000 }\n    );\n\n    console.log(\"ANSWER IS COMPLETED\");\n    // finding the last answer\n    const result: string | undefined = await new Promise(\n      async (resolve, reject) => {\n        resolve(\n          await page.evaluate(() => {\n            // document.title = \"bhagya 1234\";\n            const allAnswer = document.querySelectorAll(\n              'div[class=\"w-full border-b border-black/10 dark:border-gray-900/50 text-gray-800 dark:text-gray-100 group bg-gray-50 dark:bg-[#444654]\"]'\n            );\n            console.log({ allAnswer });\n            let lastAnswer = \"\";\n            if (allAnswer.length > 0) {\n              lastAnswer = allAnswer[allAnswer.length - 1].outerHTML;\n              console.log({ lastAnswer });\n            }\n            return lastAnswer;\n          })\n        );\n      }\n    );\n    if (!result) {\n      return { isSuccessful: false, message: \"Empty result found\" };\n    }\n    const finalResult = html2md(result);\n    return {\n      isSuccessful: true,\n      message: \"Successfully done\",\n      result: {\n        text: finalResult,\n        thread: pageId,\n      },\n    };\n  } catch (e) {\n    return { isSuccessful: false, message: String(e) };\n  }\n}",
  "name": "openAIChat",
  "slug": "open-aichat",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "$ref": "#/definitions/OpenAIChatProps"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "prompt",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thread",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isHeadless",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Send the propt to chatgpt and return the chatgpt response",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/ai/ai-types/build/ProcessPromptFunctionResult\").ProcessPromptFunctionResult>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 7,
  "size": {
    "characters": 4760,
    "lines": 121,
    "bytes": 4760,
    "bytesPerCharacter": 1,
    "charactersPerLine": 39,
    "linesPerFile": 121,
    "numberOfFiles": 1
  },
  "id": "xvcmiwbiwmhkdweytazetjvb"
}