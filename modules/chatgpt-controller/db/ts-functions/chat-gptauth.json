{
  "createdAt": 1671097062540,
  "updatedAt": 1671097062540,
  "deletedAt": 0,
  "createdFirstAt": 1671097062540,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/chatGPTAuth.ts",
  "commentsInside": [],
  "rawText": " async (page: Page): Promise<LoginResponse> => {\n  console.log(\"Chatgpt login chandler called\");\n  const credentials: MediaCredential[] = await db.get(\"MediaCredential\");\n  console.log({ credentials });\n  const openAICredential = credentials?.find(\n    (c) => c.username === \"openai\"\n  ) || {\n    email: \"bhagyasah4u@gmail.com\",\n    password: \"openai@199201\",\n  };\n  console.log({ openAICredential });\n  if (!openAICredential)\n    return { isSuccessfull: false, message: \"Credential not found\" };\n  const { email, password } = openAICredential || openAICredential;\n  await page.goto(\"https://chat.openai.com/auth/login\", {\n    waitUntil: \"domcontentloaded\",\n  });\n\n  const isSecurePageApear = await page.$x(\n    \"//h2[contains(., 'Checking if the site connection is secure')]\"\n  );\n\n  if (isSecurePageApear) {\n    console.log(\"Need to captcha solution\");\n    const isCaptchaExistRes = await isCaptchaExist(page);\n    console.log({ isCaptchaExistRes });\n    await page.waitForSelector(\n      'button[class=\"btn flex justify-center gap-2 btn-primary\"]'\n    );\n  }\n\n  const isLoginPageApear = await page.$x(\"//button[contains(., 'Log in')]\");\n  if (Boolean(isLoginPageApear[0])) {\n    console.log(\"LOGIN PAGE DETECTED\");\n    //@ts-ignore\n    isLoginPageApear[0].click();\n    await page.waitForNavigation({ waitUntil: \"domcontentloaded\" });\n    await page.waitForSelector('input[id=\"username\"]');\n    const usernameInput = await page.$('input[id=\"username\"]');\n\n    if (usernameInput) {\n      //@ts-ignore\n      usernameInput.click();\n      //@ts-ignore\n      await page.keyboard.type(email);\n    }\n    //Checking and solving the captcha\n    const { captchas } = await isCaptchaExist(page);\n    if (captchas.length > 0) {\n      console.log(\"CAPTCHA DETECTED\");\n      const captchaSolveResponse = await solveReptcha(page);\n      console.log({\n        captchaSolveResponse: JSON.stringify(captchaSolveResponse),\n      });\n      if (!captchaSolveResponse.error) {\n        await page.waitForSelector('button[type=\"submit\"]');\n        await page.click('button[type=\"submit\"]');\n        await page.waitForSelector('input[name=\"password\"]', {\n          timeout: 30000,\n        });\n        await page.focus('input[name=\"password\"]');\n        await page.keyboard.type(password);\n        await page.waitForSelector('button[type=\"submit\"]');\n        await page.click('button[type=\"submit\"]');\n        page.waitForNavigation({ waitUntil: \"domcontentloaded\" });\n        return { isSuccessfull: true, message: \"Login Succcessfull\" };\n      }\n    }\n  }\n\n  return { isSuccessfull: false, message: \"Login faild\" };\n}",
  "name": "chatGPTAuth",
  "slug": "chat-gptauth",
  "parameters": [
    {
      "name": "page",
      "schema": {
        "$ref": "#/definitions/Page"
      },
      "simplifiedSchema": {
        "fullComment": "Page provides methods to interact with a single tab or\n {@link  https://developer.chrome.com/extensions/background_pages | extension background page } \nin Chromium.\n\n:::note\n\nOne Browser instance might have multiple Page instances.\n\n:::",
        "properties": [],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<import(\"/Users/lucky/workspace/typerepo/packages/niches/bhagya/doing/control-web/chatgpt-controller/src/chatGPTAuth\").LoginResponse>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 2595,
    "lines": 72,
    "bytes": 2595,
    "bytesPerCharacter": 1,
    "charactersPerLine": 36,
    "linesPerFile": 72,
    "numberOfFiles": 1
  },
  "id": "pwfywrrzxgcfdhwncdbaswje"
}