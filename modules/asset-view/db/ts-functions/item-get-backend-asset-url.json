{
  "createdAt": 1668773943513,
  "updatedAt": 1668773943513,
  "deletedAt": 0,
  "createdFirstAt": 1668773943513,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/itemGetBackendAssetUrl.ts",
  "commentsInside": [],
  "rawText": " (config: {\n  item: AugmentedAnyModelType;\n  backendAsset: BackendAsset;\n  isDownload?: boolean;\n}) => {\n  const { backendAsset, item, isDownload } = config;\n\n  if (!backendAsset.relativePath) {\n    return undefined;\n  }\n\n  const url = getReferencedAssetApiUrl(\n    apiUrl,\n    item.projectRelativePath,\n    backendAsset.relativePath,\n    isDownload\n  );\n  return url;\n}",
  "name": "itemGetBackendAssetUrl",
  "slug": "item-get-backend-asset-url",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/definitions/AugmentedAnyModelType"
          },
          "backendAsset": {
            "$ref": "#/definitions/BackendAsset"
          },
          "isDownload": {
            "type": "boolean"
          }
        },
        "required": [
          "item",
          "backendAsset"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "item",
            "required": true,
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "backendAsset",
            "required": true,
            "schema": {
              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
              "properties": [
                {
                  "name": "alt",
                  "required": false,
                  "schema": {
                    "fullComment": "Stored value\n\nAlt text for the asset",
                    "type": "string"
                  }
                },
                {
                  "name": "relativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": false,
                  "schema": {
                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                    "type": "string"
                  }
                },
                {
                  "name": "temporaryDestination",
                  "required": false,
                  "schema": {
                    "fullComment": "Not stored\n\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "isDownload",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Get remote url for a `BackendAsset` in an `AugmentedAnyModelType` database model item.",
  "returnType": {
    "rawType": "string | undefined",
    "typeDefinition": {
      "optional": true,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 456,
    "lines": 19,
    "bytes": 456,
    "bytesPerCharacter": 1,
    "charactersPerLine": 24,
    "linesPerFile": 19,
    "numberOfFiles": 1
  },
  "id": "zxytmzlmqjewhxomsbrbqmxp"
}