{
  "createdAt": 1667379321154,
  "updatedAt": 1667379321154,
  "deletedAt": 0,
  "createdFirstAt": 1667379321154,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/checkAuthToken.ts",
  "commentsInside": [],
  "rawText": " async (\n  password: string\n): Promise<{ isSuccessful: boolean; message: string; authToken: string }> => {\n  const pingResult = await apiWithConfig.ping({ authToken: password });\n\n  if (!pingResult.isSuccessful || pingResult.isUnauthorized) {\n    return {\n      isSuccessful: false,\n      message: pingResult.isNotConnected\n        ? \"Could not reach server. Ensure you have an internet connection and/or the server is running\"\n        : pingResult.isUnauthorized\n        ? \"Incorrect credientials\"\n        : pingResult.message || \"Something went wrong\",\n      authToken: password,\n    };\n  }\n\n  const result = await fetch(`${apiUrl}/login`, {\n    // To set a cookie with CORS you'll need to set the withCredentials flag when making the request.\n\n    // credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ authToken: password }),\n  })\n    .then(async (res) => {\n      return res.json();\n    })\n    .catch((e) => {\n      return { isSuccessful: false, message: \"fetch failed\" };\n    });\n\n  return {\n    isSuccessful: result.isSuccessful,\n    message: result.message || \"Something went wrong\",\n    authToken: password,\n  };\n}",
  "name": "checkAuthToken",
  "slug": "check-auth-token",
  "parameters": [
    {
      "name": "password",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<{ isSuccessful: boolean; message: string; authToken: string; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1239,
    "lines": 41,
    "bytes": 1239,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 41,
    "numberOfFiles": 1
  },
  "id": "hibcbagnztptpzxqgouwxooe"
}