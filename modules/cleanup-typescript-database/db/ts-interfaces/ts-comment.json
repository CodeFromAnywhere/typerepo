{
  "createdAt": 1662740101983,
  "updatedAt": 1662740101983,
  "deletedAt": 0,
  "createdFirstAt": 1662740101983,
  "id": "ts-comment",
  "name": "TsComment",
  "slug": "ts-comment",
  "operationRelativeTypescriptFilePath": "src/cleanupTsDatabase.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "id": {
          "type": "string",
          "description": "unique id of the model"
        },
        "name": {
          "type": "string",
          "description": "name (identifier) of the model"
        },
        "slug": {
          "type": "string",
          "description": "kebab-case variant of the name"
        },
        "operationRelativeTypescriptFilePath": {
          "type": "string",
          "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)"
        },
        "comment": {
          "$ref": "#/definitions/Markdown",
          "description": "the content of the comment in markdown, without frontmatter"
        },
        "parameters": {
          "$ref": "#/definitions/Frontmatter",
          "description": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)"
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          },
          "description": "These are the type indicators that were found in this single or multiline comment. Can be multiple."
        },
        "firstLine": {
          "type": "number",
          "description": "first line of the comment"
        },
        "lastLine": {
          "type": "number",
          "description": "last line of the comment"
        },
        "statementName": {
          "type": "string",
          "description": "statement name the comment belongs to"
        },
        "rawStatement": {
          "type": "string",
          "description": "raw statement text the comment belongs to"
        }
      },
      "required": [
        "comment",
        "firstLine",
        "id",
        "lastLine",
        "name",
        "operationName",
        "operationRelativeTypescriptFilePath",
        "parameters",
        "projectRelativePath",
        "slug",
        "types"
      ],
      "additionalProperties": false,
      "description": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!"
    },
    "simplifiedSchema": {
      "description": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\nspecial line prefixes:\n- TODO:\n- DISCUSSION:\n- IDEA:\n- LATER:\n- NB:\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
      "properties": [
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "description": "unique id of the model",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "description": "name (identifier) of the model",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "description": "kebab-case variant of the name",
            "type": "string"
          }
        },
        {
          "name": "operationRelativeTypescriptFilePath",
          "required": true,
          "schema": {
            "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
            "type": "string"
          }
        },
        {
          "name": "comment",
          "required": true,
          "schema": {
            "description": "a string that is known to contain markdown.",
            "type": "string"
          }
        },
        {
          "name": "parameters",
          "required": true,
          "schema": {
            "description": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
            "properties": [],
            "type": "object"
          }
        },
        {
          "name": "types",
          "required": true,
          "schema": {
            "description": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
            "items": [
              {
                "schema": {
                  "enum": [
                    "todo",
                    "discussion",
                    "idea",
                    "later",
                    "nb"
                  ],
                  "type": "string"
                },
                "name": "CommentType"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "firstLine",
          "required": true,
          "schema": {
            "description": "first line of the comment",
            "type": "number"
          }
        },
        {
          "name": "lastLine",
          "required": true,
          "schema": {
            "description": "last line of the comment",
            "type": "number"
          }
        },
        {
          "name": "statementName",
          "required": false,
          "schema": {
            "description": "statement name the comment belongs to",
            "type": "string"
          }
        },
        {
          "name": "rawStatement",
          "required": false,
          "schema": {
            "description": "raw statement text the comment belongs to",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "TsComment",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}