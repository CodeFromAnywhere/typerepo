{
  "createdAt": 1673379237730,
  "updatedAt": 1673379237730,
  "deletedAt": 0,
  "createdFirstAt": 1673379237730,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Menu",
  "slug": "menu",
  "operationRelativeTypescriptFilePath": "src/components/Menu.tsx",
  "type": {
    "rawType": "(props: { notFound?: boolean | undefined; projectRelativeFilePath?: string | undefined; folderPath?: string | undefined; filename?: string | undefined; isFolder?: boolean | undefined; navigation?: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ReaderProps\").FolderContent[] | undefined; contextualPromptsObject?: any; fileContextualPromptResults: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPromptResult\").ContextualPromptResult[] | undefined; thePrompts: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPrompt\").ContextualPrompt[]; selectionContextualPromptResults: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPromptResult\").ContextualPromptResult[] | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  notFound?: boolean;\n  projectRelativeFilePath?: string;\n  folderPath?: string;\n  filename?: string;\n  isFolder?: boolean;\n  navigation?: FolderContent[];\n  contextualPromptsObject?: Omit<\n    ContextualPromptsObject,\n    \"databaseContextualPromptSlugs\"\n  > | null;\n  fileContextualPromptResults: ContextualPromptResult[] | undefined;\n  thePrompts: ContextualPrompt[];\n  selectionContextualPromptResults: ContextualPromptResult[] | undefined;\n}) => {\n  const {\n    isFolder,\n    navigation,\n    folderPath,\n    filename,\n    contextualPromptsObject,\n    fileContextualPromptResults,\n    selectionContextualPromptResults,\n    thePrompts,\n    notFound,\n  } = props;\n\n  const admin = useAdmin();\n  const basePath = process.env.NEXT_PUBLIC_BASEPATH;\n  const items = useFileActions(basePath, navigation);\n  const { openContextMenuProps, renderContextMenu } = useContextMenu({ items });\n  const router = useRouter();\n  const queryPath = router.asPath.slice(1);\n\n  const basePathRelativeFolderPath = notFound\n    ? \"/\"\n    : isFolder\n    ? queryPath\n    : (getFolderJs(queryPath) as string | undefined);\n\n  const folders = basePathRelativeFolderPath\n    ?.split(\"/\")\n    .filter((x) => !!x && x !== \"\");\n  const canGoBack = notFound\n    ? false\n    : queryPath.includes(\"/\") || (isFolder && queryPath !== \"\");\n\n  return (\n    <Div className=\"lg:w-48 lg:h-full lg:overflow-y-scroll\">\n      {renderContextMenu()}\n      <div className=\"flex sm:flex-row lg:flex-col flex-wrap lg:flex-nowrap\">\n        {/* root */}\n        {canGoBack ? <NavButton href={\"/README.md\"} title=\"üè†\" /> : null}\n        {folders?.map((folder, index, array) => {\n          const isActive =\n            index === array.length - 1 &&\n            (!filename || filename?.toLowerCase() === \"readme.md\");\n          const pathUntilHere = array.slice(0, index + 1).join(\"/\");\n          return (\n            <NavButton\n              isActive={isActive}\n              href={`/${pathUntilHere}`}\n              title={`‚¨ÜÔ∏è ${folder}`}\n            />\n          );\n        })}\n        {navigation?.map((navItem) => {\n          // if it's a file, we need to remove the name\n          const href = `${notFound ? \"\" : folderPath}/${navItem.name}${\n            navItem.type === \"folder\" && navItem.firstFile\n              ? `/${navItem.firstFile}`\n              : \"\"\n          }`;\n\n          const extraIcons = [\n            navItem.isDraft ? \"üß™\" : undefined,\n            navItem.isPrivate ? \"üîë\" : undefined,\n            navItem.isSecret ? \"üîí\" : undefined,\n            navItem.authorizedGroup === \"premium\"\n              ? \"üèõ\"\n              : navItem.authorizedGroup === \"enterprise\"\n              ? \"üöÄ\"\n              : undefined,\n          ]\n            .filter(notEmpty)\n            .join(\"\");\n\n          const extension = navItem.name.split(\".\").pop()!;\n          const extensionIcons = {\n            ts: \"‚åò\",\n            tsx: \"‚åò\",\n            json: \"üíø\",\n            md: \"üìÑ\",\n          };\n          const icon =\n            navItem.type === \"file\"\n              ? Object.keys(extensionIcons).includes(extension)\n                ? extensionIcons[extension as keyof typeof extensionIcons]\n                : \"üìÑ\"\n              : \"üìÇ\";\n          const basePath = process.env.NEXT_PUBLIC_BASEPATH;\n          const projectRelativePath = `${basePath || \"\"}${\n            href.startsWith(\"/\") ? href : `/${href}`\n          }`;\n\n          return (\n            <NavButton\n              openContextMenuProps={\n                admin.isAdminActive ? openContextMenuProps : undefined\n              }\n              isActive={filename === navItem.name}\n              href={href}\n              id={projectRelativePath}\n              title={`${icon} ${navItem.name} ${extraIcons}`}\n            />\n          );\n        })}\n\n        <NavButton\n          isDisabled={!admin.isAdminActive}\n          onClick={async () => {\n            if (!admin.isAdminActive) {\n              warningToast(\n                \"You can't do this yet! Please install the server first, and ensure you're connected with it.\"\n              );\n              return;\n            }\n            if (!basePath) return;\n            let filename = prompt(\n              \"What should be the name (including extension)?\",\n              \"untitled.md\"\n            );\n            if (!filename || filename === \"\") return;\n\n            const projectRelativePath = `${basePath}/${basePathRelativeFolderPath}/${filename}`;\n\n            const apiResult = await api.newFile(projectRelativePath);\n\n            showStandardResponse(apiResult);\n\n            if (apiResult?.result?.isSuccessful) {\n              admin.refetch?.();\n            }\n          }}\n          title=\"+ New file\"\n        />\n        <NavButton\n          isDisabled={!admin.isAdminActive}\n          onClick={async () => {\n            if (!admin.isAdminActive) {\n              warningToast(\n                \"You can't do this yet! Please install the server first, and ensure you're connected with it.\"\n              );\n              return;\n            }\n            if (!basePath) return;\n            let folderName = prompt(\"What should be the name?\", \"\");\n            if (!folderName || folderName === \"\") return;\n\n            const projectRelativeBasePath = `${basePath}/${basePathRelativeFolderPath}`;\n\n            const apiResult = await api.newFolder(\n              projectRelativeBasePath,\n              folderName\n            );\n\n            showStandardResponse(apiResult);\n\n            if (apiResult?.result?.isSuccessful) {\n              admin.refetch?.();\n            }\n          }}\n          title=\"+ New folder\"\n        />\n      </div>\n\n      {admin.isAdminActive ? (\n        <Div className=\"mx-2\">\n          <P>\n            selectionResults: {selectionContextualPromptResults?.length || 0}\n          </P>\n          <P>fileResults: {fileContextualPromptResults?.length || 0}</P>\n          <P>\n            {isFolder ? \"folderPrompts\" : \"pagePrompts\"}: {thePrompts.length},\n            selectionPrompts:{\" \"}\n            {contextualPromptsObject?.selectionContextualPrompts.length || 0}\n          </P>\n          <div\n            className=\"cursor-pointer\"\n            onClick={async () => {\n              const apiResult = await api.removeAllFake(\n                process.env.NEXT_PUBLIC_BASEPATH\n              );\n              showStandardResponse(apiResult);\n            }}\n          >\n            Delete all fake results\n          </div>\n        </Div>\n      ) : null}\n    </Div>\n  );\n}",
  "description": "",
  "id": "xuhpnvnomxeoxqrizauuvtce"
}