{
  "createdAt": 1673379234442,
  "updatedAt": 1673379234442,
  "deletedAt": 0,
  "createdFirstAt": 1673379234442,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/components/FileActions.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  basePath?: string;\n  navigation?: FolderContent[];\n  projectRelativeFilePath?: string;\n}) => {\n  const { basePath, navigation, projectRelativeFilePath } = props;\n  const actions = useFileActions(basePath, navigation);\n  const admin = useAdmin();\n  const alert = useAlert();\n  const { save, isSaved } = useFileWriter({\n    projectRelativeFilePath,\n    hideButtons: true,\n    initialWriterView: \"edit\",\n  });\n\n  const saveAction: ContextMenuItem = {\n    getTitle: () => \"ðŸ’¾ Save\",\n    getIsEnabled: () => !isSaved,\n    onClick: () => save(),\n  };\n\n  const allActions = [saveAction].concat(actions);\n\n  return (\n    <Div className=\"flex flex-row flex-wrap\">\n      {allActions.map((action) => {\n        if (action.getIsEnabled?.(projectRelativeFilePath) === false) {\n          return null;\n        }\n\n        return (\n          <Div\n            className=\"hover:bg-black/10 p-2 cursor-pointer\"\n            onClick={async () => {\n              await action.onClick(projectRelativeFilePath);\n\n              if (!admin.refetch) {\n                alert?.(\"WTF no admin\");\n              }\n              admin.refetch?.();\n            }}\n          >\n            {action.getTitle(projectRelativeFilePath)}\n          </Div>\n        );\n      })}\n    </Div>\n  );\n}",
  "name": "FileActions",
  "slug": "file-actions",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "basePath": {
            "type": "string"
          },
          "navigation": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderContent"
            }
          },
          "projectRelativeFilePath": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "basePath",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "navigation",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "projectRelativePath",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "type",
                        "required": true,
                        "schema": {
                          "enum": [
                            "folder",
                            "file",
                            "link",
                            "unknown"
                          ],
                          "type": "string"
                        }
                      },
                      {
                        "name": "firstFile",
                        "required": false,
                        "schema": {
                          "fullComment": "In case the type is a folder, this is either the only file in that folder, or the README, or the index.*, or blank.",
                          "type": "string"
                        }
                      },
                      {
                        "name": "isPrivate",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "isDraft",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "isSecret",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "authorizedGroup",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "frontmatter",
                        "required": false,
                        "schema": {
                          "fullComment": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                          "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                          "properties": [],
                          "type": "object"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "FolderContent"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "projectRelativeFilePath",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 8,
  "size": {
    "characters": 1263,
    "lines": 49,
    "bytes": 1265,
    "bytesPerCharacter": 1.0015835312747428,
    "charactersPerLine": 26,
    "linesPerFile": 49,
    "numberOfFiles": 1
  },
  "id": "ksrhomxujftckatimhvchlpj"
}