{
  "createdAt": 1662745019839,
  "updatedAt": 1662745019839,
  "deletedAt": 0,
  "createdFirstAt": 1662745019839,
  "id": "generate-bundle-config",
  "name": "GenerateBundleConfig",
  "slug": "generate-bundle-config",
  "operationRelativeTypescriptFilePath": "src/types.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * configuration that can be applied when generating a new bundle\n */\nexport type GenerateBundleConfig = {\n  /** skips the step where it gets the new stuff from github */\n  skipPull?: boolean;\n  /** skips the step where it pushes the new bundle to remote */\n  skipPush?: boolean;\n  /** skips the step where it saves to the db */\n  skipUpsert?: boolean;\n  /** descriptioin for git commit, if pushing. Default is \"monorepo update\" */\n  description?: string;\n  /** normally, the informationStrategy is taken from BundleConfig (if present). Can be overwritten with this setting */\n  informationStrategy?: InformationStrategy;\n  debug?: boolean;\n  /**\n   * optionally, specify a custom branch name to pull from\n   */\n  branchName?: string;\n};",
  "extensions": [],
  "isOperationIndex": false,
  "description": "configuration that can be applied when generating a new bundle",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "skipPull": {
          "type": "boolean",
          "description": "skips the step where it gets the new stuff from github"
        },
        "skipPush": {
          "type": "boolean",
          "description": "skips the step where it pushes the new bundle to remote"
        },
        "skipUpsert": {
          "type": "boolean",
          "description": "skips the step where it saves to the db"
        },
        "description": {
          "type": "string",
          "description": "descriptioin for git commit, if pushing. Default is \"monorepo update\""
        },
        "informationStrategy": {
          "$ref": "#/definitions/InformationStrategy",
          "description": "normally, the informationStrategy is taken from BundleConfig (if present). Can be overwritten with this setting"
        },
        "debug": {
          "type": "boolean"
        },
        "branchName": {
          "type": "string",
          "description": "optionally, specify a custom branch name to pull from"
        }
      },
      "additionalProperties": false,
      "description": "configuration that can be applied when generating a new bundle"
    },
    "simplifiedSchema": {
      "description": "configuration that can be applied when generating a new bundle",
      "properties": [
        {
          "name": "skipPull",
          "required": false,
          "schema": {
            "description": "skips the step where it gets the new stuff from github",
            "type": "boolean"
          }
        },
        {
          "name": "skipPush",
          "required": false,
          "schema": {
            "description": "skips the step where it pushes the new bundle to remote",
            "type": "boolean"
          }
        },
        {
          "name": "skipUpsert",
          "required": false,
          "schema": {
            "description": "skips the step where it saves to the db",
            "type": "boolean"
          }
        },
        {
          "name": "description",
          "required": false,
          "schema": {
            "description": "descriptioin for git commit, if pushing. Default is \"monorepo update\"",
            "type": "string"
          }
        },
        {
          "name": "informationStrategy",
          "required": false,
          "schema": {
            "description": "push (default): take needed information from project and push to bundle (removing the existing info)\n\npullReplace: pull bundle and keep its information intact, not taking anything new from the OS, replacing all the information we had from these models in the OS\n\npullMerge: pull bundle and use its information in conjunction with the information we had in the OS. This option will merge both information sources, removing duplicate IDs\n\nNB: Later we may want to define this setting on a per-model basis!",
            "enum": [
              "push",
              "pullReplace",
              "pullMerge"
            ],
            "type": "string"
          }
        },
        {
          "name": "debug",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "branchName",
          "required": false,
          "schema": {
            "description": "optionally, specify a custom branch name to pull from",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "GenerateBundleConfig",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}