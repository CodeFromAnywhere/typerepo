{
  "createdAt": 1669288055680,
  "updatedAt": 1669288055680,
  "deletedAt": 0,
  "createdFirstAt": 1669288055680,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/frontmatterParseToString.ts",
  "commentsInside": [],
  "rawText": " (frontmatter: Frontmatter): string => {\n  const keys = Object.keys(frontmatter);\n\n  const keyValueLines = keys\n    .map((key) => {\n      const value = frontmatter[key];\n      const valueString = getFrontmatterValueString(value);\n\n      if (valueString === null) {\n        return null;\n      }\n\n      const parsedFrontmatterLine = `${key}: ${valueString}`;\n\n      return parsedFrontmatterLine;\n    })\n    .filter(notEmpty);\n\n  return keyValueLines.length === 0\n    ? \"\"\n    : `---\\n${keyValueLines.join(\"\\n\")}\\n---\\n`;\n}",
  "name": "frontmatterParseToString",
  "slug": "frontmatter-parse-to-string",
  "parameters": [
    {
      "name": "frontmatter",
      "schema": {
        "$ref": "#/definitions/Frontmatter"
      },
      "simplifiedSchema": {
        "fullComment": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
        "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
        "properties": [],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "Parses frontmatter object into a frontmatter string\n- includes a newline at the end\n- string[] becomes a comma separated string\nTODO: maybe parse xxxAt values into human readable dates",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/String"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 704,
    "lines": 25,
    "bytes": 704,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 25,
    "numberOfFiles": 1
  },
  "id": "jpsccsacvgwlsdtupzpqidtw"
}