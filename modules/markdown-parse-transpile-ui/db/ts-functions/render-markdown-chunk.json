{
  "createdAt": 1663305514168,
  "updatedAt": 1663305514168,
  "deletedAt": 0,
  "createdFirstAt": 1663305514168,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": false,
  "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
  "commentsInside": [],
  "rawText": " (chunk: MarkdownChunk) => {\n  const title = chunk.title\n    ? renderMarkdownTitle(chunk.title, chunk.level)\n    : null;\n  return (\n    <Div>\n      {title}\n      {chunk.content ? renderMarkdownContent(chunk.content) : null}\n      {chunk.children?.map(renderMarkdownChunk)}\n    </Div>\n  );\n}",
  "name": "renderMarkdownChunk",
  "slug": "render-markdown-chunk",
  "parameters": [
    {
      "name": "chunk",
      "schema": {
        "$ref": "#/definitions/MarkdownChunk"
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "content",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "description": "NB: title can also be an empty string (\"\")",
              "type": "string"
            }
          },
          {
            "name": "children",
            "required": false,
            "schema": {
              "description": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
              "items": [
                {
                  "schema": {
                    "circularRefName": "MarkdownChunk",
                    "properties": [],
                    "type": "object"
                  },
                  "name": "MarkdownChunk"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "renders a MarkdownChunk interface",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 323,
    "lines": 12,
    "bytes": 323,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 12,
    "numberOfFiles": 1
  },
  "id": "toSAjLtSMCKgfQIt"
}