[
  {
    "createdAt": 1663305514531,
    "updatedAt": 1663305514531,
    "deletedAt": 0,
    "createdFirstAt": 1663305514531,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
    "comment": "renders a markdown striing (without frontmatter)",
    "rawStatement": "export const renderMarkdownContent = (\n  content: string,\n  config?: { big?: boolean }\n) => {\n  // console.log(\"Need to render:\", content);\n  return (\n    <ReactMarkdown\n      className={config?.big ? \"max-w-lg\" : undefined}\n      rehypePlugins={[rehypeHighlight, remarkGfm]}\n      components={{\n        //Fix newlines with `<br>`\n        br: ({ node, ...props }) => (\n          // @ts-ignore\n          <br {...props} />\n        ),\n\n        details: ({ node, ...props }) => (\n          // @ts-ignore\n          <details {...props} />\n        ),\n        summary: ({ node, ...props }) => (\n          // @ts-ignore\n          <summary {...props} />\n        ),\n        td: ({ node, ...props }) => (\n          // @ts-ignore\n          <td\n            className=\"border border-gray-900 dark:border-gray-100\"\n            {...props}\n          />\n        ),\n        th: ({ node, ...props }) => (\n          // @ts-ignore\n          <th\n            className=\"border border-gray-900 dark:border-gray-100\"\n            {...props}\n          />\n        ),\n\n        ol: ({ node, ...props }) => <ol className=\"list-decimal\" {...props} />,\n        ul: ({ node, ...props }) => (\n          <ul\n            style={{ listStyleType: \"circle\" }}\n            className=\"mx-3 p-2\"\n            {...props}\n          />\n        ),\n        p: ({ node, ...props }) => (\n          <p style={{ marginTop: 15, marginBottom: 15 }} {...props} />\n        ),\n        li: ({ node, ...props }) => <li className=\"\" {...props} />,\n        code: ({ node, ...props }) => (\n          <code\n            className=\"dark:bg-gray-700\"\n            style={{ color: \"darkcyan\" }}\n            {...props}\n          />\n        ),\n        a: ({ node, ...props }) => (\n          <a\n            className=\"text-blue-500\"\n            style={{ color: \"darkblue\" }}\n            {...props}\n          />\n        ),\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};",
    "parameters": {},
    "types": [],
    "firstLine": 8,
    "lastLine": 10,
    "id": "MwFWtoyutxxNqkaF"
  },
  {
    "createdAt": 1663305514532,
    "updatedAt": 1663305514532,
    "deletedAt": 0,
    "createdFirstAt": 1663305514532,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
    "comment": "renders a markdown title (level should be 1 for h1 and 6 for h6)",
    "rawStatement": "const renderMarkdownTitle = (title: string, level: number) => {\n  const levelSize =\n    level === 1\n      ? \"text-3xl\"\n      : level === 2\n      ? \"text-2xl\"\n      : level === 3\n      ? \"text-xl\"\n      : level === 4\n      ? \"text-lg\"\n      : level === 5\n      ? \"text-md\"\n      : level === 6\n      ? \"text-sm\"\n      : \"text-xs\";\n\n  return (\n    <P id={title} className={levelSize}>\n      {title}\n    </P>\n  );\n};",
    "parameters": {},
    "types": [],
    "firstLine": 83,
    "lastLine": 85,
    "id": "rAZtiowUVHGgikdU"
  },
  {
    "createdAt": 1663305514532,
    "updatedAt": 1663305514532,
    "deletedAt": 0,
    "createdFirstAt": 1663305514532,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
    "comment": "renders a MarkdownChunk interface",
    "rawStatement": "const renderMarkdownChunk = (chunk: MarkdownChunk) => {\n  const title = chunk.title\n    ? renderMarkdownTitle(chunk.title, chunk.level)\n    : null;\n  return (\n    <Div>\n      {title}\n      {chunk.content ? renderMarkdownContent(chunk.content) : null}\n      {chunk.children?.map(renderMarkdownChunk)}\n    </Div>\n  );\n};",
    "parameters": {},
    "types": [],
    "firstLine": 109,
    "lastLine": 111,
    "id": "leRAOzUvcsKQLPxY"
  },
  {
    "createdAt": 1663305514532,
    "updatedAt": 1663305514532,
    "deletedAt": 0,
    "createdFirstAt": 1663305514532,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
    "comment": "renders the MardkownParse interface (including frontmatter)",
    "rawStatement": "export const renderMarkdownParse = (markdownParse: MarkdownParse) => {\n  return (\n    <Div>\n      {renderFrontmatter(markdownParse.parameters, { renderSpacer: true })}\n      {markdownParse.content?.map(renderMarkdownChunk)}\n    </Div>\n  );\n};",
    "parameters": {},
    "types": [],
    "firstLine": 125,
    "lastLine": 127,
    "id": "egYiMBdVtjxydQaQ"
  },
  {
    "createdAt": 1663305514532,
    "updatedAt": 1663305514532,
    "deletedAt": 0,
    "createdFirstAt": 1663305514532,
    "name": "Comment",
    "slug": "comment",
    "operationRelativeTypescriptFilePath": "src/renderMarkdownParse.tsx",
    "comment": "Renders markdown frontmatter parameters (and optionally a spacer)",
    "rawStatement": "export const renderFrontmatter = (\n  parameters: Frontmatter,\n  config?: { renderSpacer?: boolean }\n) => {\n  const frontMatterKeys = Object.keys(parameters);\n\n  return frontMatterKeys.length > 0 ? (\n    <Div>\n      <Div>\n        {frontMatterKeys.map((key) => (\n          <P>\n            {key}: {parameters[key]}\n          </P>\n        ))}\n      </Div>\n\n      {config?.renderSpacer ? <P>------------</P> : null}\n    </Div>\n  ) : null;\n};",
    "parameters": {},
    "types": [],
    "firstLine": 137,
    "lastLine": 139,
    "id": "dlKJhKFlsxLMsgti"
  }
]