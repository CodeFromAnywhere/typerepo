{
  "createdAt": 1662733037433,
  "updatedAt": 1662733037433,
  "deletedAt": 0,
  "createdFirstAt": 1662733037433,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/categorizeFiles.ts",
  "commentsInside": [],
  "rawText": " async ({\n  basePath,\n  type,\n  ignoreIndexFiles,\n}: {\n  basePath: string | string[];\n  /**\n   * ignore index files or not\n   */\n  ignoreIndexFiles?: boolean;\n  /**\n   * if given, only search for files of a specific containing data type\n   */\n  type?: \"code\" | \"data\" | \"text\";\n}): Promise<CategorizedFilePaths> => {\n  const defaultIgnore = [\"node_modules\", databaseFolderName, buildFolderName];\n\n  const filePaths = (\n    await explore({\n      basePath,\n      extension: type ? (extensions[type] as SearchableExtension[]) : undefined,\n      ignore: ignoreIndexFiles\n        ? [\"index.ts\", \"index.tsx\", ...defaultIgnore]\n        : defaultIgnore,\n    })\n  ).map((x) => x.path);\n\n  return filePaths.reduce(\n    (categorizedFilePathsObject, filePath) => {\n      const fileType = determineFileType(filePath);\n      // console.log({ filePath, fileType });\n      if (!fileType) return categorizedFilePathsObject;\n\n      categorizedFilePathsObject[fileType].push(filePath);\n\n      return categorizedFilePathsObject;\n    },\n    { code: [] as string[], data: [] as string[], text: [] as string[] }\n  );\n}",
  "name": "categorizeFiles",
  "slug": "categorize-files",
  "parameters": [],
  "description": "explores files in an operation within a specified location or from a specified type",
  "returnType": {
    "rawType": "Promise<import(\"/Users/king/King/operations/tools/types/code-types/build/OperationIndex\").CategorizedFilePaths>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1178,
    "lines": 40,
    "bytes": 1178,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 40,
    "numberOfFiles": 1
  },
  "id": "OxHiAWHuWHppPydi"
}