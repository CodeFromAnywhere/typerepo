{
  "createdAt": 1662905629359,
  "updatedAt": 1662905629359,
  "deletedAt": 0,
  "createdFirstAt": 1662905629359,
  "id": "named-parameters-<typeof-get-paragraphs-recursively->",
  "name": "NamedParameters<typeof getParagraphsRecursively>",
  "slug": "named-parameters-<typeof-get-paragraphs-recursively->",
  "operationRelativeTypescriptFilePath": "src/getParagraphsRecursively.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "chunk": {
          "$ref": "#/definitions/MarkdownChunk"
        },
        "categoryStackCalculatedUntilNow": {
          "$ref": "#/definitions/CategoryStack"
        }
      },
      "required": [
        "chunk"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "chunk",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "level",
                "required": true,
                "schema": {
                  "description": "0 is a paragraph 1-6 is h1 until h6",
                  "type": "number"
                }
              },
              {
                "name": "content",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "markdownEmbed",
                "required": false,
                "schema": {
                  "description": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                  "properties": [
                    {
                      "name": "alt",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "src",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "description": "type of asset that is being embedded",
                        "enum": [
                          "youtube",
                          "video",
                          "image",
                          "audio",
                          "markdown",
                          "json",
                          "typescript",
                          "file"
                        ],
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "markdownLink",
                "required": false,
                "schema": {
                  "description": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                  "properties": [
                    {
                      "name": "alt",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "href",
                      "required": true,
                      "schema": {
                        "type": "string"
                      }
                    },
                    {
                      "name": "type",
                      "required": true,
                      "schema": {
                        "description": "type of asset that is being embedded",
                        "enum": [
                          "youtube",
                          "video",
                          "image",
                          "audio",
                          "markdown",
                          "json",
                          "typescript",
                          "file"
                        ],
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "title",
                "required": false,
                "schema": {
                  "description": "NB: title can also be an empty string (\"\")",
                  "type": "string"
                }
              },
              {
                "name": "children",
                "required": false,
                "schema": {
                  "description": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                  "items": [
                    {
                      "schema": {
                        "circularRefName": "MarkdownChunk",
                        "properties": [],
                        "type": "object"
                      },
                      "name": "MarkdownChunk"
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "categoryStackCalculatedUntilNow",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof getParagraphsRecursively>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}