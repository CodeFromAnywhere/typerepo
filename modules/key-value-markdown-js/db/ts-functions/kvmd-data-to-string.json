{
  "createdAt": 1662905631282,
  "updatedAt": 1662905631282,
  "deletedAt": 0,
  "createdFirstAt": 1662905631282,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/kvmdDataToString.ts",
  "commentsInside": [],
  "rawText": " (\n  kvmdData: KeyValueMarkdownModelType,\n  previous: KeyValueMarkdownModelType | undefined\n) => {\n  // headers only need a newline before it if it's not the first item (so there is a previous)\n  const newlineIfHeader = kvmdData.isHeaderCalculated && !!previous ? \"\\n\" : \"\";\n\n  const level = kvmdData.isHeaderCalculated\n    ? kvmdData.categoryStackCalculated.length + 1\n    : 0;\n\n  const headerPrefix = kvmdData.isHeaderCalculated\n    ? \"#\".repeat(level).concat(\" \")\n    : \"\";\n\n  const isFirstItem =\n    !kvmdData.isHeaderCalculated && previous?.isHeaderCalculated;\n  const itemPrefix = isFirstItem ? \"\\n\" : \"\";\n\n  const line = `${newlineIfHeader}${headerPrefix}${itemPrefix}${\n    kvmdData.name ? `${kvmdData.name}: ` : \"\"\n  }${kvmdData.value || \"\"}${\n    kvmdData.comment ? ` <!-- ${kvmdData.comment} -->` : \"\"\n  }\\n`;\n\n  return line;\n}",
  "name": "kvmdDataToString",
  "slug": "kvmd-data-to-string",
  "parameters": [
    {
      "name": "kvmdData",
      "schema": {
        "$ref": "#/definitions/KeyValueMarkdownModelType"
      },
      "simplifiedSchema": {
        "description": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
        "properties": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "description": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "description": "key\n\nshould be english because it's kind of part of the codebase!",
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "description": "calculated: slug for this key (kebab case form of the name)",
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": false,
            "schema": {
              "description": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
              "type": "string"
            }
          },
          {
            "name": "comment",
            "required": true,
            "schema": {
              "description": "comment in html syntax. if not given, will be null",
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "isHeaderCalculated",
            "required": true,
            "schema": {
              "description": "Calculated value indicating whether or not the item has children",
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "previous",
      "schema": {
        "$ref": "#/definitions/KeyValueMarkdownModelType"
      },
      "simplifiedSchema": {
        "description": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
        "properties": [
          {
            "name": "id",
            "required": true,
            "schema": {
              "description": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "description": "key\n\nshould be english because it's kind of part of the codebase!",
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "description": "calculated: slug for this key (kebab case form of the name)",
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": false,
            "schema": {
              "description": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
              "type": "string"
            }
          },
          {
            "name": "comment",
            "required": true,
            "schema": {
              "description": "comment in html syntax. if not given, will be null",
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "isHeaderCalculated",
            "required": true,
            "schema": {
              "description": "Calculated value indicating whether or not the item has children",
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "parses KeyValueMarkdownModelType into a string which can be part of a new markdown file\n\nNB: we need to know the previous line as well because the header we need to print depends on it",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": true,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 1022,
    "lines": 29,
    "bytes": 1022,
    "bytesPerCharacter": 1,
    "charactersPerLine": 35,
    "linesPerFile": 29,
    "numberOfFiles": 1
  },
  "id": "EUsnWqYNuYJDdfGa"
}