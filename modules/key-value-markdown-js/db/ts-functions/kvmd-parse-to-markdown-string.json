{
  "createdAt": 1662905632156,
  "updatedAt": 1662905632156,
  "deletedAt": 0,
  "createdFirstAt": 1662905632156,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/kvmdParseToMarkdownString.ts",
  "commentsInside": [],
  "rawText": " (\n  keyValueMarkdownParse: KeyValueMarkdownParse\n) => {\n  const frontmatterString = frontmatterParseToString(\n    keyValueMarkdownParse.parameters\n  );\n\n  //2 go over every row, and parse it back into the line\n  const result = keyValueMarkdownParse.data\n    .map((kvmdData, index) => {\n      const previous: KeyValueMarkdownModelType | undefined =\n        keyValueMarkdownParse.data[index - 1];\n      const string = kvmdDataToString(kvmdData, previous);\n      return string;\n    })\n    .join(\"\");\n\n  return `${frontmatterString}${result}`;\n}",
  "name": "kvmdParseToMarkdownString",
  "slug": "kvmd-parse-to-markdown-string",
  "parameters": [
    {
      "name": "keyValueMarkdownParse",
      "schema": {
        "$ref": "#/definitions/KeyValueMarkdownParse"
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "data",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "description": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
                    "properties": [
                      {
                        "name": "id",
                        "required": true,
                        "schema": {
                          "description": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
                          "type": "string"
                        }
                      },
                      {
                        "name": "name",
                        "required": true,
                        "schema": {
                          "description": "key\n\nshould be english because it's kind of part of the codebase!",
                          "type": "string"
                        }
                      },
                      {
                        "name": "slug",
                        "required": true,
                        "schema": {
                          "description": "calculated: slug for this key (kebab case form of the name)",
                          "type": "string"
                        }
                      },
                      {
                        "name": "value",
                        "required": false,
                        "schema": {
                          "description": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
                          "type": "string"
                        }
                      },
                      {
                        "name": "comment",
                        "required": true,
                        "schema": {
                          "description": "comment in html syntax. if not given, will be null",
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationName",
                        "required": true,
                        "schema": {
                          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "null"
                        }
                      },
                      {
                        "name": "projectRelativePath",
                        "required": true,
                        "schema": {
                          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationRelativePath",
                        "required": false,
                        "schema": {
                          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "isHeaderCalculated",
                        "required": true,
                        "schema": {
                          "description": "Calculated value indicating whether or not the item has children",
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "KeyValueMarkdownModelType"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "parses KeyValueMarkdownParse into a markdown string so it can be saved as a markdown file",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": true,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 631,
    "lines": 19,
    "bytes": 631,
    "bytesPerCharacter": 1,
    "charactersPerLine": 33,
    "linesPerFile": 19,
    "numberOfFiles": 1
  },
  "id": "iQZTreanGNzolKHX"
}