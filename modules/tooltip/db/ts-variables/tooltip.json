{
  "createdAt": 1671318457106,
  "updatedAt": 1671318457106,
  "deletedAt": 0,
  "createdFirstAt": 1671318457106,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Tooltip",
  "slug": "tooltip",
  "operationRelativeTypescriptFilePath": "src/Tooltip.tsx",
  "type": {
    "rawType": "(props: { tooltip: React.ReactElement<any, string | React.JSXElementConstructor<any>> | null; children: React.ReactNode; hoverTimeout?: number | undefined; placement?: import(\"/Users/king/King/operations/node_modules/@popperjs/core/lib/enums\").Placement | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  tooltip: React.ReactElement | null;\n  children: React.ReactNode;\n  hoverTimeout?: number;\n  placement?: Placement;\n}) => {\n  const timeoutMs = props.hoverTimeout || DEFAULT_HOVER_TIMEOUT_MS;\n  const [hoverLink, setHoverLink] = useState(false);\n\n  const [tooltipTimeout, setTooltipTimeout] = useState<NodeJS.Timeout | null>(\n    null\n  );\n  const [linkTimeout, setLinkTimeout] = useState<NodeJS.Timeout | null>(null);\n\n  const btnRef = createRef<HTMLAnchorElement>();\n  const popoverRef = createRef<HTMLSpanElement>();\n  const [hoverTooltip, setHoverTooltip] = useState(false);\n\n  const onEnterLink = () => {\n    if (!btnRef.current || !popoverRef.current) return;\n    createPopper(btnRef.current, popoverRef.current, {\n      placement: props.placement || \"auto\",\n    });\n    setHoverLink(true);\n    if (linkTimeout) {\n      clearTimeout(linkTimeout);\n    }\n  };\n\n  const onLeaveLink = () => {\n    const timeout = setTimeout(() => setHoverLink(false), timeoutMs);\n    setLinkTimeout(timeout);\n  };\n\n  const popoverShow = hoverTooltip || hoverLink;\n\n  const onEnterTooltip = () => {\n    if (tooltipTimeout) {\n      clearTimeout(tooltipTimeout);\n    }\n    setHoverTooltip(true);\n  };\n\n  const onLeaveTooltip = () => {\n    const timeout = setTimeout(() => setHoverTooltip(false), timeoutMs);\n    setTooltipTimeout(timeout);\n  };\n\n  return (\n    <span>\n      {props.tooltip ? (\n        <span\n          onMouseEnter={onEnterTooltip}\n          onMouseLeave={onLeaveTooltip}\n          className={`mb-8 dark:text-gray-100 text-black bg-slate-200 dark:bg-slate-800 p-2 z-30 text-sm max-w-xs break-words rounded-md${\n            popoverShow ? \" block\" : \" hidden\"\n          }`}\n          ref={popoverRef}\n        >\n          {props.tooltip}\n        </span>\n      ) : null}\n      <span onMouseEnter={onEnterLink} onMouseLeave={onLeaveLink} ref={btnRef}>\n        {props.children}\n      </span>\n    </span>\n  );\n}",
  "description": "",
  "id": "nbnvzyrjnwwfoxeyncoimoiq"
}