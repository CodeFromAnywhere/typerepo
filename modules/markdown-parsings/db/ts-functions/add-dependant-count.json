{
  "createdAt": 1667976868826,
  "updatedAt": 1667976868826,
  "deletedAt": 0,
  "createdFirstAt": 1667976868826,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": false,
  "operationRelativeTypescriptFilePath": "src/operationToMarkdown.ts",
  "commentsInside": [],
  "rawText": "\n  (type: \"tsFunction\" | \"tsVariable\" | \"tsInterface\", imports: TsImport[]) =>\n  async (\n    item: TsFunction | TsVariable | TsInterface\n  ): Promise<DependantCountObject> => {\n    return {\n      [type]: item,\n      externalDependantFiles: item.operationName\n        ? await findDependants({\n            operationName: item.operationName,\n            importName: item.name,\n            imports,\n            onlyExternal: true,\n          })\n        : [],\n    } as DependantCountObject;\n  }",
  "name": "addDependantCount",
  "slug": "add-dependant-count",
  "parameters": [
    {
      "name": "type",
      "schema": {
        "type": "string",
        "enum": [
          "tsFunction",
          "tsVariable",
          "tsInterface"
        ]
      },
      "simplifiedSchema": {
        "enum": [
          "tsFunction",
          "tsVariable",
          "tsInterface"
        ],
        "type": "string"
      },
      "required": true
    },
    {
      "name": "imports",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TsImport"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "fullComment": "",
              "properties": [
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "id",
                  "required": true,
                  "schema": {
                    "fullComment": "unique id of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "fullComment": "name (identifier) of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "slug",
                  "required": true,
                  "schema": {
                    "fullComment": "kebab-case variant of the name",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativeTypescriptFilePath",
                  "required": true,
                  "schema": {
                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                    "type": "string"
                  }
                },
                {
                  "name": "comments",
                  "required": true,
                  "schema": {
                    "fullComment": "surrounding comments and comments inside of the import",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "module",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "alias",
                  "required": false,
                  "schema": {
                    "fullComment": "TODO: not sure, but I believe alias should be defined at the import, not at the export, right?",
                    "todo": "not sure, but I believe alias should be defined at the import, not at the export, right?",
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "required": false,
                  "schema": {
                    "enum": [
                      "value",
                      "type"
                    ],
                    "fullComment": "sometimes the import statement module referenced cannot be found, in that case it cannot be known whether the import should contain a type or value, so it will be undefined.",
                    "type": "string"
                  }
                },
                {
                  "name": "hasGeneric",
                  "required": false,
                  "schema": {
                    "fullComment": "only for type exports. tells you whether or not the type has one or more generic parameter(s)",
                    "type": "boolean"
                  }
                },
                {
                  "name": "isAbsolute",
                  "required": true,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "isModuleResolved",
                  "required": true,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "isModuleFromMonorepo",
                  "required": true,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            },
            "name": "TsImport"
          }
        ],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "Double arrow function to get the count for the item",
  "returnType": {
    "rawType": "(item: import(\"/Users/king/King/operations/tools/types/code-types/build/TsFunction\").TsFunction | import(\"/Users/king/King/operations/tools/types/code-types/build/TsVariable\").TsVariable | import(\"/Users/king/King/operations/tools/types/code-types/build/TsInterface\").TsInterface) => Promise<import(\"/Users/king/King/operations/tools/parsing/file-conversion/md/markdown-parsings/src/operationToMarkdown\").DependantCountObject>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 539,
    "lines": 17,
    "bytes": 539,
    "bytesPerCharacter": 1,
    "charactersPerLine": 32,
    "linesPerFile": 17,
    "numberOfFiles": 1
  },
  "id": "ptjvkdtyxnxsngsuqpoanrbj"
}