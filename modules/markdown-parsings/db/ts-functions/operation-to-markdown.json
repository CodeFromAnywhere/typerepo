{
  "createdAt": 1668154819142,
  "updatedAt": 1668154819142,
  "deletedAt": 0,
  "createdFirstAt": 1668154819142,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/operationToMarkdown.ts",
  "commentsInside": [],
  "rawText": " async (config: {\n  operationSummary: OperationSummary;\n  /**\n   * - save: saves the result in the operation `README.md` and `CONTRIBUTING.md` and other default md files\n   * - string: returns the full markdown string\n   * - parse: returns the `MarkdownParse`\n   */\n  returnType?: \"parse\" | \"string\" | \"save\";\n}): Promise<string | MarkdownParse | undefined> => {\n  const {\n    operationSummary: {\n      classification,\n      cliItems,\n      coreDependenciesString,\n      description,\n      docs,\n      externalItems,\n      internalItems,\n      operationDependenciesString,\n      operationName,\n      packageDependenciesString,\n      size,\n      testItems,\n      operationFolderPath,\n    },\n    returnType,\n  } = config;\n\n  const detailDocsContentStrings = docs?.map((content) =>\n    createMinimizedSectionMarkdown(content.content, content.relativePath)\n  );\n\n  const docsBundle = detailDocsContentStrings\n    ? await bundleFolderWithMarkdown(\"Docs\", detailDocsContentStrings, \"docs\")\n    : undefined;\n\n  const sizeString = `Size: ${size?.codeSize?.lines} LOC, ${\n    size?.dataSize?.characters !== undefined\n      ? `${size?.dataSize?.characters} data characters, `\n      : \"\"\n  }${\n    size?.textSize?.characters !== undefined\n      ? `${size?.textSize?.characters} text characters, `\n      : \"\"\n  }`;\n\n  const operationInfoMd = `${operationName} (\\`OperationClassification\\` ${classification})\n\n${description ? `${description}\\n\\n` : \"\"}`;\n\n  const infoString = `\n${sizeString}\n \nImported dependencies:\n\n- From Core Libraries: ${coreDependenciesString}\n- From Packages: ${packageDependenciesString}\n- From Operations: ${operationDependenciesString}`;\n\n  const operationInfoMarkdownParse = mdToJsonParse(\n    operationInfoMd,\n    operationName\n  );\n\n  const [cliMarkdown, testMarkdown] = [cliItems, testItems].map((items) =>\n    items.map(statementItemToMarkdown).filter(notEmpty).join(\"\\n\\n\")\n  );\n\n  const [externalItemsMarkdown, internalItemsMarkdown] = [\n    externalItems,\n    internalItems,\n  ].map((countArray) => {\n    const res = countArray\n      .map(statementItemToMarkdown)\n      .filter(notEmpty)\n      .join(\"\\n\\n\");\n\n    return res;\n  });\n\n  const apiReference = mdToJsonParse(externalItemsMarkdown!, \"api-reference\");\n\n  const internalSection = createMinimizedSection(\n    internalItemsMarkdown,\n    \"internal\",\n    `Show internal (${internalItems.length})`\n  );\n\n  const testSection = createMinimizedSection(\n    testMarkdown,\n    \"tests\",\n    `Show test information(${testItems.length})`\n  );\n\n  const cliSection = createMinimizedSection(\n    cliMarkdown,\n    \"CLI\",\n    `Show CLI information (${cliItems.length})`\n  );\n\n  const { merged } = mergeMarkdownParse(\n    [\n      operationInfoMarkdownParse,\n      mdToJsonParse(docsBundle?.outlineString || \"\"),\n      docsBundle?.markdownParse,\n      apiReference,\n      cliSection,\n      testSection,\n      internalSection,\n    ].filter(notEmpty)\n  );\n\n  let returnString: string | undefined = undefined;\n  if (returnType !== \"parse\") {\n    returnString = markdownParseToMarkdownString(merged);\n  }\n\n  const shouldSave = returnType === \"save\" || !returnType;\n  if (shouldSave && returnString) {\n    await fs.writeFile(\n      path.join(operationFolderPath, \"README.md\"),\n      returnString,\n      \"utf8\"\n    );\n  }\n\n  const returnValue =\n    returnType === \"parse\"\n      ? merged\n      : returnType === \"string\"\n      ? returnString\n      : undefined;\n\n  return returnValue;\n}",
  "name": "operationToMarkdown",
  "slug": "operation-to-markdown",
  "parameters": [
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "operationSummary": {
            "$ref": "#/definitions/OperationSummary"
          },
          "returnType": {
            "type": "string",
            "enum": [
              "parse",
              "string",
              "save"
            ],
            "description": "- save: saves the result in the operation `README.md` and `CONTRIBUTING.md` and other default md files\n- string: returns the full markdown string\n- parse: returns the `MarkdownParse`"
          }
        },
        "required": [
          "operationSummary"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "returnType",
            "required": false,
            "schema": {
              "enum": [
                "parse",
                "string",
                "save"
              ],
              "fullComment": "- save: saves the result in the operation `README.md` and `CONTRIBUTING.md` and other default md files\n- string: returns the full markdown string\n- parse: returns the `MarkdownParse`",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "converts an operation and all its contents into a flat markdown file that contains the needed information. configurable.\n\nmarkdown for reading (so there are no links)",
  "returnType": {
    "rawType": "Promise<string | import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 3605,
    "lines": 137,
    "bytes": 3605,
    "bytesPerCharacter": 1,
    "charactersPerLine": 26,
    "linesPerFile": 137,
    "numberOfFiles": 1
  },
  "id": "iosbmpzshgkgewmlraqrjjlb"
}