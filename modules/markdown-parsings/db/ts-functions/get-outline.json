{
  "createdAt": 1667976874385,
  "updatedAt": 1667976874385,
  "deletedAt": 0,
  "createdFirstAt": 1667976874385,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/parsing/outline.ts",
  "commentsInside": [],
  "rawText": " (\n  markdownParse: MarkdownParse\n): string | undefined => {\n  const titles = markdownParse.content?.map(getTitlesRecursively).flat();\n  const outlineString = printNestedTitles(titles);\n  return outlineString;\n}",
  "name": "getOutline",
  "slug": "get-outline",
  "parameters": [
    {
      "name": "markdownParse",
      "schema": {
        "$ref": "#/definitions/MarkdownParse"
      },
      "simplifiedSchema": {
        "fullComment": "",
        "properties": [
          {
            "name": "fileName",
            "required": false,
            "schema": {
              "fullComment": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "openedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "deletedAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdFirstAt",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "content",
            "required": false,
            "schema": {
              "fullComment": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "content",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "title",
                        "required": false,
                        "schema": {
                          "fullComment": "NB: title can also be an empty string (\"\")",
                          "nb": "title can also be an empty string (\"\")",
                          "type": "string"
                        }
                      },
                      {
                        "name": "children",
                        "required": false,
                        "schema": {
                          "fullComment": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                          "items": [
                            {
                              "schema": {
                                "circularRefName": "MarkdownChunk",
                                "properties": [],
                                "type": "object"
                              },
                              "name": "MarkdownChunk"
                            }
                          ],
                          "type": "array"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "MarkdownChunk"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "raw",
            "required": true,
            "schema": {
              "fullComment": "raw markdown without frontmatter",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "low-level function that gets the outline for MarkdownParse\n\nNB: with books usually the pages are referred in the outline. Since that depends on the font size and dimensions, this cannot be done straight from the markdown parse. Eventually we probably need to check the made pdf for its content, maybe there is even a pdf feature that creates an outline for you. There must be more people having this problem.",
  "returnType": {
    "rawType": "string | undefined",
    "typeDefinition": {
      "optional": true,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 619,
    "lines": 9,
    "bytes": 619,
    "bytesPerCharacter": 1,
    "charactersPerLine": 69,
    "linesPerFile": 9,
    "numberOfFiles": 1
  },
  "id": "rsdkphweumyergekpmojaius"
}