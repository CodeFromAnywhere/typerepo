{
  "createdAt": 1667976881075,
  "updatedAt": 1667976881075,
  "deletedAt": 0,
  "createdFirstAt": 1667976881075,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/tsFunctionToMarkdownString.ts",
  "commentsInside": [],
  "rawText": " (tsFunction: TsFunction): string => {\n  const isComponent =\n    tsFunction.operationRelativeTypescriptFilePath.endsWith(\".tsx\") &&\n    isUpperCase(tsFunction.name.charAt(0));\n\n  const titleString = `# ${\n    isComponent ? `<${tsFunction.name} />` : `${tsFunction.name}()`\n  }`;\n\n  const infoString = `${\n    tsFunction.codeSize?.lines ? `${tsFunction.codeSize.lines} LOC, ` : \"\"\n  }Max. indexation depth: ${tsFunction.maxIndentationDepth}, ${\n    tsFunction.cumulativeCodeSize?.lines\n      ? `${tsFunction.cumulativeCodeSize?.lines} Cumulative LOC`\n      : \"\"\n  }`;\n\n  const returnString = tsFunction.returnType.simplifiedSchema\n    ? simplifiedSchemaToMarkdownString(\n        tsFunction.returnType.simplifiedSchema,\n        \"Returns\",\n        true,\n        2\n      )\n    : \"\";\n\n  /*\n\n| Input      |        |     |\n| ---------- | ------ | --- |\n| fileId     | string |     |\n| **Output** |        |     |\n| object     |        |     |\n\n\n    */\n\n  const paramaterTableRows =\n    tsFunction.parameters && tsFunction.parameters.length > 0\n      ? tsFunction.parameters.map((parameter) => {\n          const summary = getJsonSchemaSummary(parameter.schema, true);\n          return `| ${parameter.name}${\n            parameter.required ? \"\" : \" (optional)\"\n          } | ${summary?.typeDescriptor || \"\"} | ${\n            summary?.description || \"\"\n          } |`;\n        })\n      : \"| - | | |\";\n\n  // const argumentStrings =\n  // tsFunction.parameters && tsFunction.parameters.length > 0\n  //   ? `## Parameters (${\n  //       tsFunction.parameters.length\n  //     })\\n\\n${tsFunction.parameters\n  //       .map((x, i) =>\n  //         simplifiedSchemaToMarkdownString(\n  //           x.simplifiedSchema,\n  //           `Parameter ${i + 1}: ${x.name}`,\n  //           x.required,\n  //           3\n  //         )\n  //       )\n  //       .join(\"\\n\\n\")}`\n  //   : undefined;\n\n  const returnTypeMarkdownString = tsFunction.returnType.typeDefinition\n    ? getTypeDescriptorRecursive(tsFunction.returnType.typeDefinition, true)\n    : \"\";\n\n  const outputRow = `| **Output** | ${returnTypeMarkdownString}   | ${\n    tsFunction.returnType.typeDefinition?.description || \"\"\n  }   |`;\n  const tableString = `\n| Input      |    |    |\n| ---------- | -- | -- |\n${paramaterTableRows}\n${outputRow}\n`;\n\n  const alineas: (string | undefined)[] = [\n    titleString,\n    // infoString, // TODO: Maybe make it optional.\n    tsFunction.description,\n    // returnTypeString,\n    tableString,\n  ];\n\n  return alineas.filter(notEmpty).join(\"\\n\\n\");\n}",
  "name": "tsFunctionToMarkdownString",
  "slug": "ts-function-to-markdown-string",
  "parameters": [
    {
      "name": "tsFunction",
      "schema": {
        "$ref": "#/definitions/TsFunction"
      },
      "simplifiedSchema": {
        "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
        "properties": [
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "schema": {
              "fullComment": "unique id of the model",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "fullComment": "name (identifier) of the model",
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "fullComment": "kebab-case variant of the name",
              "type": "string"
            }
          },
          {
            "name": "operationRelativeTypescriptFilePath",
            "required": true,
            "schema": {
              "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
              "type": "string"
            }
          },
          {
            "name": "canCache",
            "required": false,
            "schema": {
              "fullComment": "whether or not the function is can be cached (relies on cache invalidation)",
              "type": "boolean"
            }
          },
          {
            "name": "isGetApi",
            "required": false,
            "schema": {
              "fullComment": "if true, the function will get the `server`.js context as its only argument, and it's directly exposed as GET api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzGetApi` whhere `abcXyz` can be anything.",
              "type": "boolean"
            }
          },
          {
            "name": "isPostApi",
            "required": false,
            "schema": {
              "fullComment": "If true, the function will get the `server`.js context as its only argument, and it's directly exposed as POST api. Endpoint path will be inferred from the function name\n\nFor this to be indexed to `true`, you need to call the function `abcXyzPostApi` where `abcXyz` can be anything.",
              "type": "boolean"
            }
          },
          {
            "name": "isExported",
            "required": true,
            "schema": {
              "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
              "type": "boolean"
            }
          },
          {
            "name": "isApiExposed",
            "required": true,
            "schema": {
              "fullComment": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
              "type": "boolean"
            }
          },
          {
            "name": "publicAuthorization",
            "required": true,
            "schema": {
              "fullComment": "The default authorization that is set level applies to users without any specific authorization (granted to everyone).\n\nshould be indexed based on doccomment containing `AUTH-PUBLIC: [execute], [read], [search]`",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "rawText",
            "required": false,
            "schema": {
              "fullComment": "raw text of the function",
              "type": "string"
            }
          },
          {
            "name": "commentsInside",
            "required": true,
            "schema": {
              "fullComment": "all comments found in a function and the node that they belong to",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "parameters",
            "required": false,
            "schema": {
              "fullComment": "parameters the function takes as its arguments, if any",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "maxIndentationDepth",
            "required": true,
            "schema": {
              "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
              "type": "number"
            }
          },
          {
            "name": "dependantFiles",
            "required": false,
            "schema": {
              "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
              "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "price",
            "required": false,
            "schema": {
              "fullComment": "Indexed from frontmatter `price`",
              "type": "number"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "TsFunction:\n- name and operation\n- size\n- description (doc-comment)\n- input, output",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/String"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 2602,
    "lines": 93,
    "bytes": 2602,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 93,
    "numberOfFiles": 1
  },
  "id": "zqgevjqfgkcixgfckpwwxuyn"
}