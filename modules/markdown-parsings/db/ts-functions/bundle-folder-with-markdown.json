{
  "createdAt": 1667976850481,
  "updatedAt": 1667976850481,
  "deletedAt": 0,
  "createdFirstAt": 1667976850481,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/bundleFolderWithMarkdown.ts",
  "commentsInside": [],
  "rawText": " async (\n  outlineTitle: string,\n\n  absoluteFolderPath: string,\n  /**\n   * filename to include in the final MarkdownParse\n   */\n  fileName?: string\n): Promise<{ markdownParse: MarkdownParse; outlineString: string }> => {\n  const mdPaths = (\n    await explore({ basePath: absoluteFolderPath, extension: \"md\" })\n  ).map((x) => x.path);\n\n  const markdownParses = (\n    await Promise.all(mdPaths.map((mdPath) => readMarkdownFile(mdPath)))\n  ).filter(notEmpty);\n\n  const { merged, outline } = mergeMarkdownParse(markdownParses, fileName);\n  const outlineString = makeOutlineMarkdownString(outlineTitle, outline);\n\n  return { markdownParse: merged, outlineString };\n}",
  "name": "bundleFolderWithMarkdown",
  "slug": "bundle-folder-with-markdown",
  "parameters": [
    {
      "name": "outlineTitle",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "absoluteFolderPath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "fileName",
      "schema": {
        "type": "string",
        "description": "filename to include in the final MarkdownParse"
      },
      "simplifiedSchema": {
        "fullComment": "filename to include in the final MarkdownParse",
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "finds all md files in a folder and creates a single MarkdownParse\n\nhandy for creating a single documentation file or other things that have to include multiple markdown files in a structured way\n\nNB: it recursively structures the files and folders with headings",
  "returnType": {
    "rawType": "Promise<{ markdownParse: import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse; outlineString: string; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 922,
    "lines": 26,
    "bytes": 922,
    "bytesPerCharacter": 1,
    "charactersPerLine": 35,
    "linesPerFile": 26,
    "numberOfFiles": 1
  },
  "id": "nhedsvnyxznmayscjikyhxtu"
}