{
  "createdAt": 1662735932600,
  "updatedAt": 1662735932600,
  "deletedAt": 0,
  "createdFirstAt": 1662735932600,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/bundlings.ts",
  "commentsInside": [],
  "rawText": " (\n  simplifiedSchema: SimplifiedSchema | undefined,\n  name: string,\n  isRequired: boolean,\n  /** the headers level, defaults to 1 */ level?: number\n): string => {\n  if (!simplifiedSchema) return \"\";\n\n  const refLinkString = simplifiedSchema.circularRefName\n    ? `[${simplifiedSchema.circularRefName}](#${kebabCase(\n        simplifiedSchema.circularRefName\n      )})`\n    : \"\";\n\n  const enumString = simplifiedSchema.enum\n    ? `(Enum: ${simplifiedSchema.enum.map(String).join(\" | \")}) `\n    : \"\";\n\n  const optionalSubtitle = `${isRequired ? \"\" : \" (optional)\"}`;\n\n  const nameWithoutNewlines = name.replaceAll(\"\\n\", \"\");\n  const type = `${simplifiedSchema.type}${enumString}${refLinkString}`;\n  const title = `${\"#\".repeat(\n    level || 1\n  )} ${nameWithoutNewlines}${optionalSubtitle}: ${type}`;\n\n  const arrayString = simplifiedSchema.items\n    ? simplifiedSchema.items\n        .map((item) => {\n          const itemString = `- ${item.name}: ${item.schema.type}`;\n          return itemString;\n        })\n        .join(\"\\n\")\n    : \"\";\n\n  const description = simplifiedSchema.description\n    ? `\\`\\`\\`md\\n${simplifiedSchema.description}\\n\\`\\`\\`\\n`\n    : \"\";\n\n  const objectString = simplifiedSchema.properties\n    ? `Properties: \\n\\n | Name | Type | Description |\\n|---|---|---|\\n${simplifiedSchema.properties\n        .map(propertyToTableRow)\n        .join(\"\\n\")}\\n`\n    : \"\";\n\n  const togetherString = [title, arrayString, description, objectString].join(\n    \"\\n\\n\"\n  );\n\n  return togetherString;\n}",
  "name": "simplifiedSchemaToMarkdownString",
  "slug": "simplified-schema-to-markdown-string",
  "parameters": [],
  "description": "Should render a string with one or more markdown tables to represent the simplifiedSchema",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": true,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1590,
    "lines": 51,
    "bytes": 1590,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 51,
    "numberOfFiles": 1
  },
  "id": "vlGiijqJmDVoGTQg"
}