{
  "createdAt": 1662905698990,
  "updatedAt": 1662905698990,
  "deletedAt": 0,
  "createdFirstAt": 1662905698990,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/simplifiedSchemaToMarkdownString.ts",
  "commentsInside": [],
  "rawText": " (\n  simplifiedSchema: SimplifiedSchema | undefined,\n  /**\n   * if not given, no title is printed\n   */\n  name: string | undefined,\n  isRequired: boolean,\n  /** the headers level, defaults to 1 */\n  level?: number\n): string => {\n  if (!simplifiedSchema) return \"\";\n\n  const refLinkString = simplifiedSchema.circularRefName\n    ? `[${simplifiedSchema.circularRefName}](#${kebabCase(\n        simplifiedSchema.circularRefName\n      )})`\n    : \"\";\n\n  const enumString = simplifiedSchema.enum\n    ? `(Enum: ${simplifiedSchema.enum.map(String).join(\" | \")}) `\n    : \"\";\n\n  const optionalSubtitle = `${isRequired ? \"\" : \" (optional)\"}`;\n\n  const nameWithoutNewlines = name ? name.replaceAll(\"\\n\", \"\") : undefined;\n  const type = `${simplifiedSchema.type}${enumString}${refLinkString}`;\n  const title = name\n    ? `${\"#\".repeat(\n        level || 1\n      )} ${nameWithoutNewlines}${optionalSubtitle}: ${type}`\n    : undefined;\n\n  const arrayString = simplifiedSchema.items\n    ? simplifiedSchema.items\n        .map((item) => {\n          const itemString = `- ${item.name}: ${item.schema.type}`;\n          return itemString;\n        })\n        .join(\"\\n\")\n    : \"\";\n\n  const description = simplifiedSchema.description\n    ? `> ${noNewlines(simplifiedSchema.description)}`\n    : \"\";\n\n  const objectString = makePropertiesTable(simplifiedSchema.properties);\n  const togetherString = [title, arrayString, description, objectString]\n    .filter(notEmpty)\n    .join(\"\\n\\n\");\n\n  return togetherString;\n}",
  "name": "simplifiedSchemaToMarkdownString",
  "slug": "simplified-schema-to-markdown-string",
  "parameters": [
    {
      "name": "simplifiedSchema",
      "schema": {
        "$ref": "#/definitions/SimplifiedSchema"
      },
      "simplifiedSchema": {
        "description": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
        "properties": [
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "circularRefName",
            "required": false,
            "schema": {
              "description": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
              "type": "string"
            }
          },
          {
            "name": "enum",
            "required": false,
            "schema": {
              "description": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "properties",
            "required": false,
            "schema": {
              "description": "in case of object, this will always appear",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "items",
            "required": false,
            "schema": {
              "description": "in case of arrays, this will always appear",
              "items": [],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    },
    {
      "name": "name",
      "schema": {
        "type": "string",
        "description": "if not given, no title is printed"
      },
      "simplifiedSchema": {
        "description": "if not given, no title is printed",
        "type": "string"
      },
      "required": false
    },
    {
      "name": "isRequired",
      "schema": {
        "type": "boolean"
      },
      "simplifiedSchema": {
        "type": "boolean"
      },
      "required": true
    },
    {
      "name": "level",
      "schema": {
        "type": "number",
        "description": "the headers level, defaults to 1"
      },
      "simplifiedSchema": {
        "description": "the headers level, defaults to 1",
        "type": "number"
      },
      "required": false
    }
  ],
  "description": "Should render a string with one or more markdown tables to represent the simplifiedSchema",
  "returnType": {
    "rawType": "String",
    "typeDefinition": {
      "optional": false,
      "type": "string",
      "allOf": [
        {
          "transform": [
            "trim"
          ]
        },
        {
          "minLength": 1
        }
      ]
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": true,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "string"
    }
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 1576,
    "lines": 52,
    "bytes": 1576,
    "bytesPerCharacter": 1,
    "charactersPerLine": 30,
    "linesPerFile": 52,
    "numberOfFiles": 1
  },
  "id": "ZvkLIqPZonqWPoSH"
}