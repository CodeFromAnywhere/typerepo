{
  "createdAt": 1667635409341,
  "updatedAt": 1667635409341,
  "deletedAt": 0,
  "createdFirstAt": 1667635409341,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getFunctionsInfo",
  "slug": "get-functions-info",
  "operationRelativeTypescriptFilePath": "src/getFunctionsInfo.ts",
  "type": {
    "rawType": "(operationName: string) => Promise<{ functionsOutline: string; functionsMarkdownParse: import(\"/Users/king/King/operations/tools/types/code-types/build/MarkdownParse\").MarkdownParse | undefined; functionsMarkdownString: string | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  operationName: string\n): Promise<{\n  functionsOutline: string;\n  functionsMarkdownParse: MarkdownParse | undefined;\n  functionsMarkdownString: string | undefined;\n}> => {\n  const tsFunctions = (await db.get(\"TsFunction\", { operationName })).filter(\n    onlyUnique2<TsFunction>((a, b) => a.name === b.name)\n  );\n\n  const functionsMarkdownString =\n    tsFunctions.length > 0\n      ? tsFunctions.map(tsFunctionToMarkdownString).join(\"\\n\\n\")\n      : undefined;\n\n  const functionsMarkdownParse: MarkdownParse | undefined =\n    functionsMarkdownString\n      ? mdToJsonParse(functionsMarkdownString, \"functions\")\n      : undefined;\n\n  const functionsOutline =\n    tsFunctions.length > 0\n      ? `## Functions\\n\\n${tsFunctions\n          .map((tsFunction) => `- [${tsFunction.name}](#${tsFunction.name})`)\n          .join(\"\\n\")}\\n\\n`\n      : \"\";\n\n  return { functionsOutline, functionsMarkdownParse, functionsMarkdownString };\n}",
  "description": "",
  "id": "gcztvnbqqjiezjowxnrhzzit"
}