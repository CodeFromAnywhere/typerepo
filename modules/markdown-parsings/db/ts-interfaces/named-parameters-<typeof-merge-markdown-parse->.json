{
  "createdAt": 1662905693727,
  "updatedAt": 1662905693727,
  "deletedAt": 0,
  "createdFirstAt": 1662905693727,
  "id": "named-parameters-<typeof-merge-markdown-parse->",
  "name": "NamedParameters<typeof mergeMarkdownParse>",
  "slug": "named-parameters-<typeof-merge-markdown-parse->",
  "operationRelativeTypescriptFilePath": "src/parsing/merge.ts",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "markdownParses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarkdownParse"
          }
        },
        "fileName": {
          "type": "string"
        }
      },
      "required": [
        "markdownParses"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "markdownParses",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "properties": [
                    {
                      "name": "fileName",
                      "required": false,
                      "schema": {
                        "description": "if available, this can be the filename of the markdown in this markdown-parse. Can be used for things like merging",
                        "type": "string"
                      }
                    },
                    {
                      "name": "createdAt",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "openedAt",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "updatedAt",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "deletedAt",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "createdFirstAt",
                      "required": false,
                      "schema": {
                        "type": "number"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": true,
                      "schema": {
                        "description": "Our version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "downmatterParameters",
                      "required": false,
                      "schema": {
                        "properties": [
                          {
                            "name": "detectedLanguage",
                            "required": false,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "labels",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "content",
                      "required": false,
                      "schema": {
                        "description": "structured content based on h1, h2, h3, etc (paragraphs, recursive)",
                        "items": [
                          {
                            "schema": {
                              "properties": [
                                {
                                  "name": "level",
                                  "required": true,
                                  "schema": {
                                    "description": "0 is a paragraph 1-6 is h1 until h6",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "content",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "markdownEmbed",
                                  "required": false,
                                  "schema": {
                                    "description": "Anything in the format `![alt](src)`\n\nNB: I need to be very clear how this one works",
                                    "properties": [
                                      {
                                        "name": "alt",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "src",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": true,
                                        "schema": {
                                          "description": "type of asset that is being embedded",
                                          "enum": [
                                            "youtube",
                                            "video",
                                            "image",
                                            "audio",
                                            "markdown",
                                            "json",
                                            "typescript",
                                            "file"
                                          ],
                                          "type": "string"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "markdownLink",
                                  "required": false,
                                  "schema": {
                                    "description": "Anything in the format `[alt](href)`\n\nIt needs to be clear how this works. There is a convention for this, and I should implement that as good as possible, and document it here",
                                    "properties": [
                                      {
                                        "name": "alt",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "href",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": true,
                                        "schema": {
                                          "description": "type of asset that is being embedded",
                                          "enum": [
                                            "youtube",
                                            "video",
                                            "image",
                                            "audio",
                                            "markdown",
                                            "json",
                                            "typescript",
                                            "file"
                                          ],
                                          "type": "string"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "description": "NB: title can also be an empty string (\"\")",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "children",
                                  "required": false,
                                  "schema": {
                                    "description": "all content until the next title. it's either a content array if there's any titles found, or a string[] if it's paragraphs",
                                    "items": [
                                      {
                                        "schema": {
                                          "circularRefName": "MarkdownChunk",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "MarkdownChunk"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "MarkdownChunk"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "raw",
                      "required": true,
                      "schema": {
                        "description": "raw markdown without frontmatter",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "MarkdownParse"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "fileName",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof mergeMarkdownParse>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}