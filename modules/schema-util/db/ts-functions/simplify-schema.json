{
  "createdAt": 1663146885250,
  "updatedAt": 1663146885250,
  "deletedAt": 0,
  "createdFirstAt": 1663146885250,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/simplifySchema.ts",
  "commentsInside": [],
  "rawText": " (\n  /** The name of the type interface, (this could be used as $ref). */\n  name: string | null,\n\n  /** The schema that needs to be simplified */\n  schema: JSONSchema7,\n\n  /** The array of other schemas found when crawling file this schema was found in. this also includes all refs to other type interfaces in all schemas in that file */\n  possibleRefs: {\n    /** the name of the schema, (without /definitions/ prefix like $ref) */\n    name: string;\n    schema: JSONSchema7;\n  }[],\n  /**\n   * This function is recursive. If we find any reference to another schema, we will add the name of the current schema to the rootStack and explore that schema.\n   */\n  rootStack: string[]\n): SimplifiedSchema | undefined => {\n  if (Array.isArray(schema.type)) {\n    // let's do this one later\n    log(\n      `I don't support this usecase (type is an array of multiple types)... ${schema.type.join(\n        \",\"\n      )}`,\n      {\n        type: \"debug\",\n      }\n    );\n  }\n  const type = Array.isArray(schema.type) ? schema.type[0] : schema.type;\n  const newRootStack = name ? rootStack.concat(name) : rootStack;\n  const refName = getRefLink(schema.$ref);\n  const isCircularRef = !!refName && rootStack.includes(refName);\n\n  if (refName && !isCircularRef) {\n    const refSchema = possibleRefs.find((r) => r.name === refName);\n    if (!refSchema) {\n      log(\n        \"Strange, ref was not present in the possible refs\",\n        {\n          type: \"debug\",\n        },\n        { possibleRefNames: possibleRefs.map((x) => x.name), refName }\n      );\n    }\n\n    // we already encountered this ref before, let's avoid infinite recursion here.\n\n    return refSchema?.schema\n      ? simplifySchema(refName, refSchema?.schema, possibleRefs, newRootStack)\n      : undefined;\n  }\n\n  const simplifiedPrimitive = {\n    description: schema.description,\n    enum: schema.enum,\n    circularRefName: refName,\n  };\n\n  if (type === \"boolean\") {\n    return { ...simplifiedPrimitive, type: \"boolean\" };\n  }\n\n  if (type === \"integer\" || type === \"number\") {\n    // NB: integers are also numbers\n    return { ...simplifiedPrimitive, type: \"number\" };\n  }\n\n  if (type === \"null\") {\n    return { ...simplifiedPrimitive, type: \"null\" };\n  }\n\n  if (type === \"string\") {\n    return { ...simplifiedPrimitive, type: \"string\" };\n  }\n\n  if (type === \"array\") {\n    const items = getSchemaItems(schema);\n\n    const simplifiedItems: SimplifiedSchemaItem[] = items\n      .map((item) => {\n        const itemName = getRefLink(item.$ref) || null;\n        const schema = simplifySchema(\n          itemName,\n          item,\n          possibleRefs,\n          name ? rootStack.concat(name) : rootStack\n        );\n        if (!schema) return;\n        return {\n          schema,\n          name: itemName,\n        };\n      })\n      .filter(notEmpty);\n\n    return {\n      ...simplifiedPrimitive,\n      items: simplifiedItems,\n      type: \"array\",\n    };\n  }\n\n  // NB: type must be an object here, it's the only possibility left...\n  // in case of objects\n\n  const properties = getProperties(schema);\n\n  const simplifiedProperties: SimplifiedSchemaProperty[] = properties\n    .map((property) => {\n      const schema = simplifySchema(\n        property.name,\n        property.schema,\n        possibleRefs,\n        newRootStack\n      );\n\n      if (!schema) return;\n\n      const possibleReferenceParameterNames =\n        getPossibleReferenceParameterNames(property.name);\n\n      const hasReferenceParameter = !!properties.find((x) =>\n        possibleReferenceParameterNames.includes(x.name)\n      );\n\n      // NB: if the property has a model reference, we just need the model reference, not the whole model. This is only for retreiving, it's not present in the database.\n      if (hasReferenceParameter) return;\n\n      return {\n        name: property.name,\n        required: property.required,\n        schema,\n      };\n    })\n    .filter(notEmpty);\n\n  return {\n    ...simplifiedPrimitive,\n    properties: simplifiedProperties,\n    type: \"object\",\n  };\n}",
  "name": "simplifySchema",
  "slug": "simplify-schema",
  "parameters": [
    {
      "name": "name",
      "schema": {
        "type": [
          "string",
          "null"
        ],
        "description": "The name of the type interface, (this could be used as $ref)."
      },
      "simplifiedSchema": {
        "description": "The name of the type interface, (this could be used as $ref).",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "schema",
      "schema": {
        "$ref": "#/definitions/JSONSchema7",
        "description": "The schema that needs to be simplified"
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "$id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$defs",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "type",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "enum",
            "required": false,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "multipleOf",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMaximum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclusiveMinimum",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minLength",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "items",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minItems",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "uniqueItems",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contains",
            "required": false,
            "schema": {
              "circularRefName": "JSONSchema7",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "maxProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minProperties",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "required",
            "required": false,
            "schema": {
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "properties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "patternProperties",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "dependencies",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "allOf",
            "required": false,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "anyOf",
            "required": false,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "oneOf",
            "required": false,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentMediaType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentEncoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "definitions",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "title",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "readOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "writeOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "possibleRefs",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "the name of the schema, (without /definitions/ prefix like $ref)"
            },
            "schema": {
              "$ref": "#/definitions/JSONSchema7"
            }
          },
          "required": [
            "name",
            "schema"
          ],
          "additionalProperties": false
        },
        "description": "The array of other schemas found when crawling file this schema was found in. this also includes all refs to other type interfaces in all schemas in that file"
      },
      "simplifiedSchema": {
        "description": "The array of other schemas found when crawling file this schema was found in. this also includes all refs to other type interfaces in all schemas in that file",
        "items": [
          {
            "schema": {
              "properties": [
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "description": "the name of the schema, (without /definitions/ prefix like $ref)",
                    "type": "string"
                  }
                },
                {
                  "name": "schema",
                  "required": true,
                  "schema": {
                    "properties": [
                      {
                        "name": "$id",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "$ref",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "$comment",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "$defs",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "type",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "enum",
                        "required": false,
                        "schema": {
                          "items": [],
                          "type": "array"
                        }
                      },
                      {
                        "name": "multipleOf",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "maximum",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "exclusiveMaximum",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "minimum",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "exclusiveMinimum",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "maxLength",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "minLength",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "pattern",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "items",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "maxItems",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "minItems",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "uniqueItems",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "contains",
                        "required": false,
                        "schema": {
                          "circularRefName": "JSONSchema7",
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "maxProperties",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "minProperties",
                        "required": false,
                        "schema": {
                          "type": "number"
                        }
                      },
                      {
                        "name": "required",
                        "required": false,
                        "schema": {
                          "items": [
                            {
                              "schema": {
                                "type": "string"
                              },
                              "name": null
                            }
                          ],
                          "type": "array"
                        }
                      },
                      {
                        "name": "properties",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "patternProperties",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "dependencies",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "allOf",
                        "required": false,
                        "schema": {
                          "items": [],
                          "type": "array"
                        }
                      },
                      {
                        "name": "anyOf",
                        "required": false,
                        "schema": {
                          "items": [],
                          "type": "array"
                        }
                      },
                      {
                        "name": "oneOf",
                        "required": false,
                        "schema": {
                          "items": [],
                          "type": "array"
                        }
                      },
                      {
                        "name": "format",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "contentMediaType",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "contentEncoding",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "definitions",
                        "required": false,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "title",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "description",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "readOnly",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "writeOnly",
                        "required": false,
                        "schema": {
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  }
                }
              ],
              "type": "object"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "rootStack",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "This function is recursive. If we find any reference to another schema, we will add the name of the current schema to the rootStack and explore that schema."
      },
      "simplifiedSchema": {
        "description": "This function is recursive. If we find any reference to another schema, we will add the name of the current schema to the rootStack and explore that schema.",
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": true
    }
  ],
  "description": "Return a SimplifiedSchema by giving the JSONSchema7 schema, its name and a list of possible references in the JSONSchema.\n\nA SimplifiedSchema is a data structure that allows you to easily define type interfaces that need to build out forms.\n\n# Todo\n\nDual types aren't done right yet. I probably don't look at `anyOf` yet, which makes it result in an empty object.\n\nFor example, this one is problematic:\n\nINPUT:\n\n```json\n{\n\"schema\": {\n\"anyOf\": [\n{\"type\": \"string\"},\n{\"type\": \"array\",\"items\": {\"type\": \"string\"}}\n]\n},\n```\n\nOutput:\n```json\n{\n\"simplifiedSchema\": {\n\"properties\": [],\n\"type\": \"object\"\n},\n}\n```\n\nTo test this one, test `npx rebuildOperation filename-conventions`",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/SimplifiedSchema\").SimplifiedSchema | undefined",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 5,
  "size": {
    "characters": 4661,
    "lines": 175,
    "bytes": 4661,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 175,
    "numberOfFiles": 1
  },
  "id": "HaYBExZOWTArkUkA"
}