{
  "createdAt": 1667635704842,
  "updatedAt": 1667635704842,
  "deletedAt": 0,
  "createdFirstAt": 1667635704842,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateEnvSdks.ts",
  "commentsInside": [],
  "rawText": " async (\n  bundleConfig: BundleConfig,\n  config?: {\n    manualProjectRoot?: string;\n    skipYarnInstall?: boolean;\n    dryrun?: boolean;\n  }\n) => {\n  const promises = [\n    newEnvSdk(bundleConfig, \"public\", config),\n    newEnvSdk(bundleConfig, \"private\", config),\n  ];\n\n  const results = await Promise.all(promises);\n\n  return results;\n}",
  "name": "generateEnvSdks",
  "slug": "generate-env-sdks",
  "parameters": [
    {
      "name": "bundleConfig",
      "schema": {
        "$ref": "#/definitions/BundleConfig"
      },
      "simplifiedSchema": {
        "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nConfiguration options for bundles. Used with `generateBundle`\n\nEverything in this model will be copied over to the created bundle, except for `createBundleConfig` and `customisableBundleConfig`.",
        "properties": [
          {
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "schema": {
              "fullComment": "a description about this bundle",
              "type": "string"
            }
          },
          {
            "name": "emoji",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "primaryColor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gitRepoUrl",
            "required": false,
            "schema": {
              "fullComment": "NB: later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation",
              "nb": "later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation",
              "type": "string"
            }
          },
          {
            "name": "isGitRepoPublic",
            "required": false,
            "schema": {
              "fullComment": "if true, your gitrepo is marked as pubilc and thus users will be linked to it sometimes",
              "type": "boolean"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "manualProjectRoot": {
            "type": "string"
          },
          "skipYarnInstall": {
            "type": "boolean"
          },
          "dryrun": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipYarnInstall",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dryrun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "generates sdk-env-public and sdk-env-private\n\nreturns the paths of the geneated operations",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 427,
    "lines": 19,
    "bytes": 427,
    "bytesPerCharacter": 1,
    "charactersPerLine": 22,
    "linesPerFile": 19,
    "numberOfFiles": 1
  },
  "id": "qlltctbbrsdbgfhpmngpizfm"
}