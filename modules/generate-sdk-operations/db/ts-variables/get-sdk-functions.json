{
  "createdAt": 1667635708272,
  "updatedAt": 1667635708272,
  "deletedAt": 0,
  "createdFirstAt": 1667635708272,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getSdkFunctions",
  "slug": "get-sdk-functions",
  "operationRelativeTypescriptFilePath": "src/generateFunctionSdks.ts",
  "type": {
    "rawType": "(config?: { manualProjectRoot?: string | undefined; } | undefined) => Promise<import(\"/Users/king/King/operations/tools/typescript/generate-sdk-operations/src/generateFunctionSdks\").FunctionsPerClassification | undefined>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (config?: {\n  manualProjectRoot?: string;\n}): Promise<FunctionsPerClassification | undefined> => {\n  const manualProjectRoot = config?.manualProjectRoot;\n  const projectRoot = manualProjectRoot || getProjectRoot();\n  if (!projectRoot) return;\n\n  const sdkDependants = await findDependantsRecursively(\"sdk\");\n\n  const tsFunctions = await db.get(\"TsFunction\", { manualProjectRoot });\n\n  console.log({ tsFunctions: tsFunctions.length, manualProjectRoot });\n\n  const exportedFunctions = tsFunctions\n    .filter((x) => x.isExported)\n    .filter(isTsFunctionIndexable)\n    .filter((x) => {\n      return x.operationName && !sdkDependants.includes(x.operationName);\n    })\n    .filter(onlyUnique2<TsFunction>((a, b) => a.name === b.name));\n\n  console.log({ exportedFunctions: exportedFunctions.length });\n\n  const operationFolders = await exploreOperationFolders({});\n  const operationClassificationObject: OperationClassificationObject =\n    mergeObjectsArray(\n      operationFolders\n        .map((operationBasePath) => {\n          const operationClassification =\n            getOperationClassification(operationBasePath);\n          if (!operationClassification) return;\n          const operationName = getLastFolder(operationBasePath);\n          return { [operationName]: operationClassification };\n        })\n        .filter(notEmpty)\n    );\n\n  const operationIsSdkableObject = mergeObjectsArray(\n    await Promise.all(\n      operationFolders.map(async (operationFolderPath) => {\n        const packageJson = await getPackageJson({ operationFolderPath });\n        const isSdkable = packageJson?.sensible?.isNotSdkable ? false : true;\n        const operationName = getLastFolder(operationFolderPath);\n\n        return { [operationName]: isSdkable };\n      })\n    )\n  );\n\n  const sdkFunctionsPerClassification = mergeObjectsArray(\n    operationClassificationConst.map((operationClassification) => {\n      const sdkFunctions = exportedFunctions\n        .filter((x) => {\n          if (!x.operationName) return false;\n          const isSdkable = operationIsSdkableObject[x.operationName];\n          return isSdkable;\n        })\n        .filter((x) =>\n          tsFunctionIsSdkable(\n            x,\n            operationClassificationObject,\n            operationClassification\n          )\n        )\n        .filter(onlyUnique2<TsFunction>((a, b) => a.name === b.name));\n\n      log(\n        `for ${operationClassification} we found ${sdkFunctions.length} functions`,\n        { type: \"debug\" }\n      );\n      if (sdkFunctions.length === 0)\n        log(\n          `Warning: 0 functions found for ${operationClassification} operations`,\n          { type: \"warning\" }\n        );\n\n      return { [operationClassification]: sdkFunctions };\n    })\n  ) as FunctionsPerClassification;\n\n  return sdkFunctionsPerClassification;\n}",
  "description": "returns all sdk functions grouped by operation classification",
  "id": "rspsgkmaknfiopycrcakmerz"
}