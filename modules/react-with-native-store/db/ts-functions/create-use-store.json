{
  "createdAt": 1663009361516,
  "updatedAt": 1663009361516,
  "deletedAt": 0,
  "createdFirstAt": 1663009361516,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/general.tsx",
  "commentsInside": [],
  "rawText": " <TState extends object>(\n  initialValues: TState\n) => {\n  if (debug) {\n    console.log(\"Create useStore\");\n  }\n  const useStore = <K extends Keys<TState>>(key: K) => {\n    if (!Object.keys(initialValues).includes(key)) {\n      throw new Error(`Using undefined key in useStore: ${key}`);\n    }\n    const context = getContext(key);\n    if (!context) {\n      throw new Error(\n        `Failed loading the context with key: ${key}. Did you wrap your component/app with a StoreProvider?`\n      );\n    }\n    const useStoreHook = React.useContext<UseStoreType<TState>>(context);\n\n    const useStoreHookType = typeof useStoreHook;\n\n    if (useStoreHookType !== \"function\") {\n      console.error(\n        `useStoreHookType for ${key} is ${useStoreHookType}... wtf?`\n      );\n    }\n\n    return useStoreHook(key);\n  };\n  return useStore;\n}",
  "name": "createUseStore",
  "slug": "create-use-store",
  "parameters": [],
  "description": "",
  "returnType": {
    "rawType": "<K extends Extract<keyof T, string>>(key: K) => [TState[K], (value: TState[K]) => Promise<void>, { hydrated: boolean; }]",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 828,
    "lines": 30,
    "bytes": 828,
    "bytesPerCharacter": 1,
    "charactersPerLine": 28,
    "linesPerFile": 30,
    "numberOfFiles": 1
  },
  "id": "OcIuSTmrEEzorqog"
}