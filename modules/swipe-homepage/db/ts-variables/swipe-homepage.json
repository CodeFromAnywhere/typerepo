{
  "createdAt": 1670064317736,
  "updatedAt": 1670064317736,
  "deletedAt": 0,
  "createdFirstAt": 1670064317736,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "SwipeHomepage",
  "slug": "swipe-homepage",
  "operationRelativeTypescriptFilePath": "src/SwipeHomepage.tsx",
  "type": {
    "rawType": "(props: { ctas: { text: string; href: string; }[]; items: import(\"/Users/king/King/operations/tools/user-interfaces/gui/dumb/swipe-homepage/src/SwipeHomepage\").SwipeItem[]; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  ctas: { text: string; href: string }[];\n  items: SwipeItem[];\n}) => {\n  const { ctas, items } = props;\n  const buttonClass =\n    \"bg-white/60 rounded-full hover:bg-white cursor-pointer text-black p-2\";\n\n  return (\n    <Div>\n      <Div className=\"h-screen overflow-auto snap-mandatory snap-y\">\n        {items.map((item, index) => {\n          const finalMarkdown = item.isMarkdownNoLimit\n            ? item.markdown\n            : item.markdown?.substring(0, 500) +\n              ((item.markdown?.length || 0) > 500 ? \"...\" : \"\");\n          const nameSizeClass =\n            item.title.length > 10 ? \"text-2xl\" : \"text-6xl\";\n          return (\n            <Div\n              key={`item${index}`}\n              style={{\n                backgroundImage: item.imagePath\n                  ? `url(\"${item.imagePath}\")`\n                  : undefined,\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center 75%\",\n              }}\n              className={`snap-center h-screen w-screen flex flex-col justify-center relative items-center ${\n                item.imagePath ? \"text-white\" : \"text-black dark:text-white\"\n              }`}\n            >\n              <ALink\n                href={item.href || \"#\"}\n                className={`absolute top-20 left-20 font-bold drop-shadow bg-green-500/20 rounded-md px-4 py-2 backdrop-blur-sm ${nameSizeClass} ${\n                  item.href ? \"cursor-pointer\" : \"cursor-default\"\n                }`}\n              >\n                {item.title}\n              </ALink>\n\n              {item.markdown && item.markdownSourcePath && finalMarkdown ? (\n                <Div className={\"w-[80vw]\"}>\n                  {renderMarkdownContent(finalMarkdown, {\n                    projectRelativeMarkdownFilePath: item.markdownSourcePath,\n                    projectRelativeBaseFolderPath: getFolderJs(\n                      item.markdownSourcePath\n                    ),\n                  })}\n                </Div>\n              ) : null}\n              {item.description ? (\n                <ALink\n                  href={item.href || \"#\"}\n                  className={`absolute bottom-10 mx-4 rounded-md p-6 bg-white/30 backdrop-blur-sm ${\n                    item.href ? \"cursor-pointer\" : \"cursor-default\"\n                  }`}\n                >\n                  {item.description}\n                </ALink>\n              ) : null}\n            </Div>\n          );\n        })}\n      </Div>\n      <Div className=\"z-index-1 absolute bottom-4 w-full flex flex-row justify-around\">\n        {ctas.map((cta) => {\n          return (\n            <ALink href={cta.href} className={buttonClass}>\n              {cta.text}\n            </ALink>\n          );\n        })}\n      </Div>\n\n      <Div className=\"z-index-1 absolute bg-white/60 rounded-full w-12 h-12 top-4 left-4\">\n        <Image src=\"/logo.png\" width={50} height={50} />\n      </Div>\n    </Div>\n  );\n}",
  "description": "This homepage component assumes you provide it some CTA's (ideally 2 or 3) and some items.\n\n- The items will be swipable\n- The logo should be available in `public/logo.png`\n\n![Example](../assets/SwipeHomepage.mov)",
  "id": "exfzmchszsjaqwszhuhjdokk"
}