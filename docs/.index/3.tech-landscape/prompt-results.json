[
  {
    "createdAt": 1671234869408,
    "updatedAt": 1671234869408,
    "createdFirstAt": 1671234869408,
    "deletedAt": 0,
    "id": "yfzmqpmlhirtxchwgcfnotws",
    "resultAssets": [],
    "resultText": "Sure, here are 10 questions based on the information provided in the file:\n\n1. What are the main goals of Typerepo?\n2. How does Typerepo approach building applications for different platforms?\n3. Which frameworks does Typerepo use for web applications?\n4. Which frameworks does Typerepo use for mobile applications?\n5. What is Server.js used for in the Typerepo stack?\n6. How does Typerepo enable code sharing between different apps?\n7. What is the purpose of the `react-with-native` framework?\n8. What is Tailwind used for in the Typerepo app?\n9. What is the required folder structure for a Typerepo project?\n10. What is the purpose of the `schemas` folder in a Typerepo project?",
    "prompt": "I am reading this file:\n\n```\n# ðŸ¦… A Birdseye View\n\n## Philosophy\n\nTyperepo was built with a couple of things in mind. This is what we care about:\n\n- Codebase introspection (Documentation generation)\n- Full-stack code-sharing (full-stack auto-completion using Typescript)\n- Maximise learnability, minimise tech debt, simplify onboarding\n- Decentralised, Open Source, Automatic\n\n## The stack\n\nWe have templates to easly create new apps.\n\n- For Web applications, [React](https://reactjs.org/) with [Next.js](https://nextjs.org) is used\n- For Android and iOS applications, [React Native](https://reactnative.dev/) with [Expo](https://expo.dev) is used\n- For REST APIs we use Server.js on Node JS\n- For CLIâ€™s and Scripts we use raw Node JS\n- There's also a bare javascript template you can use\n\nWe're planning to also make templates for the following:\n\n- For MacOS, Windows and Linux applications, we want to use React with Electron\n- For VSCode Extensions we want to use bare React!\n- For Chrome Extensions we use React with [MV3](https://developer.chrome.com/docs/extensions/mv3/intro/)\n\nTogether, this creates a very powerful setup. Typerepo isnâ€™t a single framework trying to build on multiple places. This would be very hard. Typerepo tries to keep all the good stuff and use the best framework for every location, and make it easy to share code.\n\n### Used libraries\n\nWe use the following libraries in the Typerepo app.\n\n#### React with Native\n\n`react-with-native` is a framework that lets us render HTML-like components inside react-native. By replacing all html with the `react-with-native` counterparts (for example, using `<Div>` over `<div>`), we are able to share code between `react-native` and `react` and can share all UI between any app using our `ui` package. For more information, check https://reactwithnative.com/\n\n#### Server.js\n\nThis Node.js server lets us define endpoints in a simpler way which made it possible to get type safety for the endpoints. For more information, check out https://serverjs.io\n\n#### Tailwind\n\nThis layer on top of CSS is used within react-with-native and makes it possible to have the same styling in react and react-native apps. For more information, check https://tailwindcss.com\n\n## Folder structure\n\nEvery Typerepo project must adhere the following structure:\n\n- `apps` all applications, including a server, web, and mobile apps\n- `packages` all packages that need to be shared between multiple apps\n- `docs` markdown files that need to be presented in the Typerepo Docs to educate the developer of the project.\n- `assets` any assets that don't belong to an app or package.\n- `schemas` generated folder with the JSON typescript definitions\n\n<!-- TODO: edit, then add overview.png to this page -->\n\n```\n\nCan you create a quiz with 10 questions about this information?",
    "prompt_projectRelativePath": "operations/tools/deployment/typerepo/docs/3.tech-landscape.md",
    "thread": "1c76df68-6f61-453a-9e50-1f005233a713",
    "contextualPromptSlug": "quiz",
    "isFake": false
  }
]