{
  "createdAt": 1669384774570,
  "updatedAt": 1669384774570,
  "deletedAt": 0,
  "createdFirstAt": 1669384774570,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "TodoMenuHeader",
  "slug": "todo-menu-header",
  "operationRelativeTypescriptFilePath": "src/TodoMenuHeader.tsx",
  "type": {
    "rawType": "() => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "() => {\n  const persons =\n    queries.useGetPublicPersons().data?.result?.map((x) => {\n      return { value: x.id, label: humanCase(x.name) };\n    }) || [];\n\n  const [todoPagesConfig, setTodoPagesConfig] = useStore(\"todoPagesConfig\");\n\n  const recencyOptions = [{ label: \"‚è∞\", value: \"\" }].concat(\n    todoPagesConfigRecencys.map((x) => {\n      return { value: x, label: humanCase(x) };\n    })\n  );\n  const recencyValue: Item<string> =\n    recencyOptions.find((x) => x.value === todoPagesConfig.recency) ||\n    recencyOptions[0];\n\n  const categoryStackOptions = [\n    { label: \"üß©\", value: \"\" },\n    { label: \"Without category\", value: \"__NO_CATEGORY__\" },\n  ].concat(\n    [\"ideas\", \"backlog\", \"done\", \"codestories\", \"postables\", \"wontdo\"].map(\n      (x) => {\n        return { value: x, label: humanCase(x) };\n      }\n    )\n  );\n\n  const defaultSelectClass =\n    \"text-xs border-gray-300 border rounded-md focus:outline-none bg-transparent h-9\";\n\n  const noCategoryValue =\n    todoPagesConfig.categoryStack?.length === 0\n      ? categoryStackOptions.find((x) => x.value === \"__NO_CATEGORY__\")\n      : undefined;\n\n  const cateogryValue = categoryStackOptions.find(\n    (x) => x.value === todoPagesConfig.categoryStack?.[0]\n  );\n  const categoryStackValue: Item<string> =\n    noCategoryValue || cateogryValue || categoryStackOptions[0];\n\n  const personOptions = [{ label: \"üôã‚Äç‚ôÇÔ∏è\", value: \"\" }].concat(persons);\n\n  const personValue: Item<string> =\n    personOptions.find((x) => x.value === todoPagesConfig.personId) ||\n    personOptions[0];\n\n  return (\n    <Div className=\"flex flex-row flex-wrap gap gap-1 mb-2\">\n      {/* Person filter: assigned to a person of your choice (owner_personSlug) */}\n      <SelectInput\n        className={`${defaultSelectClass} ${\n          todoPagesConfig.personId ? \"\" : \"w-10\"\n        }`}\n        fieldName=\"personId\"\n        config={{}}\n        uniqueFieldId=\"personId\"\n        extra={{ options: personOptions }}\n        value={personValue}\n        onChange={(v) =>\n          setTodoPagesConfig({\n            ...todoPagesConfig,\n            personId:\n              v?.value === \"\" || v?.value === undefined ? undefined : v?.value,\n          })\n        }\n      />\n\n      {/* are in a certain categoryStack: SelectInput with preset (done, ideas, backlog, codestories, postables, etc*/}\n      <SelectInput\n        fieldName=\"categoryStack\"\n        config={{}}\n        className={`${defaultSelectClass} ${\n          todoPagesConfig.categoryStack ? \"\" : \"w-10\"\n        }`}\n        uniqueFieldId=\"categoryStack\"\n        extra={{ options: categoryStackOptions }}\n        value={categoryStackValue}\n        onChange={(v) =>\n          setTodoPagesConfig({\n            ...todoPagesConfig,\n            categoryStack:\n              v?.value === \"\" || v?.value === undefined\n                ? undefined\n                : v?.value === \"__NO_CATEGORY__\"\n                ? []\n                : [v?.value],\n          })\n        }\n      />\n      {/* has a certain recency of updated time:SelectInput */}\n      <SelectInput\n        fieldName=\"recency\"\n        config={{}}\n        className={`${defaultSelectClass} ${\n          todoPagesConfig.recency ? \"\" : \"w-10\"\n        }`}\n        uniqueFieldId=\"recency\"\n        extra={{ options: recencyOptions }}\n        value={recencyValue}\n        onChange={(v) =>\n          setTodoPagesConfig({\n            ...todoPagesConfig,\n            recency:\n              v?.value === \"\"\n                ? undefined\n                : (v?.value as TodoPagesConfig[\"recency\"]),\n          })\n        }\n      />\n      {/* has high priority:ToggleInput */}\n      <ToggleInput\n        config={{}}\n        fieldName=\"highPrio\"\n        uniqueFieldId=\"highPrio\"\n        extra={{ label: todoPagesConfig.priority ? \"High priority\" : \"‚ùóÔ∏è\" }}\n        className={`${defaultSelectClass} px-1 ${\n          todoPagesConfig.priority ? \"\" : \"\"\n        }`}\n        onChange={(value) => {\n          setTodoPagesConfig({\n            ...todoPagesConfig,\n            priority: value === true ? \"high\" : undefined,\n          });\n        }}\n        value={todoPagesConfig.priority === \"high\" ? true : false}\n      />\n\n      {todoPagesConfig.categoryStack ||\n      todoPagesConfig.personId ||\n      todoPagesConfig.priority ||\n      todoPagesConfig.recency ? (\n        <Div\n          onClick={() => setTodoPagesConfig({})}\n          className={`${defaultSelectClass} px-1 flex items-center justify-center py-1 cursor-pointer w-20`}\n        >\n          üßπ Clear\n        </Div>\n      ) : null}\n    </Div>\n  );\n}",
  "description": "",
  "id": "tmmmthwnpmrkuwaawqivlcgz"
}