{
  "createdAt": 1668774416426,
  "updatedAt": 1668774416426,
  "deletedAt": 0,
  "createdFirstAt": 1668774416426,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/components/FunctionExecutionTable.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  tsFunction?: TsFunction;\n  functionExecutions: FunctionExecution[];\n  type: \"example\" | \"test\" | \"recent\";\n}) => {\n  const { functionExecutions, type, tsFunction } = props;\n\n  const [executionId, setExecutionId] = useStore(\"executionId\");\n  const [initialValues, setInitialValues] = useStore(\"initialValues\");\n\n  const [currentTab, setCurrentTab] = useStore(\"tabs.currentTab\");\n  const [loading, setLoading] = useState<{ [id: string]: number | undefined }>(\n    {}\n  );\n\n  const functionExecutionsQuery = queries.useGetFunctionExecutions(\n    tsFunction?.name\n  );\n\n  if (!tsFunction) {\n    return <Div>Hmmm vremd</Div>;\n  }\n\n  const withLoading = async (\n    callback: () => Promise<void>,\n    id: string,\n    actionNumber: number\n  ) => {\n    setLoading((loading) => ({ ...loading, [id]: actionNumber }));\n\n    await callback();\n\n    setLoading((loading) => ({\n      ...loading,\n      [id]: undefined,\n    }));\n  };\n\n  const finalFunctionExecutions =\n    type === \"example\"\n      ? functionExecutions.filter((item: FunctionExecution) => item.isExample)\n      : type === \"test\"\n      ? functionExecutions.filter((item: FunctionExecution) => item.isTest)\n      : functionExecutions\n          .sort((a, b) => (a.createdAt < b.createdAt ? -1 : 1))\n          .slice(0, 100);\n\n  const isDataLoading =\n    functionExecutionsQuery.isRefetching ||\n    functionExecutionsQuery.isFetching ||\n    functionExecutionsQuery.isLoading;\n  return (\n    <>\n      {isDataLoading ? <FancyLoader big /> : null}\n      <Table\n        data={finalFunctionExecutions}\n        columns={[\n          {\n            name: \"Input\",\n            objectParameterKey: \"inputParameters\",\n            customPresentation: (item) => {\n              return (\n                <td>\n                  {item.inputParameters\n                    ? item.inputParameters.map((inputParameter) => {\n                        return (\n                          <Div className=\"border border-black p-2\">\n                            <MarkdownCodeblock\n                              text={\n                                inputParameter\n                                  ? JSON.stringify(inputParameter, undefined, 2)\n                                  : \"undefined\"\n                              }\n                              extension=\"json\"\n                              minimalMode=\"preview\"\n                              expandedMode=\"scroll\"\n                              isInitiallyExpanded={false}\n                            />\n                          </Div>\n                        );\n                      })\n                    : \"No input\"}\n                </td>\n              );\n            },\n          },\n          {\n            name: \"Output\",\n            objectParameterKey: \"output\",\n            customPresentation: (item) => {\n              return (\n                <td>\n                  <MarkdownCodeblock\n                    text={\n                      item.output\n                        ? JSON.stringify(item.output, undefined, 2)\n                        : \"undefined\"\n                    }\n                    extension=\"json\"\n                    minimalMode=\"preview\"\n                    expandedMode=\"scroll\"\n                    isInitiallyExpanded={false}\n                  />\n                </td>\n              );\n            },\n          },\n          {\n            objectParameterKey: \"description\",\n            name: \"Info\",\n            customPresentation: (item) => {\n              return (\n                <td>\n                  {item.description ? (\n                    <MarkdownView\n                      markdownParse={mdToJsonParse(item.description)}\n                      markdownParseRenderConfig={{\n                        projectRelativeBaseFolderPath: \"\",\n                        projectRelativeMarkdownFilePath: \"\",\n                      }}\n                      view=\"view\"\n                    />\n                  ) : (\n                    <Div />\n                  )}\n                </td>\n              );\n            },\n          },\n          {\n            objectParameterKey: \"id\",\n            name: \"Actions\",\n            customPresentation: (item) => {\n              const actions: ActionItem[] = [\n                // make example\n\n                type !== \"example\"\n                  ? {\n                      id: 1,\n                      title: \"Make example\",\n                      emoji: \"👻\",\n                      onClick: async () => {\n                        withLoading(\n                          async () => {\n                            const apiResult = await api.upsertDbModel(\n                              \"FunctionExecution\",\n                              { ...item, isExample: true }\n                            );\n\n                            functionExecutionsQuery.refetch();\n\n                            // console.log({ apiResult });\n                          },\n                          item.id,\n                          1\n                        );\n                      },\n                    }\n                  : undefined,\n\n                // make test\n\n                type !== \"test\"\n                  ? {\n                      id: 2,\n                      title: \"Make test\",\n                      emoji: \"🔧\",\n                      onClick: async () => {\n                        withLoading(\n                          async () => {\n                            const apiResult = await api.upsertDbModel(\n                              \"FunctionExecution\",\n                              { ...item, isTest: true }\n                            );\n\n                            functionExecutionsQuery.refetch();\n\n                            // console.log({ apiResult });\n                          },\n                          item.id,\n                          2\n                        );\n                      },\n                    }\n                  : undefined,\n\n                // delete (tests and examples)\n                type !== \"recent\"\n                  ? {\n                      id: 3,\n                      title: \"Remove\",\n                      emoji: \"❌\",\n                      onClick: async () => {\n                        withLoading(\n                          async () => {\n                            const apiResult = await api.upsertDbModel(\n                              \"FunctionExecution\",\n                              {\n                                ...item,\n                                isExample:\n                                  type === \"example\" ? false : item.isExample,\n                                isTest: type === \"test\" ? false : item.isTest,\n                              }\n                            );\n\n                            functionExecutionsQuery.refetch();\n\n                            // console.log({ apiResult });\n                          },\n                          item.id,\n                          3\n                        );\n                      },\n                    }\n                  : undefined,\n\n                // fill in in form in tab 1\n                {\n                  id: 4,\n                  title: \"Use in form\",\n                  emoji: \"📝\",\n                  onClick: () => {\n                    // Go to tab\n                    setCurrentTab(1);\n                    setExecutionId(item.id);\n                    setInitialValues(item.inputParameters);\n                  },\n                },\n                // execute directly\n                {\n                  id: 5,\n                  emoji: \"⚡️\",\n                  title: \"Execute\",\n                  onClick: async () => {\n                    withLoading(\n                      async () => {\n                        const apiFunction = api[\n                          tsFunction.name as keyof typeof api\n                        ] as undefined | ((...parameters: any[]) => any);\n\n                        const apiResult = await apiFunction?.(\n                          ...(item.inputParameters || [])\n                        );\n\n                        functionExecutionsQuery.refetch();\n\n                        // console.log({ apiResult });\n                      },\n                      item.id,\n                      5\n                    );\n                  },\n                },\n              ].filter(notEmpty);\n              return (\n                <td>\n                  {actions.map((action) => {\n                    const isLoading = loading[item.id] === action.id;\n                    return (\n                      <Button\n                        type=\"button\"\n                        onClick={action.onClick}\n                        className=\"hover:bg-blue-500  mr-2 rounded-md p-1\"\n                        textClassName=\"text-xs hover:text-white flex flex-row\"\n                      >\n                        {isLoading ? <FancyLoader /> : \"\"}\n                        <P>\n                          {action.emoji} {action.title}\n                        </P>\n                      </Button>\n                    );\n                  })}\n                </td>\n              );\n            },\n          },\n        ]}\n      />\n    </>\n  );\n}",
  "name": "FunctionExecutionTable",
  "slug": "function-execution-table",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "tsFunction": {
            "$ref": "#/definitions/TsFunction"
          },
          "functionExecutions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FunctionExecution"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "example",
              "test",
              "recent"
            ]
          }
        },
        "required": [
          "functionExecutions",
          "type"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "tsFunction",
            "required": false,
            "schema": {
              "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
              "properties": [
                {
                  "name": "explicitTypeName",
                  "required": false,
                  "schema": {
                    "fullComment": "If you give a function a type explicitly on its declaration, this type will be set here.",
                    "type": "string"
                  }
                },
                {
                  "name": "isExported",
                  "required": true,
                  "schema": {
                    "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                    "type": "boolean"
                  }
                },
                {
                  "name": "rawText",
                  "required": false,
                  "schema": {
                    "fullComment": "raw text of the function",
                    "type": "string"
                  }
                },
                {
                  "name": "commentsInside",
                  "required": true,
                  "schema": {
                    "fullComment": "all comments found in a function and the node that they belong to",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "parameters",
                  "required": false,
                  "schema": {
                    "fullComment": "parameters the function takes as its arguments, if any",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "maxIndentationDepth",
                  "required": true,
                  "schema": {
                    "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                    "type": "number"
                  }
                },
                {
                  "name": "dependantFiles",
                  "required": false,
                  "schema": {
                    "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                    "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                    "items": [
                      {
                        "schema": {
                          "type": "string"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "groupAuthorization",
                  "required": true,
                  "schema": {
                    "fullComment": "Other keys in frontmatter that are group names, can be added here",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "isApiExposed",
                  "required": true,
                  "schema": {
                    "fullComment": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
                    "type": "boolean"
                  }
                },
                {
                  "name": "canCache",
                  "required": false,
                  "schema": {
                    "fullComment": "whether or not the function can be cached (relies on cache invalidation)",
                    "type": "boolean"
                  }
                },
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "id",
                  "required": true,
                  "schema": {
                    "fullComment": "unique id of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "fullComment": "name (identifier) of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "slug",
                  "required": true,
                  "schema": {
                    "fullComment": "kebab-case variant of the name",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativeTypescriptFilePath",
                  "required": true,
                  "schema": {
                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "functionExecutions",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "Model for tests, examples, cache, and recent executions of any function\n\nRequirement for **tifo-stitching**\n\nExample:\n\nconst someFunction = (inputA: string, inputB:string):string => {\n\nreturn `${inputA} != ${inputB}` }\n\n\n// find this in the database after executing the function\n\nconst functionExecution1 = { .... functionName: \"someFunction\", inputParameters: [\"hello\", \"world\"], output: \"hello != world\", isTest: false, isExample: false, isResultFromCache: false, performance: [....], }",
                    "properties": [
                      {
                        "name": "operationName",
                        "required": true,
                        "schema": {
                          "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "null"
                        }
                      },
                      {
                        "name": "projectRelativePath",
                        "required": true,
                        "schema": {
                          "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "operationRelativePath",
                        "required": false,
                        "schema": {
                          "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                          "type": "string"
                        }
                      },
                      {
                        "name": "functionName",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "inputParameters",
                        "required": false,
                        "schema": {
                          "items": [
                            {
                              "schema": {
                                "properties": [],
                                "type": "object"
                              },
                              "name": null
                            }
                          ],
                          "type": "array"
                        }
                      },
                      {
                        "name": "output",
                        "required": true,
                        "schema": {
                          "properties": [],
                          "type": "object"
                        }
                      },
                      {
                        "name": "isTest",
                        "required": true,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "isExample",
                        "required": true,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "isResultFromCache",
                        "required": true,
                        "schema": {
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "hasApiChanged",
                        "required": false,
                        "schema": {
                          "fullComment": "if true, the api of the function (input/output interface) has changed in bewteen, so the re-execution would probably fail or return a different result",
                          "type": "boolean"
                        }
                      },
                      {
                        "name": "performance",
                        "required": true,
                        "schema": {
                          "items": [],
                          "type": "array"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "FunctionExecution"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "example",
                "test",
                "recent"
              ],
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 17,
  "size": {
    "characters": 9144,
    "lines": 281,
    "bytes": 9156,
    "bytesPerCharacter": 1.0013123359580052,
    "charactersPerLine": 33,
    "linesPerFile": 281,
    "numberOfFiles": 1
  },
  "id": "edpqcrnyhvpobvpkbolpjgfe"
}