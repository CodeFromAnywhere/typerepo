{
  "createdAt": 1669276189470,
  "updatedAt": 1669276189470,
  "deletedAt": 0,
  "createdFirstAt": 1669276189470,
  "id": "namedparameterstypeof-functionexecutiontable",
  "name": "NamedParameters<typeof FunctionExecutionTable>",
  "slug": "namedparameterstypeof-functionexecutiontable",
  "operationRelativeTypescriptFilePath": "src/components/FunctionExecutionTable.tsx",
  "hasGeneric": false,
  "isExported": false,
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "props": {
          "type": "object",
          "properties": {
            "tsFunction": {
              "$ref": "#/definitions/TsFunction"
            },
            "functionExecutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FunctionExecution"
              }
            },
            "type": {
              "type": "string",
              "enum": [
                "example",
                "test",
                "recent"
              ]
            }
          },
          "required": [
            "functionExecutions",
            "type"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "props"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "props",
          "required": true,
          "schema": {
            "properties": [
              {
                "name": "tsFunction",
                "required": false,
                "schema": {
                  "fullComment": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
                  "properties": [
                    {
                      "name": "explicitTypeName",
                      "required": false,
                      "schema": {
                        "fullComment": "If you give a function a type explicitly on its declaration, this type will be set here.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "isExported",
                      "required": true,
                      "schema": {
                        "fullComment": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "description",
                      "required": false,
                      "schema": {
                        "fullComment": "parsed comment from doc-comment\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "rawText",
                      "required": false,
                      "schema": {
                        "fullComment": "raw text of the function",
                        "type": "string"
                      }
                    },
                    {
                      "name": "commentsInside",
                      "required": true,
                      "schema": {
                        "fullComment": "all comments found in a function and the node that they belong to",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "comments are basically one-or-multi-line human content inside of typescript files, so it's a very important to do something useful with them.\n\n\nThe convention should be that single-line comments should start with that. This then becomes the type of the comment. You can also put multiple prefixes at the start.\n\nExample:\n\n`// TODO: NB: this is a todo but its also important`\n\nMultiline comments can also have one or multiple types in their text, but they should not be split into multiple comments as the context could be needed some times.\n\n\n\nThere are also some other things comments can say about statements, but these should be inside the frontmatter, and are much more flexible.\n- classified[0-10] indicating level of classification. This way I can share subsets of the codebase, maybe...\n- privacy\n- ...?\n\nNB: with the current setup we can also parse `.md` files as being a TsComment, keep it that way!\n\nNB: comments are part of the code, so they should always be in English!",
                              "nb": "with the current setup we can also parse `.md` files as being a TsComment, keep it that way!",
                              "properties": [
                                {
                                  "name": "operationName",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "null"
                                  }
                                },
                                {
                                  "name": "projectRelativePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "id",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "unique id of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "name (identifier) of the model",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "slug",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "kebab-case variant of the name",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "operationRelativeTypescriptFilePath",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "comment",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "the content of the comment in markdown, without frontmatter\n\na string that is known to contain markdown.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "parameters",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "parameters destructured from the frontmatter of the parsed markdown (if comment is not a oneliner, otherwise it'll be empty)\n\nOur version of frontmatter is a bit simpler than regular frontmatter\n\nNot sure if this is a good idea, but it keeps it simple for our OS\n\nall values parse in a similar way to csv\n\nmake sure that you use quotes if you want to store a string with commas, because commas in a parameter indicate that it is a string array\n\nNB: string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "nb": "string arrays are comma separated values, where you can put values with special characters in between quotes",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "types",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "These are the type indicators that were found in this single or multiline comment. Can be multiple.",
                                    "items": [
                                      {
                                        "schema": {
                                          "enum": [
                                            "todo",
                                            "discussion",
                                            "idea",
                                            "later",
                                            "nb",
                                            "title",
                                            "section",
                                            "description"
                                          ],
                                          "fullComment": "special line prefixes:\n\n**Developer related comments**\n\n- TODO: for developer to know what to do\n- DISCUSSION: for developer to state that discussion is needed\n- IDEA: for developer to state ideas\n- LATER: for developer to mark as thing that needs to be done later\n- NB: for developer to add a note\n\n**Form related comments**\n\n- TITLE: if available, will be used as title of form input (overwrites humanCase version of the property-name itself in that case)\n- SECTION: start a new section in the form from this point, the value behind here can be the title\n- DESCRIPTION: if available, will be used as description of the form input",
                                          "type": "string"
                                        },
                                        "name": "CommentType"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "firstLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "first line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "lastLine",
                                  "required": true,
                                  "schema": {
                                    "fullComment": "last line of the comment",
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "statementName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "statement name the comment belongs to",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "rawStatement",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "raw statement text the comment belongs to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "TsComment"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "returnType",
                      "required": true,
                      "schema": {
                        "fullComment": "return type JSON Schema definition\n\nall info that should always be collected when indexing any type interface",
                        "properties": [
                          {
                            "name": "typeDefinition",
                            "required": false,
                            "schema": {
                              "fullComment": "JSON schema definition of a type interface\n\n\nSome info about the Schema:\n\n- if the type is an object, there should be properties\n- if the type is an array, there should be items\n\n\n\n",
                              "properties": [
                                {
                                  "name": "$id",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$ref",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$comment",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "$defs",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "const",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "multipleOf",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMaximum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "exclusiveMinimum",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "maxLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minLength",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "pattern",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalItems",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minItems",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "uniqueItems",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "contains",
                                  "required": false,
                                  "schema": {
                                    "circularRefName": "JSONSchema7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "maxProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "minProperties",
                                  "required": false,
                                  "schema": {
                                    "type": "number"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "type": "string"
                                        },
                                        "name": null
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "patternProperties",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "additionalProperties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "dependencies",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "propertyNames",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "if",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "then",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "else",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "allOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "anyOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "oneOf",
                                  "required": false,
                                  "schema": {
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Definition"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "not",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSON Schema v7",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "format",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentMediaType",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "contentEncoding",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "definitions",
                                  "required": false,
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "default",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "readOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "writeOnly",
                                  "required": false,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                },
                                {
                                  "name": "examples",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Primitive type",
                                    "properties": [],
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "simplifiedSchema",
                            "required": false,
                            "schema": {
                              "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                              "properties": [
                                {
                                  "name": "todo",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "discussion",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "idea",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "later",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "nb",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "title",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "section",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "description",
                                  "required": false,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "type",
                                  "required": true,
                                  "schema": {
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean",
                                      "object",
                                      "array",
                                      "null"
                                    ],
                                    "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                    "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "circularRefName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "enum",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        },
                                        "name": "JSONSchema7Type"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "properties",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of object, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            },
                                            {
                                              "name": "required",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                "nb": "can't we put this in the SimplifiedSchema itself?",
                                                "type": "boolean"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaProperty"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "items",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "in case of arrays, this will always appear",
                                    "items": [
                                      {
                                        "schema": {
                                          "fullComment": "",
                                          "properties": [
                                            {
                                              "name": "name",
                                              "required": true,
                                              "schema": {
                                                "fullComment": "name in case of it being a reference, otherwise null",
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "name": "schema",
                                              "required": true,
                                              "schema": {
                                                "circularRefName": "SimplifiedSchema",
                                                "properties": [],
                                                "type": "object"
                                              }
                                            }
                                          ],
                                          "type": "object"
                                        },
                                        "name": "SimplifiedSchemaItem"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                },
                                {
                                  "name": "fullComment",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isObject",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an object, this is true. false if it's an array",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isArray",
                            "required": true,
                            "schema": {
                              "fullComment": "if the type is an array, this is true",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isPrimitive",
                            "required": true,
                            "schema": {
                              "fullComment": "if it's a primitive type like \"string\", \"number\", \"boolean\", \"null\" | \"undefined\"",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnum",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for any primitive conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isEnumLiteral",
                            "required": true,
                            "schema": {
                              "fullComment": "will be true for string conjunction types",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "typeCoverage",
                            "required": true,
                            "schema": {
                              "fullComment": "quantification of coverage of the specified type or subtypes in our database.",
                              "type": "number"
                            }
                          },
                          {
                            "name": "rawType",
                            "required": true,
                            "schema": {
                              "fullComment": "raw type string",
                              "type": "string"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "parameters",
                      "required": false,
                      "schema": {
                        "fullComment": "parameters the function takes as its arguments, if any",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "",
                              "properties": [
                                {
                                  "name": "name",
                                  "required": true,
                                  "schema": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "schema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "",
                                    "properties": [
                                      {
                                        "name": "$id",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$ref",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$schema",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-07/schema#'\n- 'http://json-schema.org/draft-07/hyper-schema#'",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$comment",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "$defs",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "enum",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "Primitive type",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Type"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "const",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "multipleOf",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "maximum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "exclusiveMaximum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minimum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "exclusiveMinimum",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "maxLength",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minLength",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "pattern",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "items",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "additionalItems",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "maxItems",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minItems",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "uniqueItems",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "contains",
                                        "required": false,
                                        "schema": {
                                          "circularRefName": "JSONSchema7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "maxProperties",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "minProperties",
                                        "required": false,
                                        "schema": {
                                          "type": "number"
                                        }
                                      },
                                      {
                                        "name": "required",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "type": "string"
                                              },
                                              "name": null
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "properties",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "patternProperties",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "additionalProperties",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "dependencies",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "propertyNames",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "if",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "then",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "else",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "allOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "anyOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "oneOf",
                                        "required": false,
                                        "schema": {
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "JSON Schema v7",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Definition"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "not",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "JSON Schema v7",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "format",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "contentMediaType",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "contentEncoding",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "definitions",
                                        "required": false,
                                        "schema": {
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "title",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "description",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "default",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      },
                                      {
                                        "name": "readOnly",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "writeOnly",
                                        "required": false,
                                        "schema": {
                                          "type": "boolean"
                                        }
                                      },
                                      {
                                        "name": "examples",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Primitive type",
                                          "properties": [],
                                          "type": "object"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "simplifiedSchema",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
                                    "properties": [
                                      {
                                        "name": "todo",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "discussion",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "idea",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "later",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "nb",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "title",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "section",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "description",
                                        "required": false,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "type",
                                        "required": true,
                                        "schema": {
                                          "enum": [
                                            "string",
                                            "number",
                                            "boolean",
                                            "object",
                                            "array",
                                            "null"
                                          ],
                                          "fullComment": "- string\n- number\n- boolean\n- object\n- array\n- null\n\nNB: Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;\n\n",
                                          "nb": "Omit doesn't work for the indexer! This would be the type: Omit<JSONSchema7TypeName, \"integer\">;",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "circularRefName",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "enum",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "Primitive type",
                                                "properties": [],
                                                "type": "object"
                                              },
                                              "name": "JSONSchema7Type"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "properties",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of object, this will always appear",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "",
                                                "properties": [
                                                  {
                                                    "name": "name",
                                                    "required": true,
                                                    "schema": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  {
                                                    "name": "schema",
                                                    "required": true,
                                                    "schema": {
                                                      "circularRefName": "SimplifiedSchema",
                                                      "properties": [],
                                                      "type": "object"
                                                    }
                                                  },
                                                  {
                                                    "name": "required",
                                                    "required": true,
                                                    "schema": {
                                                      "fullComment": "NB: can't we put this in the SimplifiedSchema itself?",
                                                      "nb": "can't we put this in the SimplifiedSchema itself?",
                                                      "type": "boolean"
                                                    }
                                                  }
                                                ],
                                                "type": "object"
                                              },
                                              "name": "SimplifiedSchemaProperty"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "items",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "in case of arrays, this will always appear",
                                          "items": [
                                            {
                                              "schema": {
                                                "fullComment": "",
                                                "properties": [
                                                  {
                                                    "name": "name",
                                                    "required": true,
                                                    "schema": {
                                                      "fullComment": "name in case of it being a reference, otherwise null",
                                                      "type": "string"
                                                    }
                                                  },
                                                  {
                                                    "name": "schema",
                                                    "required": true,
                                                    "schema": {
                                                      "circularRefName": "SimplifiedSchema",
                                                      "properties": [],
                                                      "type": "object"
                                                    }
                                                  }
                                                ],
                                                "type": "object"
                                              },
                                              "name": "SimplifiedSchemaItem"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      },
                                      {
                                        "name": "fullComment",
                                        "required": false,
                                        "schema": {
                                          "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                          "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                                          "type": "string"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  }
                                },
                                {
                                  "name": "required",
                                  "required": true,
                                  "schema": {
                                    "type": "boolean"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "FunctionParameter"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "size",
                      "required": true,
                      "schema": {
                        "fullComment": "size of this function (comments + code)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "commentSize",
                      "required": false,
                      "schema": {
                        "fullComment": "size of the comments of this function (including surrounding comments)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "codeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "size of the code inside the function (without comments)\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "tells you the size of itself and all its dependencies that are used that are also part of an operation, recursively\n\ntype interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeCommentSize",
                      "required": false,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "cumulativeCodeSize",
                      "required": false,
                      "schema": {
                        "fullComment": "type interface that can be used to summarize multiple files",
                        "properties": [
                          {
                            "name": "numberOfFiles",
                            "required": false,
                            "schema": {
                              "fullComment": "if this is about multiple files, the number of files is specified here",
                              "type": "number"
                            }
                          },
                          {
                            "name": "characters",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of characters",
                              "type": "number"
                            }
                          },
                          {
                            "name": "lines",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of lines",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytes",
                            "required": true,
                            "schema": {
                              "fullComment": "amount of bytes",
                              "type": "number"
                            }
                          },
                          {
                            "name": "linesPerFile",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of lines per file (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "charactersPerLine",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of characters per line (averaged)",
                              "type": "number"
                            }
                          },
                          {
                            "name": "bytesPerCharacter",
                            "required": true,
                            "schema": {
                              "fullComment": "rounded, amount of bytes per character",
                              "type": "number"
                            }
                          }
                        ],
                        "type": "object"
                      }
                    },
                    {
                      "name": "maxIndentationDepth",
                      "required": true,
                      "schema": {
                        "fullComment": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                        "type": "number"
                      }
                    },
                    {
                      "name": "dependantFiles",
                      "required": false,
                      "schema": {
                        "fullComment": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                        "nb": "this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "groupAuthorization",
                      "required": true,
                      "schema": {
                        "fullComment": "Other keys in frontmatter that are group names, can be added here",
                        "properties": [],
                        "type": "object"
                      }
                    },
                    {
                      "name": "isApiExposed",
                      "required": true,
                      "schema": {
                        "fullComment": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "canCache",
                      "required": false,
                      "schema": {
                        "fullComment": "whether or not the function can be cached (relies on cache invalidation)",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "runEveryPeriod",
                      "required": false,
                      "schema": {
                        "enum": [
                          "minute",
                          "5-minutes",
                          "quarter-hour",
                          "hour",
                          "6-hours",
                          "midnight",
                          "week",
                          "month",
                          "3-months",
                          "year"
                        ],
                        "fullComment": "You can specify `runEveryPeriod` in your frontmatter of a function. This will set `runEveryPeriod` for the TsFunction. This is used by `function-server`: it will execute CRON-jobs that run these things on those periods.\n\nWill only work if the function takes no arguments.\n\nUsed to specify functions that need to run every time with a specific interval\n\nAll times are at at the server timezone time\n\n- `minute`: every minute at 0 seconds\n- `5-mintues`: every 5 minutes, starting at the first minute of the hour\n- `quarter-hour`: every 15 minutes, starting at the first minute of the hour\n- `hour`: every hour, starting at the first minute of the hour\n- `6-hours`: every 6 hours, starting at midnight\n- `midnight`: every midnight (00:00:00)\n- `week`: every week at sundaynight (sunday, 1 second after 23:59:59 PM)\n- `month`: at the first second of the first day of the month (0:00:00)\n- `3-months`: every start of the quarter: january 1st (0:00:00), april 1st, july 1st, october 1st\n- `year`: every new year at january 1st at 0:00:00",
                        "type": "string"
                      }
                    },
                    {
                      "name": "price",
                      "required": false,
                      "schema": {
                        "fullComment": "Indexed from frontmatter `price`\n\nTLDR;EUROS\n\nA price is a number indicating the relative cost. Absolute cost is calculated by many other factors\n\nFor now, we're going to keep it simple: 1 `Price` is equal to 1 Eurocent.\n\nLater we can add all kinds of extra conversion:\n\n- currency support\n- king os currency\n- lower cost for poorer people\n\netc...\n\nFirst we need to start making sales before we can add such complexity.\n\n",
                        "type": "number"
                      }
                    },
                    {
                      "name": "classification",
                      "required": false,
                      "schema": {
                        "enum": [
                          "wise",
                          "dumb",
                          "smart",
                          "genius",
                          "react-with-native",
                          "cli",
                          "test"
                        ],
                        "fullComment": "- `react`: The core library that should always be used that wraps react and react native.\n\n- `dumb`: Presentational components that only care about how things look, and have no idea about the type of information that they will contain (**data-agnostic**), nor their context they're used in.\n\n- `smart`: Presentational components that may contain getters and setters for global state. This means they're still easy enough to set up, but\n\n- `wise`: stateful components that use the backend as well to do things. for example, `simplified-schema-form`\n\n- `genius`: blocks of components that have certain functionality. Example: `file-writer` or `crud`",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "unique id of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": true,
                      "schema": {
                        "fullComment": "name (identifier) of the model",
                        "type": "string"
                      }
                    },
                    {
                      "name": "slug",
                      "required": true,
                      "schema": {
                        "fullComment": "kebab-case variant of the name",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativeTypescriptFilePath",
                      "required": true,
                      "schema": {
                        "fullComment": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                }
              },
              {
                "name": "functionExecutions",
                "required": true,
                "schema": {
                  "items": [
                    {
                      "schema": {
                        "fullComment": "Model for tests, examples, cache, and recent executions of any function\n\nRequirement for **tifo-stitching**\n\nExample:\n\nconst someFunction = (inputA: string, inputB:string):string => {\n\nreturn `${inputA} != ${inputB}` }\n\n\n// find this in the database after executing the function\n\nconst functionExecution1 = { .... functionName: \"someFunction\", inputParameters: [\"hello\", \"world\"], output: \"hello != world\", isTest: false, isExample: false, isResultFromCache: false, performance: [....], }",
                        "properties": [
                          {
                            "name": "createdAt",
                            "required": true,
                            "schema": {
                              "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                              "type": "number"
                            }
                          },
                          {
                            "name": "updatedAt",
                            "required": true,
                            "schema": {
                              "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                              "type": "number"
                            }
                          },
                          {
                            "name": "deletedAt",
                            "required": true,
                            "schema": {
                              "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                              "type": "number"
                            }
                          },
                          {
                            "name": "createdFirstAt",
                            "required": true,
                            "schema": {
                              "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                              "type": "number"
                            }
                          },
                          {
                            "name": "operationName",
                            "required": true,
                            "schema": {
                              "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "null"
                            }
                          },
                          {
                            "name": "projectRelativePath",
                            "required": true,
                            "schema": {
                              "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "string"
                            }
                          },
                          {
                            "name": "operationRelativePath",
                            "required": false,
                            "schema": {
                              "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                              "type": "string"
                            }
                          },
                          {
                            "name": "id",
                            "required": true,
                            "schema": {
                              "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "categoryStackCalculated",
                            "required": false,
                            "schema": {
                              "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                              "nb": "Changing this value when updating/upserting, changes where the item is located!",
                              "items": [
                                {
                                  "schema": {
                                    "type": "string"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "functionName",
                            "required": true,
                            "schema": {
                              "type": "string"
                            }
                          },
                          {
                            "name": "tsFunctionId",
                            "required": true,
                            "schema": {
                              "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "inputParameters",
                            "required": false,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "properties": [],
                                    "type": "object"
                                  },
                                  "name": null
                                }
                              ],
                              "type": "array"
                            }
                          },
                          {
                            "name": "output",
                            "required": true,
                            "schema": {
                              "properties": [],
                              "type": "object"
                            }
                          },
                          {
                            "name": "isTest",
                            "required": true,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "isExample",
                            "required": true,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "description",
                            "required": false,
                            "schema": {
                              "fullComment": "test description or example description or anything\n\na string that is known to contain markdown.",
                              "type": "string"
                            }
                          },
                          {
                            "name": "isResultFromCache",
                            "required": true,
                            "schema": {
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "hasApiChanged",
                            "required": false,
                            "schema": {
                              "fullComment": "if true, the api of the function (input/output interface) has changed in bewteen, so the re-execution would probably fail or return a different result",
                              "type": "boolean"
                            }
                          },
                          {
                            "name": "performance",
                            "required": true,
                            "schema": {
                              "items": [
                                {
                                  "schema": {
                                    "fullComment": "",
                                    "properties": [
                                      {
                                        "name": "label",
                                        "required": true,
                                        "schema": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "name": "durationMs",
                                        "required": true,
                                        "schema": {
                                          "type": "number"
                                        }
                                      }
                                    ],
                                    "type": "object"
                                  },
                                  "name": "PerformanceItem"
                                }
                              ],
                              "type": "array"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "FunctionExecution"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "type",
                "required": true,
                "schema": {
                  "enum": [
                    "example",
                    "test",
                    "recent"
                  ],
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "NamedParameters<typeof FunctionExecutionTable>",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}