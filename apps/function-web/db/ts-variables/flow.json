{
  "createdAt": 1669276184877,
  "updatedAt": 1669276184877,
  "deletedAt": 0,
  "createdFirstAt": 1669276184877,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Flow",
  "slug": "flow",
  "operationRelativeTypescriptFilePath": "src/components/Flow.tsx",
  "type": {
    "rawType": "<T extends { [key: string]: any; }>(props: { renderNode: (item: T) => JSX.Element; childObject: import(\"/Users/king/King/operations/tools/types/recursive-types/build/ChildObject\").ChildObject<T>; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "<T extends { [key: string]: any }>(props: {\n  renderNode: (item: T) => JSX.Element;\n  childObject: ChildObject<T>;\n}) => {\n  const { childObject, renderNode } = props;\n\n  //\n\n  // const [nodes, setNodes] = useNodesState<Node[]>(initialNodes);\n  // const [edges, setEdges] = useEdgesState<Edge[]>(initialEdges);\n\n  // const onNodesChange = useCallback(\n  //   (changes: NodeChange[]) =>\n  //     setNodes((nds) => applyNodeChanges(changes, nds)),\n  //   [setNodes]\n  // );\n  // const onEdgesChange = useCallback(\n  //   (changes: EdgeChange[]) =>\n  //     setEdges((eds) => applyEdgeChanges(changes, eds)),\n  //   [setEdges]\n  // );\n  // const onConnect = useCallback(\n  //   (connection: Connection) => setEdges((eds) => addEdge(connection, eds)),\n  //   [setEdges]\n  // );\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState([]);\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n  const onConnect = useCallback(\n    (connection) => setEdges((eds) => addEdge(connection, eds)),\n    [setEdges]\n  );\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      fitView\n      fitViewOptions={fitViewOptions}\n    />\n  );\n}",
  "description": "",
  "id": "mjxconsgmbczzvrvffrehgnn"
}