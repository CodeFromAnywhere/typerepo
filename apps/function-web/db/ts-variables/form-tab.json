{
  "createdAt": 1669276188123,
  "updatedAt": 1669276188123,
  "deletedAt": 0,
  "createdFirstAt": 1669276188123,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "FormTab",
  "slug": "form-tab",
  "operationRelativeTypescriptFilePath": "src/components/FormTab.tsx",
  "type": {
    "rawType": "(props: { tsFunction: import(\"/Users/king/King/operations/tools/types/code-types/build/TsFunction\").TsFunction; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: { tsFunction: TsFunction }) => {\n  const { tsFunction } = props;\n  const [executionId] = useStore(\"executionId\");\n  const [initialValues] = useStore(\"initialValues\");\n  const [resultJson, setResultJson] = useState<{\n    [key: string]: RealApiReturnType<any> | undefined | string;\n  }>({});\n\n  const jsonCodeblock =\n    resultJson[executionId] === undefined\n      ? null\n      : renderMarkdownContent(\n          createCodeblockMarkdown(JSON.stringify(resultJson, null, 2), \"json\"),\n          // NB: since there won't be any assets in here, it doesn't matter where the md is made\n          {\n            projectRelativeBaseFolderPath: \"\",\n            projectRelativeMarkdownFilePath: \"\",\n          }\n        );\n\n  return (\n    <Div>\n      <FunctionForm\n        key={executionId}\n        tsFunction={tsFunction}\n        initialValues={initialValues}\n        submitFunction={\n          undefined\n          // provide this later, for js functions\n        }\n        withApiResult={(result: RealApiReturnType<any> | undefined) => {\n          setResultJson({ ...resultJson, [executionId]: result });\n          if (\n            !result ||\n            typeof result !== \"object\" ||\n            Array.isArray(result) ||\n            result.isSuccessful === undefined\n          ) {\n            infoToast(\"We got no satisfactory result to show you anything\");\n            return;\n          }\n\n          if (result.isSuccessful === false || result.isUnauthorized === true) {\n            errorToast(result.message);\n            return;\n          }\n\n          if (!result.result) {\n            successToast(\n              \"Seems to have gone well, but we don't know how it went\"\n            );\n            return;\n          }\n\n          if (\n            result.result &&\n            typeof result.result === \"object\" &&\n            !Array.isArray(result.result)\n          ) {\n            const maybeSuccessIndicator = result.result.isSuccessful;\n\n            if (maybeSuccessIndicator !== undefined) {\n              const rightToast =\n                maybeSuccessIndicator === true ? successToast : errorToast;\n\n              rightToast(result.result.message);\n\n              return;\n            }\n          }\n\n          return successToast(\"We got a response\");\n        }}\n      />\n      {jsonCodeblock}\n    </Div>\n  );\n}",
  "description": "### Tab 1: Function Form\n\nUses `<FunctionForm>` component\n\nExecutes the function directly or through API (depending on whether or not it is a node-only-function or bare JS)\n\nDon't show this tab for JSX components",
  "id": "vimsgmpvwtiuekgjnfbswtmh"
}