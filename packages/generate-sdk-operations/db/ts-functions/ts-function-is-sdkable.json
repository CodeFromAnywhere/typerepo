{
  "createdAt": 1663018250250,
  "updatedAt": 1663018250250,
  "deletedAt": 0,
  "createdFirstAt": 1663018250250,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateFunctionSdks.ts",
  "commentsInside": [],
  "rawText": " (\n  tsFunction: TsFunction,\n  operationClassificationObject: OperationClassificationObject,\n  operationClassification: OperationClassification\n) => {\n  const { operationName } = tsFunction;\n  if (!operationName) return false;\n\n  const functionClassification = operationClassificationObject[operationName];\n  const isSdkable = functionClassification === operationClassification;\n\n  return isSdkable;\n}",
  "name": "tsFunctionIsSdkable",
  "slug": "ts-function-is-sdkable",
  "parameters": [
    {
      "name": "tsFunction",
      "schema": {
        "$ref": "#/definitions/TsFunction"
      },
      "simplifiedSchema": {
        "description": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
        "properties": [
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "schema": {
              "description": "unique id of the model",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "schema": {
              "description": "name (identifier) of the model",
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "schema": {
              "description": "kebab-case variant of the name",
              "type": "string"
            }
          },
          {
            "name": "operationRelativeTypescriptFilePath",
            "required": true,
            "schema": {
              "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
              "type": "string"
            }
          },
          {
            "name": "isExported",
            "required": true,
            "schema": {
              "description": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
              "type": "boolean"
            }
          },
          {
            "name": "isApiExposed",
            "required": true,
            "schema": {
              "description": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
              "type": "boolean"
            }
          },
          {
            "name": "rawText",
            "required": false,
            "schema": {
              "description": "raw text of the function",
              "type": "string"
            }
          },
          {
            "name": "commentsInside",
            "required": true,
            "schema": {
              "description": "all comments found in a function and the node that they belong to",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "parameters",
            "required": false,
            "schema": {
              "description": "parameters the function takes as its arguments, if any",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "maxIndentationDepth",
            "required": true,
            "schema": {
              "description": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
              "type": "number"
            }
          },
          {
            "name": "dependantFiles",
            "required": false,
            "schema": {
              "description": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "operationClassificationObject",
      "schema": {
        "$ref": "#/definitions/OperationClassificationObject"
      },
      "simplifiedSchema": {
        "properties": [],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "operationClassification",
      "schema": {
        "$ref": "#/definitions/OperationClassification"
      },
      "simplifiedSchema": {
        "description": "# Classification\n\nTODO: think about what the differences are and how we need to change processes to make it all work good\n\n### Possible values\n\njs: only js (no node) (well, ts of course)\n\nnode: includes other node packages, operations, core-imports, or globals.\n\nserver: exposes something on some port when it is ran and uses node code\n\nweb: uses react and exposes something on some port when it is ran\n\napp: uses react-native and exposes something on some port when it is ran\n\nui-es6: uses react (with (native)), which main entry points to typescript es6 files (this ui package cannot be built, should be transpiled)\n\nui-es5: ui which main entry points to javascript es5 files (this ui package can be built)",
        "enum": [
          "js",
          "ts",
          "node",
          "server",
          "web",
          "app",
          "ui-es6",
          "ui-es5"
        ],
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "{}",
    "typeDefinition": {
      "optional": false,
      "type": "boolean"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": true,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "type": "boolean"
    }
  },
  "maxIndentationDepth": 1,
  "size": {
    "characters": 401,
    "lines": 13,
    "bytes": 401,
    "bytesPerCharacter": 1,
    "charactersPerLine": 31,
    "linesPerFile": 13,
    "numberOfFiles": 1
  },
  "id": "TnOPWavfpZXvRQwM"
}