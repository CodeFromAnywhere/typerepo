{
  "createdAt": 1663018252373,
  "updatedAt": 1663018252373,
  "deletedAt": 0,
  "createdFirstAt": 1663018252373,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateSdkOperations.ts",
  "commentsInside": [],
  "rawText": " async (\n  /**\n   * if not provided, will not generate env-sdks\n   */\n  bundleConfig?: BundleConfig,\n  config?: {\n    /**\n     * If true, will try to run yarn install before and if it fails, does not continue.\n     */\n    yarnInstallBefore?: boolean;\n    /**\n     * if true, yarn install will be skipped when generating the sdks, but run one time afterwards\n     *\n     * useful if you are sure that there will be multiple yarn Installs needed otherwise\n     *\n     * for os installation (where all operations already exist, don't do this, yarn installs will probably not happen at all)\n     */\n    yarnInstallAfter?: boolean;\n    manualProjectRoot?: string;\n    dryrun?: boolean;\n  }\n): Promise<boolean> => {\n  const manualProjectRoot = config?.manualProjectRoot;\n  const projectRoot = manualProjectRoot || getProjectRoot();\n  const yarnInstallAfter = config?.yarnInstallAfter;\n  const yarnInstallBefore = config?.yarnInstallBefore;\n  const dryrun = config?.dryrun;\n\n  if (!projectRoot) {\n    return false;\n  }\n\n  // NB: install this first, otherwise sdk-operations cannot be found\n  await generateOperationsSdk({\n    manualProjectRoot,\n    dryrun,\n  });\n\n  await generateDbSdk({\n    manualProjectRoot,\n    skipYarnInstall: yarnInstallAfter,\n    dryrun,\n  });\n\n  await generateFunctionSdks({\n    manualProjectRoot,\n    skipYarnInstall: yarnInstallAfter,\n    dryrun,\n  });\n  if (bundleConfig) {\n    await generateEnvSdks(bundleConfig, {\n      manualProjectRoot,\n      skipYarnInstall: yarnInstallAfter,\n      dryrun,\n    });\n  }\n\n  if (yarnInstallAfter) {\n    process.stdout.write(`Installing repo `);\n    try {\n      const result = execSync(\"yarn --prefer-offline\", {\n        cwd: projectRoot,\n        encoding: \"utf8\",\n        stdio: \"pipe\",\n      });\n\n      console.log(\"✅\");\n\n      return true;\n    } catch (e: any) {\n      console.log(\"❌\");\n      const error: {\n        status: number;\n        signal: any;\n        output: (string | null)[];\n        pid: number;\n        stdout: string;\n        stderr: string;\n      } = e;\n      console.log(`Could not install:`, error);\n\n      return false;\n    }\n  }\n\n  return true;\n}",
  "name": "generateSdkOperations",
  "slug": "generate-sdk-operations",
  "parameters": [
    {
      "name": "bundleConfig",
      "schema": {
        "$ref": "#/definitions/BundleConfig",
        "description": "if not provided, will not generate env-sdks"
      },
      "simplifiedSchema": {
        "description": "--- dbStorageMethod: jsonSingle\n---",
        "properties": [
          {
            "name": "name",
            "required": true,
            "schema": {
              "description": "Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)",
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "bundles",
            "required": true,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "dependencies",
            "required": true,
            "schema": {
              "description": "Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "foldersFromRepo",
            "required": false,
            "schema": {
              "description": "if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "gitRepoUrl",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "required": false,
            "schema": {
              "description": "specify the branch to use of your git repo (defaults to \"main\")",
              "type": "string"
            }
          },
          {
            "name": "skipPush",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "yarnInstallBefore": {
            "type": "boolean",
            "description": "If true, will try to run yarn install before and if it fails, does not continue."
          },
          "yarnInstallAfter": {
            "type": "boolean",
            "description": "if true, yarn install will be skipped when generating the sdks, but run one time afterwards\n\nuseful if you are sure that there will be multiple yarn Installs needed otherwise\n\nfor os installation (where all operations already exist, don't do this, yarn installs will probably not happen at all)"
          },
          "manualProjectRoot": {
            "type": "string"
          },
          "dryrun": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "yarnInstallBefore",
            "required": false,
            "schema": {
              "description": "If true, will try to run yarn install before and if it fails, does not continue.",
              "type": "boolean"
            }
          },
          {
            "name": "yarnInstallAfter",
            "required": false,
            "schema": {
              "description": "if true, yarn install will be skipped when generating the sdks, but run one time afterwards\n\nuseful if you are sure that there will be multiple yarn Installs needed otherwise\n\nfor os installation (where all operations already exist, don't do this, yarn installs will probably not happen at all)",
              "type": "boolean"
            }
          },
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryrun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "(re)generates all sdk operations for any project",
  "returnType": {
    "rawType": "Promise<boolean>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 2173,
    "lines": 87,
    "bytes": 2177,
    "bytesPerCharacter": 1.0018407731247123,
    "charactersPerLine": 25,
    "linesPerFile": 87,
    "numberOfFiles": 1
  },
  "id": "yZdxudagZlhcITVx"
}