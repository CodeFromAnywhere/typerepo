{
  "createdAt": 1663018250250,
  "updatedAt": 1663018250250,
  "deletedAt": 0,
  "createdFirstAt": 1663018250250,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateFunctionSdks.ts",
  "commentsInside": [],
  "rawText": " async (\n  operationName: string,\n  tsFunctions: TsFunction[],\n  config?: {\n    manualProjectRoot?: string;\n    skipYarnInstall?: boolean;\n    dryrun?: boolean;\n  }\n) => {\n  log(`${operationName} should contain ${tsFunctions.length} functions`, {\n    type: \"debug\",\n  });\n  const skipYarnInstall = config?.skipYarnInstall;\n  const manualProjectRoot = config?.manualProjectRoot;\n  const dryrun = config?.dryrun;\n  const importsString = tsFunctions\n    .map((fn) => `import { ${fn.name} } from \"${fn.operationName}\";`)\n    .join(\"\\n\");\n  const sdkConstString = `export const sdk = { ${tsFunctions\n    .map((fn) => `${fn.name}`)\n    .join(\",\\n\")}};`;\n\n  const sdkTypeString = `export type SdkType = typeof sdk;`;\n\n  const sdkTypescriptFileString = `${importsString}\\n\\n${sdkConstString}\\n\\n${sdkTypeString}`;\n\n  const operationConfig = await getOperationConfig(operationName);\n\n  const filesObject = { [`src/${operationName}.ts`]: sdkTypescriptFileString };\n  const result = await newOperationWithFiles(operationConfig, filesObject, {\n    overwriteIfExists: true,\n    manualProjectRoot,\n    skipYarnInstall,\n    dryrun,\n  });\n\n  return result;\n}",
  "name": "newSdkOperation",
  "slug": "new-sdk-operation",
  "parameters": [
    {
      "name": "operationName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "tsFunctions",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/TsFunction"
        }
      },
      "simplifiedSchema": {
        "items": [
          {
            "schema": {
              "description": "--- dbStorageMethod: jsonSingle\n---\n\nInterface for arrow functions and normal functions",
              "properties": [
                {
                  "name": "operationName",
                  "required": true,
                  "schema": {
                    "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "null"
                  }
                },
                {
                  "name": "projectRelativePath",
                  "required": true,
                  "schema": {
                    "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativePath",
                  "required": false,
                  "schema": {
                    "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                    "type": "string"
                  }
                },
                {
                  "name": "id",
                  "required": true,
                  "schema": {
                    "description": "unique id of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "name",
                  "required": true,
                  "schema": {
                    "description": "name (identifier) of the model",
                    "type": "string"
                  }
                },
                {
                  "name": "slug",
                  "required": true,
                  "schema": {
                    "description": "kebab-case variant of the name",
                    "type": "string"
                  }
                },
                {
                  "name": "operationRelativeTypescriptFilePath",
                  "required": true,
                  "schema": {
                    "description": "relative file path from the operation that this indexed instance is referencing to\n\ne.g. src/general.ts\n\n(no preceding slash)",
                    "type": "string"
                  }
                },
                {
                  "name": "isExported",
                  "required": true,
                  "schema": {
                    "description": "The function is immediately exported upon creation. If the os dev tools are being used, this means it is also exported from the operation",
                    "type": "boolean"
                  }
                },
                {
                  "name": "isApiExposed",
                  "required": true,
                  "schema": {
                    "description": "for all exported functions in node operations, true by default false for others\n\ncan be overwritten using frontmatter",
                    "type": "boolean"
                  }
                },
                {
                  "name": "rawText",
                  "required": false,
                  "schema": {
                    "description": "raw text of the function",
                    "type": "string"
                  }
                },
                {
                  "name": "commentsInside",
                  "required": true,
                  "schema": {
                    "description": "all comments found in a function and the node that they belong to",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "parameters",
                  "required": false,
                  "schema": {
                    "description": "parameters the function takes as its arguments, if any",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "maxIndentationDepth",
                  "required": true,
                  "schema": {
                    "description": "maximum amount of times indedented in this function\n\ngood for determining the complexity and finding code that can be simplified/destructured into smaller pieces",
                    "type": "number"
                  }
                },
                {
                  "name": "dependantFiles",
                  "required": false,
                  "schema": {
                    "description": "finds all files that import this function\n\nNB: this is not indexed because this information has nothing to do with the operation itself, but the exposure to the broader monorepo. This is calculated on the fly.",
                    "items": [
                      {
                        "schema": {
                          "type": "string"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                }
              ],
              "type": "object"
            },
            "name": "TsFunction"
          }
        ],
        "type": "array"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "manualProjectRoot": {
            "type": "string"
          },
          "skipYarnInstall": {
            "type": "boolean"
          },
          "dryrun": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipYarnInstall",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dryrun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "Uses an array of functions to create an operation that imports all those functions and exports an object where all those functions have been comprised",
  "returnType": {
    "rawType": "unknown",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 1292,
    "lines": 38,
    "bytes": 1292,
    "bytesPerCharacter": 1,
    "charactersPerLine": 34,
    "linesPerFile": 38,
    "numberOfFiles": 1
  },
  "id": "NsgJPzClulIfLnpk"
}