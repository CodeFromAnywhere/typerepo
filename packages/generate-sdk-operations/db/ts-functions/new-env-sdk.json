{
  "createdAt": 1663018248931,
  "updatedAt": 1663018248931,
  "deletedAt": 0,
  "createdFirstAt": 1663018248931,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/generateEnvSdks.ts",
  "commentsInside": [],
  "rawText": " async (\n  /**\n   * NB: if this is not a bundle, a more general purpose bundle config should be used\n   */\n  bundleConfig: BundleConfig,\n  type: \"public\" | \"private\",\n  config?: {\n    manualProjectRoot?: string;\n    skipYarnInstall?: boolean;\n    dryrun?: boolean;\n  }\n): Promise<string | undefined> => {\n  // 1. gets env from bundle\n  const operationName = `sdk-env-${type}`;\n  const description = `Any ${type} environment variables of your full-stack app go here.`;\n\n  const projectRoot = config?.manualProjectRoot || getProjectRoot();\n  if (!projectRoot) return;\n\n  const skipYarnInstall = config?.skipYarnInstall;\n  const dryrun = config?.dryrun;\n  const envVariables = bundleConfig[`${type}EnvironmentVariables`];\n  const realEnv =\n    envVariables && typeof envVariables === \"object\" ? envVariables : {};\n\n  // 2. creates [type].ts and [type]-local.ts that adheres a type interface\n\n  const typescriptFileString = `export const ${type}EnvironmentVariables = ${JSON.stringify(\n    realEnv,\n    null,\n    2\n  )};`;\n\n  const localComment =\n    \"Optionally, overwrite some of your environent variables locally here. Only applied in development. NB: When working in a team, it may be useful to .gitignore this file!\";\n\n  const localTypescriptFileString = `import { ${type}EnvironmentVariables } from \"./${type}\";\\n// ${localComment}\\nexport const ${type}LocalEnvironmentVariables: Partial<typeof ${type}EnvironmentVariables> = {};`;\n\n  const srcFileContentObject = {\n    [`src/${type}-local.ts`]: localTypescriptFileString,\n    [`src/${type}.ts`]: typescriptFileString,\n  };\n\n  // keep the same operationconfig as the os project, or make a new one if not found\n  const operationConfig = await getOperationConfig(operationName, description);\n\n  const operationBasePath = await newOperationWithFiles(\n    operationConfig,\n    srcFileContentObject,\n    { manualProjectRoot: projectRoot, skipYarnInstall, dryrun }\n  );\n  return operationBasePath;\n}",
  "name": "newEnvSdk",
  "slug": "new-env-sdk",
  "parameters": [
    {
      "name": "bundleConfig",
      "schema": {
        "$ref": "#/definitions/BundleConfig",
        "description": "NB: if this is not a bundle, a more general purpose bundle config should be used"
      },
      "simplifiedSchema": {
        "description": "--- dbStorageMethod: jsonSingle\n---",
        "properties": [
          {
            "name": "name",
            "required": true,
            "schema": {
              "description": "Human readable name of the monorepo (A kebab-case version of this will be used as root foldername)",
              "type": "string"
            }
          },
          {
            "name": "operationName",
            "required": true,
            "schema": {
              "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "null"
            }
          },
          {
            "name": "projectRelativePath",
            "required": true,
            "schema": {
              "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "operationRelativePath",
            "required": false,
            "schema": {
              "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
              "type": "string"
            }
          },
          {
            "name": "bundles",
            "required": true,
            "schema": {
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "dependencies",
            "required": true,
            "schema": {
              "description": "Generated, private by default. If they're already here, uses private/public setting as given.\n\nWhen generating, removes the ones that are not dependencies (of dependencies) of your standalone apps",
              "items": [],
              "type": "array"
            }
          },
          {
            "name": "foldersFromRepo",
            "required": false,
            "schema": {
              "description": "if given, it will fetch these folders from the repo and paste them in the bundle whenever the bundle is generated\n\ncan be handy if you're working with someone else...",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "gitRepoUrl",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "required": false,
            "schema": {
              "description": "specify the branch to use of your git repo (defaults to \"main\")",
              "type": "string"
            }
          },
          {
            "name": "skipPush",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "type",
      "schema": {
        "type": "string",
        "enum": [
          "public",
          "private"
        ]
      },
      "simplifiedSchema": {
        "enum": [
          "public",
          "private"
        ],
        "type": "string"
      },
      "required": true
    },
    {
      "name": "config",
      "schema": {
        "type": "object",
        "properties": {
          "manualProjectRoot": {
            "type": "string"
          },
          "skipYarnInstall": {
            "type": "boolean"
          },
          "dryrun": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "manualProjectRoot",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipYarnInstall",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dryrun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "type": "object"
      },
      "required": false
    }
  ],
  "description": "# Environment variables\n\nAs a full stack app we need a good solution for environment variables that need to be accessible anywhere and can be customized, some `.gitignore'd`, some not. Some public, some only in the backend.\n\nsensible-config:\n- public (local, remote) = sdk-env-public\n- private (local, remote) = sdk-env-private\n\nThis information will be fetched from the bundleconfig",
  "returnType": {
    "rawType": "Promise<string | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 2328,
    "lines": 61,
    "bytes": 2328,
    "bytesPerCharacter": 1,
    "charactersPerLine": 38,
    "linesPerFile": 61,
    "numberOfFiles": 1
  },
  "id": "DCUferHXLvRkMenP"
}