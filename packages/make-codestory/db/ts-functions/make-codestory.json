{
  "createdAt": 1669466994004,
  "updatedAt": 1669466994004,
  "deletedAt": 0,
  "createdFirstAt": 1669466994004,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/makeCodestory.ts",
  "commentsInside": [],
  "rawText": " async (\n  absolutePath: string,\n  mappedObject: { [key: string]: CodespanItemInfo },\n  isDebug?: boolean\n): Promise<undefined | string> => {\n  //   Use MarkdownParse to split up the markdown into different headers with their content\n  const markdownParse = await readMarkdownFile(absolutePath);\n  if (!markdownParse) return;\n\n  const newMarkdownParse = mapMarkdownParseSections(markdownParse, (content) =>\n    addCodestoryToSection(content, mappedObject, isDebug)\n  );\n\n  const newString = markdownParseToMarkdownStringFromContent(newMarkdownParse);\n\n  const parse = path.parse(absolutePath);\n\n  const newPath = path.join(parse.dir, `${parse.name}.codestory${parse.ext}`);\n\n  await fs.writeFile(newPath, newString || \"\", \"utf8\");\n  return newPath;\n}",
  "name": "makeCodestory",
  "slug": "make-codestory",
  "parameters": [
    {
      "name": "absolutePath",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "mappedObject",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/CodespanItemInfo"
        }
      },
      "simplifiedSchema": {
        "properties": [],
        "type": "object"
      },
      "required": true
    },
    {
      "name": "isDebug",
      "schema": {
        "type": "boolean"
      },
      "simplifiedSchema": {
        "type": "boolean"
      },
      "required": false
    }
  ],
  "description": "no real reason to do this from text to text, let's do path to path here",
  "returnType": {
    "rawType": "Promise<string | undefined>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 2,
  "size": {
    "characters": 821,
    "lines": 22,
    "bytes": 821,
    "bytesPerCharacter": 1,
    "charactersPerLine": 37,
    "linesPerFile": 22,
    "numberOfFiles": 1
  },
  "id": "lyqqphiqiydyqfknkgkqegtf"
}