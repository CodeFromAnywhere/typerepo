{
  "createdAt": 1663009117894,
  "updatedAt": 1663009117894,
  "deletedAt": 0,
  "createdFirstAt": 1663009117894,
  "id": "key-value-markdown-model-type",
  "name": "KeyValueMarkdownModelType",
  "slug": "key-value-markdown-model-type",
  "operationRelativeTypescriptFilePath": "src/keyValueMarkdown.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\n/**\n * handy model type for storing stuff in a KeyValue Markdown file.\n * empty lines are omitted\n *\n * all you need to specify in the kvmd is the key and the value, separated by \":\"\n *\n * NB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug\n */\nexport interface KeyValueMarkdownModelType extends AnyModelType, KvmdLine {\n  /**\n   * same as slug\n   *\n   * used for compatibility with some general purpose functions\n   *\n   * NB: uniqueness is hard to enforce!\n   */\n  id: string;\n  /**\n   * calculated value that contains the slugs of all preceding categories to this item.\n   */\n  categoryStackCalculated: CategoryStack;\n  /**\n   * Calculated value indicating whether or not the item has children\n   */\n  isHeaderCalculated: boolean;\n}",
  "extensions": [
    "AnyModelType",
    "KvmdLine"
  ],
  "isOperationIndex": false,
  "description": "handy model type for storing stuff in a KeyValue Markdown file.\nempty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!"
        },
        "name": {
          "type": "string",
          "description": "key\n\nshould be english because it's kind of part of the codebase!"
        },
        "slug": {
          "type": "string",
          "description": "calculated: slug for this key (kebab case form of the name)"
        },
        "value": {
          "type": [
            "string",
            "number",
            "boolean",
            "null"
          ],
          "description": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect"
        },
        "comment": {
          "type": [
            "string",
            "null"
          ],
          "description": "comment in html syntax. if not given, will be null"
        },
        "operationName": {
          "type": [
            "null",
            "string"
          ],
          "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "projectRelativePath": {
          "type": "string",
          "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "operationRelativePath": {
          "type": "string",
          "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
        },
        "categoryStackCalculated": {
          "$ref": "#/definitions/CategoryStack",
          "description": "calculated value that contains the slugs of all preceding categories to this item."
        },
        "isHeaderCalculated": {
          "type": "boolean",
          "description": "Calculated value indicating whether or not the item has children"
        }
      },
      "required": [
        "categoryStackCalculated",
        "comment",
        "id",
        "isHeaderCalculated",
        "name",
        "operationName",
        "projectRelativePath",
        "slug"
      ],
      "additionalProperties": false,
      "description": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug"
    },
    "simplifiedSchema": {
      "description": "handy model type for storing stuff in a KeyValue Markdown file. empty lines are omitted\n\nall you need to specify in the kvmd is the key and the value, separated by \":\"\n\nNB: there can be a `parent_modelNameSlug` key exposed that should refer to the parent slug",
      "properties": [
        {
          "name": "id",
          "required": true,
          "schema": {
            "description": "same as slug\n\nused for compatibility with some general purpose functions\n\nNB: uniqueness is hard to enforce!",
            "type": "string"
          }
        },
        {
          "name": "name",
          "required": true,
          "schema": {
            "description": "key\n\nshould be english because it's kind of part of the codebase!",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "description": "calculated: slug for this key (kebab case form of the name)",
            "type": "string"
          }
        },
        {
          "name": "value",
          "required": false,
          "schema": {
            "description": "value behind the semicolom (:). If not given, will be undefined.\n\nIf possible, will be parsed to a number, boolean, null or undefined... otherwise it's a string\n\ncan be any language that we can detect",
            "type": "string"
          }
        },
        {
          "name": "comment",
          "required": true,
          "schema": {
            "description": "comment in html syntax. if not given, will be null",
            "type": "string"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": true,
          "schema": {
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "isHeaderCalculated",
          "required": true,
          "schema": {
            "description": "Calculated value indicating whether or not the item has children",
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "KeyValueMarkdownModelType",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}