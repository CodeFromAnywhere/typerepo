export declare const sdk: {
    isGeneratedParameterName: any;
    markdownParseToMarkdownModelType: any;
    parseMarkdownModelTimestamp: any;
    tryParseDate: any;
    stripCommentEnd: any;
    stripCommentStart: any;
    stripComment: any;
    stripSlashes: any;
    stripStar: any;
    trim: any;
    getCompileErrors: any;
    getTypescriptErrorsFromFiles: any;
    writeBuildErrors: any;
    camelCase: any;
    capitalCase: any;
    convertCase: any;
    humanCase: any;
    kebabCase: any;
    lowerCaseArray: any;
    pascalCase: any;
    slugify: any;
    snakeCase: any;
    hasSubExtension: any;
    isIndexableFileId: any;
    canAccessSync: any;
    canAccess: any;
    canExecuteSync: any;
    canExecute: any;
    canReadSync: any;
    canRead: any;
    canSeeSync: any;
    canSee: any;
    canWriteSync: any;
    canWrite: any;
    findAllMd: any;
    findFileNameCaseInsensitive: any;
    findFilesRecursively: any;
    findSensibleFiles: any;
    getExtension: any;
    getFileName: any;
    getFolder: any;
    getLastFolder: any;
    getPathCombinations: any;
    getSubExtension: any;
    importFromFiles: any;
    isArrayGuard: any;
    parseMd: any;
    removeAllExcept: any;
    removeTrailingSlash: any;
    withoutExtension: any;
    writeJsonToFile: any;
    writeStringToFile: any;
    writeToFiles: any;
    findFolderWhereMatch: any;
    findOperationBasePathWithClassification: any;
    findOperationBasePath: any;
    getAllPackageJsonDependencies: any;
    getOperationClassification: any;
    getOperationPathParse: any;
    getOperationPath: any;
    getOperationRelativePath: any;
    getPathParse: any;
    getPathsWithOperations: any;
    getProjectRoot: any;
    getRelativePath: any;
    getRootPath: any;
    getSrcRelativeFileId: any;
    hasDependency: any;
    isSensibleProject: any;
    isWorkspaceRoot: any;
    makeRelative: any;
    getTsConfig: any;
    apply: any;
    createEnum: any;
    findLastIndex: any;
    getObjectFromParamsString: any;
    getObjectKeysArray: any;
    getSubsetFromObject: any;
    groupByKey: any;
    insertAt: any;
    isAllTrue: any;
    makeArray: any;
    mapAsync: any;
    mapKeys: any;
    mapMany: any;
    mapValuesSync: any;
    mergeObjectParameters: any;
    mergeObjectsArray: any;
    mergeObjects: any;
    notEmpty: any;
    objectMapAsync: any;
    objectMapSync: any;
    objectValuesMap: any;
    onlyUnique2: any;
    onlyUnique: any;
    removeIndexFromArray: any;
    sumAllKeys: any;
    sumObjectParameters: any;
    sum: any;
    takeFirst: any;
    getSimpleJsonString: any;
    flattenMarkdownChunks: any;
    getKvmdItemsRecursively: any;
    getParagraphsRecursively: any;
    kvmdDataMap: any;
    kvmdDataToString: any;
    kvmdParseToMarkdownString: any;
    markdownStringToKvmdParse: any;
    parseKvmdLine: any;
    getCallerFileName: any;
    log: any;
    parseTitle: any;
    makeFileType: any;
    isResultOfInterface: any;
    makeTest: any;
    markdownParseToMarkdownString: any;
    mdContentParseRecursively: any;
    mdToJsonParse: any;
    parseFrontmatterMarkdownString: any;
    parseMdToChunks: any;
    removeHeaderPrefix: any;
    frontmatterParseToString: any;
    getFrontmatterValueString: any;
    quotedOrNot: any;
    stringifyNewlines: any;
    generateId: any;
    generatePassword: any;
    generateRandomString: any;
    generateTime: any;
    isEmail: any;
    markdownModelTypeToMarkdownString: any;
    ALink: any;
    oneByOne: any;
    getDependenciesSummary: any;
    getOperationMetaData: any;
    recalculateOperationIndexJson: any;
    writeKeyToOperationIndexJson: any;
    parsePrimitive: any;
    byteCount: any;
    calculatePathMetaData: any;
    categorizeFiles: any;
    getFolderSummary: any;
    getPathMainComment: any;
    sumSizeSummary: any;
    pluralize: any;
    singularize: any;
    runChildProcess: any;
    getProperties: any;
    getRefLink: any;
    getReferencableModels: any;
    getReferenceParameterInfo: any;
    getSchemaItems: any;
    getSchema: any;
    simplifiedSchemaToTypeDefinitionString: any;
    simplifySchema: any;
};
export declare type SdkType = typeof sdk;
//# sourceMappingURL=sdk-js.d.ts.map