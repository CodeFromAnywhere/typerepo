{
  "createdAt": 1668751766869,
  "updatedAt": 1668751766869,
  "deletedAt": 0,
  "createdFirstAt": 1668751766869,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/components/Layout.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  publicBundleConfig?: MarkdownReaderPageProps[\"publicBundleConfig\"];\n}) => {\n  const [isMobileMenuEnabled, setIsMobileMenuEnabled] = useStore(\n    \"menu.isMobileMenuEnabled\"\n  );\n  const { publicBundleConfig } = props;\n  const title =\n    publicLocalEnvironmentVariables.markdownReaderTitle ||\n    publicEnvironmentVariables.markdownReaderTitle ||\n    publicBundleConfig?.name;\n\n  return (\n    <Div\n      style={{\n        backgroundColor: props.publicBundleConfig?.primaryColor,\n        justifyContent: \"space-between\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n      }}\n    >\n      <ALink\n        href={\n          typeof window !== \"undefined\"\n            ? location.protocol + \"//\" + location.host\n            : \"#\"\n        }\n        style={{ fontSize: 32 }}\n      >\n        {props.publicBundleConfig?.emoji}\n      </ALink>\n\n      <Div>\n        <P className=\"font-bold text-white \">{title}</P>\n        <P className=\"text-xs text-white italic\">\n          {props.publicBundleConfig?.description}\n        </P>\n      </Div>\n\n      <Div className=\"flex flex-row\">\n        <Div className=\"lg:hidden\">\n          <ClickableIcon\n            emoji=\"🔍\"\n            onClick={() => setIsMobileMenuEnabled(!isMobileMenuEnabled)}\n          />\n        </Div>\n        {props.publicBundleConfig?.isGitRepoPublic &&\n        props.publicBundleConfig.gitRepoUrl ? (\n          <ALink target=\"_blank\" href={props.publicBundleConfig.gitRepoUrl}>\n            GitHub\n          </ALink>\n        ) : null}\n      </Div>\n    </Div>\n  );\n}",
  "name": "Header",
  "slug": "header",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "publicBundleConfig": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "paymentPlanId": {
                    "type": "string"
                  },
                  "categoryStackCalculated": {
                    "$ref": "#/definitions/CategoryStack",
                    "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
                  },
                  "id": {
                    "$ref": "#/definitions/Id"
                  },
                  "operationName": {
                    "type": [
                      "null",
                      "string"
                    ],
                    "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "projectRelativePath": {
                    "type": "string",
                    "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "operationRelativePath": {
                    "type": "string",
                    "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "createdAt": {
                    "$ref": "#/definitions/CreatedAt"
                  },
                  "updatedAt": {
                    "$ref": "#/definitions/UpdatedAt"
                  },
                  "deletedAt": {
                    "$ref": "#/definitions/DeletedAt"
                  },
                  "createdFirstAt": {
                    "$ref": "#/definitions/CreatedFirstAt"
                  },
                  "slug": {
                    "$ref": "#/definitions/Slug",
                    "description": "kebab-case of the name, should be unique"
                  },
                  "name": {
                    "type": "string"
                  },
                  "language": {
                    "$ref": "#/definitions/Language",
                    "default": "en"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description about this bundle"
                  },
                  "emoji": {
                    "type": "string"
                  },
                  "primaryColor": {
                    "type": "string"
                  },
                  "gitRepoUrl": {
                    "type": "string",
                    "description": "NB: later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation"
                  },
                  "isGitRepoPublic": {
                    "type": "boolean",
                    "description": "if true, your gitrepo is marked as pubilc and thus users will be linked to it sometimes"
                  },
                  "bundleMarkdownReaderConfig": {
                    "$ref": "#/definitions/BundleMarkdownReaderConfig",
                    "description": "configurate your markdown reader"
                  }
                },
                "required": [
                  "id",
                  "operationName",
                  "projectRelativePath",
                  "createdAt",
                  "updatedAt",
                  "deletedAt",
                  "createdFirstAt",
                  "slug",
                  "name",
                  "language"
                ],
                "additionalProperties": false
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "publicBundleConfig",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 6,
  "size": {
    "characters": 1566,
    "lines": 57,
    "bytes": 1568,
    "bytesPerCharacter": 1.0012771392081736,
    "charactersPerLine": 27,
    "linesPerFile": 57,
    "numberOfFiles": 1
  },
  "id": "joydohnunpgrzfykzfwlusfn"
}