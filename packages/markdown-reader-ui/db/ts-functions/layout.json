{
  "createdAt": 1668751766869,
  "updatedAt": 1668751766869,
  "deletedAt": 0,
  "createdFirstAt": 1668751766869,
  "isApiExposed": true,
  "isExported": true,
  "groupAuthorization": {},
  "operationRelativeTypescriptFilePath": "src/components/Layout.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  publicBundleConfig: MarkdownReaderPageProps[\"publicBundleConfig\"];\n  pages: MarkdownReaderPage[];\n  children: any;\n  augmentedWordObject?: MappedObject<AugmentedWord>;\n}) => {\n  const { pages, children, augmentedWordObject, publicBundleConfig } = props;\n\n  const queryPaths = pages.filter((x) => x.isMenuItem).map((x) => x.queryPath);\n\n  return (\n    <LayoutGrid\n      menu={{\n        augmentedWords: Object.values(augmentedWordObject || {}),\n        queryPaths,\n        isLoading: false,\n      }}\n      header={<Header publicBundleConfig={publicBundleConfig} />}\n    >\n      {children}\n    </LayoutGrid>\n  );\n}",
  "name": "Layout",
  "slug": "layout",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "publicBundleConfig": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "paymentPlanId": {
                    "type": "string"
                  },
                  "categoryStackCalculated": {
                    "$ref": "#/definitions/CategoryStack",
                    "description": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!"
                  },
                  "id": {
                    "$ref": "#/definitions/Id"
                  },
                  "operationName": {
                    "type": [
                      "null",
                      "string"
                    ],
                    "description": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "projectRelativePath": {
                    "type": "string",
                    "description": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "operationRelativePath": {
                    "type": "string",
                    "description": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you"
                  },
                  "createdAt": {
                    "$ref": "#/definitions/CreatedAt"
                  },
                  "updatedAt": {
                    "$ref": "#/definitions/UpdatedAt"
                  },
                  "deletedAt": {
                    "$ref": "#/definitions/DeletedAt"
                  },
                  "createdFirstAt": {
                    "$ref": "#/definitions/CreatedFirstAt"
                  },
                  "slug": {
                    "$ref": "#/definitions/Slug",
                    "description": "kebab-case of the name, should be unique"
                  },
                  "name": {
                    "type": "string"
                  },
                  "language": {
                    "$ref": "#/definitions/Language",
                    "default": "en"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description about this bundle"
                  },
                  "emoji": {
                    "type": "string"
                  },
                  "primaryColor": {
                    "type": "string"
                  },
                  "gitRepoUrl": {
                    "type": "string",
                    "description": "NB: later we may also want to automate the server and frontend deployment setup. for that we need credentials and automation"
                  },
                  "isGitRepoPublic": {
                    "type": "boolean",
                    "description": "if true, your gitrepo is marked as pubilc and thus users will be linked to it sometimes"
                  },
                  "bundleMarkdownReaderConfig": {
                    "$ref": "#/definitions/BundleMarkdownReaderConfig",
                    "description": "configurate your markdown reader"
                  }
                },
                "required": [
                  "id",
                  "operationName",
                  "projectRelativePath",
                  "createdAt",
                  "updatedAt",
                  "deletedAt",
                  "createdFirstAt",
                  "slug",
                  "name",
                  "language"
                ],
                "additionalProperties": false
              },
              {
                "type": "null"
              }
            ]
          },
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MarkdownReaderPage"
            }
          },
          "children": {},
          "augmentedWordObject": {
            "$ref": "#/definitions/MappedObject%3CAugmentedWord%3E"
          }
        },
        "required": [
          "pages",
          "children"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "publicBundleConfig",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "pages",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "for markdown-reader-ui, the pages can be markdown files, but they can also be connected to models",
                    "properties": [
                      {
                        "name": "queryPath",
                        "required": true,
                        "schema": {
                          "fullComment": "path to be used as the url. no preceding slash",
                          "type": "string"
                        }
                      },
                      {
                        "name": "filePath",
                        "required": false,
                        "schema": {
                          "fullComment": "if given, the md-file will be provided to the frontend\n\nproject relative path",
                          "type": "string"
                        }
                      },
                      {
                        "name": "isMenuItem",
                        "required": false,
                        "schema": {
                          "fullComment": "if true, this item will be shown in the menu",
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "MarkdownReaderPage"
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "children",
            "required": true,
            "schema": {
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 624,
    "lines": 23,
    "bytes": 624,
    "bytesPerCharacter": 1,
    "charactersPerLine": 27,
    "linesPerFile": 23,
    "numberOfFiles": 1
  },
  "id": "joptivqarqsdmyiiwvisgave"
}