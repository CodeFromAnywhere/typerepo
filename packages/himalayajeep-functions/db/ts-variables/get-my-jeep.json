{
  "createdAt": 1668005996135,
  "updatedAt": 1668005996135,
  "deletedAt": 0,
  "createdFirstAt": 1668005996135,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "getMyJeep",
  "slug": "get-my-jeep",
  "operationRelativeTypescriptFilePath": "src/getMyJeep.ts",
  "type": {
    "rawType": "(loginToken: string) => Promise<{ isSuccessful: boolean; message?: string | undefined; myJeep?: import(\"/Users/king/King/operations/niches/code-from-anywhere/bootcamp-operations/himalayajeep/himalayajeep-types/build/types\").MyJeepType | undefined; }>",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "async (\n  loginToken: string\n): Promise<{\n  isSuccessful: boolean;\n  message?: string;\n  myJeep?: MyJeepType;\n}> => {\n  const jeeps = await db.get(\"JeepType\");\n  const jeep = jeeps.find((x) => x.loginToken === loginToken);\n\n  if (!jeep) {\n    return {\n      isSuccessful: false,\n      message: \"Can't find that jeep\",\n    };\n  }\n\n  const {\n    amountLuggageUnitsLeft,\n    amountSeatsLeft,\n    createdAt,\n    id,\n    isVerified,\n    name,\n    note,\n    updatedAt,\n    citizenshipNumber,\n    email,\n    licenseNumber,\n    locationsCalculated,\n    numberPlate,\n    phone,\n  } = jeep;\n\n  const myJeep: MyJeepType = {\n    amountLuggageUnitsLeft,\n    amountSeatsLeft,\n    createdAt,\n    id,\n    isVerified,\n    name,\n    note,\n    updatedAt,\n    citizenshipNumber,\n    email,\n    licenseNumber,\n    locationsCalculated,\n    numberPlate,\n    phone,\n  };\n\n  return {\n    isSuccessful: true,\n    myJeep,\n  };\n}",
  "description": "",
  "id": "lzuwmqivuxykcdhanunbeoxq"
}