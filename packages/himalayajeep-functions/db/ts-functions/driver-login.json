{
  "createdAt": 1668005991225,
  "updatedAt": 1668005991225,
  "deletedAt": 0,
  "createdFirstAt": 1668005991225,
  "publicAuthorization": [
    "read",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/driverLogin.ts",
  "commentsInside": [],
  "rawText": " async (\n  emailOrPhone: string,\n  password: string\n): Promise<{\n  isSuccessful: boolean;\n  message: string;\n  loginToken?: string;\n}> => {\n  const jeeps = await db.get(\"JeepType\");\n\n  console.log({ password, emailOrPhone });\n\n  const augmentedJeeps = await Promise.all(\n    jeeps.map(async (jeep) => {\n      const passwordMatches = jeep.encrypedPassword\n        ? await comparePassword(password, jeep.encrypedPassword)\n        : false;\n\n      return { ...jeep, passwordMatches };\n    })\n  );\n\n  const ourJeep = augmentedJeeps.find((jeep) => {\n    const isHandleMatch =\n      jeep.phone === emailOrPhone || jeep.email === emailOrPhone;\n\n    if (isHandleMatch && jeep.passwordMatches) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (!ourJeep) {\n    return {\n      isSuccessful: false,\n      message: \"Couldn't find anyone with those credentials\",\n    };\n  }\n\n  return {\n    isSuccessful: true,\n    message: \"You're logged in\",\n    loginToken: ourJeep.loginToken,\n  };\n}",
  "name": "driverLogin",
  "slug": "driver-login",
  "parameters": [
    {
      "name": "emailOrPhone",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "password",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    }
  ],
  "description": "login form for the driver to login",
  "returnType": {
    "rawType": "Promise<{ isSuccessful: boolean; message: string; loginToken?: string | undefined; }>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1013,
    "lines": 46,
    "bytes": 1013,
    "bytesPerCharacter": 1,
    "charactersPerLine": 22,
    "linesPerFile": 46,
    "numberOfFiles": 1
  },
  "id": "jxcndcmitjuadiyoextbagdz"
}