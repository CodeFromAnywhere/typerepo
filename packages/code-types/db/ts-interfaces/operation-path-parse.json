{
  "createdAt": 1663018204877,
  "updatedAt": 1663018204877,
  "deletedAt": 0,
  "createdFirstAt": 1663018204877,
  "id": "operation-path-parse",
  "name": "OperationPathParse",
  "slug": "operation-path-parse",
  "operationRelativeTypescriptFilePath": "src/PathMetaData.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\nexport type OperationPathParse = PathParse & {\n  /**\n   * relative file path from the project-root to the operation (DOES include operation folder)\n   *\n   * e.g. /tools/cognition/typescript/index-typescript\n   */\n  relativeOperationBasePathFromProjectRoot: string;\n  /**\n   * relative file path from the operation src\n   *\n   * e.g. general.ts\n   */\n  operationRelativeTypescriptFilePath: string;\n  /**\n   * file id (same as operationRelativeTypescriptFilePath but without extension)\n   *\n   * e.g. \"general\"\n   *\n   * TODO: figure out if this can be omitted\n   */\n  srcFileId: string;\n  /**\n   * operation package.json name\n   */\n  operationName?: string;\n  /**\n   * operation folder name (by convention, must be identical to operationName, but it could have some mistakes)\n   */\n  operationFolderName: string;\n};",
  "extensions": [],
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "relativeOperationBasePathFromProjectRoot": {
          "type": "string",
          "description": "relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript"
        },
        "operationRelativeTypescriptFilePath": {
          "type": "string",
          "description": "relative file path from the operation src\n\ne.g. general.ts"
        },
        "srcFileId": {
          "type": "string",
          "description": "file id (same as operationRelativeTypescriptFilePath but without extension)\n\ne.g. \"general\"\n\nTODO: figure out if this can be omitted"
        },
        "operationName": {
          "type": "string",
          "description": "operation package.json name"
        },
        "operationFolderName": {
          "type": "string",
          "description": "operation folder name (by convention, must be identical to operationName, but it could have some mistakes)"
        },
        "relativePathFromProjectRoot": {
          "type": "string",
          "description": "relative file or folder path from the project root"
        }
      },
      "required": [
        "operationFolderName",
        "operationRelativeTypescriptFilePath",
        "relativeOperationBasePathFromProjectRoot",
        "relativePathFromProjectRoot",
        "srcFileId"
      ]
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "relativeOperationBasePathFromProjectRoot",
          "required": true,
          "schema": {
            "description": "relative file path from the project-root to the operation (DOES include operation folder)\n\ne.g. /tools/cognition/typescript/index-typescript",
            "type": "string"
          }
        },
        {
          "name": "operationRelativeTypescriptFilePath",
          "required": true,
          "schema": {
            "description": "relative file path from the operation src\n\ne.g. general.ts",
            "type": "string"
          }
        },
        {
          "name": "srcFileId",
          "required": true,
          "schema": {
            "description": "file id (same as operationRelativeTypescriptFilePath but without extension)\n\ne.g. \"general\"\n\nTODO: figure out if this can be omitted",
            "type": "string"
          }
        },
        {
          "name": "operationName",
          "required": false,
          "schema": {
            "description": "operation package.json name",
            "type": "string"
          }
        },
        {
          "name": "operationFolderName",
          "required": true,
          "schema": {
            "description": "operation folder name (by convention, must be identical to operationName, but it could have some mistakes)",
            "type": "string"
          }
        },
        {
          "name": "relativePathFromProjectRoot",
          "required": true,
          "schema": {
            "description": "relative file or folder path from the project root",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "OperationPathParse",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}