{
  "createdAt": 1663305272401,
  "updatedAt": 1663305272401,
  "deletedAt": 0,
  "createdFirstAt": 1663305272401,
  "id": "simplified-schema-property",
  "name": "SimplifiedSchemaProperty",
  "slug": "simplified-schema-property",
  "operationRelativeTypescriptFilePath": "src/SimplifiedSchema.ts",
  "hasGeneric": false,
  "isExported": true,
  "rawText": "\n\nexport type SimplifiedSchemaProperty = {\n  name: string;\n  schema: SimplifiedSchema;\n  /** NB: can't we put this in the SimplifiedSchema itself? */\n  required: boolean;\n};",
  "extensions": [],
  "isOperationIndex": false,
  "description": "",
  "isDbModel": false,
  "commentsInside": [],
  "type": {
    "typeDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/SimplifiedSchema"
        },
        "required": {
          "type": "boolean",
          "description": "NB: can't we put this in the SimplifiedSchema itself?"
        }
      },
      "required": [
        "name",
        "schema",
        "required"
      ],
      "additionalProperties": false
    },
    "simplifiedSchema": {
      "properties": [
        {
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "schema",
          "required": true,
          "schema": {
            "description": "JSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
            "properties": [
              {
                "name": "type",
                "required": true,
                "schema": {
                  "enum": [
                    "string",
                    "number",
                    "boolean",
                    "object",
                    "array",
                    "null"
                  ],
                  "type": "string"
                }
              },
              {
                "name": "description",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "circularRefName",
                "required": false,
                "schema": {
                  "description": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                  "type": "string"
                }
              },
              {
                "name": "enum",
                "required": false,
                "schema": {
                  "description": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                  "items": [
                    {
                      "schema": {
                        "description": "Primitive type",
                        "properties": [],
                        "type": "object"
                      },
                      "name": "JSONSchema7Type"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "properties",
                "required": false,
                "schema": {
                  "description": "in case of object, this will always appear",
                  "items": [
                    {
                      "schema": {
                        "circularRefName": "SimplifiedSchemaProperty",
                        "properties": [],
                        "type": "object"
                      },
                      "name": "SimplifiedSchemaProperty"
                    }
                  ],
                  "type": "array"
                }
              },
              {
                "name": "items",
                "required": false,
                "schema": {
                  "description": "in case of arrays, this will always appear",
                  "items": [
                    {
                      "schema": {
                        "properties": [
                          {
                            "name": "name",
                            "required": true,
                            "schema": {
                              "description": "name in case of it being a reference, otherwise null",
                              "type": "string"
                            }
                          },
                          {
                            "name": "schema",
                            "required": true,
                            "schema": {
                              "circularRefName": "SimplifiedSchema",
                              "properties": [],
                              "type": "object"
                            }
                          }
                        ],
                        "type": "object"
                      },
                      "name": "SimplifiedSchemaItem"
                    }
                  ],
                  "type": "array"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "required",
          "required": true,
          "schema": {
            "description": "NB: can't we put this in the SimplifiedSchema itself?",
            "type": "boolean"
          }
        }
      ],
      "type": "object"
    },
    "typeCoverage": 0,
    "rawType": "SimplifiedSchemaProperty",
    "isArray": false,
    "isEnum": false,
    "isEnumLiteral": false,
    "isObject": false,
    "isPrimitive": false
  }
}