{
  "createdAt": 1662906267297,
  "updatedAt": 1662906267297,
  "deletedAt": 0,
  "createdFirstAt": 1662906267297,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/getTypeInfo.ts",
  "commentsInside": [],
  "rawText": " (type: Type, schema?: Schema): TypeInfo => {\n  const rawType = type.getApparentType().getText();\n  const isArray = type.isArray();\n  const isEnum = type.isEnum();\n  const isEnumLiteral = type.isEnumLiteral();\n  const isPrimitive = type.isString() || type.isNumber() || type.isBoolean();\n  const isObject = type.isObject();\n\n  let typeDefinition: Schema | undefined = undefined;\n  try {\n    typeDefinition = schema || typeToSchema(type);\n  } catch (e) {\n    log(`Type to schema failed with error: ${e}`, { type: \"debug\" });\n  }\n\n  const typeInfo: TypeInfo = {\n    rawType,\n    typeDefinition,\n    // TODO:\n    typeCoverage: 0,\n    // this is easy to infer\n    isArray,\n    isEnum,\n    isObject,\n    isPrimitive,\n    isEnumLiteral,\n    simplifiedSchema: typeDefinition\n      ? simplifySchema(\"type\", typeDefinition, [], [])\n      : undefined,\n  };\n\n  return typeInfo;\n}",
  "name": "getTypeInfo",
  "slug": "get-type-info",
  "parameters": [],
  "description": "takes a ts morph type and returns all info about it\n\nif available, a schema should be provided about the type because it's hard to infer it (probably buggy)",
  "returnType": {
    "rawType": "import(\"/Users/king/King/operations/tools/types/code-types/build/TypeInfo\").TypeInfo",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 3,
  "size": {
    "characters": 1024,
    "lines": 35,
    "bytes": 1024,
    "bytesPerCharacter": 1,
    "charactersPerLine": 29,
    "linesPerFile": 35,
    "numberOfFiles": 1
  },
  "id": "teBWoEmNlCvdEFts"
}