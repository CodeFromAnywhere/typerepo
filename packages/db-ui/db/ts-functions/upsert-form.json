{
  "createdAt": 1667634508485,
  "updatedAt": 1667634508485,
  "deletedAt": 0,
  "createdFirstAt": 1667634508485,
  "publicAuthorization": [
    "read-docs",
    "search"
  ],
  "isApiExposed": false,
  "isPostApi": false,
  "isGetApi": false,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/components/UpsertForm.tsx",
  "commentsInside": [],
  "rawText": " (props: {\n  /**\n   * the schema for the model we want to update/create\n   */\n  simplifiedSchema: SimplifiedSchema;\n  /**\n   * an instance, if it's an update form\n   */\n  instance: any;\n  /**\n   * NB: this thing will make hooks appear, so it must be constant!\n   */\n  referencableModelNames?: string[];\n  /**\n   * Where is the file stored that this form is for? needed for rendering images and uploading images in writer-input\n   */\n  projectRelativeStorageFilePath: string;\n}) => {\n  const {\n    instance,\n    simplifiedSchema,\n    referencableModelNames,\n    projectRelativeStorageFilePath,\n  } = props;\n  const [modelQuery] = useUrl(\"model\");\n  const router = useRouter();\n  const alert = useAlert();\n  const [debug, setDebug] = useState(false);\n  const [id] = useState<string>(generateId());\n  const [loading, setLoading] = useState(false);\n  const [body, setBody] = useState<any>(instance);\n  const [result, setResult] = useState<any>();\n  const model = useGetDbModelQuery(modelQuery as DbModelEnum);\n  // NB: all items that this model has can be referenced to in other forms also need to refresh\n\n  const getReferencableModelDataQuery = queries.useGetReferencableModelData(\n    modelQuery as DbModelEnum\n  );\n\n  const referencableModelData = useReferencableModelData(simplifiedSchema);\n\n  const parameters: RenderableFunctionParameter[] = [\n    {\n      name: \"\",\n      required: true,\n      simplifiedSchema,\n      renderButtons: () => <Span />,\n      isDbModel: true,\n    },\n  ];\n  const values = [body];\n\n  const onSubmitForm = () => {\n    if (!modelQuery) return;\n\n    setLoading(true);\n\n    upsertDbModel(modelQuery as any, body)\n      .then(async (result) => {\n        if (!result.result?.isSuccesful) {\n          // If the upsert fails for some reason, this should be made clear\n          alert?.(\"Error\", result.result?.message || result.message);\n          setLoading(false);\n        } else {\n          // NB: we are not waiting for this, we're going back immediately, assuming that there will be loading indicators\n          getReferencableModelDataQuery.refetch();\n          model.refetch();\n\n          setLoading(false);\n          router.back();\n        }\n      })\n      .catch((e) => {\n        setLoading(false);\n        setResult(e);\n      });\n  };\n\n  const explainButton = {\n    onClick: () => {\n      setDebug(!debug);\n    },\n    title: \"Explain\",\n    emoji: \"üßê\",\n  };\n\n  const buttons: LabeledButtonType[] = [explainButton];\n\n  // console.log({ referencableModelData });\n  return (\n    <Div>\n      <IndexInstanceContainer\n        buttons={buttons}\n        title={humanCase(modelQuery || \"\")}\n      >\n        {simplifiedSchema ? (\n          <Div>\n            <FormContainer onSubmit={onSubmitForm} isLoading={loading}>\n              <SimplifiedSchemaForm\n                itemNameOrId={body?.name || body?.id}\n                parameterNameStack={undefined}\n                projectRelativeStorageFilePath={projectRelativeStorageFilePath}\n                id={id}\n                parameters={parameters}\n                values={values}\n                onChange={(values) => setBody(values[0])}\n                referencableModelData={referencableModelData}\n                isDebug={debug}\n              />\n            </FormContainer>\n            <Div className=\"mt-6\">\n              <ClickableIcon emoji=\"‚ùå Go back\" onClick={() => router.back()} />\n            </Div>\n            {result ? <P>{JSON.stringify(result)}</P> : null}\n            {debug ? (\n              <SimplifiedSchemaFormDebug\n                parameters={parameters}\n                values={values}\n              />\n            ) : null}\n          </Div>\n        ) : null}\n      </IndexInstanceContainer>\n    </Div>\n  );\n}",
  "name": "UpsertForm",
  "slug": "upsert-form",
  "parameters": [
    {
      "name": "props",
      "schema": {
        "type": "object",
        "properties": {
          "simplifiedSchema": {
            "$ref": "#/definitions/SimplifiedSchema",
            "description": "the schema for the model we want to update/create"
          },
          "instance": {
            "description": "an instance, if it's an update form"
          },
          "referencableModelNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "NB: this thing will make hooks appear, so it must be constant!"
          },
          "projectRelativeStorageFilePath": {
            "type": "string",
            "description": "Where is the file stored that this form is for? needed for rendering images and uploading images in writer-input"
          }
        },
        "required": [
          "simplifiedSchema",
          "instance",
          "projectRelativeStorageFilePath"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "simplifiedSchema",
            "required": true,
            "schema": {
              "fullComment": "the schema for the model we want to update/create\n\nJSONSchema7 derivative that has the following capabilities and and characteristics...\n\n- does not include objects in objects that are also referenced to using xxxSlug or xxxId\n- recursively finds the references and expands them, unless the references are circular\n- easier to read\n- has all the information we need\n- is able to generate an object with values in the exact format the function needs it\n- is able to easily generate a form",
              "properties": [
                {
                  "name": "todo",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "discussion",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "idea",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "later",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "nb",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "section",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "description",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "circularRefName",
                  "required": false,
                  "schema": {
                    "fullComment": "sometimes we still need to reference to another schema because this thing is recursive. In that case the ref name will be here",
                    "type": "string"
                  }
                },
                {
                  "name": "enum",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of enums this could appear... mostly strings, but e.g. numbers can also be an enum I think",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "properties",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of object, this will always appear",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "items",
                  "required": false,
                  "schema": {
                    "fullComment": "in case of arrays, this will always appear",
                    "items": [],
                    "type": "array"
                  }
                },
                {
                  "name": "fullComment",
                  "required": false,
                  "schema": {
                    "fullComment": "Full doccomment, parsed without all stars syntax.\n\nNB: besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                    "nb": "besides this, every `CommentType` can optionally also be found as a property on the `SimplifiedSchema`",
                    "type": "string"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "instance",
            "required": true,
            "schema": {
              "fullComment": "an instance, if it's an update form",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "referencableModelNames",
            "required": false,
            "schema": {
              "fullComment": "NB: this thing will make hooks appear, so it must be constant!",
              "nb": "this thing will make hooks appear, so it must be constant!",
              "items": [
                {
                  "schema": {
                    "type": "string"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          },
          {
            "name": "projectRelativeStorageFilePath",
            "required": true,
            "schema": {
              "fullComment": "Where is the file stored that this form is for? needed for rendering images and uploading images in writer-input",
              "type": "string"
            }
          }
        ],
        "type": "object"
      },
      "required": true
    }
  ],
  "description": "TODO: Provide all the fetched data with `hasMore` and `fetchAll` to the `SimplifiedJsonForm`",
  "returnType": {
    "rawType": "JSX.Element",
    "typeDefinition": {
      "optional": false,
      "$ref": "#/definitions/JSX.Element"
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 8,
  "size": {
    "characters": 3799,
    "lines": 126,
    "bytes": 3803,
    "bytesPerCharacter": 1.0010529086601738,
    "charactersPerLine": 30,
    "linesPerFile": 126,
    "numberOfFiles": 1
  },
  "id": "chdpzutddsiaqmkhckzfguou"
}