{
  "createdAt": 1662907474643,
  "updatedAt": 1662907474643,
  "deletedAt": 0,
  "createdFirstAt": 1662907474643,
  "apiAuthenticationStrategy": "admin",
  "isApiExposed": true,
  "isExported": true,
  "operationRelativeTypescriptFilePath": "src/nodemon.ts",
  "commentsInside": [],
  "rawText": " async (\n  operationName: string,\n  /**\n   * name of the function that you want to run the cli from\n   *\n   * by convention, we are going to execute the `build/cli/[fnName].cli.js` file\n   */\n  cliFunctionName: string,\n  /**\n   * vars that need to be passed to the cli\n   */\n  vars?: string[],\n  /**\n   * manual project root for the operation to run\n   */\n  manualProjectRoot?: string\n): Promise<void> => {\n  const operationPath = await getOperationPath(operationName, {\n    manualProjectRoot,\n  });\n\n  if (!operationPath) {\n    console.log(`${operationName} not found`);\n    return;\n  }\n\n  const process = spawn(\n    `node build/cli/${cliFunctionName}.cli.js ${\n      vars ? ` ${vars.join(\" \")}` : \"\"\n    }`,\n    {\n      cwd: operationPath,\n      shell: true,\n      stdio: \"inherit\",\n    }\n  );\n  //\n  process\n    .on(\"exit\", (code) => {\n      log(\n        `Process ${cliFunctionName} has ended with code ${code}, restarting...`,\n        { type: \"important\" }\n      );\n\n      nodemon(operationName, cliFunctionName, vars, manualProjectRoot);\n    })\n    .on(\"data\", (message) => {\n      log(message);\n    })\n    .on(\"error\", (err) => {\n      log(`${err.name} Error: ${err.message}`, { type: \"error\" });\n    });\n}",
  "name": "nodemon",
  "slug": "nodemon",
  "parameters": [
    {
      "name": "operationName",
      "schema": {
        "type": "string"
      },
      "simplifiedSchema": {
        "type": "string"
      },
      "required": true
    },
    {
      "name": "cliFunctionName",
      "schema": {
        "type": "string",
        "description": "name of the function that you want to run the cli from\n\nby convention, we are going to execute the `build/cli/[fnName].cli.js` file"
      },
      "simplifiedSchema": {
        "description": "name of the function that you want to run the cli from\n\nby convention, we are going to execute the `build/cli/[fnName].cli.js` file",
        "type": "string"
      },
      "required": true
    },
    {
      "name": "vars",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "vars that need to be passed to the cli"
      },
      "simplifiedSchema": {
        "description": "vars that need to be passed to the cli",
        "items": [
          {
            "schema": {
              "type": "string"
            },
            "name": null
          }
        ],
        "type": "array"
      },
      "required": false
    },
    {
      "name": "manualProjectRoot",
      "schema": {
        "type": "string",
        "description": "manual project root for the operation to run"
      },
      "simplifiedSchema": {
        "description": "manual project root for the operation to run",
        "type": "string"
      },
      "required": false
    }
  ],
  "description": "",
  "returnType": {
    "rawType": "Promise<void>",
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": false,
    "isPrimitive": false,
    "isEnumLiteral": false
  },
  "maxIndentationDepth": 4,
  "size": {
    "characters": 1212,
    "lines": 53,
    "bytes": 1212,
    "bytesPerCharacter": 1,
    "charactersPerLine": 23,
    "linesPerFile": 53,
    "numberOfFiles": 1
  },
  "id": "oenLNHxWzBEeJrRV"
}